(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION = "176";
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const ConstantColorFactor = 211;
const OneMinusConstantColorFactor = 212;
const ConstantAlphaFactor = 213;
const OneMinusConstantAlphaFactor = 214;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;
const AgXToneMapping = 6;
const NeutralToneMapping = 7;
const AttachedBindMode = "attached";
const DetachedBindMode = "detached";
const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1e3;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const UnsignedInt5999Type = 35902;
const AlphaFormat = 1021;
const RGBFormat = 1022;
const RGBAFormat = 1023;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;
const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;
const NoColorSpace = "";
const SRGBColorSpace = "srgb";
const LinearSRGBColorSpace = "srgb-linear";
const LinearTransfer = "linear";
const SRGBTransfer = "srgb";
const KeepStencilOp = 7680;
const AlwaysStencilFunc = 519;
const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;
const StaticDrawUsage = 35044;
const GLSL3 = "300 es";
const WebGLCoordinateSystem = 2e3;
const WebGPUCoordinateSystem = 2001;
class EventDispatcher {
  /**
   * Adds the given event listener to the given event type.
   *
   * @param {string} type - The type of event to listen to.
   * @param {Function} listener - The function that gets called when the event is fired.
   */
  addEventListener(type, listener) {
    if (this._listeners === void 0) this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  }
  /**
   * Returns `true` if the given event listener has been added to the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to check.
   * @return {boolean} Whether the given event listener has been added to the given event type.
   */
  hasEventListener(type, listener) {
    const listeners = this._listeners;
    if (listeners === void 0) return false;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  /**
   * Removes the given event listener from the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to remove.
   */
  removeEventListener(type, listener) {
    const listeners = this._listeners;
    if (listeners === void 0) return;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  }
  /**
   * Dispatches an event object.
   *
   * @param {Object} event - The event that gets fired.
   */
  dispatchEvent(event) {
    const listeners = this._listeners;
    if (listeners === void 0) return;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array = listenerArray.slice(0);
      for (let i2 = 0, l = array.length; i2 < l; i2++) {
        array[i2].call(this, event);
      }
      event.target = null;
    }
  }
}
const _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let _seed = 1234567;
const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toLowerCase();
}
function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function euclideanModulo(n, m) {
  return (n % m + m) % m;
}
function mapLinear(x, a1, a2, b1, b2) {
  return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
function inverseLerp(x, y, value) {
  if (x !== y) {
    return (value - x) / (y - x);
  } else {
    return 0;
  }
}
function lerp(x, y, t2) {
  return (1 - t2) * x + t2 * y;
}
function damp(x, y, lambda, dt) {
  return lerp(x, y, 1 - Math.exp(-lambda * dt));
}
function pingpong(x, length = 1) {
  return length - Math.abs(euclideanModulo(x, length * 2) - length);
}
function smoothstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * (3 - 2 * x);
}
function smootherstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * x * (x * (x * 6 - 15) + 10);
}
function randInt(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
}
function randFloat(low, high) {
  return low + Math.random() * (high - low);
}
function randFloatSpread(range) {
  return range * (0.5 - Math.random());
}
function seededRandom(s) {
  if (s !== void 0) _seed = s;
  let t2 = _seed += 1831565813;
  t2 = Math.imul(t2 ^ t2 >>> 15, t2 | 1);
  t2 ^= t2 + Math.imul(t2 ^ t2 >>> 7, t2 | 61);
  return ((t2 ^ t2 >>> 14) >>> 0) / 4294967296;
}
function degToRad(degrees) {
  return degrees * DEG2RAD;
}
function radToDeg(radians) {
  return radians * RAD2DEG;
}
function isPowerOfTwo(value) {
  return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q, a, b, c, order) {
  const cos = Math.cos;
  const sin = Math.sin;
  const c2 = cos(b / 2);
  const s2 = sin(b / 2);
  const c13 = cos((a + c) / 2);
  const s13 = sin((a + c) / 2);
  const c1_3 = cos((a - c) / 2);
  const s1_3 = sin((a - c) / 2);
  const c3_1 = cos((c - a) / 2);
  const s3_1 = sin((c - a) / 2);
  switch (order) {
    case "XYX":
      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
      break;
    case "YZY":
      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
      break;
    case "ZXZ":
      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
      break;
    case "XZX":
      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
      break;
    case "YXY":
      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
      break;
    case "ZYZ":
      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
  }
}
function denormalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return value / 4294967295;
    case Uint16Array:
      return value / 65535;
    case Uint8Array:
      return value / 255;
    case Int32Array:
      return Math.max(value / 2147483647, -1);
    case Int16Array:
      return Math.max(value / 32767, -1);
    case Int8Array:
      return Math.max(value / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function normalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return Math.round(value * 4294967295);
    case Uint16Array:
      return Math.round(value * 65535);
    case Uint8Array:
      return Math.round(value * 255);
    case Int32Array:
      return Math.round(value * 2147483647);
    case Int16Array:
      return Math.round(value * 32767);
    case Int8Array:
      return Math.round(value * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const MathUtils = {
  DEG2RAD,
  RAD2DEG,
  /**
   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
   * (universally unique identifier).
   *
   * @static
   * @method
   * @return {string} The UUID.
   */
  generateUUID,
  /**
   * Clamps the given value between min and max.
   *
   * @static
   * @method
   * @param {number} value - The value to clamp.
   * @param {number} min - The min value.
   * @param {number} max - The max value.
   * @return {number} The clamped value.
   */
  clamp,
  /**
   * Computes the Euclidean modulo of the given parameters that
   * is `( ( n % m ) + m ) % m`.
   *
   * @static
   * @method
   * @param {number} n - The first parameter.
   * @param {number} m - The second parameter.
   * @return {number} The Euclidean modulo.
   */
  euclideanModulo,
  /**
   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`
   * for the given value.
   *
   * @static
   * @method
   * @param {number} x - The value to be mapped.
   * @param {number} a1 - Minimum value for range A.
   * @param {number} a2 - Maximum value for range A.
   * @param {number} b1 - Minimum value for range B.
   * @param {number} b2 - Maximum value for range B.
   * @return {number} The mapped value.
   */
  mapLinear,
  /**
   * Returns the percentage in the closed interval `[0, 1]` of the given value
   * between the start and end point.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} value - A value between start and end.
   * @return {number} The interpolation factor.
   */
  inverseLerp,
  /**
   * Returns a value linearly interpolated from two known points based on the given interval -
   * `t = 0` will return `x` and `t = 1` will return `y`.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {number} The interpolated value.
   */
  lerp,
  /**
   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta
   * time to maintain frame rate independent movement. For details, see
   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.
   *
   * @static
   * @method
   * @param {number} x - The current point.
   * @param {number} y - The target point.
   * @param {number} lambda - A higher lambda value will make the movement more sudden,
   * and a lower value will make the movement more gradual.
   * @param {number} dt - Delta time in seconds.
   * @return {number} The interpolated value.
   */
  damp,
  /**
   * Returns a value that alternates between `0` and the given `length` parameter.
   *
   * @static
   * @method
   * @param {number} x - The value to pingpong.
   * @param {number} [length=1] - The positive value the function will pingpong to.
   * @return {number} The alternated value.
   */
  pingpong,
  /**
   * Returns a value in the range `[0,1]` that represents the percentage that `x` has
   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to
   * the `min` and `max`.
   *
   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smoothstep,
  /**
   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}
   * that has zero 1st and 2nd order derivatives at x=0 and x=1.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smootherstep,
  /**
   * Returns a random integer from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random integer.
   */
  randInt,
  /**
   * Returns a random float from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random float.
   */
  randFloat,
  /**
   * Returns a random integer from `<-range/2, range/2>` interval.
   *
   * @static
   * @method
   * @param {number} range - Defines the value range.
   * @return {number} A random float.
   */
  randFloatSpread,
  /**
   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.
   *
   * @static
   * @method
   * @param {number} [s] - The integer seed.
   * @return {number} A random float.
   */
  seededRandom,
  /**
   * Converts degrees to radians.
   *
   * @static
   * @method
   * @param {number} degrees - A value in degrees.
   * @return {number} The converted value in radians.
   */
  degToRad,
  /**
   * Converts radians to degrees.
   *
   * @static
   * @method
   * @param {number} radians - A value in radians.
   * @return {number} The converted value in degrees.
   */
  radToDeg,
  /**
   * Returns `true` if the given number is a power of two.
   *
   * @static
   * @method
   * @param {number} value - The value to check.
   * @return {boolean} Whether the given number is a power of two or not.
   */
  isPowerOfTwo,
  /**
   * Returns the smallest power of two that is greater than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The smallest power of two that is greater than or equal to the given number.
   */
  ceilPowerOfTwo,
  /**
   * Returns the largest power of two that is less than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The largest power of two that is less than or equal to the given number.
   */
  floorPowerOfTwo,
  /**
   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}
   * defined by the given angles and order.
   *
   * Rotations are applied to the axes in the order specified by order:
   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.
   *
   * @static
   * @method
   * @param {Quaternion} q - The quaternion to set.
   * @param {number} a - The rotation applied to the first axis, in radians.
   * @param {number} b - The rotation applied to the second axis, in radians.
   * @param {number} c - The rotation applied to the third axis, in radians.
   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.
   */
  setQuaternionFromProperEuler,
  /**
   * Normalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The float value in the range `[0,1]` to normalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The normalize value.
   */
  normalize,
  /**
   * Denormalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The value to denormalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The denormalize (float) value in the range `[0,1]`.
   */
  denormalize
};
class Vector2 {
  /**
   * Constructs a new 2D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   */
  constructor(x = 0, y = 0) {
    Vector2.prototype.isVector2 = true;
    this.x = x;
    this.y = y;
  }
  /**
   * Alias for {@link Vector2#x}.
   *
   * @type {number}
   */
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  /**
   * Alias for {@link Vector2#y}.
   *
   * @type {number}
   */
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @return {Vector2} A reference to this vector.
   */
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector2} A reference to this vector.
   */
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setX(x) {
    this.x = x;
    return this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setY(y) {
    this.y = y;
    return this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @param {number} value - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @return {number} A vector component value.
   */
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector2} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector2} v - The vector to copy.
   * @return {Vector2} A reference to this vector.
   */
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector2} v - The vector to add.
   * @return {Vector2} A reference to this vector.
   */
  add(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector2} A reference to this vector.
   */
  addScalar(s) {
    this.x += s;
    this.y += s;
    return this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector2} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector2} A reference to this vector.
   */
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    return this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector2} v - The vector to subtract.
   * @return {Vector2} A reference to this vector.
   */
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector2} A reference to this vector.
   */
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    return this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector2} v - The vector to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    return this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector2} v - The vector to divide.
   * @return {Vector2} A reference to this vector.
   */
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    return this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector2} A reference to this vector.
   */
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  /**
   * Multiplies this vector (with an implicit 1 as the 3rd component) by
   * the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {Vector2} A reference to this vector.
   */
  applyMatrix3(m) {
    const x = this.x, y = this.y;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6];
    this.y = e[1] * x + e[4] * y + e[7];
    return this;
  }
  /**
   * If this vector's x or y value is greater than the given vector's x or y
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    return this;
  }
  /**
   * If this vector's x or y value is less than the given vector's x or y
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    return this;
  }
  /**
   * If this vector's x or y value is greater than the max vector's x or y
   * value, it is replaced by the corresponding value.
   * If this vector's x or y value is less than the min vector's x or y value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector2} min - The minimum x and y values.
   * @param {Vector2} max - The maximum x and y values in the desired range.
   * @return {Vector2} A reference to this vector.
   */
  clamp(min, max) {
    this.x = clamp(this.x, min.x, max.x);
    this.y = clamp(this.y, min.y, max.y);
    return this;
  }
  /**
   * If this vector's x or y values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x or y values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampScalar(minVal, maxVal) {
    this.x = clamp(this.x, minVal, maxVal);
    this.y = clamp(this.y, minVal, maxVal);
    return this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector2} A reference to this vector.
   */
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    return this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x and y = -y.
   *
   * @return {Vector2} A reference to this vector.
   */
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the cross product with.
   * @return {number} The result of the cross product.
   */
  cross(v) {
    return this.x * v.y - this.y * v.x;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Computes the angle in radians of this vector with respect to the positive x-axis.
   *
   * @return {number} The angle in radians.
   */
  angle() {
    const angle = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle;
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector2} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(v) {
    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector2} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y;
    return dx * dx + dy * dy;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector2} A reference to this vector.
   */
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector2} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    return this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector2} v1 - The first vector.
   * @param {Vector2} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    return this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector2} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(v) {
    return v.x === this.x && v.y === this.y;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]` and y
   * value to be `array[ offset + 1 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector2} A reference to this vector.
   */
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector2} A reference to this vector.
   */
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  }
  /**
   * Rotates this vector around the given center by the given angle.
   *
   * @param {Vector2} center - The point around which to rotate.
   * @param {number} angle - The angle to rotate, in radians.
   * @return {Vector2} A reference to this vector.
   */
  rotateAround(center, angle) {
    const c = Math.cos(angle), s = Math.sin(angle);
    const x = this.x - center.x;
    const y = this.y - center.y;
    this.x = x * c - y * s + center.x;
    this.y = x * s + y * c + center.y;
    return this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
}
class Matrix3 {
  /**
   * Constructs a new 3x3 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   */
  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    Matrix3.prototype.isMatrix3 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @return {Matrix3} A reference to this matrix.
   */
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  }
  /**
   * Sets this matrix to the 3x3 identity matrix.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix3} m - The matrix to copy.
   * @return {Matrix3} A reference to this matrix.
   */
  copy(m) {
    const te = this.elements;
    const me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    return this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix3} A reference to this matrix.
   */
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  /**
   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  setFromMatrix4(m) {
    const me = m.elements;
    this.set(
      me[0],
      me[4],
      me[8],
      me[1],
      me[5],
      me[9],
      me[2],
      me[6],
      me[10]
    );
    return this;
  }
  /**
   * Post-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  /**
   * Pre-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  /**
   * Multiples the given 3x3 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix3} a - The first matrix.
   * @param {Matrix3} b - The second matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[3], a13 = ae[6];
    const a21 = ae[1], a22 = ae[4], a23 = ae[7];
    const a31 = ae[2], a32 = ae[5], a33 = ae[8];
    const b11 = be[0], b12 = be[3], b13 = be[6];
    const b21 = be[1], b22 = be[4], b23 = be[7];
    const b31 = be[2], b32 = be[5], b33 = be[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[3] *= s;
    te[6] *= s;
    te[1] *= s;
    te[4] *= s;
    te[7] *= s;
    te[2] *= s;
    te[5] *= s;
    te[8] *= s;
    return this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const te = this.elements;
    const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
    return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t12 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  transpose() {
    let tmp;
    const m = this.elements;
    tmp = m[1];
    m[1] = m[3];
    m[3] = tmp;
    tmp = m[2];
    m[2] = m[6];
    m[6] = tmp;
    tmp = m[5];
    m[5] = m[7];
    m[7] = tmp;
    return this;
  }
  /**
   * Computes the normal matrix which is the inverse transpose of the upper
   * left 3x3 portion of the given 4x4 matrix.
   *
   * @param {Matrix4} matrix4 - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).invert().transpose();
  }
  /**
   * Transposes this matrix into the supplied array, and returns itself unchanged.
   *
   * @param {Array<number>} r - An array to store the transposed matrix elements.
   * @return {Matrix3} A reference to this matrix.
   */
  transposeIntoArray(r) {
    const m = this.elements;
    r[0] = m[0];
    r[1] = m[3];
    r[2] = m[6];
    r[3] = m[1];
    r[4] = m[4];
    r[5] = m[7];
    r[6] = m[2];
    r[7] = m[5];
    r[8] = m[8];
    return this;
  }
  /**
   * Sets the UV transform matrix from offset, repeat, rotation, and center.
   *
   * @param {number} tx - Offset x.
   * @param {number} ty - Offset y.
   * @param {number} sx - Repeat x.
   * @param {number} sy - Repeat y.
   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
   * @param {number} cx - Center x of rotation.
   * @param {number} cy - Center y of rotation
   * @return {Matrix3} A reference to this matrix.
   */
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c = Math.cos(rotation);
    const s = Math.sin(rotation);
    this.set(
      sx * c,
      sx * s,
      -sx * (c * cx + s * cy) + cx + tx,
      -sy * s,
      sy * c,
      -sy * (-s * cx + c * cy) + cy + ty,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Scales this matrix with the given scalar values.
   *
   * @param {number} sx - The amount to scale in the X axis.
   * @param {number} sy - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  scale(sx, sy) {
    this.premultiply(_m3.makeScale(sx, sy));
    return this;
  }
  /**
   * Rotates this matrix by the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  rotate(theta) {
    this.premultiply(_m3.makeRotation(-theta));
    return this;
  }
  /**
   * Translates this matrix by the given scalar values.
   *
   * @param {number} tx - The amount to translate in the X axis.
   * @param {number} ty - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  translate(tx, ty) {
    this.premultiply(_m3.makeTranslation(tx, ty));
    return this;
  }
  // for 2D Transforms
  /**
   * Sets this matrix as a 2D translation transform.
   *
   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeTranslation(x, y) {
    if (x.isVector2) {
      this.set(
        1,
        0,
        x.x,
        0,
        1,
        x.y,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        x,
        0,
        1,
        y,
        0,
        0,
        1
      );
    }
    return this;
  }
  /**
   * Sets this matrix as a 2D rotational transformation.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  makeRotation(theta) {
    const c = Math.cos(theta);
    const s = Math.sin(theta);
    this.set(
      c,
      -s,
      0,
      s,
      c,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a 2D scale transform.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeScale(x, y) {
    this.set(
      x,
      0,
      0,
      0,
      y,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix3} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 9; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix3} A reference to this matrix.
   */
  fromArray(array, offset = 0) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.elements[i2] = array[i2 + offset];
    }
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    return array;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix3} A clone of this instance.
   */
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const _m3 = /* @__PURE__ */ new Matrix3();
function arrayNeedsUint32(array) {
  for (let i2 = array.length - 1; i2 >= 0; --i2) {
    if (array[i2] >= 65535) return true;
  }
  return false;
}
function createElementNS(name) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
function createCanvasElement() {
  const canvas = createElementNS("canvas");
  canvas.style.display = "block";
  return canvas;
}
const _cache = {};
function warnOnce(message) {
  if (message in _cache) return;
  _cache[message] = true;
  console.warn(message);
}
function probeAsync(gl, sync, interval) {
  return new Promise(function(resolve, reject) {
    function probe() {
      switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case gl.WAIT_FAILED:
          reject();
          break;
        case gl.TIMEOUT_EXPIRED:
          setTimeout(probe, interval);
          break;
        default:
          resolve();
      }
    }
    setTimeout(probe, interval);
  });
}
function toNormalizedProjectionMatrix(projectionMatrix) {
  const m = projectionMatrix.elements;
  m[2] = 0.5 * m[2] + 0.5 * m[3];
  m[6] = 0.5 * m[6] + 0.5 * m[7];
  m[10] = 0.5 * m[10] + 0.5 * m[11];
  m[14] = 0.5 * m[14] + 0.5 * m[15];
}
function toReversedProjectionMatrix(projectionMatrix) {
  const m = projectionMatrix.elements;
  const isPerspectiveMatrix = m[11] === -1;
  if (isPerspectiveMatrix) {
    m[10] = -m[10] - 1;
    m[14] = -m[14];
  } else {
    m[10] = -m[10];
    m[14] = -m[14] + 1;
  }
}
const LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
  0.4123908,
  0.3575843,
  0.1804808,
  0.212639,
  0.7151687,
  0.0721923,
  0.0193308,
  0.1191948,
  0.9505322
);
const XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
  3.2409699,
  -1.5373832,
  -0.4986108,
  -0.9692436,
  1.8759675,
  0.0415551,
  0.0556301,
  -0.203977,
  1.0569715
);
function createColorManagement() {
  const ColorManagement2 = {
    enabled: true,
    workingColorSpace: LinearSRGBColorSpace,
    /**
     * Implementations of supported color spaces.
     *
     * Required:
     *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
     *	- whitePoint: reference white [ x y ]
     *	- transfer: transfer function (pre-defined)
     *	- toXYZ: Matrix3 RGB to XYZ transform
     *	- fromXYZ: Matrix3 XYZ to RGB transform
     *	- luminanceCoefficients: RGB luminance coefficients
     *
     * Optional:
     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
     *
     * Reference:
     * - https://www.russellcottrell.com/photo/matrixCalculator.htm
     */
    spaces: {},
    convert: function(color, sourceColorSpace, targetColorSpace) {
      if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
        return color;
      }
      if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
        color.r = SRGBToLinear(color.r);
        color.g = SRGBToLinear(color.g);
        color.b = SRGBToLinear(color.b);
      }
      if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
        color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
        color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
      }
      if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
        color.r = LinearToSRGB(color.r);
        color.g = LinearToSRGB(color.g);
        color.b = LinearToSRGB(color.b);
      }
      return color;
    },
    fromWorkingColorSpace: function(color, targetColorSpace) {
      return this.convert(color, this.workingColorSpace, targetColorSpace);
    },
    toWorkingColorSpace: function(color, sourceColorSpace) {
      return this.convert(color, sourceColorSpace, this.workingColorSpace);
    },
    getPrimaries: function(colorSpace) {
      return this.spaces[colorSpace].primaries;
    },
    getTransfer: function(colorSpace) {
      if (colorSpace === NoColorSpace) return LinearTransfer;
      return this.spaces[colorSpace].transfer;
    },
    getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
      return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
    },
    define: function(colorSpaces) {
      Object.assign(this.spaces, colorSpaces);
    },
    // Internal APIs
    _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
      return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
    },
    _getDrawingBufferColorSpace: function(colorSpace) {
      return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
    },
    _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
      return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
    }
  };
  const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
  const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
  const D65 = [0.3127, 0.329];
  ColorManagement2.define({
    [LinearSRGBColorSpace]: {
      primaries: REC709_PRIMARIES,
      whitePoint: D65,
      transfer: LinearTransfer,
      toXYZ: LINEAR_REC709_TO_XYZ,
      fromXYZ: XYZ_TO_LINEAR_REC709,
      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
      workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
      outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
    },
    [SRGBColorSpace]: {
      primaries: REC709_PRIMARIES,
      whitePoint: D65,
      transfer: SRGBTransfer,
      toXYZ: LINEAR_REC709_TO_XYZ,
      fromXYZ: XYZ_TO_LINEAR_REC709,
      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
      outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
    }
  });
  return ColorManagement2;
}
const ColorManagement = /* @__PURE__ */ createColorManagement();
function SRGBToLinear(c) {
  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
  return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
let _canvas;
class ImageUtils {
  /**
   * Returns a data URI containing a representation of the given image.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
   * @param {string} [type='image/png'] - Indicates the image format.
   * @return {string} The data URI.
   */
  static getDataURL(image, type = "image/png") {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement === "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === void 0) _canvas = createElementNS("canvas");
      _canvas.width = image.width;
      _canvas.height = image.height;
      const context = _canvas.getContext("2d");
      if (image instanceof ImageData) {
        context.putImageData(image, 0, 0);
      } else {
        context.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas;
    }
    return canvas.toDataURL(type);
  }
  /**
   * Converts the given sRGB image data to linear color space.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
   * @return {HTMLCanvasElement|Object} The converted image.
   */
  static sRGBToLinear(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      const canvas = createElementNS("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      const imageData = context.getImageData(0, 0, image.width, image.height);
      const data = imageData.data;
      for (let i2 = 0; i2 < data.length; i2++) {
        data[i2] = SRGBToLinear(data[i2] / 255) * 255;
      }
      context.putImageData(imageData, 0, 0);
      return canvas;
    } else if (image.data) {
      const data = image.data.slice(0);
      for (let i2 = 0; i2 < data.length; i2++) {
        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
          data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
        } else {
          data[i2] = SRGBToLinear(data[i2]);
        }
      }
      return {
        data,
        width: image.width,
        height: image.height
      };
    } else {
      console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
      return image;
    }
  }
}
let _sourceId = 0;
class Source {
  /**
   * Constructs a new video texture.
   *
   * @param {any} [data=null] - The data definition of a texture.
   */
  constructor(data = null) {
    this.isSource = true;
    Object.defineProperty(this, "id", { value: _sourceId++ });
    this.uuid = generateUUID();
    this.data = data;
    this.dataReady = true;
    this.version = 0;
  }
  /**
   * When the property is set to `true`, the engine allocates the memory
   * for the texture (if necessary) and triggers the actual texture upload
   * to the GPU next time the source is used.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  /**
   * Serializes the source into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized source.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.images[this.uuid] !== void 0) {
      return meta.images[this.uuid];
    }
    const output = {
      uuid: this.uuid,
      url: ""
    };
    const data = this.data;
    if (data !== null) {
      let url;
      if (Array.isArray(data)) {
        url = [];
        for (let i2 = 0, l = data.length; i2 < l; i2++) {
          if (data[i2].isDataTexture) {
            url.push(serializeImage(data[i2].image));
          } else {
            url.push(serializeImage(data[i2]));
          }
        }
      } else {
        url = serializeImage(data);
      }
      output.url = url;
    }
    if (!isRootObject) {
      meta.images[this.uuid] = output;
    }
    return output;
  }
}
function serializeImage(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.from(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
let _textureId = 0;
class Texture extends EventDispatcher {
  /**
   * Constructs a new texture.
   *
   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
    super();
    this.isTexture = true;
    Object.defineProperty(this, "id", { value: _textureId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.source = new Source(image);
    this.mipmaps = [];
    this.mapping = mapping;
    this.channel = 0;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy;
    this.format = format;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector2(0, 0);
    this.repeat = new Vector2(1, 1);
    this.center = new Vector2(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix3();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.colorSpace = colorSpace;
    this.userData = {};
    this.version = 0;
    this.onUpdate = null;
    this.renderTarget = null;
    this.isRenderTargetTexture = false;
    this.isTextureArray = false;
    this.pmremVersion = 0;
  }
  /**
   * The image object holding the texture data.
   *
   * @type {?Object}
   */
  get image() {
    return this.source.data;
  }
  set image(value = null) {
    this.source.data = value;
  }
  /**
   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
   */
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  /**
   * Returns a new texture with copied values from this instance.
   *
   * @return {Texture} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given texture to this instance.
   *
   * @param {Texture} source - The texture to copy.
   * @return {Texture} A reference to this instance.
   */
  copy(source) {
    this.name = source.name;
    this.source = source.source;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.channel = source.channel;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.colorSpace = source.colorSpace;
    this.renderTarget = source.renderTarget;
    this.isRenderTargetTexture = source.isRenderTargetTexture;
    this.isTextureArray = source.isTextureArray;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    this.needsUpdate = true;
    return this;
  }
  /**
   * Serializes the texture into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized texture.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(meta).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (Object.keys(this.userData).length > 0) output.userData = this.userData;
    if (!isRootObject) {
      meta.textures[this.uuid] = output;
    }
    return output;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Transforms the given uv vector with the textures uv transformation matrix.
   *
   * @param {Vector2} uv - The uv vector.
   * @return {Vector2} The transformed uv vector.
   */
  transformUv(uv) {
    if (this.mapping !== UVMapping) return uv;
    uv.applyMatrix3(this.matrix);
    if (uv.x < 0 || uv.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv.x = uv.x - Math.floor(uv.x);
          break;
        case ClampToEdgeWrapping:
          uv.x = uv.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.x) % 2) === 1) {
            uv.x = Math.ceil(uv.x) - uv.x;
          } else {
            uv.x = uv.x - Math.floor(uv.x);
          }
          break;
      }
    }
    if (uv.y < 0 || uv.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv.y = uv.y - Math.floor(uv.y);
          break;
        case ClampToEdgeWrapping:
          uv.y = uv.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.y) % 2) === 1) {
            uv.y = Math.ceil(uv.y) - uv.y;
          } else {
            uv.y = uv.y - Math.floor(uv.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv.y = 1 - uv.y;
    }
    return uv;
  }
  /**
   * Setting this property to `true` indicates the engine the texture
   * must be updated in the next render. This triggers a texture upload
   * to the GPU and ensures correct texture parameter configuration.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
      this.source.needsUpdate = true;
    }
  }
  /**
   * Setting this property to `true` indicates the engine the PMREM
   * must be regenerated.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsPMREMUpdate(value) {
    if (value === true) {
      this.pmremVersion++;
    }
  }
}
Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.DEFAULT_ANISOTROPY = 1;
class Vector4 {
  /**
   * Constructs a new 4D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   * @param {number} [w=1] - The w value of this vector.
   */
  constructor(x = 0, y = 0, z = 0, w = 1) {
    Vector4.prototype.isVector4 = true;
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  /**
   * Alias for {@link Vector4#z}.
   *
   * @type {number}
   */
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  /**
   * Alias for {@link Vector4#w}.
   *
   * @type {number}
   */
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @param {number} w - The value of the w component.
   * @return {Vector4} A reference to this vector.
   */
  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector4} A reference to this vector.
   */
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setX(x) {
    this.x = x;
    return this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setY(y) {
    this.y = y;
    return this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setZ(z) {
    this.z = z;
    return this;
  }
  /**
   * Sets the vector's w component to the given value
   *
   * @param {number} w - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setW(w) {
    this.w = w;
    return this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @param {number} value - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @return {number} A vector component value.
   */
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector4} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3|Vector4} v - The vector to copy.
   * @return {Vector4} A reference to this vector.
   */
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = v.w !== void 0 ? v.w : 1;
    return this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector4} v - The vector to add.
   * @return {Vector4} A reference to this vector.
   */
  add(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;
    return this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector4} A reference to this vector.
   */
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;
    return this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector4} A reference to this vector.
   */
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    this.w += v.w * s;
    return this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector4} v - The vector to subtract.
   * @return {Vector4} A reference to this vector.
   */
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;
    return this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector4} A reference to this vector.
   */
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    this.w -= s;
    return this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector4} v - The vector to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    this.w *= v.w;
    return this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  /**
   * Multiplies this vector with the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  applyMatrix4(m) {
    const x = this.x, y = this.y, z = this.z, w = this.w;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
    return this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector4} v - The vector to divide.
   * @return {Vector4} A reference to this vector.
   */
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    this.w /= v.w;
    return this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector4} A reference to this vector.
   */
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  /**
   * Sets the x, y and z components of this
   * vector to the quaternion's axis and w to the angle.
   *
   * @param {Quaternion} q - The Quaternion to set.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromQuaternion(q) {
    this.w = 2 * Math.acos(q.w);
    const s = Math.sqrt(1 - q.w * q.w);
    if (s < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q.x / s;
      this.y = q.y / s;
      this.z = q.z / s;
    }
    return this;
  }
  /**
   * Sets the x, y and z components of this
   * vector to the axis of rotation and w to the angle.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromRotationMatrix(m) {
    let angle, x, y, z;
    const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon) {
          x = 0;
          y = 0.707106781;
          z = 0.707106781;
        } else {
          x = Math.sqrt(xx);
          y = xy / x;
          z = xz / x;
        }
      } else if (yy > zz) {
        if (yy < epsilon) {
          x = 0.707106781;
          y = 0;
          z = 0.707106781;
        } else {
          y = Math.sqrt(yy);
          x = xy / y;
          z = yz / y;
        }
      } else {
        if (zz < epsilon) {
          x = 0.707106781;
          y = 0.707106781;
          z = 0;
        } else {
          z = Math.sqrt(zz);
          x = xz / z;
          y = yz / z;
        }
      }
      this.set(x, y, z, angle);
      return this;
    }
    let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s) < 1e-3) s = 1;
    this.x = (m32 - m23) / s;
    this.y = (m13 - m31) / s;
    this.z = (m21 - m12) / s;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  setFromMatrixPosition(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    this.w = e[15];
    return this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    this.w = Math.min(this.w, v.w);
    return this;
  }
  /**
   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    this.w = Math.max(this.w, v.w);
    return this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
   * value, it is replaced by the corresponding value.
   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector4} min - The minimum x, y and z values.
   * @param {Vector4} max - The maximum x, y and z values in the desired range.
   * @return {Vector4} A reference to this vector.
   */
  clamp(min, max) {
    this.x = clamp(this.x, min.x, max.x);
    this.y = clamp(this.y, min.y, max.y);
    this.z = clamp(this.z, min.z, max.z);
    this.w = clamp(this.w, min.w, max.w);
    return this;
  }
  /**
   * If this vector's x, y, z or w values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y, z or w values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampScalar(minVal, maxVal) {
    this.x = clamp(this.x, minVal, maxVal);
    this.y = clamp(this.y, minVal, maxVal);
    this.z = clamp(this.z, minVal, maxVal);
    this.w = clamp(this.w, minVal, maxVal);
    return this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector4} A reference to this vector.
   */
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    this.w = Math.trunc(this.w);
    return this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
   *
   * @return {Vector4} A reference to this vector.
   */
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector4} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector4} A reference to this vector.
   */
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector4} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    this.w += (v.w - this.w) * alpha;
    return this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector4} v1 - The first vector.
   * @param {Vector4} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    this.w = v1.w + (v2.w - v1.w) * alpha;
    return this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector4} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector4} A reference to this vector.
   */
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector4} A reference to this vector.
   */
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    this.w = attribute.getW(index);
    return this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
    yield this.w;
  }
}
class RenderTarget extends EventDispatcher {
  /**
   * Render target options.
   *
   * @typedef {Object} RenderTarget~Options
   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
   * @property {number} [magFilter=LinearFilter] - The mag filter.
   * @property {number} [minFilter=LinearFilter] - The min filter.
   * @property {number} [format=RGBAFormat] - The texture format.
   * @property {number} [type=UnsignedByteType] - The texture type.
   * @property {?string} [internalFormat=null] - The texture's internal format.
   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [anisotropy=1] - The texture's anisotropy value.
   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
   * @property {number} [samples=0] - The MSAA samples count.
   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
   */
  /**
   * Constructs a new render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(width = 1, height = 1, options = {}) {
    super();
    this.isRenderTarget = true;
    this.width = width;
    this.height = height;
    this.depth = options.depth ? options.depth : 1;
    this.scissor = new Vector4(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector4(0, 0, width, height);
    const image = { width, height, depth: this.depth };
    options = Object.assign({
      generateMipmaps: false,
      internalFormat: null,
      minFilter: LinearFilter,
      depthBuffer: true,
      stencilBuffer: false,
      resolveDepthBuffer: true,
      resolveStencilBuffer: true,
      depthTexture: null,
      samples: 0,
      count: 1,
      multiview: false
    }, options);
    const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    texture.flipY = false;
    texture.generateMipmaps = options.generateMipmaps;
    texture.internalFormat = options.internalFormat;
    this.textures = [];
    const count = options.count;
    for (let i2 = 0; i2 < count; i2++) {
      this.textures[i2] = texture.clone();
      this.textures[i2].isRenderTargetTexture = true;
      this.textures[i2].renderTarget = this;
    }
    this.depthBuffer = options.depthBuffer;
    this.stencilBuffer = options.stencilBuffer;
    this.resolveDepthBuffer = options.resolveDepthBuffer;
    this.resolveStencilBuffer = options.resolveStencilBuffer;
    this._depthTexture = null;
    this.depthTexture = options.depthTexture;
    this.samples = options.samples;
    this.multiview = options.multiview;
  }
  /**
   * The texture representing the default color attachment.
   *
   * @type {Texture}
   */
  get texture() {
    return this.textures[0];
  }
  set texture(value) {
    this.textures[0] = value;
  }
  set depthTexture(current) {
    if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
    if (current !== null) current.renderTarget = this;
    this._depthTexture = current;
  }
  /**
   * Instead of saving the depth in a renderbuffer, a texture
   * can be used instead which is useful for further processing
   * e.g. in context of post-processing.
   *
   * @type {?DepthTexture}
   * @default null
   */
  get depthTexture() {
    return this._depthTexture;
  }
  /**
   * Sets the size of this render target.
   *
   * @param {number} width - The width.
   * @param {number} height - The height.
   * @param {number} [depth=1] - The depth.
   */
  setSize(width, height, depth = 1) {
    if (this.width !== width || this.height !== height || this.depth !== depth) {
      this.width = width;
      this.height = height;
      this.depth = depth;
      for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
        this.textures[i2].image.width = width;
        this.textures[i2].image.height = height;
        this.textures[i2].image.depth = depth;
      }
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  }
  /**
   * Returns a new render target with copied values from this instance.
   *
   * @return {RenderTarget} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the settings of the given render target. This is a structural copy so
   * no resources are shared between render targets after the copy. That includes
   * all MRT textures and the depth texture.
   *
   * @param {RenderTarget} source - The render target to copy.
   * @return {RenderTarget} A reference to this instance.
   */
  copy(source) {
    this.width = source.width;
    this.height = source.height;
    this.depth = source.depth;
    this.scissor.copy(source.scissor);
    this.scissorTest = source.scissorTest;
    this.viewport.copy(source.viewport);
    this.textures.length = 0;
    for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
      this.textures[i2] = source.textures[i2].clone();
      this.textures[i2].isRenderTargetTexture = true;
      this.textures[i2].renderTarget = this;
      const image = Object.assign({}, source.textures[i2].image);
      this.textures[i2].source = new Source(image);
    }
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.resolveDepthBuffer = source.resolveDepthBuffer;
    this.resolveStencilBuffer = source.resolveStencilBuffer;
    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
    this.samples = source.samples;
    return this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires RenderTarget#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class WebGLRenderTarget extends RenderTarget {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(width = 1, height = 1, options = {}) {
    super(width, height, options);
    this.isWebGLRenderTarget = true;
  }
}
class DataArrayTexture extends Texture {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(data = null, width = 1, height = 1, depth = 1) {
    super(null);
    this.isDataArrayTexture = true;
    this.image = { data, width, height, depth };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire data texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(layerIndex) {
    this.layerUpdates.add(layerIndex);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class Data3DTexture extends Texture {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(data = null, width = 1, height = 1, depth = 1) {
    super(null);
    this.isData3DTexture = true;
    this.image = { data, width, height, depth };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
}
class Quaternion {
  /**
   * Constructs a new quaternion.
   *
   * @param {number} [x=0] - The x value of this quaternion.
   * @param {number} [y=0] - The y value of this quaternion.
   * @param {number} [z=0] - The z value of this quaternion.
   * @param {number} [w=1] - The w value of this quaternion.
   */
  constructor(x = 0, y = 0, z = 0, w = 1) {
    this.isQuaternion = true;
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }
  /**
   * Interpolates between two quaternions via SLERP. This implementation assumes the
   * quaternion data are managed  in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @param {number} t - The interpolation factor in the range `[0,1]`.
   * @see {@link Quaternion#slerp}
   */
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t2) {
    let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
    if (t2 === 0) {
      dst[dstOffset + 0] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
      return;
    }
    if (t2 === 1) {
      dst[dstOffset + 0] = x1;
      dst[dstOffset + 1] = y1;
      dst[dstOffset + 2] = z1;
      dst[dstOffset + 3] = w1;
      return;
    }
    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
      let s = 1 - t2;
      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
      if (sqrSin > Number.EPSILON) {
        const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
        s = Math.sin(s * len) / sin;
        t2 = Math.sin(t2 * len) / sin;
      }
      const tDir = t2 * dir;
      x0 = x0 * s + x1 * tDir;
      y0 = y0 * s + y1 * tDir;
      z0 = z0 * s + z1 * tDir;
      w0 = w0 * s + w1 * tDir;
      if (s === 1 - t2) {
        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
        x0 *= f;
        y0 *= f;
        z0 *= f;
        w0 *= f;
      }
    }
    dst[dstOffset] = x0;
    dst[dstOffset + 1] = y0;
    dst[dstOffset + 2] = z0;
    dst[dstOffset + 3] = w0;
  }
  /**
   * Multiplies two quaternions. This implementation assumes the quaternion data are managed
   * in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @return {Array<number>} The destination array.
   * @see {@link Quaternion#multiplyQuaternions}.
   */
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x0 = src0[srcOffset0];
    const y0 = src0[srcOffset0 + 1];
    const z0 = src0[srcOffset0 + 2];
    const w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1];
    const y1 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w1 = src1[srcOffset1 + 3];
    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
    return dst;
  }
  /**
   * The x value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  /**
   * The y value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  /**
   * The z value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  /**
   * The w value of this quaternion.
   *
   * @type {number}
   * @default 1
   */
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  /**
   * Sets the quaternion components.
   *
   * @param {number} x - The x value of this quaternion.
   * @param {number} y - The y value of this quaternion.
   * @param {number} z - The z value of this quaternion.
   * @param {number} w - The w value of this quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  set(x, y, z, w) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
    this._onChangeCallback();
    return this;
  }
  /**
   * Returns a new quaternion with copied values from this instance.
   *
   * @return {Quaternion} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  /**
   * Copies the values of the given quaternion to this instance.
   *
   * @param {Quaternion} quaternion - The quaternion to copy.
   * @return {Quaternion} A reference to this quaternion.
   */
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  /**
   * Sets this quaternion from the rotation specified by the given
   * Euler angles.
   *
   * @param {Euler} euler - The Euler angles.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromEuler(euler, update2 = true) {
    const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
    const cos = Math.cos;
    const sin = Math.sin;
    const c1 = cos(x / 2);
    const c2 = cos(y / 2);
    const c3 = cos(z / 2);
    const s1 = sin(x / 2);
    const s2 = sin(y / 2);
    const s3 = sin(z / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update2 === true) this._onChangeCallback();
    return this;
  }
  /**
   * Sets this quaternion from the given axis and angle.
   *
   * @param {Vector3} axis - The normalized axis.
   * @param {number} angle - The angle in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromAxisAngle(axis, angle) {
    const halfAngle = angle / 2, s = Math.sin(halfAngle);
    this._x = axis.x * s;
    this._y = axis.y * s;
    this._z = axis.z * s;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  /**
   * Sets this quaternion from the given rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromRotationMatrix(m) {
    const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s;
      this._x = (m32 - m23) * s;
      this._y = (m13 - m31) * s;
      this._z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s;
      this._x = 0.25 * s;
      this._y = (m12 + m21) / s;
      this._z = (m13 + m31) / s;
    } else if (m22 > m33) {
      const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s;
      this._x = (m12 + m21) / s;
      this._y = 0.25 * s;
      this._z = (m23 + m32) / s;
    } else {
      const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s;
      this._x = (m13 + m31) / s;
      this._y = (m23 + m32) / s;
      this._z = 0.25 * s;
    }
    this._onChangeCallback();
    return this;
  }
  /**
   * Sets this quaternion to the rotation required to rotate the direction vector
   * `vFrom` to the direction vector `vTo`.
   *
   * @param {Vector3} vFrom - The first (normalized) direction vector.
   * @param {Vector3} vTo - The second (normalized) direction vector.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromUnitVectors(vFrom, vTo) {
    let r = vFrom.dot(vTo) + 1;
    if (r < Number.EPSILON) {
      r = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r;
    }
    return this.normalize();
  }
  /**
   * Returns the angle between this quaternion and the given one in radians.
   *
   * @param {Quaternion} q - The quaternion to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(q) {
    return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
  }
  /**
   * Rotates this quaternion by a given angular step to the given quaternion.
   * The method ensures that the final quaternion will not overshoot `q`.
   *
   * @param {Quaternion} q - The target quaternion.
   * @param {number} step - The angular step in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  rotateTowards(q, step) {
    const angle = this.angleTo(q);
    if (angle === 0) return this;
    const t2 = Math.min(1, step / angle);
    this.slerp(q, t2);
    return this;
  }
  /**
   * Sets this quaternion to the identity quaternion; that is, to the
   * quaternion that represents "no rotation".
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  identity() {
    return this.set(0, 0, 0, 1);
  }
  /**
   * Inverts this quaternion via {@link Quaternion#conjugate}. The
   * quaternion is assumed to have unit length.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  invert() {
    return this.conjugate();
  }
  /**
   * Returns the rotational conjugate of this quaternion. The conjugate of a
   * quaternion represents the same rotation in the opposite direction about
   * the rotational axis.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  /**
   * Calculates the dot product of this quaternion and the given one.
   *
   * @param {Quaternion} v - The quaternion to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(v) {
    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
  }
  /**
   * Computes the squared Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector. This can be useful if you are comparing the
   * lengths of two quaternions, as this is a slightly more efficient calculation than
   * {@link Quaternion#length}.
   *
   * @return {number} The squared Euclidean length.
   */
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  /**
   * Computes the Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector.
   *
   * @return {number} The Euclidean length.
   */
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  /**
   * Normalizes this quaternion - that is, calculated the quaternion that performs
   * the same rotation as this one, but has a length equal to `1`.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  normalize() {
    let l = this.length();
    if (l === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l = 1 / l;
      this._x = this._x * l;
      this._y = this._y * l;
      this._z = this._z * l;
      this._w = this._w * l;
    }
    this._onChangeCallback();
    return this;
  }
  /**
   * Multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiply(q) {
    return this.multiplyQuaternions(this, q);
  }
  /**
   * Pre-multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  premultiply(q) {
    return this.multiplyQuaternions(q, this);
  }
  /**
   * Multiplies the given quaternions and stores the result in this instance.
   *
   * @param {Quaternion} a - The first quaternion.
   * @param {Quaternion} b - The second quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiplyQuaternions(a, b) {
    const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  /**
   * Performs a spherical linear interpolation between quaternions.
   *
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerp(qb, t2) {
    if (t2 === 0) return this;
    if (t2 === 1) return this.copy(qb);
    const x = this._x, y = this._y, z = this._z, w = this._w;
    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }
    if (cosHalfTheta >= 1) {
      this._w = w;
      this._x = x;
      this._y = y;
      this._z = z;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s = 1 - t2;
      this._w = s * w + t2 * this._w;
      this._x = s * x + t2 * this._x;
      this._y = s * y + t2 * this._y;
      this._z = s * z + t2 * this._z;
      this.normalize();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t2) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t2 * halfTheta) / sinHalfTheta;
    this._w = w * ratioA + this._w * ratioB;
    this._x = x * ratioA + this._x * ratioB;
    this._y = y * ratioA + this._y * ratioB;
    this._z = z * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  /**
   * Performs a spherical linear interpolation between the given quaternions
   * and stores the result in this quaternion.
   *
   * @param {Quaternion} qa - The source quaternion.
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerpQuaternions(qa, qb, t2) {
    return this.copy(qa).slerp(qb, t2);
  }
  /**
   * Sets this quaternion to a uniformly random, normalized quaternion.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  random() {
    const theta1 = 2 * Math.PI * Math.random();
    const theta2 = 2 * Math.PI * Math.random();
    const x0 = Math.random();
    const r1 = Math.sqrt(1 - x0);
    const r2 = Math.sqrt(x0);
    return this.set(
      r1 * Math.sin(theta1),
      r1 * Math.cos(theta1),
      r2 * Math.sin(theta2),
      r2 * Math.cos(theta2)
    );
  }
  /**
   * Returns `true` if this quaternion is equal with the given one.
   *
   * @param {Quaternion} quaternion - The quaternion to test for equality.
   * @return {boolean} Whether this quaternion is equal with the given one.
   */
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  /**
   * Sets this quaternion's components from the given array.
   *
   * @param {Array<number>} array - An array holding the quaternion component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromArray(array, offset = 0) {
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onChangeCallback();
    return this;
  }
  /**
   * Writes the components of this quaternion to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The quaternion components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._w;
    return array;
  }
  /**
   * Sets the components of this quaternion from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
   * @param {number} index - The index into the attribute.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromBufferAttribute(attribute, index) {
    this._x = attribute.getX(index);
    this._y = attribute.getY(index);
    this._z = attribute.getZ(index);
    this._w = attribute.getW(index);
    this._onChangeCallback();
    return this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the
   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
   *
   * @return {Array<number>} The serialized quaternion.
   */
  toJSON() {
    return this.toArray();
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._w;
  }
}
class Vector3 {
  /**
   * Constructs a new 3D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   */
  constructor(x = 0, y = 0, z = 0) {
    Vector3.prototype.isVector3 = true;
    this.x = x;
    this.y = y;
    this.z = z;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @return {Vector3} A reference to this vector.
   */
  set(x, y, z) {
    if (z === void 0) z = this.z;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector3} A reference to this vector.
   */
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setX(x) {
    this.x = x;
    return this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setY(y) {
    this.y = y;
    return this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setZ(z) {
    this.z = z;
    return this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @param {number} value - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @return {number} A vector component value.
   */
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector3} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3} v - The vector to copy.
   * @return {Vector3} A reference to this vector.
   */
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector3} v - The vector to add.
   * @return {Vector3} A reference to this vector.
   */
  add(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector3} A reference to this vector.
   */
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector3|Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector3} A reference to this vector.
   */
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    return this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector3} v - The vector to subtract.
   * @return {Vector3} A reference to this vector.
   */
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector3} A reference to this vector.
   */
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector3} v - The vector to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  /**
   * Multiplies the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  multiplyVectors(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  }
  /**
   * Applies the given Euler rotation to this vector.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Vector3} A reference to this vector.
   */
  applyEuler(euler) {
    return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
  }
  /**
   * Applies a rotation specified by an axis and an angle to this vector.
   *
   * @param {Vector3} axis - A normalized vector representing the rotation axis.
   * @param {number} angle - The angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  applyAxisAngle(axis, angle) {
    return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
  }
  /**
   * Multiplies this vector with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix3(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6] * z;
    this.y = e[1] * x + e[4] * y + e[7] * z;
    this.z = e[2] * x + e[5] * y + e[8] * z;
    return this;
  }
  /**
   * Multiplies this vector by the given normal matrix and normalizes
   * the result.
   *
   * @param {Matrix3} m - The normal matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyNormalMatrix(m) {
    return this.applyMatrix3(m).normalize();
  }
  /**
   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
   * divides by perspective.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix4(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
    return this;
  }
  /**
   * Applies the given Quaternion to this vector.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Vector3} A reference to this vector.
   */
  applyQuaternion(q) {
    const vx = this.x, vy = this.y, vz = this.z;
    const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
    const tx = 2 * (qy * vz - qz * vy);
    const ty = 2 * (qz * vx - qx * vz);
    const tz = 2 * (qx * vy - qy * vx);
    this.x = vx + qw * tx + qy * tz - qz * ty;
    this.y = vy + qw * ty + qz * tx - qx * tz;
    this.z = vz + qw * tz + qx * ty - qy * tx;
    return this;
  }
  /**
   * Projects this vector from world space into the camera's normalized
   * device coordinate (NDC) space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  project(camera2) {
    return this.applyMatrix4(camera2.matrixWorldInverse).applyMatrix4(camera2.projectionMatrix);
  }
  /**
   * Unprojects this vector from the camera's normalized device coordinate (NDC)
   * space into world space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  unproject(camera2) {
    return this.applyMatrix4(camera2.projectionMatrixInverse).applyMatrix4(camera2.matrixWorld);
  }
  /**
   * Transforms the direction of this vector by a matrix (the upper left 3 x 3
   * subset of the given 4x4 matrix and then normalizes the result.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Vector3} A reference to this vector.
   */
  transformDirection(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z;
    this.y = e[1] * x + e[5] * y + e[9] * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;
    return this.normalize();
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector3} v - The vector to divide.
   * @return {Vector3} A reference to this vector.
   */
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector3} A reference to this vector.
   */
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  /**
   * If this vector's x, y or z value is greater than the given vector's x, y or z
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  }
  /**
   * If this vector's x, y or z value is less than the given vector's x, y or z
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  }
  /**
   * If this vector's x, y or z value is greater than the max vector's x, y or z
   * value, it is replaced by the corresponding value.
   * If this vector's x, y or z value is less than the min vector's x, y or z value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector3} min - The minimum x, y and z values.
   * @param {Vector3} max - The maximum x, y and z values in the desired range.
   * @return {Vector3} A reference to this vector.
   */
  clamp(min, max) {
    this.x = clamp(this.x, min.x, max.x);
    this.y = clamp(this.y, min.y, max.y);
    this.z = clamp(this.z, min.z, max.z);
    return this;
  }
  /**
   * If this vector's x, y or z values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y or z values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampScalar(minVal, maxVal) {
    this.x = clamp(this.x, minVal, maxVal);
    this.y = clamp(this.y, minVal, maxVal);
    this.z = clamp(this.z, minVal, maxVal);
    return this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector3} A reference to this vector.
   */
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    return this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
   *
   * @return {Vector3} A reference to this vector.
   */
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  }
  // TODO lengthSquared?
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector3} A reference to this vector.
   */
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector3} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    return this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector3} v1 - The first vector.
   * @param {Vector3} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    return this;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the cross product with.
   * @return {Vector3} The result of the cross product.
   */
  cross(v) {
    return this.crossVectors(this, v);
  }
  /**
   * Calculates the cross product of the given vectors and stores the result
   * in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  crossVectors(a, b) {
    const ax = a.x, ay = a.y, az = a.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  /**
   * Projects this vector onto the given one.
   *
   * @param {Vector3} v - The vector to project to.
   * @return {Vector3} A reference to this vector.
   */
  projectOnVector(v) {
    const denominator = v.lengthSq();
    if (denominator === 0) return this.set(0, 0, 0);
    const scalar = v.dot(this) / denominator;
    return this.copy(v).multiplyScalar(scalar);
  }
  /**
   * Projects this vector onto a plane by subtracting this
   * vector projected onto the plane's normal from this vector.
   *
   * @param {Vector3} planeNormal - The plane normal.
   * @return {Vector3} A reference to this vector.
   */
  projectOnPlane(planeNormal) {
    _vector$c.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector$c);
  }
  /**
   * Reflects this vector off a plane orthogonal to the given normal vector.
   *
   * @param {Vector3} normal - The (normalized) normal vector.
   * @return {Vector3} A reference to this vector.
   */
  reflect(normal) {
    return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector3} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(v) {
    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector3} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {Spherical} s - The spherical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromSpherical(s) {
    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The phi angle in radians.
   * @param {number} theta - The theta angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {Cylindrical} c - The cylindrical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindrical(c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle in radians.
   * @param {number} y - The y value.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindricalCoords(radius, theta, y) {
    this.x = radius * Math.sin(theta);
    this.y = y;
    this.z = radius * Math.cos(theta);
    return this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixPosition(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  }
  /**
   * Sets the vector components to the scale elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixScale(m) {
    const sx = this.setFromMatrixColumn(m, 0).length();
    const sy = this.setFromMatrixColumn(m, 1).length();
    const sz = this.setFromMatrixColumn(m, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixColumn(m, index) {
    return this.fromArray(m.elements, index * 4);
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrix3Column(m, index) {
    return this.fromArray(m.elements, index * 3);
  }
  /**
   * Sets the vector components from the given Euler angles.
   *
   * @param {Euler} e - The Euler angles to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromEuler(e) {
    this.x = e._x;
    this.y = e._y;
    this.z = e._z;
    return this;
  }
  /**
   * Sets the vector components from the RGB components of the
   * given color.
   *
   * @param {Color} c - The color to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromColor(c) {
    this.x = c.r;
    this.y = c.g;
    this.z = c.b;
    return this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector3} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
   * and z value to be `array[ offset + 2 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector3} A reference to this vector.
   */
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector3} A reference to this vector.
   */
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
  /**
   * Sets this vector to a uniformly random point on a unit sphere.
   *
   * @return {Vector3} A reference to this vector.
   */
  randomDirection() {
    const theta = Math.random() * Math.PI * 2;
    const u = Math.random() * 2 - 1;
    const c = Math.sqrt(1 - u * u);
    this.x = c * Math.cos(theta);
    this.y = u;
    this.z = c * Math.sin(theta);
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
  }
}
const _vector$c = /* @__PURE__ */ new Vector3();
const _quaternion$4 = /* @__PURE__ */ new Quaternion();
class Box3 {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
    this.isBox3 = true;
    this.min = min;
    this.max = max;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector3} min - The lower boundary of the box.
   * @param {Vector3} max - The upper boundary of the box.
   * @return {Box3} A reference to this bounding box.
   */
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<number>} array - An array holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromArray(array) {
    this.makeEmpty();
    for (let i2 = 0, il = array.length; i2 < il; i2 += 3) {
      this.expandByPoint(_vector$b.fromArray(array, i2));
    }
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromBufferAttribute(attribute) {
    this.makeEmpty();
    for (let i2 = 0, il = attribute.count; i2 < il; i2++) {
      this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i2));
    }
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
   * @return {Box3} A reference to this bounding box.
   */
  setFromPoints(points) {
    this.makeEmpty();
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      this.expandByPoint(points[i2]);
    }
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector3} center - The center of the box.
   * @param {Vector3} size - The x, y and z dimensions of the box.
   * @return {Box3} A reference to this bounding box.
   */
  setFromCenterAndSize(center, size) {
    const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  /**
   * Computes the world-axis-aligned bounding box for the given 3D object
   * (including its children), accounting for the object's, and children's,
   * world transforms. The function may result in a larger box than strictly necessary.
   *
   * @param {Object3D} object - The 3D object to compute the bounding box for.
   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
   * world-axis-aligned bounding box at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  setFromObject(object, precise = false) {
    this.makeEmpty();
    return this.expandByObject(object, precise);
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box3} box - The box to copy.
   * @return {Box3} A reference to this bounding box.
   */
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 3D.
   *
   * @return {Box3} A reference to this bounding box.
   */
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The size.
   */
  getSize(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector3} point - The point that should be included by the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions. The depth of this box will be
   * expanded by the z component of the vector in both directions.
   *
   * @param {Vector3} vector - The vector that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  /**
   * Expands the boundaries of this box to include the given 3D object and
   * its children, accounting for the object's, and children's, world
   * transforms. The function may result in a larger box than strictly
   * necessary (unless the precise parameter is set to true).
   *
   * @param {Object3D} object - The 3D object that should expand the bounding box.
   * @param {boolean} precise - If set to `true`, the method expands the bounding box
   * as little as necessary at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  expandByObject(object, precise = false) {
    object.updateWorldMatrix(false, false);
    const geometry2 = object.geometry;
    if (geometry2 !== void 0) {
      const positionAttribute = geometry2.getAttribute("position");
      if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
        for (let i2 = 0, l = positionAttribute.count; i2 < l; i2++) {
          if (object.isMesh === true) {
            object.getVertexPosition(i2, _vector$b);
          } else {
            _vector$b.fromBufferAttribute(positionAttribute, i2);
          }
          _vector$b.applyMatrix4(object.matrixWorld);
          this.expandByPoint(_vector$b);
        }
      } else {
        if (object.boundingBox !== void 0) {
          if (object.boundingBox === null) {
            object.computeBoundingBox();
          }
          _box$4.copy(object.boundingBox);
        } else {
          if (geometry2.boundingBox === null) {
            geometry2.computeBoundingBox();
          }
          _box$4.copy(geometry2.boundingBox);
        }
        _box$4.applyMatrix4(object.matrixWorld);
        this.union(_box$4);
      }
    }
    const children = object.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      this.expandByObject(children[i2], precise);
    }
    return this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(point) {
    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  /**
   * Returns a point as a proportion of this box's width, height and depth.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A point as a proportion of this box's width, height and depth.
   */
  getParameter(point, target) {
    return target.set(
      (point.x - this.min.x) / (this.max.x - this.min.x),
      (point.y - this.min.y) / (this.max.y - this.min.y),
      (point.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(box) {
    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
  }
  /**
   * Returns `true` if the given bounding sphere intersects with this bounding box.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
   */
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$b);
    return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  /**
   * Returns `true` if the given plane intersects with this bounding box.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether the given plane intersects with this bounding box.
   */
  intersectsPlane(plane) {
    let min, max;
    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }
    return min <= -plane.constant && max >= -plane.constant;
  }
  /**
   * Returns `true` if the given triangle intersects with this bounding box.
   *
   * @param {Triangle} triangle - The triangle to test.
   * @return {boolean} Whether the given triangle intersects with this bounding box.
   */
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center);
    _extents.subVectors(this.max, _center);
    _v0$2.subVectors(triangle.a, _center);
    _v1$7.subVectors(triangle.b, _center);
    _v2$4.subVectors(triangle.c, _center);
    _f0.subVectors(_v1$7, _v0$2);
    _f1.subVectors(_v2$4, _v1$7);
    _f2.subVectors(_v0$2, _v2$4);
    let axes = [
      0,
      -_f0.z,
      _f0.y,
      0,
      -_f1.z,
      _f1.y,
      0,
      -_f2.z,
      _f2.y,
      _f0.z,
      0,
      -_f0.x,
      _f1.z,
      0,
      -_f1.x,
      _f2.z,
      0,
      -_f2.x,
      -_f0.y,
      _f0.x,
      0,
      -_f1.y,
      _f1.x,
      0,
      -_f2.y,
      _f2.x,
      0
    ];
    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
      return false;
    }
    _triangleNormal.crossVectors(_f0, _f1);
    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
    return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector3} point - The point to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(point, target) {
    return target.copy(point).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(point) {
    return this.clampPoint(point, _vector$b).distanceTo(point);
  }
  /**
   * Returns a bounding sphere that encloses this bounding box.
   *
   * @param {Sphere} target - The target sphere that is used to store the method's result.
   * @return {Sphere} The bounding sphere that encloses this bounding box.
   */
  getBoundingSphere(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
    } else {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b).length() * 0.5;
    }
    return target;
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box3} box - The bounding box to intersect with.
   * @return {Box3} A reference to this bounding box.
   */
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty()) this.makeEmpty();
    return this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box3} box - The bounding box that will be unioned with this instance.
   * @return {Box3} A reference to this bounding box.
   */
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  /**
   * Transforms this bounding box by the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Box3} A reference to this bounding box.
   */
  applyMatrix4(matrix) {
    if (this.isEmpty()) return this;
    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points);
    return this;
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 3D space.
   *
   * @param {Vector3} offset - The offset that should be used to translate the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box3} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
}
const _points = [
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3()
];
const _vector$b = /* @__PURE__ */ new Vector3();
const _box$4 = /* @__PURE__ */ new Box3();
const _v0$2 = /* @__PURE__ */ new Vector3();
const _v1$7 = /* @__PURE__ */ new Vector3();
const _v2$4 = /* @__PURE__ */ new Vector3();
const _f0 = /* @__PURE__ */ new Vector3();
const _f1 = /* @__PURE__ */ new Vector3();
const _f2 = /* @__PURE__ */ new Vector3();
const _center = /* @__PURE__ */ new Vector3();
const _extents = /* @__PURE__ */ new Vector3();
const _triangleNormal = /* @__PURE__ */ new Vector3();
const _testAxis = /* @__PURE__ */ new Vector3();
function satForAxes(axes, v0, v1, v2, extents) {
  for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {
    _testAxis.fromArray(axes, i2);
    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p0 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v2.dot(_testAxis);
    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
      return false;
    }
  }
  return true;
}
const _box$3 = /* @__PURE__ */ new Box3();
const _v1$6 = /* @__PURE__ */ new Vector3();
const _v2$3 = /* @__PURE__ */ new Vector3();
class Sphere {
  /**
   * Constructs a new sphere.
   *
   * @param {Vector3} [center=(0,0,0)] - The center of the sphere
   * @param {number} [radius=-1] - The radius of the sphere.
   */
  constructor(center = new Vector3(), radius = -1) {
    this.isSphere = true;
    this.center = center;
    this.radius = radius;
  }
  /**
   * Sets the sphere's components by copying the given values.
   *
   * @param {Vector3} center - The center.
   * @param {number} radius - The radius.
   * @return {Sphere} A reference to this sphere.
   */
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  /**
   * Computes the minimum bounding sphere for list of points.
   * If the optional center point is given, it is used as the sphere's
   * center. Otherwise, the center of the axis-aligned bounding box
   * encompassing the points is calculated.
   *
   * @param {Array<Vector3>} points - A list of points in 3D space.
   * @param {Vector3} [optionalCenter] - The center of the sphere.
   * @return {Sphere} A reference to this sphere.
   */
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$3.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  /**
   * Copies the values of the given sphere to this instance.
   *
   * @param {Sphere} sphere - The sphere to copy.
   * @return {Sphere} A reference to this sphere.
   */
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  /**
   * Returns `true` if the sphere is empty (the radius set to a negative number).
   *
   * Spheres with a radius of `0` contain only their center point and are not
   * considered to be empty.
   *
   * @return {boolean} Whether this sphere is empty or not.
   */
  isEmpty() {
    return this.radius < 0;
  }
  /**
   * Makes this sphere empty which means in encloses a zero space in 3D.
   *
   * @return {Sphere} A reference to this sphere.
   */
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  /**
   * Returns `true` if this sphere contains the given point inclusive of
   * the surface of the sphere.
   *
   * @param {Vector3} point - The point to check.
   * @return {boolean} Whether this sphere contains the given point or not.
   */
  containsPoint(point) {
    return point.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  /**
   * Returns the closest distance from the boundary of the sphere to the
   * given point. If the sphere contains the point, the distance will
   * be negative.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The distance to the point.
   */
  distanceToPoint(point) {
    return point.distanceTo(this.center) - this.radius;
  }
  /**
   * Returns `true` if this sphere intersects with the given one.
   *
   * @param {Sphere} sphere - The sphere to test.
   * @return {boolean} Whether this sphere intersects with the given one or not.
   */
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  /**
   * Returns `true` if this sphere intersects with the given box.
   *
   * @param {Box3} box - The box to test.
   * @return {boolean} Whether this sphere intersects with the given box or not.
   */
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  /**
   * Returns `true` if this sphere intersects with the given plane.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether this sphere intersects with the given plane or not.
   */
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  /**
   * Clamps a point within the sphere. If the point is outside the sphere, it
   * will clamp it to the closest point on the edge of the sphere. Points
   * already inside the sphere will not be affected.
   *
   * @param {Vector3} point - The plane to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(point, target) {
    const deltaLengthSq = this.center.distanceToSquared(point);
    target.copy(point);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  /**
   * Returns a bounding box that encloses this sphere.
   *
   * @param {Box3} target - The target box that is used to store the method's result.
   * @return {Box3} The bounding box that encloses this sphere.
   */
  getBoundingBox(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  /**
   * Transforms this sphere with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Sphere} A reference to this sphere.
   */
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  /**
   * Translates the sphere's center by the given offset.
   *
   * @param {Vector3} offset - The offset.
   * @return {Sphere} A reference to this sphere.
   */
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  /**
   * Expands the boundaries of this sphere to include the given point.
   *
   * @param {Vector3} point - The point to include.
   * @return {Sphere} A reference to this sphere.
   */
  expandByPoint(point) {
    if (this.isEmpty()) {
      this.center.copy(point);
      this.radius = 0;
      return this;
    }
    _v1$6.subVectors(point, this.center);
    const lengthSq = _v1$6.lengthSq();
    if (lengthSq > this.radius * this.radius) {
      const length = Math.sqrt(lengthSq);
      const delta = (length - this.radius) * 0.5;
      this.center.addScaledVector(_v1$6, delta / length);
      this.radius += delta;
    }
    return this;
  }
  /**
   * Expands this sphere to enclose both the original sphere and the given sphere.
   *
   * @param {Sphere} sphere - The sphere to include.
   * @return {Sphere} A reference to this sphere.
   */
  union(sphere) {
    if (sphere.isEmpty()) {
      return this;
    }
    if (this.isEmpty()) {
      this.copy(sphere);
      return this;
    }
    if (this.center.equals(sphere.center) === true) {
      this.radius = Math.max(this.radius, sphere.radius);
    } else {
      _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
      this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
      this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
    }
    return this;
  }
  /**
   * Returns `true` if this sphere is equal with the given one.
   *
   * @param {Sphere} sphere - The sphere to test for equality.
   * @return {boolean} Whether this bounding sphere is equal with the given one.
   */
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
  /**
   * Returns a new sphere with copied values from this instance.
   *
   * @return {Sphere} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const _vector$a = /* @__PURE__ */ new Vector3();
const _segCenter = /* @__PURE__ */ new Vector3();
const _segDir = /* @__PURE__ */ new Vector3();
const _diff = /* @__PURE__ */ new Vector3();
const _edge1 = /* @__PURE__ */ new Vector3();
const _edge2 = /* @__PURE__ */ new Vector3();
const _normal$1 = /* @__PURE__ */ new Vector3();
class Ray {
  /**
   * Constructs a new ray.
   *
   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
   */
  constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
    this.origin = origin;
    this.direction = direction;
  }
  /**
   * Sets the ray's components by copying the given values.
   *
   * @param {Vector3} origin - The origin.
   * @param {Vector3} direction - The direction.
   * @return {Ray} A reference to this ray.
   */
  set(origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  }
  /**
   * Copies the values of the given ray to this instance.
   *
   * @param {Ray} ray - The ray to copy.
   * @return {Ray} A reference to this ray.
   */
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  /**
   * Returns a vector that is located at a given distance along this ray.
   *
   * @param {number} t - The distance along the ray to retrieve a position for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A position on the ray.
   */
  at(t2, target) {
    return target.copy(this.origin).addScaledVector(this.direction, t2);
  }
  /**
   * Adjusts the direction of the ray to point at the given vector in world space.
   *
   * @param {Vector3} v - The target position.
   * @return {Ray} A reference to this ray.
   */
  lookAt(v) {
    this.direction.copy(v).sub(this.origin).normalize();
    return this;
  }
  /**
   * Shift the origin of this ray along its direction by the given distance.
   *
   * @param {number} t - The distance along the ray to interpolate.
   * @return {Ray} A reference to this ray.
   */
  recast(t2) {
    this.origin.copy(this.at(t2, _vector$a));
    return this;
  }
  /**
   * Returns the point along this ray that is closest to the given point.
   *
   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on this ray.
   */
  closestPointToPoint(point, target) {
    target.subVectors(point, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
  }
  /**
   * Returns the distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The distance.
   */
  distanceToPoint(point) {
    return Math.sqrt(this.distanceSqToPoint(point));
  }
  /**
   * Returns the squared distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The squared distance.
   */
  distanceSqToPoint(point) {
    const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point);
    }
    _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
    return _vector$a.distanceToSquared(point);
  }
  /**
   * Returns the squared distance between this ray and the given line segment.
   *
   * @param {Vector3} v0 - The start point of the line segment.
   * @param {Vector3} v1 - The end point of the line segment.
   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
   * @return {number} The squared distance.
   */
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir.copy(v1).sub(v0).normalize();
    _diff.copy(this.origin).sub(_segCenter);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir);
    const b0 = _diff.dot(this.direction);
    const b1 = -_diff.dot(_segDir);
    const c = _diff.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
    }
    return sqrDist;
  }
  /**
   * Intersects this ray with the given sphere, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectSphere(sphere, target) {
    _vector$a.subVectors(sphere.center, this.origin);
    const tca = _vector$a.dot(this.direction);
    const d2 = _vector$a.dot(_vector$a) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2) return null;
    const thc = Math.sqrt(radius2 - d2);
    const t0 = tca - thc;
    const t1 = tca + thc;
    if (t1 < 0) return null;
    if (t0 < 0) return this.at(t1, target);
    return this.at(t0, target);
  }
  /**
   * Returns `true` if this ray intersects with the given sphere.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @return {boolean} Whether this ray intersects with the given sphere or not.
   */
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  /**
   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
   * does not intersect with the plane.
   *
   * @param {Plane} plane - The plane to compute the distance to.
   * @return {?number} Whether this ray intersects with the given sphere or not.
   */
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t2 = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t2 >= 0 ? t2 : null;
  }
  /**
   * Intersects this ray with the given plane, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Plane} plane - The plane to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectPlane(plane, target) {
    const t2 = this.distanceToPlane(plane);
    if (t2 === null) {
      return null;
    }
    return this.at(t2, target);
  }
  /**
   * Returns `true` if this ray intersects with the given plane.
   *
   * @param {Plane} plane - The plane to intersect.
   * @return {boolean} Whether this ray intersects with the given plane or not.
   */
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  /**
   * Intersects this ray with the given bounding box, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Box3} box - The box to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax) return null;
    if (tymin > tmin || isNaN(tmin)) tmin = tymin;
    if (tymax < tmax || isNaN(tmax)) tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  /**
   * Returns `true` if this ray intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this ray intersects with the given box or not.
   */
  intersectsBox(box) {
    return this.intersectBox(box, _vector$a) !== null;
  }
  /**
   * Intersects this ray with the given triangle, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Vector3} a - The first vertex of the triangle.
   * @param {Vector3} b - The second vertex of the triangle.
   * @param {Vector3} c - The third vertex of the triangle.
   * @param {boolean} backfaceCulling - Whether to use backface culling or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectTriangle(a, b, c, backfaceCulling, target) {
    _edge1.subVectors(b, a);
    _edge2.subVectors(c, a);
    _normal$1.crossVectors(_edge1, _edge2);
    let DdN = this.direction.dot(_normal$1);
    let sign;
    if (DdN > 0) {
      if (backfaceCulling) return null;
      sign = 1;
    } else if (DdN < 0) {
      sign = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff.subVectors(this.origin, a);
    const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign * _diff.dot(_normal$1);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  /**
   * Transforms this ray with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix4 - The transformation matrix.
   * @return {Ray} A reference to this ray.
   */
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  /**
   * Returns `true` if this ray is equal with the given one.
   *
   * @param {Ray} ray - The ray to test for equality.
   * @return {boolean} Whether this ray is equal with the given one.
   */
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
  /**
   * Returns a new ray with copied values from this instance.
   *
   * @return {Ray} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class Matrix4 {
  /**
   * Constructs a new 4x4 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   */
  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    Matrix4.prototype.isMatrix4 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   * @return {Matrix4} A reference to this matrix.
   */
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  }
  /**
   * Sets this matrix to the 4x4 identity matrix.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix4} A clone of this instance.
   */
  clone() {
    return new Matrix4().fromArray(this.elements);
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix4} m - The matrix to copy.
   * @return {Matrix4} A reference to this matrix.
   */
  copy(m) {
    const te = this.elements;
    const me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];
    return this;
  }
  /**
   * Copies the translation component of the given matrix
   * into this matrix's translation component.
   *
   * @param {Matrix4} m - The matrix to copy the translation component.
   * @return {Matrix4} A reference to this matrix.
   */
  copyPosition(m) {
    const te = this.elements, me = m.elements;
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    return this;
  }
  /**
   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  setFromMatrix3(m) {
    const me = m.elements;
    this.set(
      me[0],
      me[3],
      me[6],
      0,
      me[1],
      me[4],
      me[7],
      0,
      me[2],
      me[5],
      me[8],
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  /**
   * Sets the given basis vectors to this matrix.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(
      xAxis.x,
      yAxis.x,
      zAxis.x,
      0,
      xAxis.y,
      yAxis.y,
      zAxis.y,
      0,
      xAxis.z,
      yAxis.z,
      zAxis.z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Extracts the rotation component of the given matrix
   * into this matrix's rotation component.
   *
   * Note: This method does not support reflection matrices.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  extractRotation(m) {
    const te = this.elements;
    const me = m.elements;
    const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
    const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
    const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
    te[0] = me[0] * scaleX;
    te[1] = me[1] * scaleX;
    te[2] = me[2] * scaleX;
    te[3] = 0;
    te[4] = me[4] * scaleY;
    te[5] = me[5] * scaleY;
    te[6] = me[6] * scaleY;
    te[7] = 0;
    te[8] = me[8] * scaleZ;
    te[9] = me[9] * scaleZ;
    te[10] = me[10] * scaleZ;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  /**
   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
   * the rotation specified by the given Euler angles. The rest of
   * the matrix is set to the identity. Depending on the {@link Euler#order},
   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
   * for a complete list.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromEuler(euler) {
    const te = this.elements;
    const x = euler.x, y = euler.y, z = euler.z;
    const a = Math.cos(x), b = Math.sin(x);
    const c = Math.cos(y), d = Math.sin(y);
    const e = Math.cos(z), f = Math.sin(z);
    if (euler.order === "XYZ") {
      const ae = a * e, af = a * f, be = b * e, bf = b * f;
      te[0] = c * e;
      te[4] = -c * f;
      te[8] = d;
      te[1] = af + be * d;
      te[5] = ae - bf * d;
      te[9] = -b * c;
      te[2] = bf - ae * d;
      te[6] = be + af * d;
      te[10] = a * c;
    } else if (euler.order === "YXZ") {
      const ce = c * e, cf = c * f, de = d * e, df = d * f;
      te[0] = ce + df * b;
      te[4] = de * b - cf;
      te[8] = a * d;
      te[1] = a * f;
      te[5] = a * e;
      te[9] = -b;
      te[2] = cf * b - de;
      te[6] = df + ce * b;
      te[10] = a * c;
    } else if (euler.order === "ZXY") {
      const ce = c * e, cf = c * f, de = d * e, df = d * f;
      te[0] = ce - df * b;
      te[4] = -a * f;
      te[8] = de + cf * b;
      te[1] = cf + de * b;
      te[5] = a * e;
      te[9] = df - ce * b;
      te[2] = -a * d;
      te[6] = b;
      te[10] = a * c;
    } else if (euler.order === "ZYX") {
      const ae = a * e, af = a * f, be = b * e, bf = b * f;
      te[0] = c * e;
      te[4] = be * d - af;
      te[8] = ae * d + bf;
      te[1] = c * f;
      te[5] = bf * d + ae;
      te[9] = af * d - be;
      te[2] = -d;
      te[6] = b * c;
      te[10] = a * c;
    } else if (euler.order === "YZX") {
      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = bd - ac * f;
      te[8] = bc * f + ad;
      te[1] = f;
      te[5] = a * e;
      te[9] = -b * e;
      te[2] = -d * e;
      te[6] = ad * f + bc;
      te[10] = ac - bd * f;
    } else if (euler.order === "XZY") {
      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = -f;
      te[8] = d * e;
      te[1] = ac * f + bd;
      te[5] = a * e;
      te[9] = ad * f - bc;
      te[2] = bc * f - ad;
      te[6] = b * e;
      te[10] = bd * f + ac;
    }
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  /**
   * Sets the rotation component of this matrix to the rotation specified by
   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
   * The rest of the matrix is set to the identity.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromQuaternion(q) {
    return this.compose(_zero, q, _one);
  }
  /**
   * Sets the rotation component of the transformation matrix, looking from `eye` towards
   * `target`, and oriented by the up-direction.
   *
   * @param {Vector3} eye - The eye vector.
   * @param {Vector3} target - The target vector.
   * @param {Vector3} up - The up vector.
   * @return {Matrix4} A reference to this matrix.
   */
  lookAt(eye, target, up) {
    const te = this.elements;
    _z.subVectors(eye, target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    _x.crossVectors(up, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
    }
    _x.normalize();
    _y.crossVectors(_z, _x);
    te[0] = _x.x;
    te[4] = _y.x;
    te[8] = _z.x;
    te[1] = _x.y;
    te[5] = _y.y;
    te[9] = _z.y;
    te[2] = _x.z;
    te[6] = _y.z;
    te[10] = _z.z;
    return this;
  }
  /**
   * Post-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  /**
   * Pre-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  /**
   * Multiples the given 4x4 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix4} a - The first matrix.
   * @param {Matrix4} b - The second matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[4] *= s;
    te[8] *= s;
    te[12] *= s;
    te[1] *= s;
    te[5] *= s;
    te[9] *= s;
    te[13] *= s;
    te[2] *= s;
    te[6] *= s;
    te[10] *= s;
    te[14] *= s;
    te[3] *= s;
    te[7] *= s;
    te[11] *= s;
    te[15] *= s;
    return this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const te = this.elements;
    const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  transpose() {
    const te = this.elements;
    let tmp;
    tmp = te[1];
    te[1] = te[4];
    te[4] = tmp;
    tmp = te[2];
    te[2] = te[8];
    te[8] = tmp;
    tmp = te[6];
    te[6] = te[9];
    te[9] = tmp;
    tmp = te[3];
    te[3] = te[12];
    te[12] = tmp;
    tmp = te[7];
    te[7] = te[13];
    te[13] = tmp;
    tmp = te[11];
    te[11] = te[14];
    te[14] = tmp;
    return this;
  }
  /**
   * Sets the position component for this matrix from the given vector,
   * without affecting the rest of the matrix.
   *
   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
   * @param {number} y - The y component of the vector.
   * @param {number} z - The z component of the vector.
   * @return {Matrix4} A reference to this matrix.
   */
  setPosition(x, y, z) {
    const te = this.elements;
    if (x.isVector3) {
      te[12] = x.x;
      te[13] = x.y;
      te[14] = x.z;
    } else {
      te[12] = x;
      te[13] = y;
      te[14] = z;
    }
    return this;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t12 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  /**
   * Multiplies the columns of this matrix by the given vector.
   *
   * @param {Vector3} v - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  scale(v) {
    const te = this.elements;
    const x = v.x, y = v.y, z = v.z;
    te[0] *= x;
    te[4] *= y;
    te[8] *= z;
    te[1] *= x;
    te[5] *= y;
    te[9] *= z;
    te[2] *= x;
    te[6] *= y;
    te[10] *= z;
    te[3] *= x;
    te[7] *= y;
    te[11] *= z;
    return this;
  }
  /**
   * Gets the maximum scale value of the three axes.
   *
   * @return {number} The maximum scale.
   */
  getMaxScaleOnAxis() {
    const te = this.elements;
    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  /**
   * Sets this matrix as a translation transform from the given vector.
   *
   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @param {number} z - The amount to translate in the z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeTranslation(x, y, z) {
    if (x.isVector3) {
      this.set(
        1,
        0,
        0,
        x.x,
        0,
        1,
        0,
        x.y,
        0,
        0,
        1,
        x.z,
        0,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        0,
        x,
        0,
        1,
        0,
        y,
        0,
        0,
        1,
        z,
        0,
        0,
        0,
        1
      );
    }
    return this;
  }
  /**
   * Sets this matrix as a rotational transformation around the X axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationX(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      1,
      0,
      0,
      0,
      0,
      c,
      -s,
      0,
      0,
      s,
      c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Y axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationY(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      c,
      0,
      s,
      0,
      0,
      1,
      0,
      0,
      -s,
      0,
      c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Z axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationZ(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      c,
      -s,
      0,
      0,
      s,
      c,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a rotational transformation around the given axis by
   * the given angle.
   *
   * This is a somewhat controversial but mathematically sound alternative to
   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
   *
   * @param {Vector3} axis - The normalized rotation axis.
   * @param {number} angle - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationAxis(axis, angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    const t2 = 1 - c;
    const x = axis.x, y = axis.y, z = axis.z;
    const tx = t2 * x, ty = t2 * y;
    this.set(
      tx * x + c,
      tx * y - s * z,
      tx * z + s * y,
      0,
      tx * y + s * z,
      ty * y + c,
      ty * z - s * x,
      0,
      tx * z - s * y,
      ty * z + s * x,
      t2 * z * z + c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a scale transformation.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @param {number} z - The amount to scale in the Z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeScale(x, y, z) {
    this.set(
      x,
      0,
      0,
      0,
      0,
      y,
      0,
      0,
      0,
      0,
      z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix as a shear transformation.
   *
   * @param {number} xy - The amount to shear X by Y.
   * @param {number} xz - The amount to shear X by Z.
   * @param {number} yx - The amount to shear Y by X.
   * @param {number} yz - The amount to shear Y by Z.
   * @param {number} zx - The amount to shear Z by X.
   * @param {number} zy - The amount to shear Z by Y.
   * @return {Matrix4} A reference to this matrix.
   */
  makeShear(xy, xz, yx, yz, zx, zy) {
    this.set(
      1,
      yx,
      zx,
      0,
      xy,
      1,
      zy,
      0,
      xz,
      yz,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets this matrix to the transformation composed of the given position,
   * rotation (Quaternion) and scale.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  compose(position, quaternion, scale) {
    const te = this.elements;
    const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    const x2 = x + x, y2 = y + y, z2 = z + z;
    const xx = x * x2, xy = x * y2, xz = x * z2;
    const yy = y * y2, yz = y * z2, zz = z * z2;
    const wx = w * x2, wy = w * y2, wz = w * z2;
    const sx = scale.x, sy = scale.y, sz = scale.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  }
  /**
   * Decomposes this matrix into its position, rotation and scale components
   * and provides the result in the given objects.
   *
   * Note: Not all matrices are decomposable in this way. For example, if an
   * object has a non-uniformly scaled parent, then the object's world matrix
   * may not be decomposable, and this method may not be appropriate.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  decompose(position, quaternion, scale) {
    const te = this.elements;
    let sx = _v1$5.set(te[0], te[1], te[2]).length();
    const sy = _v1$5.set(te[4], te[5], te[6]).length();
    const sz = _v1$5.set(te[8], te[9], te[10]).length();
    const det = this.determinant();
    if (det < 0) sx = -sx;
    position.x = te[12];
    position.y = te[13];
    position.z = te[14];
    _m1$2.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1$2.elements[0] *= invSX;
    _m1$2.elements[1] *= invSX;
    _m1$2.elements[2] *= invSX;
    _m1$2.elements[4] *= invSY;
    _m1$2.elements[5] *= invSY;
    _m1$2.elements[6] *= invSY;
    _m1$2.elements[8] *= invSZ;
    _m1$2.elements[9] *= invSZ;
    _m1$2.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1$2);
    scale.x = sx;
    scale.y = sy;
    scale.z = sz;
    return this;
  }
  /**
  	 * Creates a perspective projection matrix. This is used internally by
  	 * {@link PerspectiveCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const x = 2 * near / (right - left);
    const y = 2 * near / (top - bottom);
    const a = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    let c, d;
    if (coordinateSystem === WebGLCoordinateSystem) {
      c = -(far + near) / (far - near);
      d = -2 * far * near / (far - near);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      c = -far / (far - near);
      d = -far * near / (far - near);
    } else {
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = x;
    te[4] = 0;
    te[8] = a;
    te[12] = 0;
    te[1] = 0;
    te[5] = y;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c;
    te[14] = d;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  }
  /**
  	 * Creates a orthographic projection matrix. This is used internally by
  	 * {@link OrthographicCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const w = 1 / (right - left);
    const h = 1 / (top - bottom);
    const p = 1 / (far - near);
    const x = (right + left) * w;
    const y = (top + bottom) * h;
    let z, zInv;
    if (coordinateSystem === WebGLCoordinateSystem) {
      z = (far + near) * p;
      zInv = -2 * p;
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      z = near * p;
      zInv = -1 * p;
    } else {
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = 2 * w;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x;
    te[1] = 0;
    te[5] = 2 * h;
    te[9] = 0;
    te[13] = -y;
    te[2] = 0;
    te[6] = 0;
    te[10] = zInv;
    te[14] = -z;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix4} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 16; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix4} A reference to this matrix.
   */
  fromArray(array, offset = 0) {
    for (let i2 = 0; i2 < 16; i2++) {
      this.elements[i2] = array[i2 + offset];
    }
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    array[offset + 9] = te[9];
    array[offset + 10] = te[10];
    array[offset + 11] = te[11];
    array[offset + 12] = te[12];
    array[offset + 13] = te[13];
    array[offset + 14] = te[14];
    array[offset + 15] = te[15];
    return array;
  }
}
const _v1$5 = /* @__PURE__ */ new Vector3();
const _m1$2 = /* @__PURE__ */ new Matrix4();
const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
const _x = /* @__PURE__ */ new Vector3();
const _y = /* @__PURE__ */ new Vector3();
const _z = /* @__PURE__ */ new Vector3();
const _matrix$2 = /* @__PURE__ */ new Matrix4();
const _quaternion$3 = /* @__PURE__ */ new Quaternion();
class Euler {
  /**
   * Constructs a new euler instance.
   *
   * @param {number} [x=0] - The angle of the x axis in radians.
   * @param {number} [y=0] - The angle of the y axis in radians.
   * @param {number} [z=0] - The angle of the z axis in radians.
   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
   */
  constructor(x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {
    this.isEuler = true;
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order;
  }
  /**
   * The angle of the x axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  /**
   * The angle of the y axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  /**
   * The angle of the z axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  /**
   * A string representing the order that the rotations are applied.
   *
   * @type {string}
   * @default 'XYZ'
   */
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  /**
   * Sets the Euler components.
   *
   * @param {number} x - The angle of the x axis in radians.
   * @param {number} y - The angle of the y axis in radians.
   * @param {number} z - The angle of the z axis in radians.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  set(x, y, z, order = this._order) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order;
    this._onChangeCallback();
    return this;
  }
  /**
   * Returns a new Euler instance with copied values from this instance.
   *
   * @return {Euler} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  /**
   * Copies the values of the given Euler instance to this instance.
   *
   * @param {Euler} euler - The Euler instance to copy.
   * @return {Euler} A reference to this Euler instance.
   */
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  /**
   * Sets the angles of this Euler instance from a pure rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromRotationMatrix(m, order = this._order, update2 = true) {
    const te = m.elements;
    const m11 = te[0], m12 = te[4], m13 = te[8];
    const m21 = te[1], m22 = te[5], m23 = te[9];
    const m31 = te[2], m32 = te[6], m33 = te[10];
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update2 === true) this._onChangeCallback();
    return this;
  }
  /**
   * Sets the angles of this Euler instance from a normalized quaternion.
   *
   * @param {Quaternion} q - A normalized Quaternion.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromQuaternion(q, order, update2) {
    _matrix$2.makeRotationFromQuaternion(q);
    return this.setFromRotationMatrix(_matrix$2, order, update2);
  }
  /**
   * Sets the angles of this Euler instance from the given vector.
   *
   * @param {Vector3} v - The vector.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromVector3(v, order = this._order) {
    return this.set(v.x, v.y, v.z, order);
  }
  /**
   * Resets the euler angle with a new order by creating a quaternion from this
   * euler angle and then setting this euler angle with the quaternion and the
   * new order.
   *
   * Warning: This discards revolution information.
   *
   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  reorder(newOrder) {
    _quaternion$3.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$3, newOrder);
  }
  /**
   * Returns `true` if this Euler instance is equal with the given one.
   *
   * @param {Euler} euler - The Euler instance to test for equality.
   * @return {boolean} Whether this Euler instance is equal with the given one.
   */
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  /**
   * Sets this Euler instance's components to values from the given array. The first three
   * entries of the array are assign to the x,y and z components. An optional fourth entry
   * defines the Euler order.
   *
   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
   * @return {Euler} A reference to this Euler instance.
   */
  fromArray(array) {
    this._x = array[0];
    this._y = array[1];
    this._z = array[2];
    if (array[3] !== void 0) this._order = array[3];
    this._onChangeCallback();
    return this;
  }
  /**
   * Writes the components of this Euler instance to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number,number,number,string>} The Euler components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._order;
    return array;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._order;
  }
}
Euler.DEFAULT_ORDER = "XYZ";
class Layers {
  /**
   * Constructs a new layers instance, with membership
   * initially set to layer `0`.
   */
  constructor() {
    this.mask = 1 | 0;
  }
  /**
   * Sets membership to the given layer, and remove membership all other layers.
   *
   * @param {number} layer - The layer to set.
   */
  set(layer) {
    this.mask = (1 << layer | 0) >>> 0;
  }
  /**
   * Adds membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  enable(layer) {
    this.mask |= 1 << layer | 0;
  }
  /**
   * Adds membership to all layers.
   */
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  /**
   * Toggles the membership of the given layer.
   *
   * @param {number} layer - The layer to toggle.
   */
  toggle(layer) {
    this.mask ^= 1 << layer | 0;
  }
  /**
   * Removes membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  disable(layer) {
    this.mask &= ~(1 << layer | 0);
  }
  /**
   * Removes the membership from all layers.
   */
  disableAll() {
    this.mask = 0;
  }
  /**
   * Returns `true` if this and the given layers object have at least one
   * layer in common.
   *
   * @param {Layers} layers - The layers to test.
   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
   */
  test(layers) {
    return (this.mask & layers.mask) !== 0;
  }
  /**
   * Returns `true` if the given layer is enabled.
   *
   * @param {number} layer - The layer to test.
   * @return {boolean } Whether the given layer is enabled or not.
   */
  isEnabled(layer) {
    return (this.mask & (1 << layer | 0)) !== 0;
  }
}
let _object3DId = 0;
const _v1$4 = /* @__PURE__ */ new Vector3();
const _q1 = /* @__PURE__ */ new Quaternion();
const _m1$1$1 = /* @__PURE__ */ new Matrix4();
const _target = /* @__PURE__ */ new Vector3();
const _position$3 = /* @__PURE__ */ new Vector3();
const _scale$2 = /* @__PURE__ */ new Vector3();
const _quaternion$2 = /* @__PURE__ */ new Quaternion();
const _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
const _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
const _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
const _addedEvent = { type: "added" };
const _removedEvent = { type: "removed" };
const _childaddedEvent = { type: "childadded", child: null };
const _childremovedEvent = { type: "childremoved", child: null };
class Object3D extends EventDispatcher {
  /**
   * Constructs a new 3D object.
   */
  constructor() {
    super();
    this.isObject3D = true;
    Object.defineProperty(this, "id", { value: _object3DId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = Object3D.DEFAULT_UP.clone();
    const position = new Vector3();
    const rotation = new Euler();
    const quaternion = new Quaternion();
    const scale = new Vector3(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      /**
       * Represents the object's local position.
       *
       * @name Object3D#position
       * @type {Vector3}
       * @default (0,0,0)
       */
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      /**
       * Represents the object's local rotation as Euler angles, in radians.
       *
       * @name Object3D#rotation
       * @type {Euler}
       * @default (0,0,0)
       */
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      /**
       * Represents the object's local rotation as Quaternions.
       *
       * @name Object3D#quaternion
       * @type {Quaternion}
       */
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      /**
       * Represents the object's local scale.
       *
       * @name Object3D#scale
       * @type {Vector3}
       * @default (1,1,1)
       */
      scale: {
        configurable: true,
        enumerable: true,
        value: scale
      },
      /**
       * Represents the object's model-view matrix.
       *
       * @name Object3D#modelViewMatrix
       * @type {Matrix4}
       */
      modelViewMatrix: {
        value: new Matrix4()
      },
      /**
       * Represents the object's normal matrix.
       *
       * @name Object3D#normalMatrix
       * @type {Matrix3}
       */
      normalMatrix: {
        value: new Matrix3()
      }
    });
    this.matrix = new Matrix4();
    this.matrixWorld = new Matrix4();
    this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
    this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.customDepthMaterial = void 0;
    this.customDistanceMaterial = void 0;
    this.userData = {};
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeShadow() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onAfterShadow() {
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onAfterRender() {
  }
  /**
   * Applies the given transformation matrix to the object and updates the object's position,
   * rotation and scale.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   */
  applyMatrix4(matrix) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  /**
   * Applies a rotation represented by given the quaternion to the 3D object.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Object3D} A reference to this instance.
   */
  applyQuaternion(q) {
    this.quaternion.premultiply(q);
    return this;
  }
  /**
   * Sets the given rotation represented as an axis/angle couple to the 3D object.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   */
  setRotationFromAxisAngle(axis, angle) {
    this.quaternion.setFromAxisAngle(axis, angle);
  }
  /**
   * Sets the given rotation represented as Euler angles to the 3D object.
   *
   * @param {Euler} euler - The Euler angles.
   */
  setRotationFromEuler(euler) {
    this.quaternion.setFromEuler(euler, true);
  }
  /**
   * Sets the given rotation represented as rotation matrix to the 3D object.
   *
   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
   * a pure rotation matrix (i.e, unscaled).
   */
  setRotationFromMatrix(m) {
    this.quaternion.setFromRotationMatrix(m);
  }
  /**
   * Sets the given rotation represented as a Quaternion to the 3D object.
   *
   * @param {Quaternion} q - The Quaternion
   */
  setRotationFromQuaternion(q) {
    this.quaternion.copy(q);
  }
  /**
   * Rotates the 3D object along an axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnAxis(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.multiply(_q1);
    return this;
  }
  /**
   * Rotates the 3D object along an axis in world space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnWorldAxis(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.premultiply(_q1);
    return this;
  }
  /**
   * Rotates the 3D object around its X axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateX(angle) {
    return this.rotateOnAxis(_xAxis, angle);
  }
  /**
   * Rotates the 3D object around its Y axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateY(angle) {
    return this.rotateOnAxis(_yAxis, angle);
  }
  /**
   * Rotates the 3D object around its Z axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateZ(angle) {
    return this.rotateOnAxis(_zAxis, angle);
  }
  /**
   * Translate the 3D object by a distance along the given axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateOnAxis(axis, distance) {
    _v1$4.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$4.multiplyScalar(distance));
    return this;
  }
  /**
   * Translate the 3D object by a distance along its X-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateX(distance) {
    return this.translateOnAxis(_xAxis, distance);
  }
  /**
   * Translate the 3D object by a distance along its Y-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateY(distance) {
    return this.translateOnAxis(_yAxis, distance);
  }
  /**
   * Translate the 3D object by a distance along its Z-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateZ(distance) {
    return this.translateOnAxis(_zAxis, distance);
  }
  /**
   * Converts the given vector from this 3D object's local space to world space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  localToWorld(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(this.matrixWorld);
  }
  /**
   * Converts the given vector from this 3D object's word space to local space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  worldToLocal(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(_m1$1$1.copy(this.matrixWorld).invert());
  }
  /**
   * Rotates the object to face a point in world space.
   *
   * This method does not support objects having non-uniformly-scaled parent(s).
   *
   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
   * @param {number} [y] - The y coordinate in world space.
   * @param {number} [z] - The z coordinate in world space.
   */
  lookAt(x, y, z) {
    if (x.isVector3) {
      _target.copy(x);
    } else {
      _target.set(x, y, z);
    }
    const parent2 = this.parent;
    this.updateWorldMatrix(true, false);
    _position$3.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$1$1.lookAt(_position$3, _target, this.up);
    } else {
      _m1$1$1.lookAt(_target, _position$3, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$1$1);
    if (parent2) {
      _m1$1$1.extractRotation(parent2.matrixWorld);
      _q1.setFromRotationMatrix(_m1$1$1);
      this.quaternion.premultiply(_q1.invert());
    }
  }
  /**
   * Adds the given 3D object as a child to this 3D object. An arbitrary number of
   * objects may be added. Any current parent on an object passed in here will be
   * removed, since an object can have at most one parent.
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to add.
   * @return {Object3D} A reference to this instance.
   */
  add(object) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.add(arguments[i2]);
      }
      return this;
    }
    if (object === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
      return this;
    }
    if (object && object.isObject3D) {
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
    }
    return this;
  }
  /**
   * Removes the given 3D object as child from this 3D object.
   * An arbitrary number of objects may be removed.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @param {Object3D} object - The 3D object to remove.
   * @return {Object3D} A reference to this instance.
   */
  remove(object) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.remove(arguments[i2]);
      }
      return this;
    }
    const index = this.children.indexOf(object);
    if (index !== -1) {
      object.parent = null;
      this.children.splice(index, 1);
      object.dispatchEvent(_removedEvent);
      _childremovedEvent.child = object;
      this.dispatchEvent(_childremovedEvent);
      _childremovedEvent.child = null;
    }
    return this;
  }
  /**
   * Removes this 3D object from its current parent.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  removeFromParent() {
    const parent2 = this.parent;
    if (parent2 !== null) {
      parent2.remove(this);
    }
    return this;
  }
  /**
   * Removes all child objects.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  clear() {
    return this.remove(...this.children);
  }
  /**
   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to attach.
   * @return {Object3D} A reference to this instance.
   */
  attach(object) {
    this.updateWorldMatrix(true, false);
    _m1$1$1.copy(this.matrixWorld).invert();
    if (object.parent !== null) {
      object.parent.updateWorldMatrix(true, false);
      _m1$1$1.multiply(object.parent.matrixWorld);
    }
    object.applyMatrix4(_m1$1$1);
    object.removeFromParent();
    object.parent = this;
    this.children.push(object);
    object.updateWorldMatrix(false, true);
    object.dispatchEvent(_addedEvent);
    _childaddedEvent.child = object;
    this.dispatchEvent(_childaddedEvent);
    _childaddedEvent.child = null;
    return this;
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching ID.
   *
   * @param {number} id - The id.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectById(id) {
    return this.getObjectByProperty("id", id);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching name.
   *
   * @param {string} name - The name.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByName(name) {
    return this.getObjectByProperty("name", name);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByProperty(name, value) {
    if (this[name] === value) return this;
    for (let i2 = 0, l = this.children.length; i2 < l; i2++) {
      const child = this.children[i2];
      const object = child.getObjectByProperty(name, value);
      if (object !== void 0) {
        return object;
      }
    }
    return void 0;
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns all 3D objects with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @param {Array<Object3D>} result - The method stores the result in this array.
   * @return {Array<Object3D>} The found 3D objects.
   */
  getObjectsByProperty(name, value, result = []) {
    if (this[name] === value) result.push(this);
    const children = this.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      children[i2].getObjectsByProperty(name, value, result);
    }
    return result;
  }
  /**
   * Returns a vector representing the position of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's position in world space.
   */
  getWorldPosition(target) {
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  }
  /**
   * Returns a Quaternion representing the position of the 3D object in world space.
   *
   * @param {Quaternion} target - The target Quaternion the result is stored to.
   * @return {Quaternion} The 3D object's rotation in world space.
   */
  getWorldQuaternion(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, target, _scale$2);
    return target;
  }
  /**
   * Returns a vector representing the scale of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's scale in world space.
   */
  getWorldScale(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, _quaternion$2, target);
    return target;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(target) {
    this.updateWorldMatrix(true, false);
    const e = this.matrixWorld.elements;
    return target.set(e[8], e[9], e[10]).normalize();
  }
  /**
   * Abstract method to get intersections between a casted ray and this
   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
   * implement this method in order to use raycasting.
   *
   * @abstract
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - An array holding the result of the method.
   */
  raycast() {
  }
  /**
   * Executes the callback on this 3D object and all descendants.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverse(callback) {
    callback(this);
    const children = this.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      children[i2].traverse(callback);
    }
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
   * Descendants of invisible 3D objects are not traversed.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseVisible(callback) {
    if (this.visible === false) return;
    callback(this);
    const children = this.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      children[i2].traverseVisible(callback);
    }
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseAncestors(callback) {
    const parent2 = this.parent;
    if (parent2 !== null) {
      callback(parent2);
      parent2.traverseAncestors(callback);
    }
  }
  /**
   * Updates the transformation matrix in local space by computing it from the current
   * position, rotation and scale values.
   */
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  }
  /**
   * Updates the transformation matrix in world space of this 3D objects and its descendants.
   *
   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
   * local space. The computation of the local and world matrix can be controlled with the
   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
   *
   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
   */
  updateMatrixWorld(force) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children = this.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      const child = children[i2];
      child.updateMatrixWorld(force);
    }
  }
  /**
   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
   * update of ancestor and descendant nodes.
   *
   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
   */
  updateWorldMatrix(updateParents, updateChildren) {
    const parent2 = this.parent;
    if (updateParents === true && parent2 !== null) {
      parent2.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldAutoUpdate === true) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
    }
    if (updateChildren === true) {
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        const child = children[i2];
        child.updateWorldMatrix(false, true);
      }
    }
  }
  /**
   * Serializes the 3D object into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized 3D object.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      };
      output.metadata = {
        version: 4.6,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object = {};
    object.uuid = this.uuid;
    object.type = this.type;
    if (this.name !== "") object.name = this.name;
    if (this.castShadow === true) object.castShadow = true;
    if (this.receiveShadow === true) object.receiveShadow = true;
    if (this.visible === false) object.visible = false;
    if (this.frustumCulled === false) object.frustumCulled = false;
    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
    if (Object.keys(this.userData).length > 0) object.userData = this.userData;
    object.layers = this.layers.mask;
    object.matrix = this.matrix.toArray();
    object.up = this.up.toArray();
    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object.type = "InstancedMesh";
      object.count = this.count;
      object.instanceMatrix = this.instanceMatrix.toJSON();
      if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
    }
    if (this.isBatchedMesh) {
      object.type = "BatchedMesh";
      object.perObjectFrustumCulled = this.perObjectFrustumCulled;
      object.sortObjects = this.sortObjects;
      object.drawRanges = this._drawRanges;
      object.reservedRanges = this._reservedRanges;
      object.geometryInfo = this._geometryInfo.map((info) => ({
        ...info,
        boundingBox: info.boundingBox ? {
          min: info.boundingBox.min.toArray(),
          max: info.boundingBox.max.toArray()
        } : void 0,
        boundingSphere: info.boundingSphere ? {
          radius: info.boundingSphere.radius,
          center: info.boundingSphere.center.toArray()
        } : void 0
      }));
      object.instanceInfo = this._instanceInfo.map((info) => ({ ...info }));
      object.availableInstanceIds = this._availableInstanceIds.slice();
      object.availableGeometryIds = this._availableGeometryIds.slice();
      object.nextIndexStart = this._nextIndexStart;
      object.nextVertexStart = this._nextVertexStart;
      object.geometryCount = this._geometryCount;
      object.maxInstanceCount = this._maxInstanceCount;
      object.maxVertexCount = this._maxVertexCount;
      object.maxIndexCount = this._maxIndexCount;
      object.geometryInitialized = this._geometryInitialized;
      object.matricesTexture = this._matricesTexture.toJSON(meta);
      object.indirectTexture = this._indirectTexture.toJSON(meta);
      if (this._colorsTexture !== null) {
        object.colorsTexture = this._colorsTexture.toJSON(meta);
      }
      if (this.boundingSphere !== null) {
        object.boundingSphere = {
          center: this.boundingSphere.center.toArray(),
          radius: this.boundingSphere.radius
        };
      }
      if (this.boundingBox !== null) {
        object.boundingBox = {
          min: this.boundingBox.min.toArray(),
          max: this.boundingBox.max.toArray()
        };
      }
    }
    function serialize(library, element) {
      if (library[element.uuid] === void 0) {
        library[element.uuid] = element.toJSON(meta);
      }
      return element.uuid;
    }
    if (this.isScene) {
      if (this.background) {
        if (this.background.isColor) {
          object.background = this.background.toJSON();
        } else if (this.background.isTexture) {
          object.background = this.background.toJSON(meta).uuid;
        }
      }
      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
        object.environment = this.environment.toJSON(meta).uuid;
      }
    } else if (this.isMesh || this.isLine || this.isPoints) {
      object.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i2 = 0, l = shapes.length; i2 < l; i2++) {
            const shape = shapes[i2];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.isSkinnedMesh) {
      object.bindMode = this.bindMode;
      object.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        serialize(meta.skeletons, this.skeleton);
        object.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i2 = 0, l = this.material.length; i2 < l; i2++) {
          uuids.push(serialize(meta.materials, this.material[i2]));
        }
        object.material = uuids;
      } else {
        object.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object.children = [];
      for (let i2 = 0; i2 < this.children.length; i2++) {
        object.children.push(this.children[i2].toJSON(meta).object);
      }
    }
    if (this.animations.length > 0) {
      object.animations = [];
      for (let i2 = 0; i2 < this.animations.length; i2++) {
        const animation = this.animations[i2];
        object.animations.push(serialize(meta.animations, animation));
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      const skeletons = extractFromCache(meta.skeletons);
      const animations = extractFromCache(meta.animations);
      const nodes = extractFromCache(meta.nodes);
      if (geometries.length > 0) output.geometries = geometries;
      if (materials.length > 0) output.materials = materials;
      if (textures.length > 0) output.textures = textures;
      if (images.length > 0) output.images = images;
      if (shapes.length > 0) output.shapes = shapes;
      if (skeletons.length > 0) output.skeletons = skeletons;
      if (animations.length > 0) output.animations = animations;
      if (nodes.length > 0) output.nodes = nodes;
    }
    output.object = object;
    return output;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data = cache[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  }
  /**
   * Returns a new 3D object with copied values from this instance.
   *
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
   * @return {Object3D} A clone of this instance.
   */
  clone(recursive) {
    return new this.constructor().copy(this, recursive);
  }
  /**
   * Copies the values of the given 3D object to this instance.
   *
   * @param {Object3D} source - The 3D object to copy.
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
   * @return {Object3D} A reference to this instance.
   */
  copy(source, recursive = true) {
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.animations = source.animations.slice();
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i2 = 0; i2 < source.children.length; i2++) {
        const child = source.children[i2];
        this.add(child.clone());
      }
    }
    return this;
  }
}
Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
const _v0$1 = /* @__PURE__ */ new Vector3();
const _v1$3 = /* @__PURE__ */ new Vector3();
const _v2$2 = /* @__PURE__ */ new Vector3();
const _v3$2 = /* @__PURE__ */ new Vector3();
const _vab = /* @__PURE__ */ new Vector3();
const _vac = /* @__PURE__ */ new Vector3();
const _vbc = /* @__PURE__ */ new Vector3();
const _vap = /* @__PURE__ */ new Vector3();
const _vbp = /* @__PURE__ */ new Vector3();
const _vcp = /* @__PURE__ */ new Vector3();
const _v40 = /* @__PURE__ */ new Vector4();
const _v41 = /* @__PURE__ */ new Vector4();
const _v42 = /* @__PURE__ */ new Vector4();
class Triangle {
  /**
   * Constructs a new triangle.
   *
   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
   */
  constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
    this.a = a;
    this.b = b;
    this.c = c;
  }
  /**
   * Computes the normal vector of a triangle.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  static getNormal(a, b, c, target) {
    target.subVectors(c, b);
    _v0$1.subVectors(a, b);
    target.cross(_v0$1);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  static getBarycoord(point, a, b, c, target) {
    _v0$1.subVectors(c, a);
    _v1$3.subVectors(b, a);
    _v2$2.subVectors(point, a);
    const dot00 = _v0$1.dot(_v0$1);
    const dot01 = _v0$1.dot(_v1$3);
    const dot02 = _v0$1.dot(_v2$2);
    const dot11 = _v1$3.dot(_v1$3);
    const dot12 = _v1$3.dot(_v2$2);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (denom === 0) {
      target.set(0, 0, 0);
      return null;
    }
    const invDenom = 1 / denom;
    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u - v, v, u);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  static containsPoint(point, a, b, c) {
    if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
      return false;
    }
    return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} p1 - The first corner of the triangle.
   * @param {Vector3} p2 - The second corner of the triangle.
   * @param {Vector3} p3 - The third corner of the triangle.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
    if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
      target.x = 0;
      target.y = 0;
      if ("z" in target) target.z = 0;
      if ("w" in target) target.w = 0;
      return null;
    }
    target.setScalar(0);
    target.addScaledVector(v1, _v3$2.x);
    target.addScaledVector(v2, _v3$2.y);
    target.addScaledVector(v3, _v3$2.z);
    return target;
  }
  /**
   * Computes the value barycentrically interpolated for the given attribute and indices.
   *
   * @param {BufferAttribute} attr - The attribute to interpolate.
   * @param {number} i1 - Index of first vertex.
   * @param {number} i2 - Index of second vertex.
   * @param {number} i3 - Index of third vertex.
   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The interpolated attribute value.
   */
  static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
    _v40.setScalar(0);
    _v41.setScalar(0);
    _v42.setScalar(0);
    _v40.fromBufferAttribute(attr, i1);
    _v41.fromBufferAttribute(attr, i2);
    _v42.fromBufferAttribute(attr, i3);
    target.setScalar(0);
    target.addScaledVector(_v40, barycoord.x);
    target.addScaledVector(_v41, barycoord.y);
    target.addScaledVector(_v42, barycoord.z);
    return target;
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  static isFrontFacing(a, b, c, direction) {
    _v0$1.subVectors(c, b);
    _v1$3.subVectors(a, b);
    return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
  }
  /**
   * Sets the triangle's vertices by copying the given values.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  set(a, b, c) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(c);
    return this;
  }
  /**
   * Sets the triangle's vertices by copying the given array values.
   *
   * @param {Array<Vector3>} points - An array with 3D points.
   * @param {number} i0 - The array index representing the first corner of the triangle.
   * @param {number} i1 - The array index representing the second corner of the triangle.
   * @param {number} i2 - The array index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  /**
   * Sets the triangle's vertices by copying the given attribute values.
   *
   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
   * @param {number} i0 - The attribute index representing the first corner of the triangle.
   * @param {number} i1 - The attribute index representing the second corner of the triangle.
   * @param {number} i2 - The attribute index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromAttributeAndIndices(attribute, i0, i1, i2) {
    this.a.fromBufferAttribute(attribute, i0);
    this.b.fromBufferAttribute(attribute, i1);
    this.c.fromBufferAttribute(attribute, i2);
    return this;
  }
  /**
   * Returns a new triangle with copied values from this instance.
   *
   * @return {Triangle} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given triangle to this instance.
   *
   * @param {Triangle} triangle - The triangle to copy.
   * @return {Triangle} A reference to this triangle.
   */
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  /**
   * Computes the area of the triangle.
   *
   * @return {number} The triangle's area.
   */
  getArea() {
    _v0$1.subVectors(this.c, this.b);
    _v1$3.subVectors(this.a, this.b);
    return _v0$1.cross(_v1$3).length() * 0.5;
  }
  /**
   * Computes the midpoint of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's midpoint.
   */
  getMidpoint(target) {
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  /**
   * Computes the normal of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  getNormal(target) {
    return Triangle.getNormal(this.a, this.b, this.c, target);
  }
  /**
   * Computes a plane the triangle lies within.
   *
   * @param {Plane} target - The target vector that is used to store the method's result.
   * @return {Plane} The plane the triangle lies within.
   */
  getPlane(target) {
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  getBarycoord(point, target) {
    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  getInterpolation(point, v1, v2, v3, target) {
    return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  containsPoint(point) {
    return Triangle.containsPoint(point, this.a, this.b, this.c);
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  isFrontFacing(direction) {
    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
  }
  /**
   * Returns `true` if this triangle intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this triangle intersects with the given box or not.
   */
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  /**
   * Returns the closest point on the triangle to the given point.
   *
   * @param {Vector3} p - The point to compute the closest point for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the triangle.
   */
  closestPointToPoint(p, target) {
    const a = this.a, b = this.b, c = this.c;
    let v, w;
    _vab.subVectors(b, a);
    _vac.subVectors(c, a);
    _vap.subVectors(p, a);
    const d1 = _vab.dot(_vap);
    const d2 = _vac.dot(_vap);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a);
    }
    _vbp.subVectors(p, b);
    const d3 = _vab.dot(_vbp);
    const d4 = _vac.dot(_vbp);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b);
    }
    const vc = d1 * d4 - d3 * d2;
    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
      v = d1 / (d1 - d3);
      return target.copy(a).addScaledVector(_vab, v);
    }
    _vcp.subVectors(p, c);
    const d5 = _vab.dot(_vcp);
    const d6 = _vac.dot(_vcp);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c);
    }
    const vb = d5 * d2 - d1 * d6;
    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
      w = d2 / (d2 - d6);
      return target.copy(a).addScaledVector(_vac, w);
    }
    const va = d3 * d6 - d5 * d4;
    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc.subVectors(c, b);
      w = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b).addScaledVector(_vbc, w);
    }
    const denom = 1 / (va + vb + vc);
    v = vb * denom;
    w = vc * denom;
    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
  }
  /**
   * Returns `true` if this triangle is equal with the given one.
   *
   * @param {Triangle} triangle - The triangle to test for equality.
   * @return {boolean} Whether this triangle is equal with the given one.
   */
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
}
const _colorKeywords = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
const _hslA = { h: 0, s: 0, l: 0 };
const _hslB = { h: 0, s: 0, l: 0 };
function hue2rgb(p, q, t2) {
  if (t2 < 0) t2 += 1;
  if (t2 > 1) t2 -= 1;
  if (t2 < 1 / 6) return p + (q - p) * 6 * t2;
  if (t2 < 1 / 2) return q;
  if (t2 < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t2);
  return p;
}
class Color {
  /**
   * Constructs a new color.
   *
   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
   * and that method is used throughout the rest of the documentation.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   */
  constructor(r, g, b) {
    this.isColor = true;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    return this.set(r, g, b);
  }
  /**
   * Sets the colors's components from the given values.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   * @return {Color} A reference to this color.
   */
  set(r, g, b) {
    if (g === void 0 && b === void 0) {
      const value = r;
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
    } else {
      this.setRGB(r, g, b);
    }
    return this;
  }
  /**
   * Sets the colors's components to the given scalar value.
   *
   * @param {number} scalar - The scalar value.
   * @return {Color} A reference to this color.
   */
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  /**
   * Sets this color from a hexadecimal value.
   *
   * @param {number} hex - The hexadecimal value.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHex(hex, colorSpace = SRGBColorSpace) {
    hex = Math.floor(hex);
    this.r = (hex >> 16 & 255) / 255;
    this.g = (hex >> 8 & 255) / 255;
    this.b = (hex & 255) / 255;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} r - Red channel value between `0.0` and `1.0`.
   * @param {number} g - Green channel value between `0.0` and `1.0`.
   * @param {number} b - Blue channel value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
    this.r = r;
    this.g = g;
    this.b = b;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
    h = euclideanModulo(h, 1);
    s = clamp(s, 0, 1);
    l = clamp(l, 0, 1);
    if (s === 0) {
      this.r = this.g = this.b = l;
    } else {
      const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
      const q = 2 * l - p;
      this.r = hue2rgb(q, p, h + 1 / 3);
      this.g = hue2rgb(q, p, h);
      this.b = hue2rgb(q, p, h - 1 / 3);
    }
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  /**
   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
   * all 140 color names are supported).
   *
   * @param {string} style - Color as a CSS-style string.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setStyle(style, colorSpace = SRGBColorSpace) {
    function handleAlpha(string) {
      if (string === void 0) return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m;
    if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
      let color;
      const name = m[1];
      const components = m[2];
      switch (name) {
        case "rgb":
        case "rgba":
          if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setRGB(
              Math.min(255, parseInt(color[1], 10)) / 255,
              Math.min(255, parseInt(color[2], 10)) / 255,
              Math.min(255, parseInt(color[3], 10)) / 255,
              colorSpace
            );
          }
          if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setRGB(
              Math.min(100, parseInt(color[1], 10)) / 100,
              Math.min(100, parseInt(color[2], 10)) / 100,
              Math.min(100, parseInt(color[3], 10)) / 100,
              colorSpace
            );
          }
          break;
        case "hsl":
        case "hsla":
          if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setHSL(
              parseFloat(color[1]) / 360,
              parseFloat(color[2]) / 100,
              parseFloat(color[3]) / 100,
              colorSpace
            );
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + style);
      }
    } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
      const hex = m[1];
      const size = hex.length;
      if (size === 3) {
        return this.setRGB(
          parseInt(hex.charAt(0), 16) / 15,
          parseInt(hex.charAt(1), 16) / 15,
          parseInt(hex.charAt(2), 16) / 15,
          colorSpace
        );
      } else if (size === 6) {
        return this.setHex(parseInt(hex, 16), colorSpace);
      } else {
        console.warn("THREE.Color: Invalid hex color " + style);
      }
    } else if (style && style.length > 0) {
      return this.setColorName(style, colorSpace);
    }
    return this;
  }
  /**
   * Sets this color from a color name. Faster than {@link Color#setStyle} if
   * you don't need the other CSS-style formats.
   *
   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
   * ```js
   * Color.NAMES.aliceblue // returns 0xF0F8FF
   * ```
   *
   * @param {string} style - The color name.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setColorName(style, colorSpace = SRGBColorSpace) {
    const hex = _colorKeywords[style.toLowerCase()];
    if (hex !== void 0) {
      this.setHex(hex, colorSpace);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  /**
   * Returns a new color with copied values from this instance.
   *
   * @return {Color} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  /**
   * Copies the values of the given color to this instance.
   *
   * @param {Color} color - The color to copy.
   * @return {Color} A reference to this color.
   */
  copy(color) {
    this.r = color.r;
    this.g = color.g;
    this.b = color.b;
    return this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copySRGBToLinear(color) {
    this.r = SRGBToLinear(color.r);
    this.g = SRGBToLinear(color.g);
    this.b = SRGBToLinear(color.b);
    return this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copyLinearToSRGB(color) {
    this.r = LinearToSRGB(color.r);
    this.g = LinearToSRGB(color.g);
    this.b = LinearToSRGB(color.b);
    return this;
  }
  /**
   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  /**
   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  /**
   * Returns the hexadecimal value of this color.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {number} The hexadecimal value.
   */
  getHex(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
  }
  /**
   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The hexadecimal value as a string.
   */
  getHexString(colorSpace = SRGBColorSpace) {
    return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
  }
  /**
   * Converts the colors RGB values into the HSL format and stores them into the
   * given target object.
   *
   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {{h:number,s:number,l:number}} The HSL representation of this color.
   */
  getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r = _color.r, g = _color.g, b = _color.b;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let hue, saturation;
    const lightness = (min + max) / 2;
    if (min === max) {
      hue = 0;
      saturation = 0;
    } else {
      const delta = max - min;
      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
      switch (max) {
        case r:
          hue = (g - b) / delta + (g < b ? 6 : 0);
          break;
        case g:
          hue = (b - r) / delta + 2;
          break;
        case b:
          hue = (r - g) / delta + 4;
          break;
      }
      hue /= 6;
    }
    target.h = hue;
    target.s = saturation;
    target.l = lightness;
    return target;
  }
  /**
   * Returns the RGB values of this color and stores them into the given target object.
   *
   * @param {Color} target - The target color that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} The RGB representation of this color.
   */
  getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    target.r = _color.r;
    target.g = _color.g;
    target.b = _color.b;
    return target;
  }
  /**
   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The CSS representation of this color.
   */
  getStyle(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r = _color.r, g = _color.g, b = _color.b;
    if (colorSpace !== SRGBColorSpace) {
      return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
    }
    return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
  }
  /**
   * Adds the given HSL values to this color's values.
   * Internally, this converts the color's RGB values to HSL, adds HSL
   * and then converts the color back to RGB.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @return {Color} A reference to this color.
   */
  offsetHSL(h, s, l) {
    this.getHSL(_hslA);
    return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
  }
  /**
   * Adds the RGB values of the given color to the RGB values of this color.
   *
   * @param {Color} color - The color to add.
   * @return {Color} A reference to this color.
   */
  add(color) {
    this.r += color.r;
    this.g += color.g;
    this.b += color.b;
    return this;
  }
  /**
   * Adds the RGB values of the given colors and stores the result in this instance.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @return {Color} A reference to this color.
   */
  addColors(color1, color2) {
    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;
    return this;
  }
  /**
   * Adds the given scalar value to the RGB values of this color.
   *
   * @param {number} s - The scalar to add.
   * @return {Color} A reference to this color.
   */
  addScalar(s) {
    this.r += s;
    this.g += s;
    this.b += s;
    return this;
  }
  /**
   * Subtracts the RGB values of the given color from the RGB values of this color.
   *
   * @param {Color} color - The color to subtract.
   * @return {Color} A reference to this color.
   */
  sub(color) {
    this.r = Math.max(0, this.r - color.r);
    this.g = Math.max(0, this.g - color.g);
    this.b = Math.max(0, this.b - color.b);
    return this;
  }
  /**
   * Multiplies the RGB values of the given color with the RGB values of this color.
   *
   * @param {Color} color - The color to multiply.
   * @return {Color} A reference to this color.
   */
  multiply(color) {
    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;
    return this;
  }
  /**
   * Multiplies the given scalar value with the RGB values of this color.
   *
   * @param {number} s - The scalar to multiply.
   * @return {Color} A reference to this color.
   */
  multiplyScalar(s) {
    this.r *= s;
    this.g *= s;
    this.b *= s;
    return this;
  }
  /**
   * Linearly interpolates this color's RGB values toward the RGB values of the
   * given color. The alpha argument can be thought of as the ratio between
   * the two colors, where `0.0` is this color and `1.0` is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerp(color, alpha) {
    this.r += (color.r - this.r) * alpha;
    this.g += (color.g - this.g) * alpha;
    this.b += (color.b - this.b) * alpha;
    return this;
  }
  /**
   * Linearly interpolates between the given colors and stores the result in this instance.
   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
   * is the first and `1.0` is the second color.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpColors(color1, color2, alpha) {
    this.r = color1.r + (color2.r - color1.r) * alpha;
    this.g = color1.g + (color2.g - color1.g) * alpha;
    this.b = color1.b + (color2.b - color1.b) * alpha;
    return this;
  }
  /**
   * Linearly interpolates this color's HSL values toward the HSL values of the
   * given color. It differs from {@link Color#lerp} by not interpolating straight
   * from one color to the other, but instead going through all the hues in between
   * those two colors. The alpha argument can be thought of as the ratio between
   * the two colors, where 0.0 is this color and 1.0 is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpHSL(color, alpha) {
    this.getHSL(_hslA);
    color.getHSL(_hslB);
    const h = lerp(_hslA.h, _hslB.h, alpha);
    const s = lerp(_hslA.s, _hslB.s, alpha);
    const l = lerp(_hslA.l, _hslB.l, alpha);
    this.setHSL(h, s, l);
    return this;
  }
  /**
   * Sets the color's RGB components from the given 3D vector.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Color} A reference to this color.
   */
  setFromVector3(v) {
    this.r = v.x;
    this.g = v.y;
    this.b = v.z;
    return this;
  }
  /**
   * Transforms this color with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix.
   * @return {Color} A reference to this color.
   */
  applyMatrix3(m) {
    const r = this.r, g = this.g, b = this.b;
    const e = m.elements;
    this.r = e[0] * r + e[3] * g + e[6] * b;
    this.g = e[1] * r + e[4] * g + e[7] * b;
    this.b = e[2] * r + e[5] * g + e[8] * b;
    return this;
  }
  /**
   * Returns `true` if this color is equal with the given one.
   *
   * @param {Color} c - The color to test for equality.
   * @return {boolean} Whether this bounding color is equal with the given one.
   */
  equals(c) {
    return c.r === this.r && c.g === this.g && c.b === this.b;
  }
  /**
   * Sets this color's RGB components from the given array.
   *
   * @param {Array<number>} array - An array holding the RGB values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Color} A reference to this color.
   */
  fromArray(array, offset = 0) {
    this.r = array[offset];
    this.g = array[offset + 1];
    this.b = array[offset + 2];
    return this;
  }
  /**
   * Writes the RGB components of this color to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the color components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The color components.
   */
  toArray(array = [], offset = 0) {
    array[offset] = this.r;
    array[offset + 1] = this.g;
    array[offset + 2] = this.b;
    return array;
  }
  /**
   * Sets the components of this color from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding color data.
   * @param {number} index - The index into the attribute.
   * @return {Color} A reference to this color.
   */
  fromBufferAttribute(attribute, index) {
    this.r = attribute.getX(index);
    this.g = attribute.getY(index);
    this.b = attribute.getZ(index);
    return this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the color
   * as a hexadecimal value.
   *
   * @return {number} The hexadecimal value.
   */
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r;
    yield this.g;
    yield this.b;
  }
}
const _color = /* @__PURE__ */ new Color();
Color.NAMES = _colorKeywords;
let _materialId = 0;
class Material extends EventDispatcher {
  /**
   * Constructs a new material.
   */
  constructor() {
    super();
    this.isMaterial = true;
    Object.defineProperty(this, "id", { value: _materialId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Material";
    this.blending = NormalBlending;
    this.side = FrontSide;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.alphaHash = false;
    this.blendSrc = SrcAlphaFactor;
    this.blendDst = OneMinusSrcAlphaFactor;
    this.blendEquation = AddEquation;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.blendColor = new Color(0, 0, 0);
    this.blendAlpha = 0;
    this.depthFunc = LessEqualDepth;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp;
    this.stencilZFail = KeepStencilOp;
    this.stencilZPass = KeepStencilOp;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaToCoverage = false;
    this.premultipliedAlpha = false;
    this.forceSinglePass = false;
    this.allowOverride = true;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
    this._alphaTest = 0;
  }
  /**
   * Sets the alpha value to be used when running an alpha test. The material
   * will not be rendered if the opacity is lower than this value.
   *
   * @type {number}
   * @readonly
   * @default 0
   */
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(value) {
    if (this._alphaTest > 0 !== value > 0) {
      this.version++;
    }
    this._alphaTest = value;
  }
  /**
   * An optional callback that is executed immediately before the material is used to render a 3D object.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Object3D} object - The 3D object.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * An optional callback that is executed immediately before the shader
   * program is compiled. This function is called with the shader source code
   * as a parameter. Useful for the modification of built-in materials.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}. The
   * recommended approach when customizing materials is to use `WebGPURenderer` with the new
   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
   *
   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
   * @param {WebGLRenderer} renderer - A reference to the renderer.
   */
  onBeforeCompile() {
  }
  /**
   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
   * shader or recompile the shader for this material as needed.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @return {string} The custom program cache key.
   */
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  /**
   * This method can be used to set default values from parameter objects.
   * It is a generic implementation so it can be used with different types
   * of materials.
   *
   * @param {Object} [values] - The material values to set.
   */
  setValues(values) {
    if (values === void 0) return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  }
  /**
   * Serializes the material into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized material.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (isRootObject) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (this.color && this.color.isColor) data.color = this.color.getHex();
    if (this.roughness !== void 0) data.roughness = this.roughness;
    if (this.metalness !== void 0) data.metalness = this.metalness;
    if (this.sheen !== void 0) data.sheen = this.sheen;
    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
    if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
    if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
    if (this.shininess !== void 0) data.shininess = this.shininess;
    if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.dispersion !== void 0) data.dispersion = this.dispersion;
    if (this.iridescence !== void 0) data.iridescence = this.iridescence;
    if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
    if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
    if (this.iridescenceMap && this.iridescenceMap.isTexture) {
      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
    }
    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
    }
    if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
    if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
    if (this.anisotropyMap && this.anisotropyMap.isTexture) {
      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
    }
    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture) {
      data.lightMap = this.lightMap.toJSON(meta).uuid;
      data.lightMapIntensity = this.lightMapIntensity;
    }
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      if (this.combine !== void 0) data.combine = this.combine;
    }
    if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
    if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
    if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
    if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.transmission !== void 0) data.transmission = this.transmission;
    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
    if (this.thickness !== void 0) data.thickness = this.thickness;
    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
    if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
    if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
    if (this.size !== void 0) data.size = this.size;
    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
    if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending) data.blending = this.blending;
    if (this.side !== FrontSide) data.side = this.side;
    if (this.vertexColors === true) data.vertexColors = true;
    if (this.opacity < 1) data.opacity = this.opacity;
    if (this.transparent === true) data.transparent = true;
    if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
    if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
    if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
    if (this.depthTest === false) data.depthTest = this.depthTest;
    if (this.depthWrite === false) data.depthWrite = this.depthWrite;
    if (this.colorWrite === false) data.colorWrite = this.colorWrite;
    if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
    if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
    if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
    if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
    if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
    if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
    if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
    if (this.polygonOffset === true) data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
    if (this.dashSize !== void 0) data.dashSize = this.dashSize;
    if (this.gapSize !== void 0) data.gapSize = this.gapSize;
    if (this.scale !== void 0) data.scale = this.scale;
    if (this.dithering === true) data.dithering = true;
    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
    if (this.alphaHash === true) data.alphaHash = true;
    if (this.alphaToCoverage === true) data.alphaToCoverage = true;
    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
    if (this.forceSinglePass === true) data.forceSinglePass = true;
    if (this.wireframe === true) data.wireframe = true;
    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.flatShading === true) data.flatShading = true;
    if (this.visible === false) data.visible = false;
    if (this.toneMapped === false) data.toneMapped = false;
    if (this.fog === false) data.fog = false;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data2 = cache[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRootObject) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
    }
    return data;
  }
  /**
   * Returns a new material with copied values from this instance.
   *
   * @return {Material} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given material to this instance.
   *
   * @param {Material} source - The material to copy.
   * @return {Material} A reference to this instance.
   */
  copy(source) {
    this.name = source.name;
    this.blending = source.blending;
    this.side = source.side;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.blendColor.copy(source.blendColor);
    this.blendAlpha = source.blendAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n = srcPlanes.length;
      dstPlanes = new Array(n);
      for (let i2 = 0; i2 !== n; ++i2) {
        dstPlanes[i2] = srcPlanes[i2].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.alphaHash = source.alphaHash;
    this.alphaToCoverage = source.alphaToCoverage;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.forceSinglePass = source.forceSinglePass;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Material#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Setting this property to `true` indicates the engine the material
   * needs to be recompiled.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
}
class MeshBasicMaterial extends Material {
  /**
   * Constructs a new mesh basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isMeshBasicMaterial = true;
    this.type = "MeshBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.fog = source.fog;
    return this;
  }
}
const _vector$9 = /* @__PURE__ */ new Vector3();
const _vector2$1 = /* @__PURE__ */ new Vector2();
let _id$2 = 0;
class BufferAttribute {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(array, itemSize, normalized = false) {
    if (Array.isArray(array)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.isBufferAttribute = true;
    Object.defineProperty(this, "id", { value: _id$2++ });
    this.name = "";
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== void 0 ? array.length / itemSize : 0;
    this.normalized = normalized;
    this.usage = StaticDrawUsage;
    this.updateRanges = [];
    this.gpuType = FloatType;
    this.version = 0;
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute
   * array data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  /**
   * Sets the usage of this buffer attribute.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {BufferAttribute} A reference to this buffer attribute.
   */
  setUsage(value) {
    this.usage = value;
    return this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(start, count) {
    this.updateRanges.push({ start, count });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given buffer attribute to this instance.
   *
   * @param {BufferAttribute} source - The buffer attribute to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copy(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    this.gpuType = source.gpuType;
    return this;
  }
  /**
   * Copies a vector from the given buffer attribute to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this buffer attribute.
   * @param {BufferAttribute} attribute - The buffer attribute to copy from.
   * @param {number} index2 - The source index into the given buffer attribute.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyAt(index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;
    for (let i2 = 0, l = this.itemSize; i2 < l; i2++) {
      this.array[index1 + i2] = attribute.array[index2 + i2];
    }
    return this;
  }
  /**
   * Copies the given array data into this buffer attribute.
   *
   * @param {(TypedArray|Array)} array - The array to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyArray(array) {
    this.array.set(array);
    return this;
  }
  /**
   * Applies the given 3x3 matrix to the given attribute. Works with
   * item size `2` and `3`.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix3(m) {
    if (this.itemSize === 2) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector2$1.fromBufferAttribute(this, i2);
        _vector2$1.applyMatrix3(m);
        this.setXY(i2, _vector2$1.x, _vector2$1.y);
      }
    } else if (this.itemSize === 3) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyMatrix3(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
    }
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix4(m) {
    for (let i2 = 0, l = this.count; i2 < l; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.applyMatrix4(m);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(m) {
    for (let i2 = 0, l = this.count; i2 < l; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.applyNormalMatrix(m);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  transformDirection(m) {
    for (let i2 = 0, l = this.count; i2 < l; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.transformDirection(m);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  /**
   * Sets the given array data in the buffer attribute.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this buffer attribute's array.
   * @return {BufferAttribute} A reference to this instance.
   */
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(index, component) {
    let value = this.array[index * this.itemSize + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setComponent(index, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.array[index * this.itemSize + component] = value;
    return this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(index) {
    let x = this.array[index * this.itemSize];
    if (this.normalized) x = denormalize(x, this.array);
    return x;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setX(index, x) {
    if (this.normalized) x = normalize(x, this.array);
    this.array[index * this.itemSize] = x;
    return this;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(index) {
    let y = this.array[index * this.itemSize + 1];
    if (this.normalized) y = denormalize(y, this.array);
    return y;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setY(index, y) {
    if (this.normalized) y = normalize(y, this.array);
    this.array[index * this.itemSize + 1] = y;
    return this;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(index) {
    let z = this.array[index * this.itemSize + 2];
    if (this.normalized) z = denormalize(z, this.array);
    return z;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setZ(index, z) {
    if (this.normalized) z = normalize(z, this.array);
    this.array[index * this.itemSize + 2] = z;
    return this;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(index) {
    let w = this.array[index * this.itemSize + 3];
    if (this.normalized) w = denormalize(w, this.array);
    return w;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setW(index, w) {
    if (this.normalized) w = normalize(w, this.array);
    this.array[index * this.itemSize + 3] = w;
    return this;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXY(index, x, y) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    return this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZ(index, x, y, z) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z = normalize(z, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    return this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZW(index, x, y, z, w) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z = normalize(z, this.array);
      w = normalize(w, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    this.array[index + 3] = w;
    return this;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the attribute array data to the GPU. Can be used to perform clean-up operations after
   * the upload when attribute data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {BufferAttribute} A reference to this instance.
   */
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * @return {BufferAttribute} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON() {
    const data = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    if (this.name !== "") data.name = this.name;
    if (this.usage !== StaticDrawUsage) data.usage = this.usage;
    return data;
  }
}
class Uint16BufferAttribute extends BufferAttribute {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(array, itemSize, normalized) {
    super(new Uint16Array(array), itemSize, normalized);
  }
}
class Uint32BufferAttribute extends BufferAttribute {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(array, itemSize, normalized) {
    super(new Uint32Array(array), itemSize, normalized);
  }
}
class Float32BufferAttribute extends BufferAttribute {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(array, itemSize, normalized) {
    super(new Float32Array(array), itemSize, normalized);
  }
}
let _id$1 = 0;
const _m1$3 = /* @__PURE__ */ new Matrix4();
const _obj = /* @__PURE__ */ new Object3D();
const _offset = /* @__PURE__ */ new Vector3();
const _box$2 = /* @__PURE__ */ new Box3();
const _boxMorphTargets = /* @__PURE__ */ new Box3();
const _vector$8 = /* @__PURE__ */ new Vector3();
class BufferGeometry extends EventDispatcher {
  /**
   * Constructs a new geometry.
   */
  constructor() {
    super();
    this.isBufferGeometry = true;
    Object.defineProperty(this, "id", { value: _id$1++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.indirect = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = { start: 0, count: Infinity };
    this.userData = {};
  }
  /**
   * Returns the index of this geometry.
   *
   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
   */
  getIndex() {
    return this.index;
  }
  /**
   * Sets the given index to this geometry.
   *
   * @param {Array<number>|BufferAttribute} index - The index to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndex(index) {
    if (Array.isArray(index)) {
      this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
    } else {
      this.index = index;
    }
    return this;
  }
  /**
   * Sets the given indirect attribute to this geometry.
   *
   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndirect(indirect) {
    this.indirect = indirect;
    return this;
  }
  /**
   * Returns the indirect attribute of this geometry.
   *
   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
   */
  getIndirect() {
    return this.indirect;
  }
  /**
   * Returns the buffer attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
   * Returns `undefined` if not attribute has been found.
   */
  getAttribute(name) {
    return this.attributes[name];
  }
  /**
   * Sets the given attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setAttribute(name, attribute) {
    this.attributes[name] = attribute;
    return this;
  }
  /**
   * Deletes the attribute for the given name.
   *
   * @param {string} name - The attribute name to delete.
   * @return {BufferGeometry} A reference to this instance.
   */
  deleteAttribute(name) {
    delete this.attributes[name];
    return this;
  }
  /**
   * Returns `true` if this geometry has an attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {boolean} Whether this geometry has an attribute for the given name or not.
   */
  hasAttribute(name) {
    return this.attributes[name] !== void 0;
  }
  /**
   * Adds a group to this geometry.
   *
   * @param {number} start - The first element in this draw call. That is the first
   * vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - Specifies how many vertices (or indices) are part of this group.
   * @param {number} [materialIndex=0] - The material array index to use.
   */
  addGroup(start, count, materialIndex = 0) {
    this.groups.push({
      start,
      count,
      materialIndex
    });
  }
  /**
   * Clears all groups.
   */
  clearGroups() {
    this.groups = [];
  }
  /**
   * Sets the draw range for this geometry.
   *
   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
   * For indexed BufferGeometry, `count` is the number of indices to render.
   */
  setDrawRange(start, count) {
    this.drawRange.start = start;
    this.drawRange.count = count;
  }
  /**
   * Applies the given 4x4 transformation matrix to the geometry.
   *
   * @param {Matrix4} matrix - The matrix to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyMatrix4(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal = this.attributes.normal;
    if (normal !== void 0) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normal.applyNormalMatrix(normalMatrix);
      normal.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  /**
   * Applies the rotation represented by the Quaternion to the geometry.
   *
   * @param {Quaternion} q - The Quaternion to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyQuaternion(q) {
    _m1$3.makeRotationFromQuaternion(q);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Rotates the geometry about the X axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateX(angle) {
    _m1$3.makeRotationX(angle);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Rotates the geometry about the Y axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateY(angle) {
    _m1$3.makeRotationY(angle);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Rotates the geometry about the Z axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateZ(angle) {
    _m1$3.makeRotationZ(angle);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Translates the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#position} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x offset.
   * @param {number} y - The y offset.
   * @param {number} z - The z offset.
   * @return {BufferGeometry} A reference to this instance.
   */
  translate(x, y, z) {
    _m1$3.makeTranslation(x, y, z);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Scales the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#scale} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x scale.
   * @param {number} y - The y scale.
   * @param {number} z - The z scale.
   * @return {BufferGeometry} A reference to this instance.
   */
  scale(x, y, z) {
    _m1$3.makeScale(x, y, z);
    this.applyMatrix4(_m1$3);
    return this;
  }
  /**
   * Rotates the geometry to face a point in 3D space. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
   * real-time mesh rotation.
   *
   * @param {Vector3} vector - The target point.
   * @return {BufferGeometry} A reference to this instance.
   */
  lookAt(vector) {
    _obj.lookAt(vector);
    _obj.updateMatrix();
    this.applyMatrix4(_obj.matrix);
    return this;
  }
  /**
   * Center the geometry based on its bounding box.
   *
   * @return {BufferGeometry} A reference to this instance.
   */
  center() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset).negate();
    this.translate(_offset.x, _offset.y, _offset.z);
    return this;
  }
  /**
   * Defines a geometry by creating a `position` attribute based on the given array of points. The array
   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
   * set to `0`.
   *
   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
   * data from the array. The length of the array must match the vertex count.
   *
   * @param {Array<Vector2>|Array<Vector3>} points - The points.
   * @return {BufferGeometry} A reference to this instance.
   */
  setFromPoints(points) {
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute === void 0) {
      const position = [];
      for (let i2 = 0, l = points.length; i2 < l; i2++) {
        const point = points[i2];
        position.push(point.x, point.y, point.z || 0);
      }
      this.setAttribute("position", new Float32BufferAttribute(position, 3));
    } else {
      const l = Math.min(points.length, positionAttribute.count);
      for (let i2 = 0; i2 < l; i2++) {
        const point = points[i2];
        positionAttribute.setXYZ(i2, point.x, point.y, point.z || 0);
      }
      if (points.length > positionAttribute.count) {
        console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
      }
      positionAttribute.needsUpdate = true;
    }
    return this;
  }
  /**
   * Computes the bounding box of the geometry, and updates the `boundingBox` member.
   * The bounding box is not computed by the engine; it must be computed by your app.
   * You may need to recompute the bounding box if the geometry vertices are modified.
   */
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
      this.boundingBox.set(
        new Vector3(-Infinity, -Infinity, -Infinity),
        new Vector3(Infinity, Infinity, Infinity)
      );
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _box$2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(this.boundingBox.min, _box$2.min);
            this.boundingBox.expandByPoint(_vector$8);
            _vector$8.addVectors(this.boundingBox.max, _box$2.max);
            this.boundingBox.expandByPoint(_vector$8);
          } else {
            this.boundingBox.expandByPoint(_box$2.min);
            this.boundingBox.expandByPoint(_box$2.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  }
  /**
   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if the geometry vertices are modified.
   */
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
      this.boundingSphere.set(new Vector3(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$2.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _boxMorphTargets.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
            _box$2.expandByPoint(_vector$8);
            _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
            _box$2.expandByPoint(_vector$8);
          } else {
            _box$2.expandByPoint(_boxMorphTargets.min);
            _box$2.expandByPoint(_boxMorphTargets.max);
          }
        }
      }
      _box$2.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = position.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(position, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
      }
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
            _vector$8.fromBufferAttribute(morphAttribute, j);
            if (morphTargetsRelative) {
              _offset.fromBufferAttribute(position, j);
              _vector$8.add(_offset);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }
  /**
   * Calculates and adds a tangent attribute to this geometry.
   *
   * The computation is only supported for indexed geometries and if position, normal, and uv attributes
   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
   */
  computeTangents() {
    const index = this.index;
    const attributes = this.attributes;
    if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const positionAttribute = attributes.position;
    const normalAttribute = attributes.normal;
    const uvAttribute = attributes.uv;
    if (this.hasAttribute("tangent") === false) {
      this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
    }
    const tangentAttribute = this.getAttribute("tangent");
    const tan1 = [], tan2 = [];
    for (let i2 = 0; i2 < positionAttribute.count; i2++) {
      tan1[i2] = new Vector3();
      tan2[i2] = new Vector3();
    }
    const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
    function handleTriangle(a, b, c) {
      vA.fromBufferAttribute(positionAttribute, a);
      vB.fromBufferAttribute(positionAttribute, b);
      vC.fromBufferAttribute(positionAttribute, c);
      uvA.fromBufferAttribute(uvAttribute, a);
      uvB.fromBufferAttribute(uvAttribute, b);
      uvC.fromBufferAttribute(uvAttribute, c);
      vB.sub(vA);
      vC.sub(vA);
      uvB.sub(uvA);
      uvC.sub(uvA);
      const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
      if (!isFinite(r)) return;
      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
      tan1[a].add(sdir);
      tan1[b].add(sdir);
      tan1[c].add(sdir);
      tan2[a].add(tdir);
      tan2[b].add(tdir);
      tan2[c].add(tdir);
    }
    let groups = this.groups;
    if (groups.length === 0) {
      groups = [{
        start: 0,
        count: index.count
      }];
    }
    for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
      const group = groups[i2];
      const start = group.start;
      const count = group.count;
      for (let j = start, jl = start + count; j < jl; j += 3) {
        handleTriangle(
          index.getX(j + 0),
          index.getX(j + 1),
          index.getX(j + 2)
        );
      }
    }
    const tmp = new Vector3(), tmp2 = new Vector3();
    const n = new Vector3(), n2 = new Vector3();
    function handleVertex(v) {
      n.fromBufferAttribute(normalAttribute, v);
      n2.copy(n);
      const t2 = tan1[v];
      tmp.copy(t2);
      tmp.sub(n.multiplyScalar(n.dot(t2))).normalize();
      tmp2.crossVectors(n2, t2);
      const test = tmp2.dot(tan2[v]);
      const w = test < 0 ? -1 : 1;
      tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
    }
    for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
      const group = groups[i2];
      const start = group.start;
      const count = group.count;
      for (let j = start, jl = start + count; j < jl; j += 3) {
        handleVertex(index.getX(j + 0));
        handleVertex(index.getX(j + 1));
        handleVertex(index.getX(j + 2));
      }
    }
  }
  /**
   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
   * each vertex normal to be the average of the face normals of the faces that share that vertex.
   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
   * to be the same as the face normal.
   */
  computeVertexNormals() {
    const index = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
          normalAttribute.setXYZ(i2, 0, 0, 0);
        }
      }
      const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
      const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
      const cb = new Vector3(), ab = new Vector3();
      if (index) {
        for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
          const vA = index.getX(i2 + 0);
          const vB = index.getX(i2 + 1);
          const vC = index.getX(i2 + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb);
          nB.add(cb);
          nC.add(cb);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
          pA.fromBufferAttribute(positionAttribute, i2 + 0);
          pB.fromBufferAttribute(positionAttribute, i2 + 1);
          pC.fromBufferAttribute(positionAttribute, i2 + 2);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  }
  /**
   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
   * correct lighting on the geometry surfaces.
   */
  normalizeNormals() {
    const normals = this.attributes.normal;
    for (let i2 = 0, il = normals.count; i2 < il; i2++) {
      _vector$8.fromBufferAttribute(normals, i2);
      _vector$8.normalize();
      normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
    }
  }
  /**
   * Return a new non-index version of this indexed geometry. If the geometry
   * is already non-indexed, the method is a NOOP.
   *
   * @return {BufferGeometry} The non-indexed version of this indexed geometry.
   */
  toNonIndexed() {
    function convertBufferAttribute(attribute, indices2) {
      const array = attribute.array;
      const itemSize = attribute.itemSize;
      const normalized = attribute.normalized;
      const array2 = new array.constructor(indices2.length * itemSize);
      let index = 0, index2 = 0;
      for (let i2 = 0, l = indices2.length; i2 < l; i2++) {
        if (attribute.isInterleavedBufferAttribute) {
          index = indices2[i2] * attribute.data.stride + attribute.offset;
        } else {
          index = indices2[i2] * itemSize;
        }
        for (let j = 0; j < itemSize; j++) {
          array2[index2++] = array[index++];
        }
      }
      return new BufferAttribute(array2, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
      return this;
    }
    const geometry2 = new BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      const newAttribute = convertBufferAttribute(attribute, indices);
      geometry2.setAttribute(name, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
        const attribute = morphAttribute[i2];
        const newAttribute = convertBufferAttribute(attribute, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups = this.groups;
    for (let i2 = 0, l = groups.length; i2 < l; i2++) {
      const group = groups[i2];
      geometry2.addGroup(group.start, group.count, group.materialIndex);
    }
    return geometry2;
  }
  /**
   * Serializes the geometry into JSON.
   *
   * @return {Object} A JSON object representing the serialized geometry.
   */
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0) data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index = this.index;
    if (index !== null) {
      data.data.index = {
        type: index.array.constructor.name,
        array: Array.prototype.slice.call(index.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      data.data.attributes[key] = attribute.toJSON(data.data);
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array = [];
      for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
        const attribute = attributeArray[i2];
        array.push(attribute.toJSON(data.data));
      }
      if (array.length > 0) {
        morphAttributes[key] = array;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups = this.groups;
    if (groups.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  }
  /**
   * Returns a new geometry with copied values from this instance.
   *
   * @return {BufferGeometry} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given geometry to this instance.
   *
   * @param {BufferGeometry} source - The geometry to copy.
   * @return {BufferGeometry} A reference to this instance.
   */
  copy(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index = source.index;
    if (index !== null) {
      this.setIndex(index.clone());
    }
    const attributes = source.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      this.setAttribute(name, attribute.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name in morphAttributes) {
      const array = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, l = morphAttribute.length; i2 < l; i2++) {
        array.push(morphAttribute[i2].clone(data));
      }
      this.morphAttributes[name] = array;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups = source.groups;
    for (let i2 = 0, l = groups.length; i2 < l; i2++) {
      const group = groups[i2];
      this.addGroup(group.start, group.count, group.materialIndex);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires BufferGeometry#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
const _ray$3 = /* @__PURE__ */ new Ray();
const _sphere$6 = /* @__PURE__ */ new Sphere();
const _sphereHitAt = /* @__PURE__ */ new Vector3();
const _vA$1 = /* @__PURE__ */ new Vector3();
const _vB$1 = /* @__PURE__ */ new Vector3();
const _vC$1 = /* @__PURE__ */ new Vector3();
const _tempA = /* @__PURE__ */ new Vector3();
const _morphA = /* @__PURE__ */ new Vector3();
const _intersectionPoint = /* @__PURE__ */ new Vector3();
const _intersectionPointWorld = /* @__PURE__ */ new Vector3();
class Mesh extends Object3D {
  /**
   * Constructs a new mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(geometry2 = new BufferGeometry(), material2 = new MeshBasicMaterial()) {
    super();
    this.isMesh = true;
    this.type = "Mesh";
    this.geometry = geometry2;
    this.material = material2;
    this.morphTargetDictionary = void 0;
    this.morphTargetInfluences = void 0;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  /**
   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const geometry2 = this.geometry;
    const morphAttributes = geometry2.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
          const name = morphAttribute[m].name || String(m);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m;
        }
      }
    }
  }
  /**
   * Returns the local-space position of the vertex at the given index, taking into
   * account the current animation state of both morph targets and skinning.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * @return {Vector3} The vertex position in local space.
   */
  getVertexPosition(index, target) {
    const geometry2 = this.geometry;
    const position = geometry2.attributes.position;
    const morphPosition = geometry2.morphAttributes.position;
    const morphTargetsRelative = geometry2.morphTargetsRelative;
    target.fromBufferAttribute(position, index);
    const morphInfluences = this.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
        const influence = morphInfluences[i2];
        const morphAttribute = morphPosition[i2];
        if (influence === 0) continue;
        _tempA.fromBufferAttribute(morphAttribute, index);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(target), influence);
        }
      }
      target.add(_morphA);
    }
    return target;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(raycaster, intersects) {
    const geometry2 = this.geometry;
    const material2 = this.material;
    const matrixWorld = this.matrixWorld;
    if (material2 === void 0) return;
    if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
    _sphere$6.copy(geometry2.boundingSphere);
    _sphere$6.applyMatrix4(matrixWorld);
    _ray$3.copy(raycaster.ray).recast(raycaster.near);
    if (_sphere$6.containsPoint(_ray$3.origin) === false) {
      if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
      if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
    }
    _inverseMatrix$3.copy(matrixWorld).invert();
    _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
    if (geometry2.boundingBox !== null) {
      if (_ray$3.intersectsBox(geometry2.boundingBox) === false) return;
    }
    this._computeIntersections(raycaster, intersects, _ray$3);
  }
  _computeIntersections(raycaster, intersects, rayLocalSpace) {
    let intersection;
    const geometry2 = this.geometry;
    const material2 = this.material;
    const index = geometry2.index;
    const position = geometry2.attributes.position;
    const uv = geometry2.attributes.uv;
    const uv1 = geometry2.attributes.uv1;
    const normal = geometry2.attributes.normal;
    const groups = geometry2.groups;
    const drawRange = geometry2.drawRange;
    if (index !== null) {
      if (Array.isArray(material2)) {
        for (let i2 = 0, il = groups.length; i2 < il; i2++) {
          const group = groups[i2];
          const groupMaterial = material2[group.materialIndex];
          const start = Math.max(group.start, drawRange.start);
          const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
          for (let j = start, jl = end; j < jl; j += 3) {
            const a = index.getX(j);
            const b = index.getX(j + 1);
            const c = index.getX(j + 2);
            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(j / 3);
              intersection.face.materialIndex = group.materialIndex;
              intersects.push(intersection);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a = index.getX(i2);
          const b = index.getX(i2 + 1);
          const c = index.getX(i2 + 2);
          intersection = checkGeometryIntersection(this, material2, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
          if (intersection) {
            intersection.faceIndex = Math.floor(i2 / 3);
            intersects.push(intersection);
          }
        }
      }
    } else if (position !== void 0) {
      if (Array.isArray(material2)) {
        for (let i2 = 0, il = groups.length; i2 < il; i2++) {
          const group = groups[i2];
          const groupMaterial = material2[group.materialIndex];
          const start = Math.max(group.start, drawRange.start);
          const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
          for (let j = start, jl = end; j < jl; j += 3) {
            const a = j;
            const b = j + 1;
            const c = j + 2;
            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(j / 3);
              intersection.face.materialIndex = group.materialIndex;
              intersects.push(intersection);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(position.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a = i2;
          const b = i2 + 1;
          const c = i2 + 2;
          intersection = checkGeometryIntersection(this, material2, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
          if (intersection) {
            intersection.faceIndex = Math.floor(i2 / 3);
            intersects.push(intersection);
          }
        }
      }
    }
  }
}
function checkIntersection$1(object, material2, raycaster, ray, pA, pB, pC, point) {
  let intersect2;
  if (material2.side === BackSide) {
    intersect2 = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect2 = ray.intersectTriangle(pA, pB, pC, material2.side === FrontSide, point);
  }
  if (intersect2 === null) return null;
  _intersectionPointWorld.copy(point);
  _intersectionPointWorld.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance < raycaster.near || distance > raycaster.far) return null;
  return {
    distance,
    point: _intersectionPointWorld.clone(),
    object
  };
}
function checkGeometryIntersection(object, material2, raycaster, ray, uv, uv1, normal, a, b, c) {
  object.getVertexPosition(a, _vA$1);
  object.getVertexPosition(b, _vB$1);
  object.getVertexPosition(c, _vC$1);
  const intersection = checkIntersection$1(object, material2, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
  if (intersection) {
    const barycoord = new Vector3();
    Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
    if (uv) {
      intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
    }
    if (uv1) {
      intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
    }
    if (normal) {
      intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
      if (intersection.normal.dot(ray.direction) > 0) {
        intersection.normal.multiplyScalar(-1);
      }
    }
    const face = {
      a,
      b,
      c,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
    intersection.face = face;
    intersection.barycoord = barycoord;
  }
  return intersection;
}
class BoxGeometry extends BufferGeometry {
  /**
   * Constructs a new box geometry.
   *
   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
   */
  constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth2 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segmentWidth - widthHalf;
          vector[u] = x * udir;
          vector[v] = y * vdir;
          vector[w] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u] = 0;
          vector[v] = 0;
          vector[w] = depth2 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {BoxGeometry} A new instance.
   */
  static fromJSON(data) {
    return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
  }
}
function cloneUniforms(src) {
  const dst = {};
  for (const u in src) {
    dst[u] = {};
    for (const p in src[u]) {
      const property = src[u][p];
      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
        if (property.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          dst[u][p] = null;
        } else {
          dst[u][p] = property.clone();
        }
      } else if (Array.isArray(property)) {
        dst[u][p] = property.slice();
      } else {
        dst[u][p] = property;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u = 0; u < uniforms.length; u++) {
    const tmp = cloneUniforms(uniforms[u]);
    for (const p in tmp) {
      merged[p] = tmp[p];
    }
  }
  return merged;
}
function cloneUniformsGroups(src) {
  const dst = [];
  for (let u = 0; u < src.length; u++) {
    dst.push(src[u].clone());
  }
  return dst;
}
function getUnlitUniformColorSpace(renderer2) {
  const currentRenderTarget = renderer2.getRenderTarget();
  if (currentRenderTarget === null) {
    return renderer2.outputColorSpace;
  }
  if (currentRenderTarget.isXRRenderTarget === true) {
    return currentRenderTarget.texture.colorSpace;
  }
  return ColorManagement.workingColorSpace;
}
const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
class ShaderMaterial extends Material {
  /**
   * Constructs a new shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isShaderMaterial = true;
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.uniformsGroups = [];
    this.vertexShader = default_vertex;
    this.fragmentShader = default_fragment;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.forceSinglePass = true;
    this.extensions = {
      clipCullDistance: false,
      // set to use vertex shader clipping
      multiDraw: false
      // set to use vertex shader multi_draw / enable gl_DrawID
    };
    this.defaultAttributeValues = {
      "color": [1, 1, 1],
      "uv": [0, 0],
      "uv1": [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      this.setValues(parameters);
    }
  }
  copy(source) {
    super.copy(source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms(source.uniforms);
    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.fog = source.fog;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name in this.uniforms) {
      const uniform = this.uniforms[name];
      const value = uniform.value;
      if (value && value.isTexture) {
        data.uniforms[name] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0) data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    data.lights = this.lights;
    data.clipping = this.clipping;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true) extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0) data.extensions = extensions;
    return data;
  }
}
class Camera extends Object3D {
  /**
   * Constructs a new camera.
   */
  constructor() {
    super();
    this.isCamera = true;
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix4();
    this.projectionMatrix = new Matrix4();
    this.projectionMatrixInverse = new Matrix4();
    this.coordinateSystem = WebGLCoordinateSystem;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    this.coordinateSystem = source.coordinateSystem;
    return this;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * This method is overwritten since cameras have a different forward vector compared to other
   * 3D objects. A camera looks down its local, negative z-axis by default.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(target) {
    return super.getWorldDirection(target).negate();
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(updateParents, updateChildren) {
    super.updateWorldMatrix(updateParents, updateChildren);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const _v3$1 = /* @__PURE__ */ new Vector3();
const _minTarget = /* @__PURE__ */ new Vector2();
const _maxTarget = /* @__PURE__ */ new Vector2();
class PerspectiveCamera extends Camera {
  /**
   * Constructs a new perspective camera.
   *
   * @param {number} [fov=50] - The vertical field of view.
   * @param {number} [aspect=1] - The aspect ratio.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
    super();
    this.isPerspectiveCamera = true;
    this.type = "PerspectiveCamera";
    this.fov = fov2;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect2;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  }
  /**
   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  }
  /**
   * Returns the focal length from the current {@link PerspectiveCamera#fov} and
   * {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The computed focal length.
   */
  getFocalLength() {
    const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  }
  /**
   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
   *
   * @return {number} The effective FOV.
   */
  getEffectiveFOV() {
    return RAD2DEG * 2 * Math.atan(
      Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
    );
  }
  /**
   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  /**
   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
   */
  getViewBounds(distance, minTarget, maxTarget) {
    _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
    _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
   * @returns {Vector2} The view size.
   */
  getViewSize(distance, target) {
    this.getViewBounds(distance, _minTarget, _maxTarget);
    return target.subVectors(_maxTarget, _minTarget);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *```
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *```
   * then for each monitor you would call it like this:
   *```js
   * const w = 1920;
   * const h = 1080;
   * const fullWidth = w * 3;
   * const fullHeight = h * 2;
   *
   * // --A--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   * // --B--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   * // --C--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   * // --D--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   * // --E--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   * // --F--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   * ```
   *
   * Note there is no reason monitors have to be the same size or in a grid.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   */
  setViewOffset(fullWidth, fullHeight, x, y, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const near = this.near;
    let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0) left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
}
const fov = -90;
const aspect = 1;
class CubeCamera extends Object3D {
  /**
   * Constructs a new cube camera.
   *
   * @param {number} near - The camera's near plane.
   * @param {number} far - The camera's far plane.
   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
   */
  constructor(near, far, renderTarget) {
    super();
    this.type = "CubeCamera";
    this.renderTarget = renderTarget;
    this.coordinateSystem = null;
    this.activeMipmapLevel = 0;
    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = this.layers;
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = this.layers;
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = this.layers;
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = this.layers;
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = this.layers;
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = this.layers;
    this.add(cameraNZ);
  }
  /**
   * Must be called when the coordinate system of the cube camera is changed.
   */
  updateCoordinateSystem() {
    const coordinateSystem = this.coordinateSystem;
    const cameras = this.children.concat();
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
    for (const camera2 of cameras) this.remove(camera2);
    if (coordinateSystem === WebGLCoordinateSystem) {
      cameraPX.up.set(0, 1, 0);
      cameraPX.lookAt(1, 0, 0);
      cameraNX.up.set(0, 1, 0);
      cameraNX.lookAt(-1, 0, 0);
      cameraPY.up.set(0, 0, -1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, 1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, 1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, 1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      cameraPX.up.set(0, -1, 0);
      cameraPX.lookAt(-1, 0, 0);
      cameraNX.up.set(0, -1, 0);
      cameraNX.lookAt(1, 0, 0);
      cameraPY.up.set(0, 0, 1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, -1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, -1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, -1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else {
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
    }
    for (const camera2 of cameras) {
      this.add(camera2);
      camera2.updateMatrixWorld();
    }
  }
  /**
   * Calling this method will render the given scene with the given renderer
   * into the cube render target of the camera.
   *
   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
   * @param {Scene} scene - The scene to render.
   */
  update(renderer2, scene2) {
    if (this.parent === null) this.updateMatrixWorld();
    const { renderTarget, activeMipmapLevel } = this;
    if (this.coordinateSystem !== renderer2.coordinateSystem) {
      this.coordinateSystem = renderer2.coordinateSystem;
      this.updateCoordinateSystem();
    }
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
    const currentRenderTarget = renderer2.getRenderTarget();
    const currentActiveCubeFace = renderer2.getActiveCubeFace();
    const currentActiveMipmapLevel = renderer2.getActiveMipmapLevel();
    const currentXrEnabled = renderer2.xr.enabled;
    renderer2.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer2.setRenderTarget(renderTarget, 0, activeMipmapLevel);
    renderer2.render(scene2, cameraPX);
    renderer2.setRenderTarget(renderTarget, 1, activeMipmapLevel);
    renderer2.render(scene2, cameraNX);
    renderer2.setRenderTarget(renderTarget, 2, activeMipmapLevel);
    renderer2.render(scene2, cameraPY);
    renderer2.setRenderTarget(renderTarget, 3, activeMipmapLevel);
    renderer2.render(scene2, cameraNY);
    renderer2.setRenderTarget(renderTarget, 4, activeMipmapLevel);
    renderer2.render(scene2, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer2.setRenderTarget(renderTarget, 5, activeMipmapLevel);
    renderer2.render(scene2, cameraNZ);
    renderer2.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
    renderer2.xr.enabled = currentXrEnabled;
    renderTarget.texture.needsPMREMUpdate = true;
  }
}
class CubeTexture extends Texture {
  /**
   * Constructs a new cube texture.
   *
   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space value.
   */
  constructor(images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
    this.isCubeTexture = true;
    this.flipY = false;
  }
  /**
   * Alias for {@link CubeTexture#image}.
   *
   * @type {Array<Image>}
   */
  get images() {
    return this.image;
  }
  set images(value) {
    this.image = value;
  }
}
class WebGLCubeRenderTarget extends WebGLRenderTarget {
  /**
   * Constructs a new cube render target.
   *
   * @param {number} [size=1] - The size of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(size = 1, options = {}) {
    super(size, size, options);
    this.isWebGLCubeRenderTarget = true;
    const image = { width: size, height: size, depth: 1 };
    const images = [image, image, image, image, image, image];
    this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
  }
  /**
   * Converts the given equirectangular texture to a cube map.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Texture} texture - The equirectangular texture.
   * @return {WebGLCubeRenderTarget} A reference to this cube render target.
   */
  fromEquirectangularTexture(renderer2, texture) {
    this.texture.type = texture.type;
    this.texture.colorSpace = texture.colorSpace;
    this.texture.generateMipmaps = texture.generateMipmaps;
    this.texture.minFilter = texture.minFilter;
    this.texture.magFilter = texture.magFilter;
    const shader = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    };
    const geometry2 = new BoxGeometry(5, 5, 5);
    const material2 = new ShaderMaterial({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide,
      blending: NoBlending
    });
    material2.uniforms.tEquirect.value = texture;
    const mesh2 = new Mesh(geometry2, material2);
    const currentMinFilter = texture.minFilter;
    if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
    const camera2 = new CubeCamera(1, 10, this);
    camera2.update(renderer2, mesh2);
    texture.minFilter = currentMinFilter;
    mesh2.geometry.dispose();
    mesh2.material.dispose();
    return this;
  }
  /**
   * Clears this cube render target.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   */
  clear(renderer2, color = true, depth = true, stencil = true) {
    const currentRenderTarget = renderer2.getRenderTarget();
    for (let i2 = 0; i2 < 6; i2++) {
      renderer2.setRenderTarget(this, i2);
      renderer2.clear(color, depth, stencil);
    }
    renderer2.setRenderTarget(currentRenderTarget);
  }
}
class Group extends Object3D {
  constructor() {
    super();
    this.isGroup = true;
    this.type = "Group";
  }
}
const _moveEvent = { type: "move" };
class WebXRController {
  /**
   * Constructs a new XR controller.
   */
  constructor() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  /**
   * Returns a group representing the hand space of the XR controller.
   *
   * @return {Group} A group representing the hand space of the XR controller.
   */
  getHandSpace() {
    if (this._hand === null) {
      this._hand = new Group();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = {};
      this._hand.inputState = { pinching: false };
    }
    return this._hand;
  }
  /**
   * Returns a group representing the target ray space of the XR controller.
   *
   * @return {Group} A group representing the target ray space of the XR controller.
   */
  getTargetRaySpace() {
    if (this._targetRay === null) {
      this._targetRay = new Group();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
      this._targetRay.hasLinearVelocity = false;
      this._targetRay.linearVelocity = new Vector3();
      this._targetRay.hasAngularVelocity = false;
      this._targetRay.angularVelocity = new Vector3();
    }
    return this._targetRay;
  }
  /**
   * Returns a group representing the grip space of the XR controller.
   *
   * @return {Group} A group representing the grip space of the XR controller.
   */
  getGripSpace() {
    if (this._grip === null) {
      this._grip = new Group();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
      this._grip.hasLinearVelocity = false;
      this._grip.linearVelocity = new Vector3();
      this._grip.hasAngularVelocity = false;
      this._grip.angularVelocity = new Vector3();
    }
    return this._grip;
  }
  /**
   * Dispatches the given event to the groups representing
   * the different coordinate spaces of the XR controller.
   *
   * @param {Object} event - The event to dispatch.
   * @return {WebXRController} A reference to this instance.
   */
  dispatchEvent(event) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(event);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(event);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(event);
    }
    return this;
  }
  /**
   * Connects the controller with the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  connect(inputSource) {
    if (inputSource && inputSource.hand) {
      const hand = this._hand;
      if (hand) {
        for (const inputjoint of inputSource.hand.values()) {
          this._getHandJoint(hand, inputjoint);
        }
      }
    }
    this.dispatchEvent({ type: "connected", data: inputSource });
    return this;
  }
  /**
   * Disconnects the controller from the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  disconnect(inputSource) {
    this.dispatchEvent({ type: "disconnected", data: inputSource });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  }
  /**
   * Updates the controller with the given input source, XR frame and reference space.
   * This updates the transformations of the groups that represent the different
   * coordinate systems of the controller.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @param {XRFrame} frame - The XR frame.
   * @param {XRReferenceSpace} referenceSpace - The reference space.
   * @return {WebXRController} A reference to this instance.
   */
  update(inputSource, frame, referenceSpace) {
    let inputPose = null;
    let gripPose = null;
    let handPose = null;
    const targetRay = this._targetRay;
    const grip = this._grip;
    const hand = this._hand;
    if (inputSource && frame.session.visibilityState !== "visible-blurred") {
      if (hand && inputSource.hand) {
        handPose = true;
        for (const inputjoint of inputSource.hand.values()) {
          const jointPose = frame.getJointPose(inputjoint, referenceSpace);
          const joint = this._getHandJoint(hand, inputjoint);
          if (jointPose !== null) {
            joint.matrix.fromArray(jointPose.transform.matrix);
            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
            joint.matrixWorldNeedsUpdate = true;
            joint.jointRadius = jointPose.radius;
          }
          joint.visible = jointPose !== null;
        }
        const indexTip = hand.joints["index-finger-tip"];
        const thumbTip = hand.joints["thumb-tip"];
        const distance = indexTip.position.distanceTo(thumbTip.position);
        const distanceToPinch = 0.02;
        const threshold = 5e-3;
        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
          hand.inputState.pinching = false;
          this.dispatchEvent({
            type: "pinchend",
            handedness: inputSource.handedness,
            target: this
          });
        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
          hand.inputState.pinching = true;
          this.dispatchEvent({
            type: "pinchstart",
            handedness: inputSource.handedness,
            target: this
          });
        }
      } else {
        if (grip !== null && inputSource.gripSpace) {
          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
          if (gripPose !== null) {
            grip.matrix.fromArray(gripPose.transform.matrix);
            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
            grip.matrixWorldNeedsUpdate = true;
            if (gripPose.linearVelocity) {
              grip.hasLinearVelocity = true;
              grip.linearVelocity.copy(gripPose.linearVelocity);
            } else {
              grip.hasLinearVelocity = false;
            }
            if (gripPose.angularVelocity) {
              grip.hasAngularVelocity = true;
              grip.angularVelocity.copy(gripPose.angularVelocity);
            } else {
              grip.hasAngularVelocity = false;
            }
          }
        }
      }
      if (targetRay !== null) {
        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
        if (inputPose === null && gripPose !== null) {
          inputPose = gripPose;
        }
        if (inputPose !== null) {
          targetRay.matrix.fromArray(inputPose.transform.matrix);
          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
          targetRay.matrixWorldNeedsUpdate = true;
          if (inputPose.linearVelocity) {
            targetRay.hasLinearVelocity = true;
            targetRay.linearVelocity.copy(inputPose.linearVelocity);
          } else {
            targetRay.hasLinearVelocity = false;
          }
          if (inputPose.angularVelocity) {
            targetRay.hasAngularVelocity = true;
            targetRay.angularVelocity.copy(inputPose.angularVelocity);
          } else {
            targetRay.hasAngularVelocity = false;
          }
          this.dispatchEvent(_moveEvent);
        }
      }
    }
    if (targetRay !== null) {
      targetRay.visible = inputPose !== null;
    }
    if (grip !== null) {
      grip.visible = gripPose !== null;
    }
    if (hand !== null) {
      hand.visible = handPose !== null;
    }
    return this;
  }
  /**
   * Returns a group representing the hand joint for the given input joint.
   *
   * @private
   * @param {Group} hand - The group representing the hand space.
   * @param {XRJointSpace} inputjoint - The hand joint data.
   * @return {Group} A group representing the hand joint for the given input joint.
   */
  _getHandJoint(hand, inputjoint) {
    if (hand.joints[inputjoint.jointName] === void 0) {
      const joint = new Group();
      joint.matrixAutoUpdate = false;
      joint.visible = false;
      hand.joints[inputjoint.jointName] = joint;
      hand.add(joint);
    }
    return hand.joints[inputjoint.jointName];
  }
}
class Scene extends Object3D {
  /**
   * Constructs a new scene.
   */
  constructor() {
    super();
    this.isScene = true;
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.backgroundBlurriness = 0;
    this.backgroundIntensity = 1;
    this.backgroundRotation = new Euler();
    this.environmentIntensity = 1;
    this.environmentRotation = new Euler();
    this.overrideMaterial = null;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null) this.background = source.background.clone();
    if (source.environment !== null) this.environment = source.environment.clone();
    if (source.fog !== null) this.fog = source.fog.clone();
    this.backgroundBlurriness = source.backgroundBlurriness;
    this.backgroundIntensity = source.backgroundIntensity;
    this.backgroundRotation.copy(source.backgroundRotation);
    this.environmentIntensity = source.environmentIntensity;
    this.environmentRotation.copy(source.environmentRotation);
    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.fog !== null) data.object.fog = this.fog.toJSON();
    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
    data.object.backgroundRotation = this.backgroundRotation.toArray();
    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
    data.object.environmentRotation = this.environmentRotation.toArray();
    return data;
  }
}
class InterleavedBuffer {
  /**
   * Constructs a new interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   */
  constructor(array, stride) {
    this.isInterleavedBuffer = true;
    this.array = array;
    this.stride = stride;
    this.count = array !== void 0 ? array.length / stride : 0;
    this.usage = StaticDrawUsage;
    this.updateRanges = [];
    this.version = 0;
    this.uuid = generateUUID();
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute array
   * data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  /**
   * Sets the usage of this interleaved buffer.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {InterleavedBuffer} A reference to this interleaved buffer.
   */
  setUsage(value) {
    this.usage = value;
    return this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(start, count) {
    this.updateRanges.push({ start, count });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given interleaved buffer to this instance.
   *
   * @param {InterleavedBuffer} source - The interleaved buffer to copy.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copy(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  }
  /**
   * Copies a vector from the given interleaved buffer to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this interleaved buffer.
   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.
   * @param {number} index2 - The source index into the given interleaved buffer.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copyAt(index1, interleavedBuffer, index2) {
    index1 *= this.stride;
    index2 *= interleavedBuffer.stride;
    for (let i2 = 0, l = this.stride; i2 < l; i2++) {
      this.array[index1 + i2] = interleavedBuffer.array[index2 + i2];
    }
    return this;
  }
  /**
   * Sets the given array data in the interleaved buffer.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this interleaved buffer's array.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  /**
   * Returns a new interleaved buffer with copied values from this instance.
   *
   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.
   * @return {InterleavedBuffer} A clone of this instance.
   */
  clone(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib = new this.constructor(array, this.stride);
    ib.setUsage(this.usage);
    return ib;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the array data to the GPU. Can be used to perform clean-up operations after
   * the upload when data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  /**
   * Serializes the interleaved buffer into JSON.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized interleaved buffer.
   */
  toJSON(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const _vector$7 = /* @__PURE__ */ new Vector3();
class InterleavedBufferAttribute {
  /**
   * Constructs a new interleaved buffer attribute.
   *
   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.
   * @param {number} itemSize - The item size.
   * @param {number} offset - The attribute offset into the buffer.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(interleavedBuffer, itemSize, offset, normalized = false) {
    this.isInterleavedBufferAttribute = true;
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized;
  }
  /**
   * The item count of this buffer attribute.
   *
   * @type {number}
   * @readonly
   */
  get count() {
    return this.data.count;
  }
  /**
   * The array holding the interleaved buffer attribute data.
   *
   * @type {TypedArray}
   */
  get array() {
    return this.data.array;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    this.data.needsUpdate = value;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyMatrix4(m) {
    for (let i2 = 0, l = this.data.count; i2 < l; i2++) {
      _vector$7.fromBufferAttribute(this, i2);
      _vector$7.applyMatrix4(m);
      this.setXYZ(i2, _vector$7.x, _vector$7.y, _vector$7.z);
    }
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(m) {
    for (let i2 = 0, l = this.count; i2 < l; i2++) {
      _vector$7.fromBufferAttribute(this, i2);
      _vector$7.applyNormalMatrix(m);
      this.setXYZ(i2, _vector$7.x, _vector$7.y, _vector$7.z);
    }
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  transformDirection(m) {
    for (let i2 = 0, l = this.count; i2 < l; i2++) {
      _vector$7.fromBufferAttribute(this, i2);
      _vector$7.transformDirection(m);
      this.setXYZ(i2, _vector$7.x, _vector$7.y, _vector$7.z);
    }
    return this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(index, component) {
    let value = this.array[index * this.data.stride + this.offset + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setComponent(index, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.data.array[index * this.data.stride + this.offset + component] = value;
    return this;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setX(index, x) {
    if (this.normalized) x = normalize(x, this.array);
    this.data.array[index * this.data.stride + this.offset] = x;
    return this;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setY(index, y) {
    if (this.normalized) y = normalize(y, this.array);
    this.data.array[index * this.data.stride + this.offset + 1] = y;
    return this;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setZ(index, z) {
    if (this.normalized) z = normalize(z, this.array);
    this.data.array[index * this.data.stride + this.offset + 2] = z;
    return this;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setW(index, w) {
    if (this.normalized) w = normalize(w, this.array);
    this.data.array[index * this.data.stride + this.offset + 3] = w;
    return this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(index) {
    let x = this.data.array[index * this.data.stride + this.offset];
    if (this.normalized) x = denormalize(x, this.array);
    return x;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(index) {
    let y = this.data.array[index * this.data.stride + this.offset + 1];
    if (this.normalized) y = denormalize(y, this.array);
    return y;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(index) {
    let z = this.data.array[index * this.data.stride + this.offset + 2];
    if (this.normalized) z = denormalize(z, this.array);
    return z;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(index) {
    let w = this.data.array[index * this.data.stride + this.offset + 3];
    if (this.normalized) w = denormalize(w, this.array);
    return w;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXY(index, x, y) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    return this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZ(index, x, y, z) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z = normalize(z, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    return this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZW(index, x, y, z, w) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z = normalize(z, this.array);
      w = normalize(w, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    this.data.array[index + 3] = w;
    return this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.
   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.
   */
  clone(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const array = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index = i2 * this.data.stride + this.offset;
        for (let j = 0; j < this.itemSize; j++) {
          array.push(this.data.array[index + j]);
        }
      }
      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const array = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index = i2 * this.data.stride + this.offset;
        for (let j = 0; j < this.itemSize; j++) {
          array.push(this.data.array[index + j]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
}
const _basePosition = /* @__PURE__ */ new Vector3();
const _skinIndex = /* @__PURE__ */ new Vector4();
const _skinWeight = /* @__PURE__ */ new Vector4();
const _vector3 = /* @__PURE__ */ new Vector3();
const _matrix4 = /* @__PURE__ */ new Matrix4();
const _vertex = /* @__PURE__ */ new Vector3();
const _sphere$5 = /* @__PURE__ */ new Sphere();
const _inverseMatrix$2 = /* @__PURE__ */ new Matrix4();
const _ray$2 = /* @__PURE__ */ new Ray();
class SkinnedMesh extends Mesh {
  /**
   * Constructs a new skinned mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(geometry2, material2) {
    super(geometry2, material2);
    this.isSkinnedMesh = true;
    this.type = "SkinnedMesh";
    this.bindMode = AttachedBindMode;
    this.bindMatrix = new Matrix4();
    this.bindMatrixInverse = new Matrix4();
    this.boundingBox = null;
    this.boundingSphere = null;
  }
  /**
   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect
   * the current animation state.
   */
  computeBoundingBox() {
    const geometry2 = this.geometry;
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    this.boundingBox.makeEmpty();
    const positionAttribute = geometry2.getAttribute("position");
    for (let i2 = 0; i2 < positionAttribute.count; i2++) {
      this.getVertexPosition(i2, _vertex);
      this.boundingBox.expandByPoint(_vertex);
    }
  }
  /**
   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.
   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting
   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed
   * per frame in order to reflect the current animation state.
   */
  computeBoundingSphere() {
    const geometry2 = this.geometry;
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    this.boundingSphere.makeEmpty();
    const positionAttribute = geometry2.getAttribute("position");
    for (let i2 = 0; i2 < positionAttribute.count; i2++) {
      this.getVertexPosition(i2, _vertex);
      this.boundingSphere.expandByPoint(_vertex);
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.bindMode = source.bindMode;
    this.bindMatrix.copy(source.bindMatrix);
    this.bindMatrixInverse.copy(source.bindMatrixInverse);
    this.skeleton = source.skeleton;
    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
    return this;
  }
  raycast(raycaster, intersects) {
    const material2 = this.material;
    const matrixWorld = this.matrixWorld;
    if (material2 === void 0) return;
    if (this.boundingSphere === null) this.computeBoundingSphere();
    _sphere$5.copy(this.boundingSphere);
    _sphere$5.applyMatrix4(matrixWorld);
    if (raycaster.ray.intersectsSphere(_sphere$5) === false) return;
    _inverseMatrix$2.copy(matrixWorld).invert();
    _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
    if (this.boundingBox !== null) {
      if (_ray$2.intersectsBox(this.boundingBox) === false) return;
    }
    this._computeIntersections(raycaster, intersects, _ray$2);
  }
  getVertexPosition(index, target) {
    super.getVertexPosition(index, target);
    this.applyBoneTransform(index, target);
    return target;
  }
  /**
   * Binds the given skeleton to the skinned mesh.
   *
   * @param {Skeleton} skeleton - The skeleton to bind.
   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,
   * the skinned mesh's world matrix will be used instead.
   */
  bind(skeleton, bindMatrix) {
    this.skeleton = skeleton;
    if (bindMatrix === void 0) {
      this.updateMatrixWorld(true);
      this.skeleton.calculateInverses();
      bindMatrix = this.matrixWorld;
    }
    this.bindMatrix.copy(bindMatrix);
    this.bindMatrixInverse.copy(bindMatrix).invert();
  }
  /**
   * This method sets the skinned mesh in the rest pose).
   */
  pose() {
    this.skeleton.pose();
  }
  /**
   * Normalizes the skin weights which are defined as a buffer attribute
   * in the skinned mesh's geometry.
   */
  normalizeSkinWeights() {
    const vector = new Vector4();
    const skinWeight = this.geometry.attributes.skinWeight;
    for (let i2 = 0, l = skinWeight.count; i2 < l; i2++) {
      vector.fromBufferAttribute(skinWeight, i2);
      const scale = 1 / vector.manhattanLength();
      if (scale !== Infinity) {
        vector.multiplyScalar(scale);
      } else {
        vector.set(1, 0, 0, 0);
      }
      skinWeight.setXYZW(i2, vector.x, vector.y, vector.z, vector.w);
    }
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    if (this.bindMode === AttachedBindMode) {
      this.bindMatrixInverse.copy(this.matrixWorld).invert();
    } else if (this.bindMode === DetachedBindMode) {
      this.bindMatrixInverse.copy(this.bindMatrix).invert();
    } else {
      console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
  }
  /**
   * Applies the bone transform associated with the given index to the given
   * vertex position. Returns the updated vector.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * the skinned mesh's world matrix will be used instead.
   * @return {Vector3} The updated vertex position.
   */
  applyBoneTransform(index, target) {
    const skeleton = this.skeleton;
    const geometry2 = this.geometry;
    _skinIndex.fromBufferAttribute(geometry2.attributes.skinIndex, index);
    _skinWeight.fromBufferAttribute(geometry2.attributes.skinWeight, index);
    _basePosition.copy(target).applyMatrix4(this.bindMatrix);
    target.set(0, 0, 0);
    for (let i2 = 0; i2 < 4; i2++) {
      const weight = _skinWeight.getComponent(i2);
      if (weight !== 0) {
        const boneIndex = _skinIndex.getComponent(i2);
        _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
        target.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);
      }
    }
    return target.applyMatrix4(this.bindMatrixInverse);
  }
}
class Bone extends Object3D {
  /**
   * Constructs a new bone.
   */
  constructor() {
    super();
    this.isBone = true;
    this.type = "Bone";
  }
}
class DataTexture extends Texture {
  /**
   * Constructs a new data texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=NearestFilter] - The mag filter value.
   * @param {number} [minFilter=NearestFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
    this.isDataTexture = true;
    this.image = { data, width, height };
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
}
const _offsetMatrix = /* @__PURE__ */ new Matrix4();
const _identityMatrix$1 = /* @__PURE__ */ new Matrix4();
class Skeleton {
  /**
   * Constructs a new skeleton.
   *
   * @param {Array<Bone>} [bones] - An array of bones.
   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.
   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.
   */
  constructor(bones = [], boneInverses = []) {
    this.uuid = generateUUID();
    this.bones = bones.slice(0);
    this.boneInverses = boneInverses;
    this.boneMatrices = null;
    this.boneTexture = null;
    this.init();
  }
  /**
   * Initializes the skeleton. This method gets automatically called by the constructor
   * but depending on how the skeleton is created it might be necessary to call this method
   * manually.
   */
  init() {
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    this.boneMatrices = new Float32Array(bones.length * 16);
    if (boneInverses.length === 0) {
      this.calculateInverses();
    } else {
      if (bones.length !== boneInverses.length) {
        console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
        this.boneInverses = [];
        for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
          this.boneInverses.push(new Matrix4());
        }
      }
    }
  }
  /**
   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}
   * and fills it with new matrices.
   */
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const inverse = new Matrix4();
      if (this.bones[i2]) {
        inverse.copy(this.bones[i2].matrixWorld).invert();
      }
      this.boneInverses.push(inverse);
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  pose() {
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone) {
        bone.matrixWorld.copy(this.boneInverses[i2]).invert();
      }
    }
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone) {
        if (bone.parent && bone.parent.isBone) {
          bone.matrix.copy(bone.parent.matrixWorld).invert();
          bone.matrix.multiply(bone.matrixWorld);
        } else {
          bone.matrix.copy(bone.matrixWorld);
        }
        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
      }
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  update() {
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    const boneMatrices = this.boneMatrices;
    const boneTexture = this.boneTexture;
    for (let i2 = 0, il = bones.length; i2 < il; i2++) {
      const matrix = bones[i2] ? bones[i2].matrixWorld : _identityMatrix$1;
      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i2]);
      _offsetMatrix.toArray(boneMatrices, i2 * 16);
    }
    if (boneTexture !== null) {
      boneTexture.needsUpdate = true;
    }
  }
  /**
   * Returns a new skeleton with copied values from this instance.
   *
   * @return {Skeleton} A clone of this instance.
   */
  clone() {
    return new Skeleton(this.bones, this.boneInverses);
  }
  /**
   * Computes a data texture for passing bone data to the vertex shader.
   *
   * @return {Skeleton} A reference of this instance.
   */
  computeBoneTexture() {
    let size = Math.sqrt(this.bones.length * 4);
    size = Math.ceil(size / 4) * 4;
    size = Math.max(size, 4);
    const boneMatrices = new Float32Array(size * size * 4);
    boneMatrices.set(this.boneMatrices);
    const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
    boneTexture.needsUpdate = true;
    this.boneMatrices = boneMatrices;
    this.boneTexture = boneTexture;
    return this;
  }
  /**
   * Searches through the skeleton's bone array and returns the first with a
   * matching name.
   *
   * @param {string} name - The name of the bone.
   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.
   */
  getBoneByName(name) {
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone.name === name) {
        return bone;
      }
    }
    return void 0;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    if (this.boneTexture !== null) {
      this.boneTexture.dispose();
      this.boneTexture = null;
    }
  }
  /**
   * Setups the skeleton by the given JSON and bones.
   *
   * @param {Object} json - The skeleton as serialized JSON.
   * @param {Object<string, Bone>} bones - An array of bones.
   * @return {Skeleton} A reference of this instance.
   */
  fromJSON(json, bones) {
    this.uuid = json.uuid;
    for (let i2 = 0, l = json.bones.length; i2 < l; i2++) {
      const uuid = json.bones[i2];
      let bone = bones[uuid];
      if (bone === void 0) {
        console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
        bone = new Bone();
      }
      this.bones.push(bone);
      this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i2]));
    }
    this.init();
    return this;
  }
  /**
   * Serializes the skeleton into JSON.
   *
   * @return {Object} A JSON object representing the serialized skeleton.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    data.uuid = this.uuid;
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    for (let i2 = 0, l = bones.length; i2 < l; i2++) {
      const bone = bones[i2];
      data.bones.push(bone.uuid);
      const boneInverse = boneInverses[i2];
      data.boneInverses.push(boneInverse.toArray());
    }
    return data;
  }
}
class InstancedBufferAttribute extends BufferAttribute {
  /**
   * Constructs a new instanced buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.
   */
  constructor(array, itemSize, normalized, meshPerAttribute = 1) {
    super(array, itemSize, normalized);
    this.isInstancedBufferAttribute = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.meshPerAttribute = this.meshPerAttribute;
    data.isInstancedBufferAttribute = true;
    return data;
  }
}
const _instanceLocalMatrix = /* @__PURE__ */ new Matrix4();
const _instanceWorldMatrix = /* @__PURE__ */ new Matrix4();
const _instanceIntersects = [];
const _box3 = /* @__PURE__ */ new Box3();
const _identity = /* @__PURE__ */ new Matrix4();
const _mesh$1 = /* @__PURE__ */ new Mesh();
const _sphere$4 = /* @__PURE__ */ new Sphere();
class InstancedMesh extends Mesh {
  /**
   * Constructs a new instanced mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   * @param {number} count - The number of instances.
   */
  constructor(geometry2, material2, count) {
    super(geometry2, material2);
    this.isInstancedMesh = true;
    this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
    this.instanceColor = null;
    this.morphTexture = null;
    this.count = count;
    this.boundingBox = null;
    this.boundingSphere = null;
    for (let i2 = 0; i2 < count; i2++) {
      this.setMatrixAt(i2, _identity);
    }
  }
  /**
   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingBox() {
    const geometry2 = this.geometry;
    const count = this.count;
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    if (geometry2.boundingBox === null) {
      geometry2.computeBoundingBox();
    }
    this.boundingBox.makeEmpty();
    for (let i2 = 0; i2 < count; i2++) {
      this.getMatrixAt(i2, _instanceLocalMatrix);
      _box3.copy(geometry2.boundingBox).applyMatrix4(_instanceLocalMatrix);
      this.boundingBox.union(_box3);
    }
  }
  /**
   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingSphere() {
    const geometry2 = this.geometry;
    const count = this.count;
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    if (geometry2.boundingSphere === null) {
      geometry2.computeBoundingSphere();
    }
    this.boundingSphere.makeEmpty();
    for (let i2 = 0; i2 < count; i2++) {
      this.getMatrixAt(i2, _instanceLocalMatrix);
      _sphere$4.copy(geometry2.boundingSphere).applyMatrix4(_instanceLocalMatrix);
      this.boundingSphere.union(_sphere$4);
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.instanceMatrix.copy(source.instanceMatrix);
    if (source.morphTexture !== null) this.morphTexture = source.morphTexture.clone();
    if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
    this.count = source.count;
    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
    return this;
  }
  /**
   * Gets the color of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The target object that is used to store the method's result.
   */
  getColorAt(index, color) {
    color.fromArray(this.instanceColor.array, index * 3);
  }
  /**
   * Gets the local transformation matrix of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   */
  getMatrixAt(index, matrix) {
    matrix.fromArray(this.instanceMatrix.array, index * 16);
  }
  /**
   * Gets the morph target weights of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object - The target object that is used to store the method's result.
   */
  getMorphAt(index, object) {
    const objectInfluences = object.morphTargetInfluences;
    const array = this.morphTexture.source.data.data;
    const len = objectInfluences.length + 1;
    const dataIndex = index * len + 1;
    for (let i2 = 0; i2 < objectInfluences.length; i2++) {
      objectInfluences[i2] = array[dataIndex + i2];
    }
  }
  raycast(raycaster, intersects) {
    const matrixWorld = this.matrixWorld;
    const raycastTimes = this.count;
    _mesh$1.geometry = this.geometry;
    _mesh$1.material = this.material;
    if (_mesh$1.material === void 0) return;
    if (this.boundingSphere === null) this.computeBoundingSphere();
    _sphere$4.copy(this.boundingSphere);
    _sphere$4.applyMatrix4(matrixWorld);
    if (raycaster.ray.intersectsSphere(_sphere$4) === false) return;
    for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
      this.getMatrixAt(instanceId, _instanceLocalMatrix);
      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
      _mesh$1.matrixWorld = _instanceWorldMatrix;
      _mesh$1.raycast(raycaster, _instanceIntersects);
      for (let i2 = 0, l = _instanceIntersects.length; i2 < l; i2++) {
        const intersect2 = _instanceIntersects[i2];
        intersect2.instanceId = instanceId;
        intersect2.object = this;
        intersects.push(intersect2);
      }
      _instanceIntersects.length = 0;
    }
  }
  /**
   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The instance color.
   */
  setColorAt(index, color) {
    if (this.instanceColor === null) {
      this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3);
    }
    color.toArray(this.instanceColor.array, index * 3);
  }
  /**
   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The local transformation.
   */
  setMatrixAt(index, matrix) {
    matrix.toArray(this.instanceMatrix.array, index * 16);
  }
  /**
   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights
   * of a single instance.
   */
  setMorphAt(index, object) {
    const objectInfluences = object.morphTargetInfluences;
    const len = objectInfluences.length + 1;
    if (this.morphTexture === null) {
      this.morphTexture = new DataTexture(new Float32Array(len * this.count), len, this.count, RedFormat, FloatType);
    }
    const array = this.morphTexture.source.data.data;
    let morphInfluencesSum = 0;
    for (let i2 = 0; i2 < objectInfluences.length; i2++) {
      morphInfluencesSum += objectInfluences[i2];
    }
    const morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
    const dataIndex = len * index;
    array[dataIndex] = morphBaseInfluence;
    array.set(objectInfluences, dataIndex + 1);
  }
  updateMorphTargets() {
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
    if (this.morphTexture !== null) {
      this.morphTexture.dispose();
      this.morphTexture = null;
    }
  }
}
const _vector1 = /* @__PURE__ */ new Vector3();
const _vector2 = /* @__PURE__ */ new Vector3();
const _normalMatrix = /* @__PURE__ */ new Matrix3();
class Plane {
  /**
   * Constructs a new plane.
   *
   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
   * @param {number} [constant=0] - The signed distance from the origin to the plane.
   */
  constructor(normal = new Vector3(1, 0, 0), constant = 0) {
    this.isPlane = true;
    this.normal = normal;
    this.constant = constant;
  }
  /**
   * Sets the plane components by copying the given values.
   *
   * @param {Vector3} normal - The normal.
   * @param {number} constant - The constant.
   * @return {Plane} A reference to this plane.
   */
  set(normal, constant) {
    this.normal.copy(normal);
    this.constant = constant;
    return this;
  }
  /**
   * Sets the plane components by defining `x`, `y`, `z` as the
   * plane normal and `w` as the constant.
   *
   * @param {number} x - The value for the normal's x component.
   * @param {number} y - The value for the normal's y component.
   * @param {number} z - The value for the normal's z component.
   * @param {number} w - The constant value.
   * @return {Plane} A reference to this plane.
   */
  setComponents(x, y, z, w) {
    this.normal.set(x, y, z);
    this.constant = w;
    return this;
  }
  /**
   * Sets the plane from the given normal and coplanar point (that is a point
   * that lies onto the plane).
   *
   * @param {Vector3} normal - The normal.
   * @param {Vector3} point - A coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromNormalAndCoplanarPoint(normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  }
  /**
   * Sets the plane from three coplanar points. The winding order is
   * assumed to be counter-clockwise, and determines the direction of
   * the plane normal.
   *
   * @param {Vector3} a - The first coplanar point.
   * @param {Vector3} b - The second coplanar point.
   * @param {Vector3} c - The third coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromCoplanarPoints(a, b, c) {
    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
    this.setFromNormalAndCoplanarPoint(normal, a);
    return this;
  }
  /**
   * Copies the values of the given plane to this instance.
   *
   * @param {Plane} plane - The plane to copy.
   * @return {Plane} A reference to this plane.
   */
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  /**
   * Normalizes the plane normal and adjusts the constant accordingly.
   *
   * @return {Plane} A reference to this plane.
   */
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  /**
   * Negates both the plane normal and the constant.
   *
   * @return {Plane} A reference to this plane.
   */
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  /**
   * Returns the signed distance from the given point to this plane.
   *
   * @param {Vector3} point - The point to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToPoint(point) {
    return this.normal.dot(point) + this.constant;
  }
  /**
   * Returns the signed distance from the given sphere to this plane.
   *
   * @param {Sphere} sphere - The sphere to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  /**
   * Projects a the given point onto the plane.
   *
   * @param {Vector3} point - The point to project.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The projected point on the plane.
   */
  projectPoint(point, target) {
    return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
  }
  /**
   * Returns the intersection point of the passed line and the plane. Returns
   * `null` if the line does not intersect. Returns the line's starting point if
   * the line is coplanar with the plane.
   *
   * @param {Line3} line - The line to compute the intersection for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectLine(line, target) {
    const direction = line.delta(_vector1);
    const denominator = this.normal.dot(direction);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return null;
    }
    const t2 = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t2 < 0 || t2 > 1) {
      return null;
    }
    return target.copy(line.start).addScaledVector(direction, t2);
  }
  /**
   * Returns `true` if the given line segment intersects with (passes through) the plane.
   *
   * @param {Line3} line - The line to test.
   * @return {boolean} Whether the given line segment intersects with the plane or not.
   */
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  /**
   * Returns `true` if the given bounding box intersects with the plane.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with the plane or not.
   */
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  /**
   * Returns `true` if the given bounding sphere intersects with the plane.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
   */
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  /**
   * Returns a coplanar vector to the plane, by calculating the
   * projection of the normal at the origin onto the plane.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The coplanar point.
   */
  coplanarPoint(target) {
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  /**
   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
   *
   * The optional normal matrix can be pre-computed like so:
   * ```js
   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
   * ```
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
   * @return {Plane} A reference to this plane.
   */
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
    const normal = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal);
    return this;
  }
  /**
   * Translates the plane by the distance defined by the given offset vector.
   * Note that this only affects the plane constant and will not affect the normal vector.
   *
   * @param {Vector3} offset - The offset vector.
   * @return {Plane} A reference to this plane.
   */
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  /**
   * Returns `true` if this plane is equal with the given one.
   *
   * @param {Plane} plane - The plane to test for equality.
   * @return {boolean} Whether this plane is equal with the given one.
   */
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
  /**
   * Returns a new plane with copied values from this instance.
   *
   * @return {Plane} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const _sphere$3 = /* @__PURE__ */ new Sphere();
const _vector$6 = /* @__PURE__ */ new Vector3();
class Frustum {
  /**
   * Constructs a new frustum.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   */
  constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
    this.planes = [p0, p1, p2, p3, p4, p5];
  }
  /**
   * Sets the frustum planes by copying the given planes.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   * @return {Frustum} A reference to this frustum.
   */
  set(p0, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p0);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  /**
   * Copies the values of the given frustum to this instance.
   *
   * @param {Frustum} frustum - The frustum to copy.
   * @return {Frustum} A reference to this frustum.
   */
  copy(frustum) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      planes[i2].copy(frustum.planes[i2]);
    }
    return this;
  }
  /**
   * Sets the frustum planes from the given projection matrix.
   *
   * @param {Matrix4} m - The projection matrix.
   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
   * @return {Frustum} A reference to this frustum.
   */
  setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
    const planes = this.planes;
    const me = m.elements;
    const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
    const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
    const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
    const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
    if (coordinateSystem === WebGLCoordinateSystem) {
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      planes[5].setComponents(me2, me6, me10, me14).normalize();
    } else {
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
    }
    return this;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
   *
   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
   *
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
   */
  intersectsObject(object) {
    if (object.boundingSphere !== void 0) {
      if (object.boundingSphere === null) object.computeBoundingSphere();
      _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
    } else {
      const geometry2 = object.geometry;
      if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
      _sphere$3.copy(geometry2.boundingSphere).applyMatrix4(object.matrixWorld);
    }
    return this.intersectsSphere(_sphere$3);
  }
  /**
   * Returns `true` if the given sprite is intersecting this frustum.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @return {boolean} Whether the sprite is intersecting this frustum or not.
   */
  intersectsSprite(sprite) {
    _sphere$3.center.set(0, 0, 0);
    _sphere$3.radius = 0.7071067811865476;
    _sphere$3.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$3);
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting this frustum.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
   */
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i2 = 0; i2 < 6; i2++) {
      const distance = planes[i2].distanceToPoint(center);
      if (distance < negRadius) {
        return false;
      }
    }
    return true;
  }
  /**
   * Returns `true` if the given bounding box is intersecting this frustum.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box is intersecting this frustum or not.
   */
  intersectsBox(box) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      const plane = planes[i2];
      _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$6) < 0) {
        return false;
      }
    }
    return true;
  }
  /**
   * Returns `true` if the given point lies within the frustum.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the point lies within this frustum or not.
   */
  containsPoint(point) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      if (planes[i2].distanceToPoint(point) < 0) {
        return false;
      }
    }
    return true;
  }
  /**
   * Returns a new frustum with copied values from this instance.
   *
   * @return {Frustum} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class LineBasicMaterial extends Material {
  /**
   * Constructs a new line basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isLineBasicMaterial = true;
    this.type = "LineBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.fog = source.fog;
    return this;
  }
}
const _vStart = /* @__PURE__ */ new Vector3();
const _vEnd = /* @__PURE__ */ new Vector3();
const _inverseMatrix$1 = /* @__PURE__ */ new Matrix4();
const _ray$1 = /* @__PURE__ */ new Ray();
const _sphere$1 = /* @__PURE__ */ new Sphere();
const _intersectPointOnRay = /* @__PURE__ */ new Vector3();
const _intersectPointOnSegment = /* @__PURE__ */ new Vector3();
class Line extends Object3D {
  /**
   * Constructs a new line.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(geometry2 = new BufferGeometry(), material2 = new LineBasicMaterial()) {
    super();
    this.isLine = true;
    this.type = "Line";
    this.geometry = geometry2;
    this.material = material2;
    this.morphTargetDictionary = void 0;
    this.morphTargetInfluences = void 0;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  /**
   * Computes an array of distance values which are necessary for rendering dashed lines.
   * For each vertex in the geometry, the method calculates the cumulative length from the
   * current point to the very beginning of the line.
   *
   * @return {Line} A reference to this line.
   */
  computeLineDistances() {
    const geometry2 = this.geometry;
    if (geometry2.index === null) {
      const positionAttribute = geometry2.attributes.position;
      const lineDistances = [0];
      for (let i2 = 1, l = positionAttribute.count; i2 < l; i2++) {
        _vStart.fromBufferAttribute(positionAttribute, i2 - 1);
        _vEnd.fromBufferAttribute(positionAttribute, i2);
        lineDistances[i2] = lineDistances[i2 - 1];
        lineDistances[i2] += _vStart.distanceTo(_vEnd);
      }
      geometry2.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(raycaster, intersects) {
    const geometry2 = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Line.threshold;
    const drawRange = geometry2.drawRange;
    if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
    _sphere$1.copy(geometry2.boundingSphere);
    _sphere$1.applyMatrix4(matrixWorld);
    _sphere$1.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
    _inverseMatrix$1.copy(matrixWorld).invert();
    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const step = this.isLineSegments ? 2 : 1;
    const index = geometry2.index;
    const attributes = geometry2.attributes;
    const positionAttribute = attributes.position;
    if (index !== null) {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(index.count, drawRange.start + drawRange.count);
      for (let i2 = start, l = end - 1; i2 < l; i2 += step) {
        const a = index.getX(i2);
        const b = index.getX(i2 + 1);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, i2);
        if (intersect2) {
          intersects.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const a = index.getX(end - 1);
        const b = index.getX(start);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, end - 1);
        if (intersect2) {
          intersects.push(intersect2);
        }
      }
    } else {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (let i2 = start, l = end - 1; i2 < l; i2 += step) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i2, i2 + 1, i2);
        if (intersect2) {
          intersects.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1);
        if (intersect2) {
          intersects.push(intersect2);
        }
      }
    }
  }
  /**
   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const geometry2 = this.geometry;
    const morphAttributes = geometry2.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
          const name = morphAttribute[m].name || String(m);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m;
        }
      }
    }
  }
}
function checkIntersection(object, raycaster, ray, thresholdSq, a, b, i2) {
  const positionAttribute = object.geometry.attributes.position;
  _vStart.fromBufferAttribute(positionAttribute, a);
  _vEnd.fromBufferAttribute(positionAttribute, b);
  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);
  if (distSq > thresholdSq) return;
  _intersectPointOnRay.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);
  if (distance < raycaster.near || distance > raycaster.far) return;
  return {
    distance,
    // What do we want? intersection point on the ray or on the segment??
    // point: raycaster.ray.at( distance ),
    point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),
    index: i2,
    face: null,
    faceIndex: null,
    barycoord: null,
    object
  };
}
const _start = /* @__PURE__ */ new Vector3();
const _end = /* @__PURE__ */ new Vector3();
class LineSegments extends Line {
  /**
   * Constructs a new line segments.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(geometry2, material2) {
    super(geometry2, material2);
    this.isLineSegments = true;
    this.type = "LineSegments";
  }
  computeLineDistances() {
    const geometry2 = this.geometry;
    if (geometry2.index === null) {
      const positionAttribute = geometry2.attributes.position;
      const lineDistances = [];
      for (let i2 = 0, l = positionAttribute.count; i2 < l; i2 += 2) {
        _start.fromBufferAttribute(positionAttribute, i2);
        _end.fromBufferAttribute(positionAttribute, i2 + 1);
        lineDistances[i2] = i2 === 0 ? 0 : lineDistances[i2 - 1];
        lineDistances[i2 + 1] = lineDistances[i2] + _start.distanceTo(_end);
      }
      geometry2.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
}
class LineLoop extends Line {
  /**
   * Constructs a new line loop.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(geometry2, material2) {
    super(geometry2, material2);
    this.isLineLoop = true;
    this.type = "LineLoop";
  }
}
class PointsMaterial extends Material {
  /**
   * Constructs a new points material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isPointsMaterial = true;
    this.type = "PointsMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.size = source.size;
    this.sizeAttenuation = source.sizeAttenuation;
    this.fog = source.fog;
    return this;
  }
}
const _inverseMatrix = /* @__PURE__ */ new Matrix4();
const _ray = /* @__PURE__ */ new Ray();
const _sphere = /* @__PURE__ */ new Sphere();
const _position$2 = /* @__PURE__ */ new Vector3();
class Points extends Object3D {
  /**
   * Constructs a new point cloud.
   *
   * @param {BufferGeometry} [geometry] - The points geometry.
   * @param {Material|Array<Material>} [material] - The points material.
   */
  constructor(geometry2 = new BufferGeometry(), material2 = new PointsMaterial()) {
    super();
    this.isPoints = true;
    this.type = "Points";
    this.geometry = geometry2;
    this.material = material2;
    this.morphTargetDictionary = void 0;
    this.morphTargetInfluences = void 0;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this point cloud.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(raycaster, intersects) {
    const geometry2 = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Points.threshold;
    const drawRange = geometry2.drawRange;
    if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
    _sphere.copy(geometry2.boundingSphere);
    _sphere.applyMatrix4(matrixWorld);
    _sphere.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere) === false) return;
    _inverseMatrix.copy(matrixWorld).invert();
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const index = geometry2.index;
    const attributes = geometry2.attributes;
    const positionAttribute = attributes.position;
    if (index !== null) {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(index.count, drawRange.start + drawRange.count);
      for (let i2 = start, il = end; i2 < il; i2++) {
        const a = index.getX(i2);
        _position$2.fromBufferAttribute(positionAttribute, a);
        testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
      }
    } else {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (let i2 = start, l = end; i2 < l; i2++) {
        _position$2.fromBufferAttribute(positionAttribute, i2);
        testPoint(_position$2, i2, localThresholdSq, matrixWorld, raycaster, intersects, this);
      }
    }
  }
  /**
   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const geometry2 = this.geometry;
    const morphAttributes = geometry2.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
          const name = morphAttribute[m].name || String(m);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m;
        }
      }
    }
  }
}
function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
  const rayPointDistanceSq = _ray.distanceSqToPoint(point);
  if (rayPointDistanceSq < localThresholdSq) {
    const intersectPoint = new Vector3();
    _ray.closestPointToPoint(point, intersectPoint);
    intersectPoint.applyMatrix4(matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far) return;
    intersects.push({
      distance,
      distanceToRay: Math.sqrt(rayPointDistanceSq),
      point: intersectPoint,
      index,
      face: null,
      faceIndex: null,
      barycoord: null,
      object
    });
  }
}
class DepthTexture extends Texture {
  /**
   * Constructs a new depth texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [type=UnsignedIntType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {number} [format=DepthFormat] - The texture format.
   */
  constructor(width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat) {
    if (format !== DepthFormat && format !== DepthStencilFormat) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.isDepthTexture = true;
    this.image = { width, height };
    this.flipY = false;
    this.generateMipmaps = false;
    this.compareFunction = null;
  }
  copy(source) {
    super.copy(source);
    this.source = new Source(Object.assign({}, source.image));
    this.compareFunction = source.compareFunction;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
    return data;
  }
}
class CylinderGeometry extends BufferGeometry {
  /**
   * Constructs a new cylinder geometry.
   *
   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.
   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.
   * @param {number} [height=1] - Height of the cylinder.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.
   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cylinder.
   */
  constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0) generateCap(true);
      if (radiusBottom > 0) generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateTorso() {
      const normal = new Vector3();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y = 0; y <= heightSegments; y++) {
        const indexRow = [];
        const v = y / heightSegments;
        const radius = v * (radiusBottom - radiusTop) + radiusTop;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex2.x = radius * sinTheta;
          vertex2.y = -v * height + halfHeight;
          vertex2.z = radius * cosTheta;
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u, 1 - v);
          indexRow.push(index++);
        }
        indexArray.push(indexRow);
      }
      for (let x = 0; x < radialSegments; x++) {
        for (let y = 0; y < heightSegments; y++) {
          const a = indexArray[y][x];
          const b = indexArray[y + 1][x];
          const c = indexArray[y + 1][x + 1];
          const d = indexArray[y][x + 1];
          if (radiusTop > 0 || y !== 0) {
            indices.push(a, b, d);
            groupCount += 3;
          }
          if (radiusBottom > 0 || y !== heightSegments - 1) {
            indices.push(b, c, d);
            groupCount += 3;
          }
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index;
      const uv = new Vector2();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign = top === true ? 1 : -1;
      for (let x = 1; x <= radialSegments; x++) {
        vertices.push(0, halfHeight * sign, 0);
        normals.push(0, sign, 0);
        uvs.push(0.5, 0.5);
        index++;
      }
      const centerIndexEnd = index;
      for (let x = 0; x <= radialSegments; x++) {
        const u = x / radialSegments;
        const theta = u * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex2.x = radius * sinTheta;
        vertex2.y = halfHeight * sign;
        vertex2.z = radius * cosTheta;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, sign, 0);
        uv.x = cosTheta * 0.5 + 0.5;
        uv.y = sinTheta * 0.5 * sign + 0.5;
        uvs.push(uv.x, uv.y);
        index++;
      }
      for (let x = 0; x < radialSegments; x++) {
        const c = centerIndexStart + x;
        const i2 = centerIndexEnd + x;
        if (top === true) {
          indices.push(i2, i2 + 1, c);
        } else {
          indices.push(i2 + 1, i2, c);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CylinderGeometry} A new instance.
   */
  static fromJSON(data) {
    return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
}
class ConeGeometry extends CylinderGeometry {
  /**
   * Constructs a new cone geometry.
   *
   * @param {number} [radius=1] - Radius of the cone base.
   * @param {number} [height=1] - Height of the cone.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.
   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cone.
   */
  constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {ConeGeometry} A new instance.
   */
  static fromJSON(data) {
    return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
}
class PolyhedronGeometry extends BufferGeometry {
  /**
   * Constructs a new polyhedron geometry.
   *
   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.
   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.
   * @param {number} [radius=1] - The radius of the shape.
   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.
   */
  constructor(vertices = [], indices = [], radius = 1, detail = 0) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    const vertexBuffer = [];
    const uvBuffer = [];
    subdivide(detail);
    applyRadius(radius);
    generateUVs();
    this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
    this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
    if (detail === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function subdivide(detail2) {
      const a = new Vector3();
      const b = new Vector3();
      const c = new Vector3();
      for (let i2 = 0; i2 < indices.length; i2 += 3) {
        getVertexByIndex(indices[i2 + 0], a);
        getVertexByIndex(indices[i2 + 1], b);
        getVertexByIndex(indices[i2 + 2], c);
        subdivideFace(a, b, c, detail2);
      }
    }
    function subdivideFace(a, b, c, detail2) {
      const cols = detail2 + 1;
      const v = [];
      for (let i2 = 0; i2 <= cols; i2++) {
        v[i2] = [];
        const aj = a.clone().lerp(c, i2 / cols);
        const bj = b.clone().lerp(c, i2 / cols);
        const rows = cols - i2;
        for (let j = 0; j <= rows; j++) {
          if (j === 0 && i2 === cols) {
            v[i2][j] = aj;
          } else {
            v[i2][j] = aj.clone().lerp(bj, j / rows);
          }
        }
      }
      for (let i2 = 0; i2 < cols; i2++) {
        for (let j = 0; j < 2 * (cols - i2) - 1; j++) {
          const k = Math.floor(j / 2);
          if (j % 2 === 0) {
            pushVertex(v[i2][k + 1]);
            pushVertex(v[i2 + 1][k]);
            pushVertex(v[i2][k]);
          } else {
            pushVertex(v[i2][k + 1]);
            pushVertex(v[i2 + 1][k + 1]);
            pushVertex(v[i2 + 1][k]);
          }
        }
      }
    }
    function applyRadius(radius2) {
      const vertex2 = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        vertex2.normalize().multiplyScalar(radius2);
        vertexBuffer[i2 + 0] = vertex2.x;
        vertexBuffer[i2 + 1] = vertex2.y;
        vertexBuffer[i2 + 2] = vertex2.z;
      }
    }
    function generateUVs() {
      const vertex2 = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        const u = azimuth(vertex2) / 2 / Math.PI + 0.5;
        const v = inclination(vertex2) / Math.PI + 0.5;
        uvBuffer.push(u, 1 - v);
      }
      correctUVs();
      correctSeam();
    }
    function correctSeam() {
      for (let i2 = 0; i2 < uvBuffer.length; i2 += 6) {
        const x0 = uvBuffer[i2 + 0];
        const x1 = uvBuffer[i2 + 2];
        const x2 = uvBuffer[i2 + 4];
        const max = Math.max(x0, x1, x2);
        const min = Math.min(x0, x1, x2);
        if (max > 0.9 && min < 0.1) {
          if (x0 < 0.2) uvBuffer[i2 + 0] += 1;
          if (x1 < 0.2) uvBuffer[i2 + 2] += 1;
          if (x2 < 0.2) uvBuffer[i2 + 4] += 1;
        }
      }
    }
    function pushVertex(vertex2) {
      vertexBuffer.push(vertex2.x, vertex2.y, vertex2.z);
    }
    function getVertexByIndex(index, vertex2) {
      const stride = index * 3;
      vertex2.x = vertices[stride + 0];
      vertex2.y = vertices[stride + 1];
      vertex2.z = vertices[stride + 2];
    }
    function correctUVs() {
      const a = new Vector3();
      const b = new Vector3();
      const c = new Vector3();
      const centroid = new Vector3();
      const uvA = new Vector2();
      const uvB = new Vector2();
      const uvC = new Vector2();
      for (let i2 = 0, j = 0; i2 < vertexBuffer.length; i2 += 9, j += 6) {
        a.set(vertexBuffer[i2 + 0], vertexBuffer[i2 + 1], vertexBuffer[i2 + 2]);
        b.set(vertexBuffer[i2 + 3], vertexBuffer[i2 + 4], vertexBuffer[i2 + 5]);
        c.set(vertexBuffer[i2 + 6], vertexBuffer[i2 + 7], vertexBuffer[i2 + 8]);
        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
        centroid.copy(a).add(b).add(c).divideScalar(3);
        const azi = azimuth(centroid);
        correctUV(uvA, j + 0, a, azi);
        correctUV(uvB, j + 2, b, azi);
        correctUV(uvC, j + 4, c, azi);
      }
    }
    function correctUV(uv, stride, vector, azimuth2) {
      if (azimuth2 < 0 && uv.x === 1) {
        uvBuffer[stride] = uv.x - 1;
      }
      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
      }
    }
    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    }
    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PolyhedronGeometry} A new instance.
   */
  static fromJSON(data) {
    return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
  }
}
class OctahedronGeometry extends PolyhedronGeometry {
  /**
   * Constructs a new octahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the octahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.
   */
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const indices = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(vertices, indices, radius, detail);
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {OctahedronGeometry} A new instance.
   */
  static fromJSON(data) {
    return new OctahedronGeometry(data.radius, data.detail);
  }
}
class PlaneGeometry extends BufferGeometry {
  /**
   * Constructs a new plane geometry.
   *
   * @param {number} [width=1] - The width along the X axis.
   * @param {number} [height=1] - The height along the Y axis
   * @param {number} [widthSegments=1] - The number of segments along the X axis.
   * @param {number} [heightSegments=1] - The number of segments along the Y axis.
   */
  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments);
    const gridY = Math.floor(heightSegments);
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x = ix * segment_width - width_half;
        vertices.push(x, -y, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a = ix + gridX1 * iy;
        const b = ix + gridX1 * (iy + 1);
        const c = ix + 1 + gridX1 * (iy + 1);
        const d = ix + 1 + gridX1 * iy;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PlaneGeometry} A new instance.
   */
  static fromJSON(data) {
    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
  }
}
class SphereGeometry extends BufferGeometry {
  /**
   * Constructs a new sphere geometry.
   *
   * @param {number} [radius=1] - The sphere radius.
   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.
   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.
   * @param {number} [phiStart=0] - The horizontal starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.
   * @param {number} [thetaStart=0] - The vertical starting angle in radians.
   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.
   */
  constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index = 0;
    const grid = [];
    const vertex2 = new Vector3();
    const normal = new Vector3();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v = iy / heightSegments;
      let uOffset = 0;
      if (iy === 0 && thetaStart === 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy === heightSegments && thetaEnd === Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u = ix / widthSegments;
        vertex2.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertex2.y = radius * Math.cos(thetaStart + v * thetaLength);
        vertex2.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal.copy(vertex2).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u + uOffset, 1 - v);
        verticesRow.push(index++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a = grid[iy][ix + 1];
        const b = grid[iy][ix];
        const c = grid[iy + 1][ix];
        const d = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {SphereGeometry} A new instance.
   */
  static fromJSON(data) {
    return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
  }
}
class TorusGeometry extends BufferGeometry {
  /**
   * Constructs a new torus geometry.
   *
   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.
   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.
   * @param {number} [radialSegments=12] - The number of radial segments.
   * @param {number} [tubularSegments=48] - The number of tubular segments.
   * @param {number} [arc=Math.PI*2] - Central angle in radians.
   */
  constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const center = new Vector3();
    const vertex2 = new Vector3();
    const normal = new Vector3();
    for (let j = 0; j <= radialSegments; j++) {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        const u = i2 / tubularSegments * arc;
        const v = j / radialSegments * Math.PI * 2;
        vertex2.x = (radius + tube * Math.cos(v)) * Math.cos(u);
        vertex2.y = (radius + tube * Math.cos(v)) * Math.sin(u);
        vertex2.z = tube * Math.sin(v);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        center.x = radius * Math.cos(u);
        center.y = radius * Math.sin(u);
        normal.subVectors(vertex2, center).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j / radialSegments);
      }
    }
    for (let j = 1; j <= radialSegments; j++) {
      for (let i2 = 1; i2 <= tubularSegments; i2++) {
        const a = (tubularSegments + 1) * j + i2 - 1;
        const b = (tubularSegments + 1) * (j - 1) + i2 - 1;
        const c = (tubularSegments + 1) * (j - 1) + i2;
        const d = (tubularSegments + 1) * j + i2;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusGeometry} A new instance.
   */
  static fromJSON(data) {
    return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
  }
}
class TorusKnotGeometry extends BufferGeometry {
  /**
   * Constructs a new torus knot geometry.
   *
   * @param {number} [radius=1] - Radius of the torus knot.
   * @param {number} [tube=0.4] - Radius of the tube.
   * @param {number} [tubularSegments=64] - The number of tubular segments.
   * @param {number} [radialSegments=8] - The number of radial segments.
   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.
   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.
   */
  constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p,
      q
    };
    tubularSegments = Math.floor(tubularSegments);
    radialSegments = Math.floor(radialSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex2 = new Vector3();
    const normal = new Vector3();
    const P1 = new Vector3();
    const P2 = new Vector3();
    const B = new Vector3();
    const T = new Vector3();
    const N = new Vector3();
    for (let i2 = 0; i2 <= tubularSegments; ++i2) {
      const u = i2 / tubularSegments * p * Math.PI * 2;
      calculatePositionOnCurve(u, p, q, radius, P1);
      calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
      T.subVectors(P2, P1);
      N.addVectors(P2, P1);
      B.crossVectors(T, N);
      N.crossVectors(B, T);
      B.normalize();
      N.normalize();
      for (let j = 0; j <= radialSegments; ++j) {
        const v = j / radialSegments * Math.PI * 2;
        const cx = -tube * Math.cos(v);
        const cy = tube * Math.sin(v);
        vertex2.x = P1.x + (cx * N.x + cy * B.x);
        vertex2.y = P1.y + (cx * N.y + cy * B.y);
        vertex2.z = P1.z + (cx * N.z + cy * B.z);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal.subVectors(vertex2, P1).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j / radialSegments);
      }
    }
    for (let j = 1; j <= tubularSegments; j++) {
      for (let i2 = 1; i2 <= radialSegments; i2++) {
        const a = (radialSegments + 1) * (j - 1) + (i2 - 1);
        const b = (radialSegments + 1) * j + (i2 - 1);
        const c = (radialSegments + 1) * j + i2;
        const d = (radialSegments + 1) * (j - 1) + i2;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function calculatePositionOnCurve(u, p2, q2, radius2, position) {
      const cu = Math.cos(u);
      const su = Math.sin(u);
      const quOverP = q2 / p2 * u;
      const cs = Math.cos(quOverP);
      position.x = radius2 * (2 + cs) * 0.5 * cu;
      position.y = radius2 * (2 + cs) * su * 0.5;
      position.z = radius2 * Math.sin(quOverP) * 0.5;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusKnotGeometry} A new instance.
   */
  static fromJSON(data) {
    return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
  }
}
class MeshStandardMaterial extends Material {
  /**
   * Constructs a new mesh standard material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isMeshStandardMaterial = true;
    this.type = "MeshStandardMaterial";
    this.defines = { "STANDARD": "" };
    this.color = new Color(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.roughnessMap = null;
    this.metalnessMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.envMapIntensity = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.defines = { "STANDARD": "" };
    this.color.copy(source.color);
    this.roughness = source.roughness;
    this.metalness = source.metalness;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.roughnessMap = source.roughnessMap;
    this.metalnessMap = source.metalnessMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.envMapIntensity = source.envMapIntensity;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
}
class MeshPhysicalMaterial extends MeshStandardMaterial {
  /**
   * Constructs a new mesh physical material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isMeshPhysicalMaterial = true;
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.type = "MeshPhysicalMaterial";
    this.anisotropyRotation = 0;
    this.anisotropyMap = null;
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new Vector2(1, 1);
    this.clearcoatNormalMap = null;
    this.ior = 1.5;
    Object.defineProperty(this, "reflectivity", {
      get: function() {
        return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(reflectivity) {
        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
      }
    });
    this.iridescenceMap = null;
    this.iridescenceIOR = 1.3;
    this.iridescenceThicknessRange = [100, 400];
    this.iridescenceThicknessMap = null;
    this.sheenColor = new Color(0);
    this.sheenColorMap = null;
    this.sheenRoughness = 1;
    this.sheenRoughnessMap = null;
    this.transmissionMap = null;
    this.thickness = 0;
    this.thicknessMap = null;
    this.attenuationDistance = Infinity;
    this.attenuationColor = new Color(1, 1, 1);
    this.specularIntensity = 1;
    this.specularIntensityMap = null;
    this.specularColor = new Color(1, 1, 1);
    this.specularColorMap = null;
    this._anisotropy = 0;
    this._clearcoat = 0;
    this._dispersion = 0;
    this._iridescence = 0;
    this._sheen = 0;
    this._transmission = 0;
    this.setValues(parameters);
  }
  /**
   * The anisotropy strength.
   *
   * @type {number}
   * @default 0
   */
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(value) {
    if (this._anisotropy > 0 !== value > 0) {
      this.version++;
    }
    this._anisotropy = value;
  }
  /**
   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use
   * clear coat related properties to enable multilayer materials that have a
   * thin translucent layer over the base layer.
   *
   * @type {number}
   * @default 0
   */
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(value) {
    if (this._clearcoat > 0 !== value > 0) {
      this.version++;
    }
    this._clearcoat = value;
  }
  /**
   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
   * the surface and the viewer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(value) {
    if (this._iridescence > 0 !== value > 0) {
      this.version++;
    }
    this._iridescence = value;
  }
  /**
   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting
   * through a relatively clear volume. Any value zero or larger is valid, the typical range of
   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
   *
   * @type {number}
   * @default 0
   */
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(value) {
    if (this._dispersion > 0 !== value > 0) {
      this.version++;
    }
    this._dispersion = value;
  }
  /**
   * The intensity of the sheen layer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get sheen() {
    return this._sheen;
  }
  set sheen(value) {
    if (this._sheen > 0 !== value > 0) {
      this.version++;
    }
    this._sheen = value;
  }
  /**
   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.
   *
   * Thin, transparent or semitransparent, plastic or glass materials remain
   * largely reflective even if they are fully transmissive. The transmission
   * property can be used to model these materials.
   *
   * When transmission is non-zero, `opacity` should be  set to `1`.
   *
   * @type {number}
   * @default 0
   */
  get transmission() {
    return this._transmission;
  }
  set transmission(value) {
    if (this._transmission > 0 !== value > 0) {
      this.version++;
    }
    this._transmission = value;
  }
  copy(source) {
    super.copy(source);
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.anisotropy = source.anisotropy;
    this.anisotropyRotation = source.anisotropyRotation;
    this.anisotropyMap = source.anisotropyMap;
    this.clearcoat = source.clearcoat;
    this.clearcoatMap = source.clearcoatMap;
    this.clearcoatRoughness = source.clearcoatRoughness;
    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    this.clearcoatNormalMap = source.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
    this.dispersion = source.dispersion;
    this.ior = source.ior;
    this.iridescence = source.iridescence;
    this.iridescenceMap = source.iridescenceMap;
    this.iridescenceIOR = source.iridescenceIOR;
    this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
    this.iridescenceThicknessMap = source.iridescenceThicknessMap;
    this.sheen = source.sheen;
    this.sheenColor.copy(source.sheenColor);
    this.sheenColorMap = source.sheenColorMap;
    this.sheenRoughness = source.sheenRoughness;
    this.sheenRoughnessMap = source.sheenRoughnessMap;
    this.transmission = source.transmission;
    this.transmissionMap = source.transmissionMap;
    this.thickness = source.thickness;
    this.thicknessMap = source.thicknessMap;
    this.attenuationDistance = source.attenuationDistance;
    this.attenuationColor.copy(source.attenuationColor);
    this.specularIntensity = source.specularIntensity;
    this.specularIntensityMap = source.specularIntensityMap;
    this.specularColor.copy(source.specularColor);
    this.specularColorMap = source.specularColorMap;
    return this;
  }
}
class MeshDepthMaterial extends Material {
  /**
   * Constructs a new mesh depth material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isMeshDepthMaterial = true;
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.depthPacking = source.depthPacking;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  }
}
class MeshDistanceMaterial extends Material {
  /**
   * Constructs a new mesh distance material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super();
    this.isMeshDistanceMaterial = true;
    this.type = "MeshDistanceMaterial";
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  }
}
function convertArray(array, type) {
  if (!array || array.constructor === type) return array;
  if (typeof type.BYTES_PER_ELEMENT === "number") {
    return new type(array);
  }
  return Array.prototype.slice.call(array);
}
function isTypedArray(object) {
  return ArrayBuffer.isView(object) && !(object instanceof DataView);
}
function getKeyframeOrder(times) {
  function compareTime(i2, j) {
    return times[i2] - times[j];
  }
  const n = times.length;
  const result = new Array(n);
  for (let i2 = 0; i2 !== n; ++i2) result[i2] = i2;
  result.sort(compareTime);
  return result;
}
function sortedArray(values, stride, order) {
  const nValues = values.length;
  const result = new values.constructor(nValues);
  for (let i2 = 0, dstOffset = 0; dstOffset !== nValues; ++i2) {
    const srcOffset = order[i2] * stride;
    for (let j = 0; j !== stride; ++j) {
      result[dstOffset++] = values[srcOffset + j];
    }
  }
  return result;
}
function flattenJSON(jsonKeys, times, values, valuePropertyName) {
  let i2 = 1, key = jsonKeys[0];
  while (key !== void 0 && key[valuePropertyName] === void 0) {
    key = jsonKeys[i2++];
  }
  if (key === void 0) return;
  let value = key[valuePropertyName];
  if (value === void 0) return;
  if (Array.isArray(value)) {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        values.push(...value);
      }
      key = jsonKeys[i2++];
    } while (key !== void 0);
  } else if (value.toArray !== void 0) {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        value.toArray(values, values.length);
      }
      key = jsonKeys[i2++];
    } while (key !== void 0);
  } else {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        values.push(value);
      }
      key = jsonKeys[i2++];
    } while (key !== void 0);
  }
}
class Interpolant {
  /**
   * Constructs a new interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
    this.settings = null;
    this.DefaultSettings_ = {};
  }
  /**
   * Evaluate the interpolant at position `t`.
   *
   * @param {number} t - The interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  evaluate(t2) {
    const pp = this.parameterPositions;
    let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
    validate_interval: {
      seek: {
        let right;
        linear_scan: {
          forward_scan: if (!(t2 < t1)) {
            for (let giveUpAt = i1 + 2; ; ) {
              if (t1 === void 0) {
                if (t2 < t0) break forward_scan;
                i1 = pp.length;
                this._cachedIndex = i1;
                return this.copySampleValue_(i1 - 1);
              }
              if (i1 === giveUpAt) break;
              t0 = t1;
              t1 = pp[++i1];
              if (t2 < t1) {
                break seek;
              }
            }
            right = pp.length;
            break linear_scan;
          }
          if (!(t2 >= t0)) {
            const t1global = pp[1];
            if (t2 < t1global) {
              i1 = 2;
              t0 = t1global;
            }
            for (let giveUpAt = i1 - 2; ; ) {
              if (t0 === void 0) {
                this._cachedIndex = 0;
                return this.copySampleValue_(0);
              }
              if (i1 === giveUpAt) break;
              t1 = t0;
              t0 = pp[--i1 - 1];
              if (t2 >= t0) {
                break seek;
              }
            }
            right = i1;
            i1 = 0;
            break linear_scan;
          }
          break validate_interval;
        }
        while (i1 < right) {
          const mid = i1 + right >>> 1;
          if (t2 < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }
        t1 = pp[i1];
        t0 = pp[i1 - 1];
        if (t0 === void 0) {
          this._cachedIndex = 0;
          return this.copySampleValue_(0);
        }
        if (t1 === void 0) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.copySampleValue_(i1 - 1);
        }
      }
      this._cachedIndex = i1;
      this.intervalChanged_(i1, t0, t1);
    }
    return this.interpolate_(i1, t0, t2, t1);
  }
  /**
   * Returns the interpolation settings.
   *
   * @return {Object} The interpolation settings.
   */
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @param {number} index - An index into the sample value buffer.
   * @return {TypedArray} The result buffer.
   */
  copySampleValue_(index) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset + i2];
    }
    return result;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @abstract
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   * @param {number} t1 - The next interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  interpolate_() {
    throw new Error("call to abstract method");
  }
  /**
   * Optional method that is executed when the interval has changed.
   *
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   */
  intervalChanged_() {
  }
}
class CubicInterpolant extends Interpolant {
  /**
   * Constructs a new cubic interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
    this.DefaultSettings_ = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };
  }
  intervalChanged_(i1, t0, t1) {
    const pp = this.parameterPositions;
    let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
    if (tPrev === void 0) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding:
          iPrev = i1;
          tPrev = 2 * t0 - t1;
          break;
        case WrapAroundEnding:
          iPrev = pp.length - 2;
          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
          break;
        default:
          iPrev = i1;
          tPrev = t1;
      }
    }
    if (tNext === void 0) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding:
          iNext = i1;
          tNext = 2 * t1 - t0;
          break;
        case WrapAroundEnding:
          iNext = 1;
          tNext = t1 + pp[1] - pp[0];
          break;
        default:
          iNext = i1 - 1;
          tNext = t0;
      }
    }
    const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
    this._weightPrev = halfDt / (t0 - tPrev);
    this._weightNext = halfDt / (tNext - t1);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  }
  interpolate_(i1, t0, t2, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t2 - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
    const sP = -wP * ppp + 2 * wP * pp - wP * p;
    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
    const sN = wN * ppp - wN * pp;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = sP * values[oP + i2] + s0 * values[o0 + i2] + s1 * values[o1 + i2] + sN * values[oN + i2];
    }
    return result;
  }
}
class LinearInterpolant extends Interpolant {
  /**
   * Constructs a new linear interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t0, t2, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t2 - t0) / (t1 - t0), weight0 = 1 - weight1;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset0 + i2] * weight0 + values[offset1 + i2] * weight1;
    }
    return result;
  }
}
class DiscreteInterpolant extends Interpolant {
  /**
   * Constructs a new discrete interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1) {
    return this.copySampleValue_(i1 - 1);
  }
}
class KeyframeTrack {
  /**
   * Constructs a new keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(name, times, values, interpolation) {
    if (name === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
    this.name = name;
    this.times = convertArray(times, this.TimeBufferType);
    this.values = convertArray(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  }
  /**
   * Converts the keyframe track to JSON.
   *
   * @static
   * @param {KeyframeTrack} track - The keyframe track to serialize.
   * @return {Object} The serialized keyframe track as JSON.
   */
  static toJSON(track) {
    const trackType = track.constructor;
    let json;
    if (trackType.toJSON !== this.toJSON) {
      json = trackType.toJSON(track);
    } else {
      json = {
        "name": track.name,
        "times": convertArray(track.times, Array),
        "values": convertArray(track.values, Array)
      };
      const interpolation = track.getInterpolation();
      if (interpolation !== track.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }
    json.type = track.ValueTypeName;
    return json;
  }
  /**
   * Factory method for creating a new discrete interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {DiscreteInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodDiscrete(result) {
    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  /**
   * Factory method for creating a new linear interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {LinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(result) {
    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  /**
   * Factory method for creating a new smooth interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {CubicInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodSmooth(result) {
    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  /**
   * Defines the interpolation factor method for this keyframe track.
   *
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  setInterpolation(interpolation) {
    let factoryMethod;
    switch (interpolation) {
      case InterpolateDiscrete:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;
      case InterpolateLinear:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;
      case InterpolateSmooth:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (factoryMethod === void 0) {
      const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message);
        }
      }
      console.warn("THREE.KeyframeTrack:", message);
      return this;
    }
    this.createInterpolant = factoryMethod;
    return this;
  }
  /**
   * Returns the current interpolation type.
   *
   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
   */
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete;
      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear;
      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth;
    }
  }
  /**
   * Returns the value size.
   *
   * @return {number} The value size.
   */
  getValueSize() {
    return this.values.length / this.times.length;
  }
  /**
   * Moves all keyframes either forward or backward in time.
   *
   * @param {number} timeOffset - The offset to move the time values.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  shift(timeOffset) {
    if (timeOffset !== 0) {
      const times = this.times;
      for (let i2 = 0, n = times.length; i2 !== n; ++i2) {
        times[i2] += timeOffset;
      }
    }
    return this;
  }
  /**
   * Scale all keyframe times by a factor (useful for frame - seconds conversions).
   *
   * @param {number} timeScale - The time scale.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  scale(timeScale) {
    if (timeScale !== 1) {
      const times = this.times;
      for (let i2 = 0, n = times.length; i2 !== n; ++i2) {
        times[i2] *= timeScale;
      }
    }
    return this;
  }
  /**
   * Removes keyframes before and after animation without changing any values within the defined time range.
   *
   * Note: The method does not shift around keys to the start of the track time, because for interpolated
   * keys this will change their values
   *
   * @param {number} startTime - The start time.
   * @param {number} endTime - The end time.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  trim(startTime, endTime) {
    const times = this.times, nKeys = times.length;
    let from = 0, to = nKeys - 1;
    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }
    while (to !== -1 && times[to] > endTime) {
      --to;
    }
    ++to;
    if (from !== 0 || to !== nKeys) {
      if (from >= to) {
        to = Math.max(to, 1);
        from = to - 1;
      }
      const stride = this.getValueSize();
      this.times = times.slice(from, to);
      this.values = this.values.slice(from * stride, to * stride);
    }
    return this;
  }
  /**
   * Performs minimal validation on the keyframe track. Returns `true` if the values
   * are valid.
   *
   * @return {boolean} Whether the keyframes are valid or not.
   */
  validate() {
    let valid = true;
    const valueSize = this.getValueSize();
    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      valid = false;
    }
    const times = this.times, values = this.values, nKeys = times.length;
    if (nKeys === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      valid = false;
    }
    let prevTime = null;
    for (let i2 = 0; i2 !== nKeys; i2++) {
      const currTime = times[i2];
      if (typeof currTime === "number" && isNaN(currTime)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i2, currTime);
        valid = false;
        break;
      }
      if (prevTime !== null && prevTime > currTime) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, i2, currTime, prevTime);
        valid = false;
        break;
      }
      prevTime = currTime;
    }
    if (values !== void 0) {
      if (isTypedArray(values)) {
        for (let i2 = 0, n = values.length; i2 !== n; ++i2) {
          const value = values[i2];
          if (isNaN(value)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i2, value);
            valid = false;
            break;
          }
        }
      }
    }
    return valid;
  }
  /**
   * Optimizes this keyframe track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
    let writeIndex = 1;
    for (let i2 = 1; i2 < lastIndex; ++i2) {
      let keep = false;
      const time = times[i2];
      const timeNext = times[i2 + 1];
      if (time !== timeNext && (i2 !== 1 || time !== times[0])) {
        if (!smoothInterpolation) {
          const offset = i2 * stride, offsetP = offset - stride, offsetN = offset + stride;
          for (let j = 0; j !== stride; ++j) {
            const value = values[offset + j];
            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      }
      if (keep) {
        if (i2 !== writeIndex) {
          times[writeIndex] = times[i2];
          const readOffset = i2 * stride, writeOffset = writeIndex * stride;
          for (let j = 0; j !== stride; ++j) {
            values[writeOffset + j] = values[readOffset + j];
          }
        }
        ++writeIndex;
      }
    }
    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];
      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
        values[writeOffset + j] = values[readOffset + j];
      }
      ++writeIndex;
    }
    if (writeIndex !== times.length) {
      this.times = times.slice(0, writeIndex);
      this.values = values.slice(0, writeIndex * stride);
    } else {
      this.times = times;
      this.values = values;
    }
    return this;
  }
  /**
   * Returns a new keyframe track with copied values from this instance.
   *
   * @return {KeyframeTrack} A clone of this instance.
   */
  clone() {
    const times = this.times.slice();
    const values = this.values.slice();
    const TypedKeyframeTrack = this.constructor;
    const track = new TypedKeyframeTrack(this.name, times, values);
    track.createInterpolant = this.createInterpolant;
    return track;
  }
}
KeyframeTrack.prototype.ValueTypeName = "";
KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
class BooleanKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new boolean keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   */
  constructor(name, times, values) {
    super(name, times, values);
  }
}
BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
class ColorKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new color keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(name, times, values, interpolation) {
    super(name, times, values, interpolation);
  }
}
ColorKeyframeTrack.prototype.ValueTypeName = "color";
class NumberKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new number keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(name, times, values, interpolation) {
    super(name, times, values, interpolation);
  }
}
NumberKeyframeTrack.prototype.ValueTypeName = "number";
class QuaternionLinearInterpolant extends Interpolant {
  /**
   * Constructs a new SLERP interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t0, t2, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t2 - t0) / (t1 - t0);
    let offset = i1 * stride;
    for (let end = offset + stride; offset !== end; offset += 4) {
      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }
    return result;
  }
}
class QuaternionKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new Quaternion keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(name, times, values, interpolation) {
    super(name, times, values, interpolation);
  }
  /**
   * Overwritten so the method returns Quaternion based interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {QuaternionLinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(result) {
    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
  }
}
QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
class StringKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new string keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   */
  constructor(name, times, values) {
    super(name, times, values);
  }
}
StringKeyframeTrack.prototype.ValueTypeName = "string";
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
class VectorKeyframeTrack extends KeyframeTrack {
  /**
   * Constructs a new vector keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(name, times, values, interpolation) {
    super(name, times, values, interpolation);
  }
}
VectorKeyframeTrack.prototype.ValueTypeName = "vector";
class AnimationClip {
  /**
   * Constructs a new animation clip.
   *
   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can
   * use the static interface of this class for creating clips. In most cases though, animation clips
   * will automatically be created by loaders when importing animated 3D assets.
   *
   * @param {string} [name=''] - The clip's name.
   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,
   * the duration will be calculated from the passed keyframes.
   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
   * is blended/combined when two or more animations are simultaneously played.
   */
  constructor(name = "", duration = -1, tracks = [], blendMode = NormalAnimationBlendMode) {
    this.name = name;
    this.tracks = tracks;
    this.duration = duration;
    this.blendMode = blendMode;
    this.uuid = generateUUID();
    if (this.duration < 0) {
      this.resetDuration();
    }
  }
  /**
   * Factory method for creating an animation clip from the given JSON.
   *
   * @static
   * @param {Object} json - The serialized animation clip.
   * @return {AnimationClip} The new animation clip.
   */
  static parse(json) {
    const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
    for (let i2 = 0, n = jsonTracks.length; i2 !== n; ++i2) {
      tracks.push(parseKeyframeTrack(jsonTracks[i2]).scale(frameTime));
    }
    const clip = new this(json.name, json.duration, tracks, json.blendMode);
    clip.uuid = json.uuid;
    return clip;
  }
  /**
   * Serializes the given animation clip into JSON.
   *
   * @static
   * @param {AnimationClip} clip - The animation clip to serialize.
   * @return {Object} The JSON object.
   */
  static toJSON(clip) {
    const tracks = [], clipTracks = clip.tracks;
    const json = {
      "name": clip.name,
      "duration": clip.duration,
      "tracks": tracks,
      "uuid": clip.uuid,
      "blendMode": clip.blendMode
    };
    for (let i2 = 0, n = clipTracks.length; i2 !== n; ++i2) {
      tracks.push(KeyframeTrack.toJSON(clipTracks[i2]));
    }
    return json;
  }
  /**
   * Returns a new animation clip from the passed morph targets array of a
   * geometry, taking a name and the number of frames per second.
   *
   * Note: The fps parameter is required, but the animation speed can be
   * overridden via {@link AnimationAction#setDuration}.
   *
   * @static
   * @param {string} name - The name of the animation clip.
   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {AnimationClip} The new animation clip.
   */
  static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
    const numMorphTargets = morphTargetSequence.length;
    const tracks = [];
    for (let i2 = 0; i2 < numMorphTargets; i2++) {
      let times = [];
      let values = [];
      times.push(
        (i2 + numMorphTargets - 1) % numMorphTargets,
        i2,
        (i2 + 1) % numMorphTargets
      );
      values.push(0, 1, 0);
      const order = getKeyframeOrder(times);
      times = sortedArray(times, 1, order);
      values = sortedArray(values, 1, order);
      if (!noLoop && times[0] === 0) {
        times.push(numMorphTargets);
        values.push(values[0]);
      }
      tracks.push(
        new NumberKeyframeTrack(
          ".morphTargetInfluences[" + morphTargetSequence[i2].name + "]",
          times,
          values
        ).scale(1 / fps)
      );
    }
    return new this(name, -1, tracks);
  }
  /**
   * Searches for an animation clip by name, taking as its first parameter
   * either an array of clips, or a mesh or geometry that contains an
   * array named "animations" property.
   *
   * @static
   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.
   * @param {string} name - The name to search for.
   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.
   */
  static findByName(objectOrClipArray, name) {
    let clipArray = objectOrClipArray;
    if (!Array.isArray(objectOrClipArray)) {
      const o = objectOrClipArray;
      clipArray = o.geometry && o.geometry.animations || o.animations;
    }
    for (let i2 = 0; i2 < clipArray.length; i2++) {
      if (clipArray[i2].name === name) {
        return clipArray[i2];
      }
    }
    return null;
  }
  /**
   * Returns an array of new AnimationClips created from the morph target
   * sequences of a geometry, trying to sort morph target names into
   * animation-group-based patterns like "Walk_001, Walk_002, Run_001, Run_002...".
   *
   * See {@link MD2Loader#parse} as an example for how the method should be used.
   *
   * @static
   * @param {Array<Object>} morphTargets - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {Array<AnimationClip>} An array of new animation clips.
   */
  static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
    const animationToMorphTargets = {};
    const pattern = /^([\w-]*?)([\d]+)$/;
    for (let i2 = 0, il = morphTargets.length; i2 < il; i2++) {
      const morphTarget = morphTargets[i2];
      const parts = morphTarget.name.match(pattern);
      if (parts && parts.length > 1) {
        const name = parts[1];
        let animationMorphTargets = animationToMorphTargets[name];
        if (!animationMorphTargets) {
          animationToMorphTargets[name] = animationMorphTargets = [];
        }
        animationMorphTargets.push(morphTarget);
      }
    }
    const clips = [];
    for (const name in animationToMorphTargets) {
      clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
    }
    return clips;
  }
  /**
   * Parses the `animation.hierarchy` format and returns a new animation clip.
   *
   * @static
   * @deprecated since r175.
   * @param {Object} animation - A serialized animation clip as JSON.
   * @param {Array<Bones>} bones - An array of bones.
   * @return {?AnimationClip} The new animation clip.
   */
  static parseAnimation(animation, bones) {
    console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185");
    if (!animation) {
      console.error("THREE.AnimationClip: No animation in JSONLoader data.");
      return null;
    }
    const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
      if (animationKeys.length !== 0) {
        const times = [];
        const values = [];
        flattenJSON(animationKeys, times, values, propertyName);
        if (times.length !== 0) {
          destTracks.push(new trackType(trackName, times, values));
        }
      }
    };
    const tracks = [];
    const clipName = animation.name || "default";
    const fps = animation.fps || 30;
    const blendMode = animation.blendMode;
    let duration = animation.length || -1;
    const hierarchyTracks = animation.hierarchy || [];
    for (let h = 0; h < hierarchyTracks.length; h++) {
      const animationKeys = hierarchyTracks[h].keys;
      if (!animationKeys || animationKeys.length === 0) continue;
      if (animationKeys[0].morphTargets) {
        const morphTargetNames = {};
        let k;
        for (k = 0; k < animationKeys.length; k++) {
          if (animationKeys[k].morphTargets) {
            for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
            }
          }
        }
        for (const morphTargetName in morphTargetNames) {
          const times = [];
          const values = [];
          for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
            const animationKey = animationKeys[k];
            times.push(animationKey.time);
            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
          }
          tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
        }
        duration = morphTargetNames.length * fps;
      } else {
        const boneName = ".bones[" + bones[h].name + "]";
        addNonemptyTrack(
          VectorKeyframeTrack,
          boneName + ".position",
          animationKeys,
          "pos",
          tracks
        );
        addNonemptyTrack(
          QuaternionKeyframeTrack,
          boneName + ".quaternion",
          animationKeys,
          "rot",
          tracks
        );
        addNonemptyTrack(
          VectorKeyframeTrack,
          boneName + ".scale",
          animationKeys,
          "scl",
          tracks
        );
      }
    }
    if (tracks.length === 0) {
      return null;
    }
    const clip = new this(clipName, duration, tracks, blendMode);
    return clip;
  }
  /**
   * Sets the duration of this clip to the duration of its longest keyframe track.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  resetDuration() {
    const tracks = this.tracks;
    let duration = 0;
    for (let i2 = 0, n = tracks.length; i2 !== n; ++i2) {
      const track = this.tracks[i2];
      duration = Math.max(duration, track.times[track.times.length - 1]);
    }
    this.duration = duration;
    return this;
  }
  /**
   * Trims all tracks to the clip's duration.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  trim() {
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      this.tracks[i2].trim(0, this.duration);
    }
    return this;
  }
  /**
   * Performs minimal validation on each track in the clip. Returns `true` if all
   * tracks are valid.
   *
   * @return {boolean} Whether the clip's keyframes are valid or not.
   */
  validate() {
    let valid = true;
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      valid = valid && this.tracks[i2].validate();
    }
    return valid;
  }
  /**
   * Optimizes each track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      this.tracks[i2].optimize();
    }
    return this;
  }
  /**
   * Returns a new animation clip with copied values from this instance.
   *
   * @return {AnimationClip} A clone of this instance.
   */
  clone() {
    const tracks = [];
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      tracks.push(this.tracks[i2].clone());
    }
    return new this.constructor(this.name, this.duration, tracks, this.blendMode);
  }
  /**
   * Serializes this animation clip into JSON.
   *
   * @return {Object} The JSON object.
   */
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return NumberKeyframeTrack;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return VectorKeyframeTrack;
    case "color":
      return ColorKeyframeTrack;
    case "quaternion":
      return QuaternionKeyframeTrack;
    case "bool":
    case "boolean":
      return BooleanKeyframeTrack;
    case "string":
      return StringKeyframeTrack;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function parseKeyframeTrack(json) {
  if (json.type === void 0) {
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  }
  const trackType = getTrackTypeForValueTypeName(json.type);
  if (json.times === void 0) {
    const times = [], values = [];
    flattenJSON(json.keys, times, values, "value");
    json.times = times;
    json.values = values;
  }
  if (trackType.parse !== void 0) {
    return trackType.parse(json);
  } else {
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}
const Cache = {
  /**
   * Whether caching is enabled or not.
   *
   * @static
   * @type {boolean}
   * @default false
   */
  enabled: false,
  /**
   * A dictionary that holds cached files.
   *
   * @static
   * @type {Object<string,Object>}
   */
  files: {},
  /**
   * Adds a cache entry with a key to reference the file. If this key already
   * holds a file, it is overwritten.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @param {Object} file -  The file to be cached.
   */
  add: function(key, file) {
    if (this.enabled === false) return;
    this.files[key] = file;
  },
  /**
   * Gets the cached value for the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.
   */
  get: function(key) {
    if (this.enabled === false) return;
    return this.files[key];
  },
  /**
   * Removes the cached file associated with the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   */
  remove: function(key) {
    delete this.files[key];
  },
  /**
   * Remove all values from the cache.
   *
   * @static
   */
  clear: function() {
    this.files = {};
  }
};
class LoadingManager {
  /**
   * Constructs a new loading manager.
   *
   * @param {Function} [onLoad] - Executes when all items have been loaded.
   * @param {Function} [onProgress] - Executes when single items have been loaded.
   * @param {Function} [onError] - Executes when an error occurs.
   */
  constructor(onLoad2, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad2;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index = handlers.indexOf(regex);
      if (index !== -1) {
        handlers.splice(index, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i2 = 0, l = handlers.length; i2 < l; i2 += 2) {
        const regex = handlers[i2];
        const loader = handlers[i2 + 1];
        if (regex.global) regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
}
const DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
class Loader {
  /**
   * Constructs a new loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for loading assets from the backend.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {Function} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   */
  load() {
  }
  /**
   * A async version of {@link Loader#load}.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @return {Promise} A Promise that resolves when the asset has been loaded.
   */
  loadAsync(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.load(url, resolve, onProgress, reject);
    });
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for parsing the asset into three.js entities.
   *
   * @param {any} data - The data to parse.
   */
  parse() {
  }
  /**
   * Sets the `crossOrigin` String to implement CORS for loading the URL
   * from a different domain that allows CORS.
   *
   * @param {string} crossOrigin - The `crossOrigin` value.
   * @return {Loader} A reference to this instance.
   */
  setCrossOrigin(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  }
  /**
   * Whether the XMLHttpRequest uses credentials such as cookies, authorization
   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
   *
   * Note: This setting has no effect if you are loading files locally or from the same domain.
   *
   * @param {boolean} value - The `withCredentials` value.
   * @return {Loader} A reference to this instance.
   */
  setWithCredentials(value) {
    this.withCredentials = value;
    return this;
  }
  /**
   * Sets the base path for the asset.
   *
   * @param {string} path - The base path.
   * @return {Loader} A reference to this instance.
   */
  setPath(path) {
    this.path = path;
    return this;
  }
  /**
   * Sets the base path for dependent resources like textures.
   *
   * @param {string} resourcePath - The resource path.
   * @return {Loader} A reference to this instance.
   */
  setResourcePath(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }
  /**
   * Sets the given request header.
   *
   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
   * for configuring the HTTP request.
   * @return {Loader} A reference to this instance.
   */
  setRequestHeader(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
}
Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const loading = {};
class HttpError extends Error {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
}
class FileLoader extends Loader {
  /**
   * Constructs a new file loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    super(manager);
    this.mimeType = "";
    this.responseType = "";
  }
  /**
   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(any)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   * @return {any|undefined} The cached resource if available.
   */
  load(url, onLoad2, onProgress, onError) {
    if (url === void 0) url = "";
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const cached = Cache.get(url);
    if (cached !== void 0) {
      this.manager.itemStart(url);
      setTimeout(() => {
        if (onLoad2) onLoad2(cached);
        this.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    if (loading[url] !== void 0) {
      loading[url].push({
        onLoad: onLoad2,
        onProgress,
        onError
      });
      return;
    }
    loading[url] = [];
    loading[url].push({
      onLoad: onLoad2,
      onProgress,
      onError
    });
    const req = new Request(url, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    });
    const mimeType = this.mimeType;
    const responseType = this.responseType;
    fetch(req).then((response) => {
      if (response.status === 200 || response.status === 0) {
        if (response.status === 0) {
          console.warn("THREE.FileLoader: HTTP Status 0 received.");
        }
        if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
          return response;
        }
        const callbacks = loading[url];
        const reader = response.body.getReader();
        const contentLength = response.headers.get("X-File-Size") || response.headers.get("Content-Length");
        const total = contentLength ? parseInt(contentLength) : 0;
        const lengthComputable = total !== 0;
        let loaded = 0;
        const stream = new ReadableStream({
          start(controller) {
            readData();
            function readData() {
              reader.read().then(({ done, value }) => {
                if (done) {
                  controller.close();
                } else {
                  loaded += value.byteLength;
                  const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                  for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
                    const callback = callbacks[i2];
                    if (callback.onProgress) callback.onProgress(event);
                  }
                  controller.enqueue(value);
                  readData();
                }
              }, (e) => {
                controller.error(e);
              });
            }
          }
        });
        return new Response(stream);
      } else {
        throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
      }
    }).then((response) => {
      switch (responseType) {
        case "arraybuffer":
          return response.arrayBuffer();
        case "blob":
          return response.blob();
        case "document":
          return response.text().then((text) => {
            const parser = new DOMParser();
            return parser.parseFromString(text, mimeType);
          });
        case "json":
          return response.json();
        default:
          if (mimeType === "") {
            return response.text();
          } else {
            const re = /charset="?([^;"\s]*)"?/i;
            const exec = re.exec(mimeType);
            const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
            const decoder = new TextDecoder(label);
            return response.arrayBuffer().then((ab) => decoder.decode(ab));
          }
      }
    }).then((data) => {
      Cache.add(url, data);
      const callbacks = loading[url];
      delete loading[url];
      for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
        const callback = callbacks[i2];
        if (callback.onLoad) callback.onLoad(data);
      }
    }).catch((err) => {
      const callbacks = loading[url];
      if (callbacks === void 0) {
        this.manager.itemError(url);
        throw err;
      }
      delete loading[url];
      for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
        const callback = callbacks[i2];
        if (callback.onError) callback.onError(err);
      }
      this.manager.itemError(url);
    }).finally(() => {
      this.manager.itemEnd(url);
    });
    this.manager.itemStart(url);
  }
  /**
   * Sets the expected response type.
   *
   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.
   * @return {FileLoader} A reference to this file loader.
   */
  setResponseType(value) {
    this.responseType = value;
    return this;
  }
  /**
   * Sets the expected mime type of the loaded file.
   *
   * @param {string} value - The mime type.
   * @return {FileLoader} A reference to this file loader.
   */
  setMimeType(value) {
    this.mimeType = value;
    return this;
  }
}
class ImageLoader extends Loader {
  /**
   * Constructs a new image loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    super(manager);
  }
  /**
   * Starts loading from the given URL and passes the loaded image
   * to the `onLoad()` callback. The method also returns a new `Image` object which can
   * directly be used for texture creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Image)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Image} The image.
   */
  load(url, onLoad2, onProgress, onError) {
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad2) onLoad2(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const image = createElementNS("img");
    function onImageLoad() {
      removeEventListeners();
      Cache.add(url, this);
      if (onLoad2) onLoad2(this);
      scope.manager.itemEnd(url);
    }
    function onImageError(event) {
      removeEventListeners();
      if (onError) onError(event);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    }
    function removeEventListeners() {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
    }
    image.addEventListener("load", onImageLoad, false);
    image.addEventListener("error", onImageError, false);
    if (url.slice(0, 5) !== "data:") {
      if (this.crossOrigin !== void 0) image.crossOrigin = this.crossOrigin;
    }
    scope.manager.itemStart(url);
    image.src = url;
    return image;
  }
}
class TextureLoader extends Loader {
  /**
   * Constructs a new texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    super(manager);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Texture} The texture.
   */
  load(url, onLoad2, onProgress, onError) {
    const texture = new Texture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    loader.load(url, function(image) {
      texture.image = image;
      texture.needsUpdate = true;
      if (onLoad2 !== void 0) {
        onLoad2(texture);
      }
    }, onProgress, onError);
    return texture;
  }
}
class Light extends Object3D {
  /**
   * Constructs a new light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(color, intensity = 1) {
    super();
    this.isLight = true;
    this.type = "Light";
    this.color = new Color(color);
    this.intensity = intensity;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0) data.object.distance = this.distance;
    if (this.angle !== void 0) data.object.angle = this.angle;
    if (this.decay !== void 0) data.object.decay = this.decay;
    if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
    if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
    if (this.target !== void 0) data.object.target = this.target.uuid;
    return data;
  }
}
const _projScreenMatrix$1 = /* @__PURE__ */ new Matrix4();
const _lightPositionWorld$1 = /* @__PURE__ */ new Vector3();
const _lookTarget$1 = /* @__PURE__ */ new Vector3();
class LightShadow {
  /**
   * Constructs a new light shadow.
   *
   * @param {Camera} camera - The light's view of the world.
   */
  constructor(camera2) {
    this.camera = camera2;
    this.intensity = 1;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.blurSamples = 8;
    this.mapSize = new Vector2(512, 512);
    this.mapType = UnsignedByteType;
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix4();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum();
    this._frameExtents = new Vector2(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new Vector4(0, 0, 1, 1)
    ];
  }
  /**
   * Used internally by the renderer to get the number of viewports that need
   * to be rendered for this shadow.
   *
   * @return {number} The viewport count.
   */
  getViewportCount() {
    return this._viewportCount;
  }
  /**
   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.
   *
   * @return {Frustum} The shadow camera frustum.
   */
  getFrustum() {
    return this._frustum;
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   */
  updateMatrices(light) {
    const shadowCamera = this.camera;
    const shadowMatrix = this.matrix;
    _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
    shadowCamera.position.copy(_lightPositionWorld$1);
    _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
    shadowCamera.lookAt(_lookTarget$1);
    shadowCamera.updateMatrixWorld();
    _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
    shadowMatrix.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    );
    shadowMatrix.multiply(_projScreenMatrix$1);
  }
  /**
   * Returns a viewport definition for the given viewport index.
   *
   * @param {number} viewportIndex - The viewport index.
   * @return {Vector4} The viewport.
   */
  getViewport(viewportIndex) {
    return this._viewports[viewportIndex];
  }
  /**
   * Returns the frame extends.
   *
   * @return {Vector2} The frame extends.
   */
  getFrameExtents() {
    return this._frameExtents;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    if (this.map) {
      this.map.dispose();
    }
    if (this.mapPass) {
      this.mapPass.dispose();
    }
  }
  /**
   * Copies the values of the given light shadow instance to this instance.
   *
   * @param {LightShadow} source - The light shadow to copy.
   * @return {LightShadow} A reference to this light shadow instance.
   */
  copy(source) {
    this.camera = source.camera.clone();
    this.intensity = source.intensity;
    this.bias = source.bias;
    this.radius = source.radius;
    this.autoUpdate = source.autoUpdate;
    this.needsUpdate = source.needsUpdate;
    this.normalBias = source.normalBias;
    this.blurSamples = source.blurSamples;
    this.mapSize.copy(source.mapSize);
    return this;
  }
  /**
   * Returns a new light shadow instance with copied values from this instance.
   *
   * @return {LightShadow} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Serializes the light shadow into JSON.
   *
   * @return {Object} A JSON object representing the serialized light shadow.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const object = {};
    if (this.intensity !== 1) object.intensity = this.intensity;
    if (this.bias !== 0) object.bias = this.bias;
    if (this.normalBias !== 0) object.normalBias = this.normalBias;
    if (this.radius !== 1) object.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
    object.camera = this.camera.toJSON(false).object;
    delete object.camera.matrix;
    return object;
  }
}
class SpotLightShadow extends LightShadow {
  /**
   * Constructs a new spot light shadow.
   */
  constructor() {
    super(new PerspectiveCamera(50, 1, 0.5, 500));
    this.isSpotLightShadow = true;
    this.focus = 1;
  }
  updateMatrices(light) {
    const camera2 = this.camera;
    const fov2 = RAD2DEG * 2 * light.angle * this.focus;
    const aspect2 = this.mapSize.width / this.mapSize.height;
    const far = light.distance || camera2.far;
    if (fov2 !== camera2.fov || aspect2 !== camera2.aspect || far !== camera2.far) {
      camera2.fov = fov2;
      camera2.aspect = aspect2;
      camera2.far = far;
      camera2.updateProjectionMatrix();
    }
    super.updateMatrices(light);
  }
  copy(source) {
    super.copy(source);
    this.focus = source.focus;
    return this;
  }
}
class SpotLight extends Light {
  /**
   * Constructs a new spot light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2) {
    super(color, intensity);
    this.isSpotLight = true;
    this.type = "SpotLight";
    this.position.copy(Object3D.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Object3D();
    this.distance = distance;
    this.angle = angle;
    this.penumbra = penumbra;
    this.decay = decay;
    this.map = null;
    this.shadow = new SpotLightShadow();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   *  Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * Math.PI;
  }
  set power(power) {
    this.intensity = power / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.distance = source.distance;
    this.angle = source.angle;
    this.penumbra = source.penumbra;
    this.decay = source.decay;
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
}
const _projScreenMatrix = /* @__PURE__ */ new Matrix4();
const _lightPositionWorld = /* @__PURE__ */ new Vector3();
const _lookTarget = /* @__PURE__ */ new Vector3();
class PointLightShadow extends LightShadow {
  /**
   * Constructs a new point light shadow.
   */
  constructor() {
    super(new PerspectiveCamera(90, 1, 0.5, 500));
    this.isPointLightShadow = true;
    this._frameExtents = new Vector2(4, 2);
    this._viewportCount = 6;
    this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Vector4(2, 1, 1, 1),
      // negative X
      new Vector4(0, 1, 1, 1),
      // positive Z
      new Vector4(3, 1, 1, 1),
      // negative Z
      new Vector4(1, 1, 1, 1),
      // positive Y
      new Vector4(3, 0, 1, 1),
      // negative Y
      new Vector4(1, 0, 1, 1)
    ];
    this._cubeDirections = [
      new Vector3(1, 0, 0),
      new Vector3(-1, 0, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1),
      new Vector3(0, 1, 0),
      new Vector3(0, -1, 0)
    ];
    this._cubeUps = [
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1)
    ];
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   * @param {number} [viewportIndex=0] - The viewport index.
   */
  updateMatrices(light, viewportIndex = 0) {
    const camera2 = this.camera;
    const shadowMatrix = this.matrix;
    const far = light.distance || camera2.far;
    if (far !== camera2.far) {
      camera2.far = far;
      camera2.updateProjectionMatrix();
    }
    _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
    camera2.position.copy(_lightPositionWorld);
    _lookTarget.copy(camera2.position);
    _lookTarget.add(this._cubeDirections[viewportIndex]);
    camera2.up.copy(this._cubeUps[viewportIndex]);
    camera2.lookAt(_lookTarget);
    camera2.updateMatrixWorld();
    shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
    _projScreenMatrix.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(_projScreenMatrix);
  }
}
class PointLight extends Light {
  /**
   * Constructs a new point light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(color, intensity, distance = 0, decay = 2) {
    super(color, intensity);
    this.isPointLight = true;
    this.type = "PointLight";
    this.distance = distance;
    this.decay = decay;
    this.shadow = new PointLightShadow();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(power) {
    this.intensity = power / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.distance = source.distance;
    this.decay = source.decay;
    this.shadow = source.shadow.clone();
    return this;
  }
}
class OrthographicCamera extends Camera {
  /**
   * Constructs a new orthographic camera.
   *
   * @param {number} [left=-1] - The left plane of the camera's frustum.
   * @param {number} [right=1] - The right plane of the camera's frustum.
   * @param {number} [top=1] - The top plane of the camera's frustum.
   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
    super();
    this.isOrthographicCamera = true;
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
    this.near = near;
    this.far = far;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   * @see {@link PerspectiveCamera#setViewOffset}
   */
  setViewOffset(fullWidth, fullHeight, x, y, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  }
}
class DirectionalLightShadow extends LightShadow {
  /**
   * Constructs a new directional light shadow.
   */
  constructor() {
    super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
    this.isDirectionalLightShadow = true;
  }
}
class DirectionalLight extends Light {
  /**
   * Constructs a new directional light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(color, intensity) {
    super(color, intensity);
    this.isDirectionalLight = true;
    this.type = "DirectionalLight";
    this.position.copy(Object3D.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Object3D();
    this.shadow = new DirectionalLightShadow();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source) {
    super.copy(source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
}
class AmbientLight extends Light {
  /**
   * Constructs a new ambient light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(color, intensity) {
    super(color, intensity);
    this.isAmbientLight = true;
    this.type = "AmbientLight";
  }
}
class LoaderUtils {
  /**
   * Extracts the base URL from the given URL.
   *
   * @param {string} url -The URL to extract the base URL from.
   * @return {string} The extracted base URL.
   */
  static extractUrlBase(url) {
    const index = url.lastIndexOf("/");
    if (index === -1) return "./";
    return url.slice(0, index + 1);
  }
  /**
   * Resolves relative URLs against the given path. Absolute paths, data urls,
   * and blob URLs will be returned as is. Invalid URLs will return an empty
   * string.
   *
   * @param {string} url -The URL to resolve.
   * @param {string} path - The base path for relative URLs to be resolved against.
   * @return {string} The resolved URL.
   */
  static resolveURL(url, path) {
    if (typeof url !== "string" || url === "") return "";
    if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
      path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
    }
    if (/^(https?:)?\/\//i.test(url)) return url;
    if (/^data:.*,.*$/i.test(url)) return url;
    if (/^blob:.*$/i.test(url)) return url;
    return path + url;
  }
}
class ImageBitmapLoader extends Loader {
  /**
   * Constructs a new image bitmap loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    super(manager);
    this.isImageBitmapLoader = true;
    if (typeof createImageBitmap === "undefined") {
      console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    }
    if (typeof fetch === "undefined") {
      console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    }
    this.options = { premultiplyAlpha: "none" };
  }
  /**
   * Sets the given loader options. The structure of the object must match the `options` parameter of
   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.
   *
   * @param {Object} options - The loader options to set.
   * @return {ImageBitmapLoader} A reference to this image bitmap loader.
   */
  setOptions(options) {
    this.options = options;
    return this;
  }
  /**
   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {ImageBitmap|undefined} The image bitmap.
   */
  load(url, onLoad2, onProgress, onError) {
    if (url === void 0) url = "";
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      if (cached.then) {
        cached.then((imageBitmap) => {
          if (onLoad2) onLoad2(imageBitmap);
          scope.manager.itemEnd(url);
        }).catch((e) => {
          if (onError) onError(e);
        });
        return;
      }
      setTimeout(function() {
        if (onLoad2) onLoad2(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const fetchOptions = {};
    fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
    fetchOptions.headers = this.requestHeader;
    const promise = fetch(url, fetchOptions).then(function(res) {
      return res.blob();
    }).then(function(blob) {
      return createImageBitmap(blob, Object.assign(scope.options, { colorSpaceConversion: "none" }));
    }).then(function(imageBitmap) {
      Cache.add(url, imageBitmap);
      if (onLoad2) onLoad2(imageBitmap);
      scope.manager.itemEnd(url);
      return imageBitmap;
    }).catch(function(e) {
      if (onError) onError(e);
      Cache.remove(url);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    });
    Cache.add(url, promise);
    scope.manager.itemStart(url);
  }
}
class ArrayCamera extends PerspectiveCamera {
  /**
   * Constructs a new array camera.
   *
   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
   */
  constructor(array = []) {
    super();
    this.isArrayCamera = true;
    this.isMultiViewCamera = false;
    this.cameras = array;
  }
}
const _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
const _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
const _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
const _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
const _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
const _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
const _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
const _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
const _trackRe = new RegExp(
  "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
);
const _supportedObjectNames = ["material", "materials", "bones", "map"];
class Composite {
  constructor(targetGroup, path, optionalParsedPath) {
    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }
  getValue(array, offset) {
    this.bind();
    const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
    if (binding !== void 0) binding.getValue(array, offset);
  }
  setValue(array, offset) {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n = bindings.length; i2 !== n; ++i2) {
      bindings[i2].setValue(array, offset);
    }
  }
  bind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n = bindings.length; i2 !== n; ++i2) {
      bindings[i2].bind();
    }
  }
  unbind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n = bindings.length; i2 !== n; ++i2) {
      bindings[i2].unbind();
    }
  }
}
class PropertyBinding {
  /**
   * Constructs a new property binding.
   *
   * @param {Object} rootNode - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   */
  constructor(rootNode, path, parsedPath) {
    this.path = path;
    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
    this.rootNode = rootNode;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
  /**
   * Factory method for creating a property binding from the given parameters.
   *
   * @static
   * @param {Object} root - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   * @return {PropertyBinding|Composite} The created property binding or composite.
   */
  static create(root, path, parsedPath) {
    if (!(root && root.isAnimationObjectGroup)) {
      return new PropertyBinding(root, path, parsedPath);
    } else {
      return new PropertyBinding.Composite(root, path, parsedPath);
    }
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name - Node name to be sanitized.
   * @return {string} The sanitized node name.
   */
  static sanitizeNodeName(name) {
    return name.replace(/\s/g, "_").replace(_reservedRe, "");
  }
  /**
   * Parses the given track name (an object path to an animated property) and
   * returns an object with information about the path. Matches strings in the following forms:
   *
   * - nodeName.property
   * - nodeName.property[accessor]
   * - nodeName.material.property[accessor]
   * - uuid.property[accessor]
   * - uuid.objectName[objectIndex].propertyName[propertyIndex]
   * - parentName/nodeName.property
   * - parentName/parentName/nodeName.property[index]
   * - .bone[Armature.DEF_cog].position
   * - scene:helium_balloon_model:helium_balloon_model.position
   *
   * @static
   * @param {string} trackName - The track name to parse.
   * @return {Object} The parsed track name as an object.
   */
  static parseTrackName(trackName) {
    const matches = _trackRe.exec(trackName);
    if (matches === null) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
    }
    const results = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: matches[2],
      objectName: matches[3],
      objectIndex: matches[4],
      propertyName: matches[5],
      // required
      propertyIndex: matches[6]
    };
    const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
    if (lastDot !== void 0 && lastDot !== -1) {
      const objectName = results.nodeName.substring(lastDot + 1);
      if (_supportedObjectNames.indexOf(objectName) !== -1) {
        results.nodeName = results.nodeName.substring(0, lastDot);
        results.objectName = objectName;
      }
    }
    if (results.propertyName === null || results.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
    }
    return results;
  }
  /**
   * Searches for a node in the hierarchy of the given root object by the given
   * node name.
   *
   * @static
   * @param {Object} root - The root object.
   * @param {string|number} nodeName - The name of the node.
   * @return {?Object} The found node. Returns `null` if no object was found.
   */
  static findNode(root, nodeName) {
    if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
      return root;
    }
    if (root.skeleton) {
      const bone = root.skeleton.getBoneByName(nodeName);
      if (bone !== void 0) {
        return bone;
      }
    }
    if (root.children) {
      const searchNodeSubtree = function(children) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const childNode = children[i2];
          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }
          const result = searchNodeSubtree(childNode.children);
          if (result) return result;
        }
        return null;
      };
      const subTreeNode = searchNodeSubtree(root.children);
      if (subTreeNode) {
        return subTreeNode;
      }
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(buffer, offset) {
    buffer[offset] = this.targetObject[this.propertyName];
  }
  _getValue_array(buffer, offset) {
    const source = this.resolvedProperty;
    for (let i2 = 0, n = source.length; i2 !== n; ++i2) {
      buffer[offset++] = source[i2];
    }
  }
  _getValue_arrayElement(buffer, offset) {
    buffer[offset] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(buffer, offset) {
    this.resolvedProperty.toArray(buffer, offset);
  }
  // Direct
  _setValue_direct(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
  }
  _setValue_direct_setNeedsUpdate(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // EntireArray
  _setValue_array(buffer, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n = dest.length; i2 !== n; ++i2) {
      dest[i2] = buffer[offset++];
    }
  }
  _setValue_array_setNeedsUpdate(buffer, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n = dest.length; i2 !== n; ++i2) {
      dest[i2] = buffer[offset++];
    }
    this.targetObject.needsUpdate = true;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n = dest.length; i2 !== n; ++i2) {
      dest[i2] = buffer[offset++];
    }
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // ArrayElement
  _setValue_arrayElement(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
  }
  _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // HasToFromArray
  _setValue_fromArray(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
  }
  _setValue_fromArray_setNeedsUpdate(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
    this.targetObject.needsUpdate = true;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset);
  }
  _setValue_unbound(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  }
  /**
   * Creates a getter / setter pair for the property tracked by this binding.
   */
  bind() {
    let targetObject = this.node;
    const parsedPath = this.parsedPath;
    const objectName = parsedPath.objectName;
    const propertyName = parsedPath.propertyName;
    let propertyIndex = parsedPath.propertyIndex;
    if (!targetObject) {
      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
      this.node = targetObject;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!targetObject) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (objectName) {
      let objectIndex = parsedPath.objectIndex;
      switch (objectName) {
        case "materials":
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          targetObject = targetObject.material.materials;
          break;
        case "bones":
          if (!targetObject.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          targetObject = targetObject.skeleton.bones;
          for (let i2 = 0; i2 < targetObject.length; i2++) {
            if (targetObject[i2].name === objectIndex) {
              objectIndex = i2;
              break;
            }
          }
          break;
        case "map":
          if ("map" in targetObject) {
            targetObject = targetObject.map;
            break;
          }
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          targetObject = targetObject.material.map;
          break;
        default:
          if (targetObject[objectName] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          targetObject = targetObject[objectName];
      }
      if (objectIndex !== void 0) {
        if (targetObject[objectIndex] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
          return;
        }
        targetObject = targetObject[objectIndex];
      }
    }
    const nodeProperty = targetObject[propertyName];
    if (nodeProperty === void 0) {
      const nodeName = parsedPath.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
      return;
    }
    let versioning = this.Versioning.None;
    this.targetObject = targetObject;
    if (targetObject.isMaterial === true) {
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.isObject3D === true) {
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let bindingType = this.BindingType.Direct;
    if (propertyIndex !== void 0) {
      if (propertyName === "morphTargetInfluences") {
        if (!targetObject.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!targetObject.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
          propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
        }
      }
      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    }
    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  }
  /**
   * Unbinds the property.
   */
  unbind() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
}
PropertyBinding.Composite = Composite;
PropertyBinding.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
PropertyBinding.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
PropertyBinding.prototype.GetterByBindingType = [
  PropertyBinding.prototype._getValue_direct,
  PropertyBinding.prototype._getValue_array,
  PropertyBinding.prototype._getValue_arrayElement,
  PropertyBinding.prototype._getValue_toArray
];
PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    PropertyBinding.prototype._setValue_direct,
    PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
    PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    PropertyBinding.prototype._setValue_array,
    PropertyBinding.prototype._setValue_array_setNeedsUpdate,
    PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    PropertyBinding.prototype._setValue_arrayElement,
    PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
    PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    PropertyBinding.prototype._setValue_fromArray,
    PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
    PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
const _matrix = /* @__PURE__ */ new Matrix4();
class Raycaster {
  /**
   * Constructs a new raycaster.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.
   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.
   */
  constructor(origin, direction, near = 0, far = Infinity) {
    this.ray = new Ray(origin, direction);
    this.near = near;
    this.far = far;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  /**
   * Updates the ray with a new origin and direction by copying the values from the arguments.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   */
  set(origin, direction) {
    this.ray.set(origin, direction);
  }
  /**
   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.
   *
   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).
   * X and Y components should be between `-1` and `1`.
   * @param {Camera} camera - The camera from which the ray should originate.
   */
  setFromCamera(coords, camera2) {
    if (camera2.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera2.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera2).sub(this.ray.origin).normalize();
      this.camera = camera2;
    } else if (camera2.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera2.near + camera2.far) / (camera2.near - camera2.far)).unproject(camera2);
      this.ray.direction.set(0, 0, -1).transformDirection(camera2.matrixWorld);
      this.camera = camera2;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type: " + camera2.type);
    }
  }
  /**
   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.
   *
   * @param {WebXRController} controller - The controller to copy the position and direction from.
   * @return {Raycaster} A reference to this raycaster.
   */
  setFromXRController(controller) {
    _matrix.identity().extractRotation(controller.matrixWorld);
    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);
    return this;
  }
  /**
   * The intersection point of a raycaster intersection test.
   * @typedef {Object} Raycaster~Intersection
   * @property {number} distance - The distance from the ray's origin to the intersection point.
   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the
   * intersection to the nearest point on the ray. For other objects it will be `undefined`.
   * @property {Vector3} point - The intersection point, in world coordinates.
   * @property {Object} face - The face that has been intersected.
   * @property {number} faceIndex - The face index.
   * @property {Object3D} object - The 3D object that has been intersected.
   * @property {Vector2} uv - U,V coordinates at point of intersection.
   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.
   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.
   * @property {number} instanceId - The index number of the instance where the ray
   * intersects the {@link InstancedMesh}.
   */
  /**
   * Checks all intersection between the ray and the object with or without the
   * descendants. Intersections are returned sorted by distance, closest first.
   *
   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when
   * evaluating whether the ray intersects the object or not. This allows meshes to respond
   * differently to ray casting than lines or points.
   *
   * Note that for meshes, faces must be pointed towards the origin of the ray in order
   * to be detected; intersections of the ray passing through the back of a face will not
   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}
   * to `THREE.DoubleSide`.
   *
   * @param {Object3D} object - The 3D object to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObject(object, recursive = true, intersects = []) {
    intersect(object, this, intersects, recursive);
    intersects.sort(ascSort);
    return intersects;
  }
  /**
   * Checks all intersection between the ray and the objects with or without
   * the descendants. Intersections are returned sorted by distance, closest first.
   *
   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObjects(objects, recursive = true, intersects = []) {
    for (let i2 = 0, l = objects.length; i2 < l; i2++) {
      intersect(objects[i2], this, intersects, recursive);
    }
    intersects.sort(ascSort);
    return intersects;
  }
}
function ascSort(a, b) {
  return a.distance - b.distance;
}
function intersect(object, raycaster, intersects, recursive) {
  let propagate = true;
  if (object.layers.test(raycaster.layers)) {
    const result = object.raycast(raycaster, intersects);
    if (result === false) propagate = false;
  }
  if (propagate === true && recursive === true) {
    const children = object.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      intersect(children[i2], raycaster, intersects, true);
    }
  }
}
const _v1$1 = /* @__PURE__ */ new Vector3();
const _v2$1 = /* @__PURE__ */ new Vector3();
const _v3$3 = /* @__PURE__ */ new Vector3();
class DirectionalLightHelper extends Object3D {
  /**
   * Constructs a new directional light helper.
   *
   * @param {DirectionalLight} light - The light to be visualized.
   * @param {number} [size=1] - The dimensions of the plane.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(light, size, color) {
    super();
    this.light = light;
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    this.type = "DirectionalLightHelper";
    if (size === void 0) size = 1;
    let geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new Float32BufferAttribute([
      -size,
      size,
      0,
      size,
      size,
      0,
      size,
      -size,
      0,
      -size,
      -size,
      0,
      -size,
      size,
      0
    ], 3));
    const material2 = new LineBasicMaterial({ fog: false, toneMapped: false });
    this.lightPlane = new Line(geometry2, material2);
    this.add(this.lightPlane);
    geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new Line(geometry2, material2);
    this.add(this.targetLine);
    this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(true, false);
    this.light.target.updateWorldMatrix(true, false);
    _v1$1.setFromMatrixPosition(this.light.matrixWorld);
    _v2$1.setFromMatrixPosition(this.light.target.matrixWorld);
    _v3$3.subVectors(_v2$1, _v1$1);
    this.lightPlane.lookAt(_v2$1);
    if (this.color !== void 0) {
      this.lightPlane.material.color.set(this.color);
      this.targetLine.material.color.set(this.color);
    } else {
      this.lightPlane.material.color.copy(this.light.color);
      this.targetLine.material.color.copy(this.light.color);
    }
    this.targetLine.lookAt(_v2$1);
    this.targetLine.scale.z = _v3$3.length();
  }
}
class AxesHelper extends LineSegments {
  /**
   * Constructs a new axes helper.
   *
   * @param {number} [size=1] - Size of the lines representing the axes.
   */
  constructor(size = 1) {
    const vertices = [
      0,
      0,
      0,
      size,
      0,
      0,
      0,
      0,
      0,
      0,
      size,
      0,
      0,
      0,
      0,
      0,
      0,
      size
    ];
    const colors = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ];
    const geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry2.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material2 = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry2, material2);
    this.type = "AxesHelper";
  }
  /**
   * Defines the colors of the axes helper.
   *
   * @param {number|Color|string} xAxisColor - The color for the x axis.
   * @param {number|Color|string} yAxisColor - The color for the y axis.
   * @param {number|Color|string} zAxisColor - The color for the z axis.
   * @return {AxesHelper} A reference to this axes helper.
   */
  setColors(xAxisColor, yAxisColor, zAxisColor) {
    const color = new Color();
    const array = this.geometry.attributes.color.array;
    color.set(xAxisColor);
    color.toArray(array, 0);
    color.toArray(array, 3);
    color.set(yAxisColor);
    color.toArray(array, 6);
    color.toArray(array, 9);
    color.set(zAxisColor);
    color.toArray(array, 12);
    color.toArray(array, 15);
    this.geometry.attributes.color.needsUpdate = true;
    return this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
}
class Controls extends EventDispatcher {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(object, domElement = null) {
    super();
    this.object = object;
    this.domElement = domElement;
    this.enabled = true;
    this.state = -1;
    this.keys = {};
    this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };
    this.touches = { ONE: null, TWO: null };
  }
  /**
   * Connects the controls to the DOM. This method has so called "side effects" since
   * it adds the module's event listeners to the DOM.
   *
   * @param {HTMLDOMElement} element - The DOM element to connect to.
   */
  connect(element) {
    if (element === void 0) {
      console.warn("THREE.Controls: connect() now requires an element.");
      return;
    }
    if (this.domElement !== null) this.disconnect();
    this.domElement = element;
  }
  /**
   * Disconnects the controls from the DOM.
   */
  disconnect() {
  }
  /**
   * Call this method if you no longer want use to the controls. It frees all internal
   * resources and removes all event listeners.
   */
  dispose() {
  }
  /**
   * Controls should implement this method if they have to update their internal state
   * per simulation step.
   *
   * @param {number} [delta] - The time delta in seconds.
   */
  update() {
  }
}
function getByteLength(width, height, format, type) {
  const typeByteLength = getTextureTypeByteLength(type);
  switch (format) {
    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    case AlphaFormat:
      return width * height;
    case RedFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RedIntegerFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RGFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGIntegerFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGBFormat:
      return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAIntegerFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    case RGB_S3TC_DXT1_Format:
    case RGBA_S3TC_DXT1_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_S3TC_DXT3_Format:
    case RGBA_S3TC_DXT5_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    case RGB_PVRTC_2BPPV1_Format:
    case RGBA_PVRTC_2BPPV1_Format:
      return Math.max(width, 16) * Math.max(height, 8) / 4;
    case RGB_PVRTC_4BPPV1_Format:
    case RGBA_PVRTC_4BPPV1_Format:
      return Math.max(width, 8) * Math.max(height, 8) / 2;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    case RGB_ETC1_Format:
    case RGB_ETC2_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_ETC2_EAC_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    case RGBA_ASTC_4x4_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x4_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x5_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x5_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x6_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x5_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_8x6_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x8_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x5_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_10x6_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_10x8_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x10_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x10_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x12_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    case RGBA_BPTC_Format:
    case RGB_BPTC_SIGNED_Format:
    case RGB_BPTC_UNSIGNED_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    case RED_RGTC1_Format:
    case SIGNED_RED_RGTC1_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;
    case RED_GREEN_RGTC2_Format:
    case SIGNED_RED_GREEN_RGTC2_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${format} format.`
  );
}
function getTextureTypeByteLength(type) {
  switch (type) {
    case UnsignedByteType:
    case ByteType:
      return { byteLength: 1, components: 1 };
    case UnsignedShortType:
    case ShortType:
    case HalfFloatType:
      return { byteLength: 2, components: 1 };
    case UnsignedShort4444Type:
    case UnsignedShort5551Type:
      return { byteLength: 2, components: 4 };
    case UnsignedIntType:
    case IntType:
    case FloatType:
      return { byteLength: 4, components: 1 };
    case UnsignedInt5999Type:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${type}.`);
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION
  } }));
}
if (typeof window !== "undefined") {
  if (window.__THREE__) {
    console.warn("WARNING: Multiple instances of Three.js being imported.");
  } else {
    window.__THREE__ = REVISION;
  }
}
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function WebGLAnimation() {
  let context = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context = value;
    }
  };
}
function WebGLAttributes(gl) {
  const buffers = /* @__PURE__ */ new WeakMap();
  function createBuffer(attribute, bufferType) {
    const array = attribute.array;
    const usage = attribute.usage;
    const size = array.byteLength;
    const buffer = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer);
    gl.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    let type;
    if (array instanceof Float32Array) {
      type = gl.FLOAT;
    } else if (array instanceof Uint16Array) {
      if (attribute.isFloat16BufferAttribute) {
        type = gl.HALF_FLOAT;
      } else {
        type = gl.UNSIGNED_SHORT;
      }
    } else if (array instanceof Int16Array) {
      type = gl.SHORT;
    } else if (array instanceof Uint32Array) {
      type = gl.UNSIGNED_INT;
    } else if (array instanceof Int32Array) {
      type = gl.INT;
    } else if (array instanceof Int8Array) {
      type = gl.BYTE;
    } else if (array instanceof Uint8Array) {
      type = gl.UNSIGNED_BYTE;
    } else if (array instanceof Uint8ClampedArray) {
      type = gl.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
    }
    return {
      buffer,
      type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version,
      size
    };
  }
  function updateBuffer(buffer, attribute, bufferType) {
    const array = attribute.array;
    const updateRanges = attribute.updateRanges;
    gl.bindBuffer(bufferType, buffer);
    if (updateRanges.length === 0) {
      gl.bufferSubData(bufferType, 0, array);
    } else {
      updateRanges.sort((a, b) => a.start - b.start);
      let mergeIndex = 0;
      for (let i2 = 1; i2 < updateRanges.length; i2++) {
        const previousRange = updateRanges[mergeIndex];
        const range = updateRanges[i2];
        if (range.start <= previousRange.start + previousRange.count + 1) {
          previousRange.count = Math.max(
            previousRange.count,
            range.start + range.count - previousRange.start
          );
        } else {
          ++mergeIndex;
          updateRanges[mergeIndex] = range;
        }
      }
      updateRanges.length = mergeIndex + 1;
      for (let i2 = 0, l = updateRanges.length; i2 < l; i2++) {
        const range = updateRanges[i2];
        gl.bufferSubData(
          bufferType,
          range.start * array.BYTES_PER_ELEMENT,
          array,
          range.start,
          range.count
        );
      }
      attribute.clearUpdateRanges();
    }
    attribute.onUploadCallback();
  }
  function get(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    return buffers.get(attribute);
  }
  function remove(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }
  function update2(attribute, bufferType) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    if (attribute.isGLBufferAttribute) {
      const cached = buffers.get(attribute);
      if (!cached || cached.version < attribute.version) {
        buffers.set(attribute, {
          buffer: attribute.buffer,
          type: attribute.type,
          bytesPerElement: attribute.elementSize,
          version: attribute.version
        });
      }
      return;
    }
    const data = buffers.get(attribute);
    if (data === void 0) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      if (data.size !== attribute.array.byteLength) {
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      }
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }
  return {
    get,
    remove,
    update: update2
  };
}
var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n		emissiveColor = sRGBTransferEOTF( emissiveColor );\n	#endif\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		#else\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
const fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const ShaderChunk = {
  alphahash_fragment,
  alphahash_pars_fragment,
  alphamap_fragment,
  alphamap_pars_fragment,
  alphatest_fragment,
  alphatest_pars_fragment,
  aomap_fragment,
  aomap_pars_fragment,
  batching_pars_vertex,
  batching_vertex,
  begin_vertex,
  beginnormal_vertex,
  bsdfs,
  iridescence_fragment,
  bumpmap_pars_fragment,
  clipping_planes_fragment,
  clipping_planes_pars_fragment,
  clipping_planes_pars_vertex,
  clipping_planes_vertex,
  color_fragment,
  color_pars_fragment,
  color_pars_vertex,
  color_vertex,
  common,
  cube_uv_reflection_fragment,
  defaultnormal_vertex,
  displacementmap_pars_vertex,
  displacementmap_vertex,
  emissivemap_fragment,
  emissivemap_pars_fragment,
  colorspace_fragment,
  colorspace_pars_fragment,
  envmap_fragment,
  envmap_common_pars_fragment,
  envmap_pars_fragment,
  envmap_pars_vertex,
  envmap_physical_pars_fragment,
  envmap_vertex,
  fog_vertex,
  fog_pars_vertex,
  fog_fragment,
  fog_pars_fragment,
  gradientmap_pars_fragment,
  lightmap_pars_fragment,
  lights_lambert_fragment,
  lights_lambert_pars_fragment,
  lights_pars_begin,
  lights_toon_fragment,
  lights_toon_pars_fragment,
  lights_phong_fragment,
  lights_phong_pars_fragment,
  lights_physical_fragment,
  lights_physical_pars_fragment,
  lights_fragment_begin,
  lights_fragment_maps,
  lights_fragment_end,
  logdepthbuf_fragment,
  logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex,
  logdepthbuf_vertex,
  map_fragment,
  map_pars_fragment,
  map_particle_fragment,
  map_particle_pars_fragment,
  metalnessmap_fragment,
  metalnessmap_pars_fragment,
  morphinstance_vertex,
  morphcolor_vertex,
  morphnormal_vertex,
  morphtarget_pars_vertex,
  morphtarget_vertex,
  normal_fragment_begin,
  normal_fragment_maps,
  normal_pars_fragment,
  normal_pars_vertex,
  normal_vertex,
  normalmap_pars_fragment,
  clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment,
  iridescence_pars_fragment,
  opaque_fragment,
  packing,
  premultiplied_alpha_fragment,
  project_vertex,
  dithering_fragment,
  dithering_pars_fragment,
  roughnessmap_fragment,
  roughnessmap_pars_fragment,
  shadowmap_pars_fragment,
  shadowmap_pars_vertex,
  shadowmap_vertex,
  shadowmask_pars_fragment,
  skinbase_vertex,
  skinning_pars_vertex,
  skinning_vertex,
  skinnormal_vertex,
  specularmap_fragment,
  specularmap_pars_fragment,
  tonemapping_fragment,
  tonemapping_pars_fragment,
  transmission_fragment,
  transmission_pars_fragment,
  uv_pars_fragment,
  uv_pars_vertex,
  uv_vertex,
  worldpos_vertex,
  background_vert: vertex$h,
  background_frag: fragment$h,
  backgroundCube_vert: vertex$g,
  backgroundCube_frag: fragment$g,
  cube_vert: vertex$f,
  cube_frag: fragment$f,
  depth_vert: vertex$e,
  depth_frag: fragment$e,
  distanceRGBA_vert: vertex$d,
  distanceRGBA_frag: fragment$d,
  equirect_vert: vertex$c,
  equirect_frag: fragment$c,
  linedashed_vert: vertex$b,
  linedashed_frag: fragment$b,
  meshbasic_vert: vertex$a,
  meshbasic_frag: fragment$a,
  meshlambert_vert: vertex$9,
  meshlambert_frag: fragment$9,
  meshmatcap_vert: vertex$8,
  meshmatcap_frag: fragment$8,
  meshnormal_vert: vertex$7,
  meshnormal_frag: fragment$7,
  meshphong_vert: vertex$6,
  meshphong_frag: fragment$6,
  meshphysical_vert: vertex$5,
  meshphysical_frag: fragment$5,
  meshtoon_vert: vertex$4,
  meshtoon_frag: fragment$4,
  points_vert: vertex$3,
  points_frag: fragment$3,
  shadow_vert: vertex$2,
  shadow_frag: fragment$2,
  sprite_vert: vertex$1,
  sprite_frag: fragment$1
};
const UniformsLib = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new Matrix3() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Color(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 }
  }
};
const ShaderLib = {
  basic: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) },
        specular: { value: /* @__PURE__ */ new Color(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.roughnessmap,
      UniformsLib.metalnessmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.gradientmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.points,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap
    ]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshnormal_vert,
    fragmentShader: ShaderChunk.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.sprite,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new Matrix3() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new Matrix3() }
    },
    vertexShader: ShaderChunk.backgroundCube_vert,
    fragmentShader: ShaderChunk.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new Vector3() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.lights,
      UniformsLib.fog,
      {
        color: { value: /* @__PURE__ */ new Color(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
ShaderLib.physical = {
  uniforms: /* @__PURE__ */ mergeUniforms([
    ShaderLib.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Color(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Color(0) },
      specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    }
  ]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
const _rgb = { r: 0, b: 0, g: 0 };
const _e1$1 = /* @__PURE__ */ new Euler();
const _m1$1 = /* @__PURE__ */ new Matrix4();
function WebGLBackground(renderer2, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
  const clearColor = new Color(0);
  let clearAlpha = alpha === true ? 0 : 1;
  let planeMesh;
  let boxMesh;
  let currentBackground = null;
  let currentBackgroundVersion = 0;
  let currentTonemapping = null;
  function getBackground(scene2) {
    let background = scene2.isScene === true ? scene2.background : null;
    if (background && background.isTexture) {
      const usePMREM = scene2.backgroundBlurriness > 0;
      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
    }
    return background;
  }
  function render(scene2) {
    let forceClear = false;
    const background = getBackground(scene2);
    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }
    const environmentBlendMode = renderer2.xr.getEnvironmentBlendMode();
    if (environmentBlendMode === "additive") {
      state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
    } else if (environmentBlendMode === "alpha-blend") {
      state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
    }
    if (renderer2.autoClear || forceClear) {
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      renderer2.clear(renderer2.autoClearColor, renderer2.autoClearDepth, renderer2.autoClearStencil);
    }
  }
  function addToRenderList(renderList, scene2) {
    const background = getBackground(scene2);
    if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === void 0) {
        boxMesh = new Mesh(
          new BoxGeometry(1, 1, 1),
          new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
            vertexShader: ShaderLib.backgroundCube.vertexShader,
            fragmentShader: ShaderLib.backgroundCube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false,
            allowOverride: false
          })
        );
        boxMesh.geometry.deleteAttribute("normal");
        boxMesh.geometry.deleteAttribute("uv");
        boxMesh.onBeforeRender = function(renderer3, scene3, camera2) {
          this.matrixWorld.copyPosition(camera2.matrixWorld);
        };
        Object.defineProperty(boxMesh.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }
      _e1$1.copy(scene2.backgroundRotation);
      _e1$1.x *= -1;
      _e1$1.y *= -1;
      _e1$1.z *= -1;
      if (background.isCubeTexture && background.isRenderTargetTexture === false) {
        _e1$1.y *= -1;
        _e1$1.z *= -1;
      }
      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
      boxMesh.material.uniforms.backgroundBlurriness.value = scene2.backgroundBlurriness;
      boxMesh.material.uniforms.backgroundIntensity.value = scene2.backgroundIntensity;
      boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1));
      boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      boxMesh.layers.enableAll();
      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === void 0) {
        planeMesh = new Mesh(
          new PlaneGeometry(2, 2),
          new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false,
            allowOverride: false
          })
        );
        planeMesh.geometry.deleteAttribute("normal");
        Object.defineProperty(planeMesh.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }
      planeMesh.material.uniforms.t2D.value = background;
      planeMesh.material.uniforms.backgroundIntensity.value = scene2.backgroundIntensity;
      planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }
      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      planeMesh.layers.enableAll();
      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }
  function setClear(color, alpha2) {
    color.getRGB(_rgb, getUnlitUniformColorSpace(renderer2));
    state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
  }
  function dispose() {
    if (boxMesh !== void 0) {
      boxMesh.geometry.dispose();
      boxMesh.material.dispose();
      boxMesh = void 0;
    }
    if (planeMesh !== void 0) {
      planeMesh.geometry.dispose();
      planeMesh.material.dispose();
      planeMesh = void 0;
    }
  }
  return {
    getClearColor: function() {
      return clearColor;
    },
    setClearColor: function(color, alpha2 = 1) {
      clearColor.set(color);
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function() {
      return clearAlpha;
    },
    setClearAlpha: function(alpha2) {
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    render,
    addToRenderList,
    dispose
  };
}
function WebGLBindingStates(gl, attributes) {
  const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
  const bindingStates = {};
  const defaultState = createBindingState(null);
  let currentState = defaultState;
  let forceUpdate = false;
  function setup(object, material2, program, geometry2, index) {
    let updateBuffers = false;
    const state = getBindingState(geometry2, program, material2);
    if (currentState !== state) {
      currentState = state;
      bindVertexArrayObject(currentState.object);
    }
    updateBuffers = needsUpdate(object, geometry2, program, index);
    if (updateBuffers) saveCache(object, geometry2, program, index);
    if (index !== null) {
      attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
    }
    if (updateBuffers || forceUpdate) {
      forceUpdate = false;
      setupVertexAttributes(object, material2, program, geometry2);
      if (index !== null) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
      }
    }
  }
  function createVertexArrayObject() {
    return gl.createVertexArray();
  }
  function bindVertexArrayObject(vao) {
    return gl.bindVertexArray(vao);
  }
  function deleteVertexArrayObject(vao) {
    return gl.deleteVertexArray(vao);
  }
  function getBindingState(geometry2, program, material2) {
    const wireframe = material2.wireframe === true;
    let programMap = bindingStates[geometry2.id];
    if (programMap === void 0) {
      programMap = {};
      bindingStates[geometry2.id] = programMap;
    }
    let stateMap = programMap[program.id];
    if (stateMap === void 0) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }
    let state = stateMap[wireframe];
    if (state === void 0) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }
    return state;
  }
  function createBindingState(vao) {
    const newAttributes = [];
    const enabledAttributes = [];
    const attributeDivisors = [];
    for (let i2 = 0; i2 < maxVertexAttributes; i2++) {
      newAttributes[i2] = 0;
      enabledAttributes[i2] = 0;
      attributeDivisors[i2] = 0;
    }
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes,
      enabledAttributes,
      attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }
  function needsUpdate(object, geometry2, program, index) {
    const cachedAttributes = currentState.attributes;
    const geometryAttributes = geometry2.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        const cachedAttribute = cachedAttributes[name];
        let geometryAttribute = geometryAttributes[name];
        if (geometryAttribute === void 0) {
          if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
          if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
        }
        if (cachedAttribute === void 0) return true;
        if (cachedAttribute.attribute !== geometryAttribute) return true;
        if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
        attributesNum++;
      }
    }
    if (currentState.attributesNum !== attributesNum) return true;
    if (currentState.index !== index) return true;
    return false;
  }
  function saveCache(object, geometry2, program, index) {
    const cache = {};
    const attributes2 = geometry2.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        let attribute = attributes2[name];
        if (attribute === void 0) {
          if (name === "instanceMatrix" && object.instanceMatrix) attribute = object.instanceMatrix;
          if (name === "instanceColor" && object.instanceColor) attribute = object.instanceColor;
        }
        const data = {};
        data.attribute = attribute;
        if (attribute && attribute.data) {
          data.data = attribute.data;
        }
        cache[name] = data;
        attributesNum++;
      }
    }
    currentState.attributes = cache;
    currentState.attributesNum = attributesNum;
    currentState.index = index;
  }
  function initAttributes() {
    const newAttributes = currentState.newAttributes;
    for (let i2 = 0, il = newAttributes.length; i2 < il; i2++) {
      newAttributes[i2] = 0;
    }
  }
  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }
  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    const attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute] = 1;
    if (enabledAttributes[attribute] === 0) {
      gl.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }
    if (attributeDivisors[attribute] !== meshPerAttribute) {
      gl.vertexAttribDivisor(attribute, meshPerAttribute);
      attributeDivisors[attribute] = meshPerAttribute;
    }
  }
  function disableUnusedAttributes() {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    for (let i2 = 0, il = enabledAttributes.length; i2 < il; i2++) {
      if (enabledAttributes[i2] !== newAttributes[i2]) {
        gl.disableVertexAttribArray(i2);
        enabledAttributes[i2] = 0;
      }
    }
  }
  function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
    if (integer === true) {
      gl.vertexAttribIPointer(index, size, type, stride, offset);
    } else {
      gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
  }
  function setupVertexAttributes(object, material2, program, geometry2) {
    initAttributes();
    const geometryAttributes = geometry2.attributes;
    const programAttributes = program.getAttributes();
    const materialDefaultAttributeValues = material2.defaultAttributeValues;
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        let geometryAttribute = geometryAttributes[name];
        if (geometryAttribute === void 0) {
          if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
          if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
        }
        if (geometryAttribute !== void 0) {
          const normalized = geometryAttribute.normalized;
          const size = geometryAttribute.itemSize;
          const attribute = attributes.get(geometryAttribute);
          if (attribute === void 0) continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          const bytesPerElement = attribute.bytesPerElement;
          const integer = type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType;
          if (geometryAttribute.isInterleavedBufferAttribute) {
            const data = geometryAttribute.data;
            const stride = data.stride;
            const offset = geometryAttribute.offset;
            if (data.isInstancedInterleavedBuffer) {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttributeAndDivisor(programAttribute.location + i2, data.meshPerAttribute);
              }
              if (object.isInstancedMesh !== true && geometry2._maxInstanceCount === void 0) {
                geometry2._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttribute(programAttribute.location + i2);
              }
            }
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
              vertexAttribPointer(
                programAttribute.location + i2,
                size / programAttribute.locationSize,
                type,
                normalized,
                stride * bytesPerElement,
                (offset + size / programAttribute.locationSize * i2) * bytesPerElement,
                integer
              );
            }
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttributeAndDivisor(programAttribute.location + i2, geometryAttribute.meshPerAttribute);
              }
              if (object.isInstancedMesh !== true && geometry2._maxInstanceCount === void 0) {
                geometry2._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttribute(programAttribute.location + i2);
              }
            }
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
              vertexAttribPointer(
                programAttribute.location + i2,
                size / programAttribute.locationSize,
                type,
                normalized,
                size * bytesPerElement,
                size / programAttribute.locationSize * i2 * bytesPerElement,
                integer
              );
            }
          }
        } else if (materialDefaultAttributeValues !== void 0) {
          const value = materialDefaultAttributeValues[name];
          if (value !== void 0) {
            switch (value.length) {
              case 2:
                gl.vertexAttrib2fv(programAttribute.location, value);
                break;
              case 3:
                gl.vertexAttrib3fv(programAttribute.location, value);
                break;
              case 4:
                gl.vertexAttrib4fv(programAttribute.location, value);
                break;
              default:
                gl.vertexAttrib1fv(programAttribute.location, value);
            }
          }
        }
      }
    }
    disableUnusedAttributes();
  }
  function dispose() {
    reset();
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometryId];
    }
  }
  function releaseStatesOfGeometry(geometry2) {
    if (bindingStates[geometry2.id] === void 0) return;
    const programMap = bindingStates[geometry2.id];
    for (const programId in programMap) {
      const stateMap = programMap[programId];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[programId];
    }
    delete bindingStates[geometry2.id];
  }
  function releaseStatesOfProgram(program) {
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      if (programMap[program.id] === void 0) continue;
      const stateMap = programMap[program.id];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[program.id];
    }
  }
  function reset() {
    resetDefaultState();
    forceUpdate = true;
    if (currentState === defaultState) return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  }
  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }
  return {
    setup,
    reset,
    resetDefaultState,
    dispose,
    releaseStatesOfGeometry,
    releaseStatesOfProgram,
    initAttributes,
    enableAttribute,
    disableUnusedAttributes
  };
}
function WebGLBufferRenderer(gl, extensions, info) {
  let mode;
  function setMode(value) {
    mode = value;
  }
  function render(start, count) {
    gl.drawArrays(mode, start, count);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    gl.drawArraysInstanced(mode, start, count, primcount);
    info.update(count, mode, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
    let elementCount = 0;
    for (let i2 = 0; i2 < drawCount; i2++) {
      elementCount += counts[i2];
    }
    info.update(elementCount, mode, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < starts.length; i2++) {
        renderInstances(starts[i2], counts[i2], primcount[i2]);
      }
    } else {
      extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2] * primcount[i2];
      }
      info.update(elementCount, mode, 1);
    }
  }
  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLCapabilities(gl, extensions, parameters, utils) {
  let maxAnisotropy;
  function getMaxAnisotropy() {
    if (maxAnisotropy !== void 0) return maxAnisotropy;
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }
    return maxAnisotropy;
  }
  function textureFormatReadable(textureFormat) {
    if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
      return false;
    }
    return true;
  }
  function textureTypeReadable(textureType) {
    const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float"));
    if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    textureType !== FloatType && !halfFloatSupportedByExt) {
      return false;
    }
    return true;
  }
  function getMaxPrecision(precision2) {
    if (precision2 === "highp") {
      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
        return "highp";
      }
      precision2 = "mediump";
    }
    if (precision2 === "mediump") {
      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
  const maxPrecision = getMaxPrecision(precision);
  if (maxPrecision !== precision) {
    console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
    precision = maxPrecision;
  }
  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has("EXT_clip_control");
  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
  const vertexTextures = maxVertexTextures > 0;
  const maxSamples = gl.getParameter(gl.MAX_SAMPLES);
  return {
    isWebGL2: true,
    // keeping this for backwards compatibility
    getMaxAnisotropy,
    getMaxPrecision,
    textureFormatReadable,
    textureTypeReadable,
    precision,
    logarithmicDepthBuffer,
    reverseDepthBuffer,
    maxTextures,
    maxVertexTextures,
    maxTextureSize,
    maxCubemapSize,
    maxAttributes,
    maxVertexUniforms,
    maxVaryings,
    maxFragmentUniforms,
    vertexTextures,
    maxSamples
  };
}
function WebGLClipping(properties) {
  const scope = this;
  let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
  const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(planes, enableLocalClipping) {
    const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    numGlobalPlanes = planes.length;
    return enabled;
  };
  this.beginShadows = function() {
    renderingShadows = true;
    projectPlanes(null);
  };
  this.endShadows = function() {
    renderingShadows = false;
  };
  this.setGlobalState = function(planes, camera2) {
    globalState = projectPlanes(planes, camera2, 0);
  };
  this.setState = function(material2, camera2, useCache) {
    const planes = material2.clippingPlanes, clipIntersection = material2.clipIntersection, clipShadows = material2.clipShadows;
    const materialProperties = properties.get(material2);
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      if (renderingShadows) {
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
      let dstArray = materialProperties.clippingState || null;
      uniform.value = dstArray;
      dstArray = projectPlanes(planes, camera2, lGlobal, useCache);
      for (let i2 = 0; i2 !== lGlobal; ++i2) {
        dstArray[i2] = globalState[i2];
      }
      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };
  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }
    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }
  function projectPlanes(planes, camera2, dstOffset, skipTransform) {
    const nPlanes = planes !== null ? planes.length : 0;
    let dstArray = null;
    if (nPlanes !== 0) {
      dstArray = uniform.value;
      if (skipTransform !== true || dstArray === null) {
        const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera2.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);
        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }
        for (let i2 = 0, i4 = dstOffset; i2 !== nPlanes; ++i2, i4 += 4) {
          plane.copy(planes[i2]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }
      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }
    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}
function WebGLCubeMaps(renderer2) {
  let cubemaps = /* @__PURE__ */ new WeakMap();
  function mapTextureMapping(texture, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture.mapping = CubeRefractionMapping;
    }
    return texture;
  }
  function get(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture)) {
          const cubemap = cubemaps.get(texture).texture;
          return mapTextureMapping(cubemap, texture.mapping);
        } else {
          const image = texture.image;
          if (image && image.height > 0) {
            const renderTarget = new WebGLCubeRenderTarget(image.height);
            renderTarget.fromEquirectangularTexture(renderer2, texture);
            cubemaps.set(texture, renderTarget);
            texture.addEventListener("dispose", onTextureDispose);
            return mapTextureMapping(renderTarget.texture, texture.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return texture;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemap = cubemaps.get(texture);
    if (cubemap !== void 0) {
      cubemaps.delete(texture);
      cubemap.dispose();
    }
  }
  function dispose() {
    cubemaps = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
const LOD_MIN = 4;
const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
const MAX_SAMPLES = 20;
const _flatCamera = /* @__PURE__ */ new OrthographicCamera();
const _clearColor = /* @__PURE__ */ new Color();
let _oldTarget = null;
let _oldActiveCubeFace = 0;
let _oldActiveMipmapLevel = 0;
let _oldXrEnabled = false;
const PHI = (1 + Math.sqrt(5)) / 2;
const INV_PHI = 1 / PHI;
const _axisDirections = [
  /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
  /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
  /* @__PURE__ */ new Vector3(-1, 1, -1),
  /* @__PURE__ */ new Vector3(1, 1, -1),
  /* @__PURE__ */ new Vector3(-1, 1, 1),
  /* @__PURE__ */ new Vector3(1, 1, 1)
];
const _origin = /* @__PURE__ */ new Vector3();
class PMREMGenerator {
  /**
   * Constructs a new PMREM generator.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  constructor(renderer2) {
    this._renderer = renderer2;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety.
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromScene(scene2, sigma = 0, near = 0.1, far = 100, options = {}) {
    const {
      size = 256,
      position = _origin
    } = options;
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    this._setSize(size);
    const cubeUVRenderTarget = this._allocateTargets();
    cubeUVRenderTarget.depthBuffer = true;
    this._sceneToCubeUV(scene2, near, far, cubeUVRenderTarget, position);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromEquirectangular(equirectangular, renderTarget = null) {
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromCubemap(cubemap, renderTarget = null) {
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = _getCubemapMaterial();
      this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = _getEquirectMaterial();
      this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(cubeSize) {
    this._lodMax = Math.floor(Math.log2(cubeSize));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null) this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
    for (let i2 = 0; i2 < this._lodPlanes.length; i2++) {
      this._lodPlanes[i2].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
    this._renderer.xr.enabled = _oldXrEnabled;
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture, renderTarget) {
    if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
      this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
    } else {
      this._setSize(texture.image.width / 4);
    }
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    this._textureToCubeUV(texture, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets() {
    const width = 3 * Math.max(this._cubeSize, 16 * 7);
    const height = 4 * this._cubeSize;
    const params = {
      magFilter: LinearFilter,
      minFilter: LinearFilter,
      generateMipmaps: false,
      type: HalfFloatType,
      format: RGBAFormat,
      colorSpace: LinearSRGBColorSpace,
      depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget(width, height, params);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = _createRenderTarget(width, height, params);
      const { _lodMax } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
      this._blurMaterial = _getBlurShader(_lodMax, width, height);
    }
    return cubeUVRenderTarget;
  }
  _compileMaterial(material2) {
    const tmpMesh = new Mesh(this._lodPlanes[0], material2);
    this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene2, near, far, cubeUVRenderTarget, position) {
    const fov2 = 90;
    const aspect2 = 1;
    const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
    const upSign = [1, -1, 1, 1, 1, 1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer2 = this._renderer;
    const originalAutoClear = renderer2.autoClear;
    const toneMapping = renderer2.toneMapping;
    renderer2.getClearColor(_clearColor);
    renderer2.toneMapping = NoToneMapping;
    renderer2.autoClear = false;
    const backgroundMaterial = new MeshBasicMaterial({
      name: "PMREM.Background",
      side: BackSide,
      depthWrite: false,
      depthTest: false
    });
    const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
    let useSolidColor = false;
    const background = scene2.background;
    if (background) {
      if (background.isColor) {
        backgroundMaterial.color.copy(background);
        scene2.background = null;
        useSolidColor = true;
      }
    } else {
      backgroundMaterial.color.copy(_clearColor);
      useSolidColor = true;
    }
    for (let i2 = 0; i2 < 6; i2++) {
      const col = i2 % 3;
      if (col === 0) {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x + forwardSign[i2], position.y, position.z);
      } else if (col === 1) {
        cubeCamera.up.set(0, 0, upSign[i2]);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x, position.y + forwardSign[i2], position.z);
      } else {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x, position.y, position.z + forwardSign[i2]);
      }
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, col * size, i2 > 2 ? size : 0, size, size);
      renderer2.setRenderTarget(cubeUVRenderTarget);
      if (useSolidColor) {
        renderer2.render(backgroundBox, cubeCamera);
      }
      renderer2.render(scene2, cubeCamera);
    }
    backgroundBox.geometry.dispose();
    backgroundBox.material.dispose();
    renderer2.toneMapping = toneMapping;
    renderer2.autoClear = originalAutoClear;
    scene2.background = background;
  }
  _textureToCubeUV(texture, cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
    if (isCubeTexture) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
      }
      this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
      }
    }
    const material2 = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    const mesh2 = new Mesh(this._lodPlanes[0], material2);
    const uniforms = material2.uniforms;
    uniforms["envMap"].value = texture;
    const size = this._cubeSize;
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
    renderer2.setRenderTarget(cubeUVRenderTarget);
    renderer2.render(mesh2, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    const autoClear = renderer2.autoClear;
    renderer2.autoClear = false;
    const n = this._lodPlanes.length;
    for (let i2 = 1; i2 < n; i2++) {
      const sigma = Math.sqrt(this._sigmas[i2] * this._sigmas[i2] - this._sigmas[i2 - 1] * this._sigmas[i2 - 1]);
      const poleAxis = _axisDirections[(n - i2 - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
    }
    renderer2.autoClear = autoClear;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @private
   * @param {WebGLRenderTarget} cubeUVRenderTarget
   * @param {number} lodIn
   * @param {number} lodOut
   * @param {number} sigma
   * @param {Vector3} [poleAxis]
   */
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(
      cubeUVRenderTarget,
      pingPongRenderTarget,
      lodIn,
      lodOut,
      sigma,
      "latitudinal",
      poleAxis
    );
    this._halfBlur(
      pingPongRenderTarget,
      cubeUVRenderTarget,
      lodOut,
      lodOut,
      sigma,
      "longitudinal",
      poleAxis
    );
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
    const renderer2 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction !== "latitudinal" && direction !== "longitudinal") {
      console.error(
        "blur direction must be either latitudinal or longitudinal!"
      );
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
    const blurUniforms = blurMaterial.uniforms;
    const pixels = this._sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum = 0;
    for (let i2 = 0; i2 < MAX_SAMPLES; ++i2) {
      const x2 = i2 / sigmaPixels;
      const weight = Math.exp(-x2 * x2 / 2);
      weights.push(weight);
      if (i2 === 0) {
        sum += weight;
      } else if (i2 < samples) {
        sum += 2 * weight;
      }
    }
    for (let i2 = 0; i2 < weights.length; i2++) {
      weights[i2] = weights[i2] / sum;
    }
    blurUniforms["envMap"].value = targetIn.texture;
    blurUniforms["samples"].value = samples;
    blurUniforms["weights"].value = weights;
    blurUniforms["latitudinal"].value = direction === "latitudinal";
    if (poleAxis) {
      blurUniforms["poleAxis"].value = poleAxis;
    }
    const { _lodMax } = this;
    blurUniforms["dTheta"].value = radiansPerPixel;
    blurUniforms["mipInt"].value = _lodMax - lodIn;
    const outputSize = this._sizeLods[lodOut];
    const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
    const y = 4 * (this._cubeSize - outputSize);
    _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
    renderer2.setRenderTarget(targetOut);
    renderer2.render(blurMesh, _flatCamera);
  }
}
function _createPlanes(lodMax) {
  const lodPlanes = [];
  const sizeLods = [];
  const sigmas = [];
  let lod = lodMax;
  const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  for (let i2 = 0; i2 < totalLods; i2++) {
    const sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i2 > lodMax - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i2 - lodMax + LOD_MIN - 1];
    } else if (i2 === 0) {
      sigma = 0;
    }
    sigmas.push(sigma);
    const texelSize = 1 / (sizeLod - 2);
    const min = -texelSize;
    const max = 1 + texelSize;
    const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x = face % 3 * 2 / 3 - 1;
      const y = face > 2 ? 0 : -1;
      const coordinates = [
        x,
        y,
        0,
        x + 2 / 3,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y + 1,
        0
      ];
      position.set(coordinates, positionSize * vertices * face);
      uv.set(uv1, uvSize * vertices * face);
      const fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    lodPlanes.push(planes);
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { lodPlanes, sizeLods, sigmas };
}
function _createRenderTarget(width, height, params) {
  const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x, y, width, height) {
  target.viewport.set(x, y, width, height);
  target.scissor.set(x, y, width, height);
}
function _getBlurShader(lodMax, width, height) {
  const weights = new Float32Array(MAX_SAMPLES);
  const poleAxis = new Vector3(0, 1, 0);
  const shaderMaterial = new ShaderMaterial({
    name: "SphericalGaussianBlur",
    defines: {
      "n": MAX_SAMPLES,
      "CUBEUV_TEXEL_WIDTH": 1 / width,
      "CUBEUV_TEXEL_HEIGHT": 1 / height,
      "CUBEUV_MAX_MIP": `${lodMax}.0`
    },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: weights },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: poleAxis }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getEquirectMaterial() {
  return new ShaderMaterial({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCubemapMaterial() {
  return new ShaderMaterial({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "flipEnvMap": { value: -1 }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCommonVertexShader() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function WebGLCubeUVMaps(renderer2) {
  let cubeUVmaps = /* @__PURE__ */ new WeakMap();
  let pmremGenerator = null;
  function get(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
      const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
      if (isEquirectMap || isCubeMap) {
        let renderTarget = cubeUVmaps.get(texture);
        const currentPMREMVersion = renderTarget !== void 0 ? renderTarget.texture.pmremVersion : 0;
        if (texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion) {
          if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer2);
          renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
          renderTarget.texture.pmremVersion = texture.pmremVersion;
          cubeUVmaps.set(texture, renderTarget);
          return renderTarget.texture;
        } else {
          if (renderTarget !== void 0) {
            return renderTarget.texture;
          } else {
            const image = texture.image;
            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer2);
              renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
              renderTarget.texture.pmremVersion = texture.pmremVersion;
              cubeUVmaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return renderTarget.texture;
            } else {
              return null;
            }
          }
        }
      }
    }
    return texture;
  }
  function isCubeTextureComplete(image) {
    let count = 0;
    const length = 6;
    for (let i2 = 0; i2 < length; i2++) {
      if (image[i2] !== void 0) count++;
    }
    return count === length;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemapUV = cubeUVmaps.get(texture);
    if (cubemapUV !== void 0) {
      cubeUVmaps.delete(texture);
      cubemapUV.dispose();
    }
  }
  function dispose() {
    cubeUVmaps = /* @__PURE__ */ new WeakMap();
    if (pmremGenerator !== null) {
      pmremGenerator.dispose();
      pmremGenerator = null;
    }
  }
  return {
    get,
    dispose
  };
}
function WebGLExtensions(gl) {
  const extensions = {};
  function getExtension(name) {
    if (extensions[name] !== void 0) {
      return extensions[name];
    }
    let extension;
    switch (name) {
      case "WEBGL_depth_texture":
        extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        extension = gl.getExtension(name);
    }
    extensions[name] = extension;
    return extension;
  }
  return {
    has: function(name) {
      return getExtension(name) !== null;
    },
    init: function() {
      getExtension("EXT_color_buffer_float");
      getExtension("WEBGL_clip_cull_distance");
      getExtension("OES_texture_float_linear");
      getExtension("EXT_color_buffer_half_float");
      getExtension("WEBGL_multisampled_render_to_texture");
      getExtension("WEBGL_render_shared_exponent");
    },
    get: function(name) {
      const extension = getExtension(name);
      if (extension === null) {
        warnOnce("THREE.WebGLRenderer: " + name + " extension not supported.");
      }
      return extension;
    }
  };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
  const geometries = {};
  const wireframeAttributes = /* @__PURE__ */ new WeakMap();
  function onGeometryDispose(event) {
    const geometry2 = event.target;
    if (geometry2.index !== null) {
      attributes.remove(geometry2.index);
    }
    for (const name in geometry2.attributes) {
      attributes.remove(geometry2.attributes[name]);
    }
    geometry2.removeEventListener("dispose", onGeometryDispose);
    delete geometries[geometry2.id];
    const attribute = wireframeAttributes.get(geometry2);
    if (attribute) {
      attributes.remove(attribute);
      wireframeAttributes.delete(geometry2);
    }
    bindingStates.releaseStatesOfGeometry(geometry2);
    if (geometry2.isInstancedBufferGeometry === true) {
      delete geometry2._maxInstanceCount;
    }
    info.memory.geometries--;
  }
  function get(object, geometry2) {
    if (geometries[geometry2.id] === true) return geometry2;
    geometry2.addEventListener("dispose", onGeometryDispose);
    geometries[geometry2.id] = true;
    info.memory.geometries++;
    return geometry2;
  }
  function update2(geometry2) {
    const geometryAttributes = geometry2.attributes;
    for (const name in geometryAttributes) {
      attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
    }
  }
  function updateWireframeAttribute(geometry2) {
    const indices = [];
    const geometryIndex = geometry2.index;
    const geometryPosition = geometry2.attributes.position;
    let version = 0;
    if (geometryIndex !== null) {
      const array = geometryIndex.array;
      version = geometryIndex.version;
      for (let i2 = 0, l = array.length; i2 < l; i2 += 3) {
        const a = array[i2 + 0];
        const b = array[i2 + 1];
        const c = array[i2 + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else if (geometryPosition !== void 0) {
      const array = geometryPosition.array;
      version = geometryPosition.version;
      for (let i2 = 0, l = array.length / 3 - 1; i2 < l; i2 += 3) {
        const a = i2 + 0;
        const b = i2 + 1;
        const c = i2 + 2;
        indices.push(a, b, b, c, c, a);
      }
    } else {
      return;
    }
    const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute.version = version;
    const previousAttribute = wireframeAttributes.get(geometry2);
    if (previousAttribute) attributes.remove(previousAttribute);
    wireframeAttributes.set(geometry2, attribute);
  }
  function getWireframeAttribute(geometry2) {
    const currentAttribute = wireframeAttributes.get(geometry2);
    if (currentAttribute) {
      const geometryIndex = geometry2.index;
      if (geometryIndex !== null) {
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry2);
        }
      }
    } else {
      updateWireframeAttribute(geometry2);
    }
    return wireframeAttributes.get(geometry2);
  }
  return {
    get,
    update: update2,
    getWireframeAttribute
  };
}
function WebGLIndexedBufferRenderer(gl, extensions, info) {
  let mode;
  function setMode(value) {
    mode = value;
  }
  let type, bytesPerElement;
  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }
  function render(start, count) {
    gl.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    gl.drawElementsInstanced(mode, count, type, start * bytesPerElement, primcount);
    info.update(count, mode, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawElementsWEBGL(mode, counts, 0, type, starts, 0, drawCount);
    let elementCount = 0;
    for (let i2 = 0; i2 < drawCount; i2++) {
      elementCount += counts[i2];
    }
    info.update(elementCount, mode, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < starts.length; i2++) {
        renderInstances(starts[i2] / bytesPerElement, counts[i2], primcount[i2]);
      }
    } else {
      extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, type, starts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2] * primcount[i2];
      }
      info.update(elementCount, mode, 1);
    }
  }
  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLInfo(gl) {
  const memory = {
    geometries: 0,
    textures: 0
  };
  const render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function update2(count, mode, instanceCount) {
    render.calls++;
    switch (mode) {
      case gl.TRIANGLES:
        render.triangles += instanceCount * (count / 3);
        break;
      case gl.LINES:
        render.lines += instanceCount * (count / 2);
        break;
      case gl.LINE_STRIP:
        render.lines += instanceCount * (count - 1);
        break;
      case gl.LINE_LOOP:
        render.lines += instanceCount * count;
        break;
      case gl.POINTS:
        render.points += instanceCount * count;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
        break;
    }
  }
  function reset() {
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }
  return {
    memory,
    render,
    programs: null,
    autoReset: true,
    reset,
    update: update2
  };
}
function WebGLMorphtargets(gl, capabilities, textures) {
  const morphTextures = /* @__PURE__ */ new WeakMap();
  const morph = new Vector4();
  function update2(object, geometry2, program) {
    const objectInfluences = object.morphTargetInfluences;
    const morphAttribute = geometry2.morphAttributes.position || geometry2.morphAttributes.normal || geometry2.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let entry = morphTextures.get(geometry2);
    if (entry === void 0 || entry.count !== morphTargetsCount) {
      let disposeTexture = function() {
        texture.dispose();
        morphTextures.delete(geometry2);
        geometry2.removeEventListener("dispose", disposeTexture);
      };
      if (entry !== void 0) entry.texture.dispose();
      const hasMorphPosition = geometry2.morphAttributes.position !== void 0;
      const hasMorphNormals = geometry2.morphAttributes.normal !== void 0;
      const hasMorphColors = geometry2.morphAttributes.color !== void 0;
      const morphTargets = geometry2.morphAttributes.position || [];
      const morphNormals = geometry2.morphAttributes.normal || [];
      const morphColors = geometry2.morphAttributes.color || [];
      let vertexDataCount = 0;
      if (hasMorphPosition === true) vertexDataCount = 1;
      if (hasMorphNormals === true) vertexDataCount = 2;
      if (hasMorphColors === true) vertexDataCount = 3;
      let width = geometry2.attributes.position.count * vertexDataCount;
      let height = 1;
      if (width > capabilities.maxTextureSize) {
        height = Math.ceil(width / capabilities.maxTextureSize);
        width = capabilities.maxTextureSize;
      }
      const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
      const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
      texture.type = FloatType;
      texture.needsUpdate = true;
      const vertexDataStride = vertexDataCount * 4;
      for (let i2 = 0; i2 < morphTargetsCount; i2++) {
        const morphTarget = morphTargets[i2];
        const morphNormal = morphNormals[i2];
        const morphColor = morphColors[i2];
        const offset = width * height * 4 * i2;
        for (let j = 0; j < morphTarget.count; j++) {
          const stride = j * vertexDataStride;
          if (hasMorphPosition === true) {
            morph.fromBufferAttribute(morphTarget, j);
            buffer[offset + stride + 0] = morph.x;
            buffer[offset + stride + 1] = morph.y;
            buffer[offset + stride + 2] = morph.z;
            buffer[offset + stride + 3] = 0;
          }
          if (hasMorphNormals === true) {
            morph.fromBufferAttribute(morphNormal, j);
            buffer[offset + stride + 4] = morph.x;
            buffer[offset + stride + 5] = morph.y;
            buffer[offset + stride + 6] = morph.z;
            buffer[offset + stride + 7] = 0;
          }
          if (hasMorphColors === true) {
            morph.fromBufferAttribute(morphColor, j);
            buffer[offset + stride + 8] = morph.x;
            buffer[offset + stride + 9] = morph.y;
            buffer[offset + stride + 10] = morph.z;
            buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
          }
        }
      }
      entry = {
        count: morphTargetsCount,
        texture,
        size: new Vector2(width, height)
      };
      morphTextures.set(geometry2, entry);
      geometry2.addEventListener("dispose", disposeTexture);
    }
    if (object.isInstancedMesh === true && object.morphTexture !== null) {
      program.getUniforms().setValue(gl, "morphTexture", object.morphTexture, textures);
    } else {
      let morphInfluencesSum = 0;
      for (let i2 = 0; i2 < objectInfluences.length; i2++) {
        morphInfluencesSum += objectInfluences[i2];
      }
      const morphBaseInfluence = geometry2.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
      program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
    }
    program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
    program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
  }
  return {
    update: update2
  };
}
function WebGLObjects(gl, geometries, attributes, info) {
  let updateMap = /* @__PURE__ */ new WeakMap();
  function update2(object) {
    const frame = info.render.frame;
    const geometry2 = object.geometry;
    const buffergeometry = geometries.get(object, geometry2);
    if (updateMap.get(buffergeometry) !== frame) {
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }
    if (object.isInstancedMesh) {
      if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
        object.addEventListener("dispose", onInstancedMeshDispose);
      }
      if (updateMap.get(object) !== frame) {
        attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
        if (object.instanceColor !== null) {
          attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
        }
        updateMap.set(object, frame);
      }
    }
    if (object.isSkinnedMesh) {
      const skeleton = object.skeleton;
      if (updateMap.get(skeleton) !== frame) {
        skeleton.update();
        updateMap.set(skeleton, frame);
      }
    }
    return buffergeometry;
  }
  function dispose() {
    updateMap = /* @__PURE__ */ new WeakMap();
  }
  function onInstancedMeshDispose(event) {
    const instancedMesh = event.target;
    instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
    attributes.remove(instancedMesh.instanceMatrix);
    if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
  }
  return {
    update: update2,
    dispose
  };
}
const emptyTexture = /* @__PURE__ */ new Texture();
const emptyShadowTexture = /* @__PURE__ */ new DepthTexture(1, 1);
const emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
const empty3dTexture = /* @__PURE__ */ new Data3DTexture();
const emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
const arrayCacheF32 = [];
const arrayCacheI32 = [];
const mat4array = new Float32Array(16);
const mat3array = new Float32Array(9);
const mat2array = new Float32Array(4);
function flatten(array, nBlocks, blockSize) {
  const firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0) return array;
  const n = nBlocks * blockSize;
  let r = arrayCacheF32[n];
  if (r === void 0) {
    r = new Float32Array(n);
    arrayCacheF32[n] = r;
  }
  if (nBlocks !== 0) {
    firstElem.toArray(r, 0);
    for (let i2 = 1, offset = 0; i2 !== nBlocks; ++i2) {
      offset += blockSize;
      array[i2].toArray(r, offset);
    }
  }
  return r;
}
function arraysEqual(a, b) {
  if (a.length !== b.length) return false;
  for (let i2 = 0, l = a.length; i2 < l; i2++) {
    if (a[i2] !== b[i2]) return false;
  }
  return true;
}
function copyArray(a, b) {
  for (let i2 = 0, l = b.length; i2 < l; i2++) {
    a[i2] = b[i2];
  }
}
function allocTexUnits(textures, n) {
  let r = arrayCacheI32[n];
  if (r === void 0) {
    r = new Int32Array(n);
    arrayCacheI32[n] = r;
  }
  for (let i2 = 0; i2 !== n; ++i2) {
    r[i2] = textures.allocateTextureUnit();
  }
  return r;
}
function setValueV1f(gl, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1f(this.addr, v);
  cache[0] = v;
}
function setValueV2f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2f(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform2fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3f(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else if (v.r !== void 0) {
    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
      gl.uniform3f(this.addr, v.r, v.g, v.b);
      cache[0] = v.r;
      cache[1] = v.g;
      cache[2] = v.b;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform3fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform4fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueM2(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix2fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}
function setValueM3(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix3fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}
function setValueM4(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix4fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
}
function setValueV1i(gl, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1i(this.addr, v);
  cache[0] = v;
}
function setValueV2i(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2i(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform2iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3i(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3i(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform3iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4i(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform4iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV1ui(gl, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1ui(this.addr, v);
  cache[0] = v;
}
function setValueV2ui(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2ui(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform2uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3ui(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3ui(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform3uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4ui(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform4uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueT1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  let emptyTexture2D;
  if (this.type === gl.SAMPLER_2D_SHADOW) {
    emptyShadowTexture.compareFunction = LessEqualCompare;
    emptyTexture2D = emptyShadowTexture;
  } else {
    emptyTexture2D = emptyTexture;
  }
  textures.setTexture2D(v || emptyTexture2D, unit);
}
function setValueT3D1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture3D(v || empty3dTexture, unit);
}
function setValueT6(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTextureCube(v || emptyCubeTexture, unit);
}
function setValueT2DArray1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture2DArray(v || emptyArrayTexture, unit);
}
function getSingularSetter(type) {
  switch (type) {
    case 5126:
      return setValueV1f;
    // FLOAT
    case 35664:
      return setValueV2f;
    // _VEC2
    case 35665:
      return setValueV3f;
    // _VEC3
    case 35666:
      return setValueV4f;
    // _VEC4
    case 35674:
      return setValueM2;
    // _MAT2
    case 35675:
      return setValueM3;
    // _MAT3
    case 35676:
      return setValueM4;
    // _MAT4
    case 5124:
    case 35670:
      return setValueV1i;
    // INT, BOOL
    case 35667:
    case 35671:
      return setValueV2i;
    // _VEC2
    case 35668:
    case 35672:
      return setValueV3i;
    // _VEC3
    case 35669:
    case 35673:
      return setValueV4i;
    // _VEC4
    case 5125:
      return setValueV1ui;
    // UINT
    case 36294:
      return setValueV2ui;
    // _VEC2
    case 36295:
      return setValueV3ui;
    // _VEC3
    case 36296:
      return setValueV4ui;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return setValueT1;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return setValueT3D1;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return setValueT6;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return setValueT2DArray1;
  }
}
function setValueV1fArray(gl, v) {
  gl.uniform1fv(this.addr, v);
}
function setValueV2fArray(gl, v) {
  const data = flatten(v, this.size, 2);
  gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v) {
  const data = flatten(v, this.size, 3);
  gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v) {
  const data = flatten(v, this.size, 4);
  gl.uniform4fv(this.addr, data);
}
function setValueM2Array(gl, v) {
  const data = flatten(v, this.size, 4);
  gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v) {
  const data = flatten(v, this.size, 9);
  gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v) {
  const data = flatten(v, this.size, 16);
  gl.uniformMatrix4fv(this.addr, false, data);
}
function setValueV1iArray(gl, v) {
  gl.uniform1iv(this.addr, v);
}
function setValueV2iArray(gl, v) {
  gl.uniform2iv(this.addr, v);
}
function setValueV3iArray(gl, v) {
  gl.uniform3iv(this.addr, v);
}
function setValueV4iArray(gl, v) {
  gl.uniform4iv(this.addr, v);
}
function setValueV1uiArray(gl, v) {
  gl.uniform1uiv(this.addr, v);
}
function setValueV2uiArray(gl, v) {
  gl.uniform2uiv(this.addr, v);
}
function setValueV3uiArray(gl, v) {
  gl.uniform3uiv(this.addr, v);
}
function setValueV4uiArray(gl, v) {
  gl.uniform4uiv(this.addr, v);
}
function setValueT1Array(gl, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i2 = 0; i2 !== n; ++i2) {
    textures.setTexture2D(v[i2] || emptyTexture, units[i2]);
  }
}
function setValueT3DArray(gl, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i2 = 0; i2 !== n; ++i2) {
    textures.setTexture3D(v[i2] || empty3dTexture, units[i2]);
  }
}
function setValueT6Array(gl, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i2 = 0; i2 !== n; ++i2) {
    textures.setTextureCube(v[i2] || emptyCubeTexture, units[i2]);
  }
}
function setValueT2DArrayArray(gl, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i2 = 0; i2 !== n; ++i2) {
    textures.setTexture2DArray(v[i2] || emptyArrayTexture, units[i2]);
  }
}
function getPureArraySetter(type) {
  switch (type) {
    case 5126:
      return setValueV1fArray;
    // FLOAT
    case 35664:
      return setValueV2fArray;
    // _VEC2
    case 35665:
      return setValueV3fArray;
    // _VEC3
    case 35666:
      return setValueV4fArray;
    // _VEC4
    case 35674:
      return setValueM2Array;
    // _MAT2
    case 35675:
      return setValueM3Array;
    // _MAT3
    case 35676:
      return setValueM4Array;
    // _MAT4
    case 5124:
    case 35670:
      return setValueV1iArray;
    // INT, BOOL
    case 35667:
    case 35671:
      return setValueV2iArray;
    // _VEC2
    case 35668:
    case 35672:
      return setValueV3iArray;
    // _VEC3
    case 35669:
    case 35673:
      return setValueV4iArray;
    // _VEC4
    case 5125:
      return setValueV1uiArray;
    // UINT
    case 36294:
      return setValueV2uiArray;
    // _VEC2
    case 36295:
      return setValueV3uiArray;
    // _VEC3
    case 36296:
      return setValueV4uiArray;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return setValueT1Array;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return setValueT3DArray;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return setValueT6Array;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return setValueT2DArrayArray;
  }
}
class SingleUniform {
  constructor(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.setValue = getSingularSetter(activeInfo.type);
  }
}
class PureArrayUniform {
  constructor(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
}
class StructuredUniform {
  constructor(id) {
    this.id = id;
    this.seq = [];
    this.map = {};
  }
  setValue(gl, value, textures) {
    const seq = this.seq;
    for (let i2 = 0, n = seq.length; i2 !== n; ++i2) {
      const u = seq[i2];
      u.setValue(gl, value[u.id], textures);
    }
  }
}
const RePathPart = /(\w+)(\])?(\[|\.)?/g;
function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
  const path = activeInfo.name, pathLength = path.length;
  RePathPart.lastIndex = 0;
  while (true) {
    const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
    let id = match[1];
    const idIsIndex = match[2] === "]", subscript = match[3];
    if (idIsIndex) id = id | 0;
    if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
      addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
      break;
    } else {
      const map = container.map;
      let next = map[id];
      if (next === void 0) {
        next = new StructuredUniform(id);
        addUniform(container, next);
      }
      container = next;
    }
  }
}
class WebGLUniforms {
  constructor(gl, program) {
    this.seq = [];
    this.map = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
    for (let i2 = 0; i2 < n; ++i2) {
      const info = gl.getActiveUniform(program, i2), addr = gl.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  setValue(gl, name, value, textures) {
    const u = this.map[name];
    if (u !== void 0) u.setValue(gl, value, textures);
  }
  setOptional(gl, object, name) {
    const v = object[name];
    if (v !== void 0) this.setValue(gl, name, v);
  }
  static upload(gl, seq, values, textures) {
    for (let i2 = 0, n = seq.length; i2 !== n; ++i2) {
      const u = seq[i2], v = values[u.id];
      if (v.needsUpdate !== false) {
        u.setValue(gl, v.value, textures);
      }
    }
  }
  static seqWithValue(seq, values) {
    const r = [];
    for (let i2 = 0, n = seq.length; i2 !== n; ++i2) {
      const u = seq[i2];
      if (u.id in values) r.push(u);
    }
    return r;
  }
}
function WebGLShader(gl, type, string) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);
  return shader;
}
const COMPLETION_STATUS_KHR = 37297;
let programIdCount = 0;
function handleSource(string, errorLine) {
  const lines = string.split("\n");
  const lines2 = [];
  const from = Math.max(errorLine - 6, 0);
  const to = Math.min(errorLine + 6, lines.length);
  for (let i2 = from; i2 < to; i2++) {
    const line = i2 + 1;
    lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i2]}`);
  }
  return lines2.join("\n");
}
const _m0 = /* @__PURE__ */ new Matrix3();
function getEncodingComponents(colorSpace) {
  ColorManagement._getMatrix(_m0, ColorManagement.workingColorSpace, colorSpace);
  const encodingMatrix = `mat3( ${_m0.elements.map((v) => v.toFixed(4))} )`;
  switch (ColorManagement.getTransfer(colorSpace)) {
    case LinearTransfer:
      return [encodingMatrix, "LinearTransferOETF"];
    case SRGBTransfer:
      return [encodingMatrix, "sRGBTransferOETF"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported color space: ", colorSpace);
      return [encodingMatrix, "LinearTransferOETF"];
  }
}
function getShaderErrors(gl, shader, type) {
  const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  const errors = gl.getShaderInfoLog(shader).trim();
  if (status && errors === "") return "";
  const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
  if (errorMatches) {
    const errorLine = parseInt(errorMatches[1]);
    return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
  } else {
    return errors;
  }
}
function getTexelEncodingFunction(functionName, colorSpace) {
  const components = getEncodingComponents(colorSpace);
  return [
    `vec4 ${functionName}( vec4 value ) {`,
    `	return ${components[1]}( vec4( value.rgb * ${components[0]}, value.a ) );`,
    "}"
  ].join("\n");
}
function getToneMappingFunction(functionName, toneMapping) {
  let toneMappingName;
  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = "Linear";
      break;
    case ReinhardToneMapping:
      toneMappingName = "Reinhard";
      break;
    case CineonToneMapping:
      toneMappingName = "Cineon";
      break;
    case ACESFilmicToneMapping:
      toneMappingName = "ACESFilmic";
      break;
    case AgXToneMapping:
      toneMappingName = "AgX";
      break;
    case NeutralToneMapping:
      toneMappingName = "Neutral";
      break;
    case CustomToneMapping:
      toneMappingName = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
      toneMappingName = "Linear";
  }
  return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
const _v0 = /* @__PURE__ */ new Vector3();
function getLuminanceFunction() {
  ColorManagement.getLuminanceCoefficients(_v0);
  const r = _v0.x.toFixed(4);
  const g = _v0.y.toFixed(4);
  const b = _v0.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r}, ${g}, ${b} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join("\n");
}
function generateVertexExtensions(parameters) {
  const chunks = [
    parameters.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    parameters.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ];
  return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
  const chunks = [];
  for (const name in defines) {
    const value = defines[name];
    if (value === false) continue;
    chunks.push("#define " + name + " " + value);
  }
  return chunks.join("\n");
}
function fetchAttributeLocations(gl, program) {
  const attributes = {};
  const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
  for (let i2 = 0; i2 < n; i2++) {
    const info = gl.getActiveAttrib(program, i2);
    const name = info.name;
    let locationSize = 1;
    if (info.type === gl.FLOAT_MAT2) locationSize = 2;
    if (info.type === gl.FLOAT_MAT3) locationSize = 3;
    if (info.type === gl.FLOAT_MAT4) locationSize = 4;
    attributes[name] = {
      type: info.type,
      location: gl.getAttribLocation(program, name),
      locationSize
    };
  }
  return attributes;
}
function filterEmptyLine(string) {
  return string !== "";
}
function replaceLightNums(string, parameters) {
  const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}
const shaderChunkMap = /* @__PURE__ */ new Map();
function includeReplacer(match, include) {
  let string = ShaderChunk[include];
  if (string === void 0) {
    const newInclude = shaderChunkMap.get(include);
    if (newInclude !== void 0) {
      string = ShaderChunk[newInclude];
      console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
    } else {
      throw new Error("Can not resolve #include <" + include + ">");
    }
  }
  return resolveIncludes(string);
}
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer);
}
function loopReplacer(match, start, end, snippet) {
  let string = "";
  for (let i2 = parseInt(start); i2 < parseInt(end); i2++) {
    string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, i2);
  }
  return string;
}
function generatePrecision(parameters) {
  let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;
  if (parameters.precision === "highp") {
    precisionstring += "\n#define HIGH_PRECISION";
  } else if (parameters.precision === "mediump") {
    precisionstring += "\n#define MEDIUM_PRECISION";
  } else if (parameters.precision === "lowp") {
    precisionstring += "\n#define LOW_PRECISION";
  }
  return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
  let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
  }
  return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
  let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE";
        break;
      case CubeUVReflectionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
  let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
        envMapModeDefine = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
  let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case MixOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
        break;
      case AddOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return envMapBlendingDefine;
}
function generateCubeUVSize(parameters) {
  const imageHeight = parameters.envMapCubeUVHeight;
  if (imageHeight === null) return null;
  const maxMip = Math.log2(imageHeight) - 2;
  const texelHeight = 1 / imageHeight;
  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return { texelWidth, texelHeight, maxMip };
}
function WebGLProgram(renderer2, cacheKey, parameters, bindingStates) {
  const gl = renderer2.getContext();
  const defines = parameters.defines;
  let vertexShader = parameters.vertexShader;
  let fragmentShader = parameters.fragmentShader;
  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  const envMapModeDefine = generateEnvMapModeDefine(parameters);
  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  const envMapCubeUVSize = generateCubeUVSize(parameters);
  const customVertexExtensions = generateVertexExtensions(parameters);
  const customDefines = generateDefines(defines);
  const program = gl.createProgram();
  let prefixVertex, prefixFragment;
  let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
  if (parameters.isRawShaderMaterial) {
    prefixVertex = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixVertex.length > 0) {
      prefixVertex += "\n";
    }
    prefixFragment = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixFragment.length > 0) {
      prefixFragment += "\n";
    }
  } else {
    prefixVertex = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
      parameters.batching ? "#define USE_BATCHING" : "",
      parameters.batchingColor ? "#define USE_BATCHING_COLOR" : "",
      parameters.instancing ? "#define USE_INSTANCING" : "",
      parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      parameters.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      //
      parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
      parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
      parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
      parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
      parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
      parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
      parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
      parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
      parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
      parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
      parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
      parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
      parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
      parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
      parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
      parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
      parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
      parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
      parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
      parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
      parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
      parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
      parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
      //
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.skinning ? "#define USE_SKINNING" : "",
      parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
      parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      parameters.morphColors ? "#define USE_MORPHCOLORS" : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "#ifdef USE_INSTANCING_MORPH",
      "	uniform sampler2D morphTexture;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_UV1",
      "	attribute vec2 uv1;",
      "#endif",
      "#ifdef USE_UV2",
      "	attribute vec2 uv2;",
      "#endif",
      "#ifdef USE_UV3",
      "	attribute vec2 uv3;",
      "#endif",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#if defined( USE_COLOR_ALPHA )",
      "	attribute vec4 color;",
      "#elif defined( USE_COLOR )",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(filterEmptyLine).join("\n");
    prefixFragment = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.matcap ? "#define USE_MATCAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapTypeDefine : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.envMap ? "#define " + envMapBlendingDefine : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
      envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.dispersion ? "#define USE_DISPERSION" : "",
      parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaTest ? "#define USE_ALPHATEST" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.sheen ? "#define USE_SHEEN" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
      parameters.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
      parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
      // this code is required here because it is used by the toneMapping() function defined below
      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
      parameters.dithering ? "#define DITHERING" : "",
      parameters.opaque ? "#define OPAQUE" : "",
      ShaderChunk["colorspace_pars_fragment"],
      // this code is required here because it is used by the various encoding/decoding function defined below
      getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
      getLuminanceFunction(),
      parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
      "\n"
    ].filter(filterEmptyLine).join("\n");
  }
  vertexShader = resolveIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = resolveIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);
  if (parameters.isRawShaderMaterial !== true) {
    versionString = "#version 300 es\n";
    prefixVertex = [
      customVertexExtensions,
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + prefixVertex;
    prefixFragment = [
      "#define varying in",
      parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
      parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + prefixFragment;
  }
  const vertexGlsl = versionString + prefixVertex + vertexShader;
  const fragmentGlsl = versionString + prefixFragment + fragmentShader;
  const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
  const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader);
  if (parameters.index0AttributeName !== void 0) {
    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    gl.bindAttribLocation(program, 0, "position");
  }
  gl.linkProgram(program);
  function onFirstUse(self2) {
    if (renderer2.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        runnable = false;
        if (typeof renderer2.debug.onShaderError === "function") {
          renderer2.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nMaterial Name: " + self2.name + "\nMaterial Type: " + self2.type + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        self2.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    cachedUniforms = new WebGLUniforms(gl, program);
    cachedAttributes = fetchAttributeLocations(gl, program);
  }
  let cachedUniforms;
  this.getUniforms = function() {
    if (cachedUniforms === void 0) {
      onFirstUse(this);
    }
    return cachedUniforms;
  };
  let cachedAttributes;
  this.getAttributes = function() {
    if (cachedAttributes === void 0) {
      onFirstUse(this);
    }
    return cachedAttributes;
  };
  let programReady = parameters.rendererExtensionParallelShaderCompile === false;
  this.isReady = function() {
    if (programReady === false) {
      programReady = gl.getProgramParameter(program, COMPLETION_STATUS_KHR);
    }
    return programReady;
  };
  this.destroy = function() {
    bindingStates.releaseStatesOfProgram(this);
    gl.deleteProgram(program);
    this.program = void 0;
  };
  this.type = parameters.shaderType;
  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
let _id = 0;
class WebGLShaderCache {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map();
    this.materialCache = /* @__PURE__ */ new Map();
  }
  update(material2) {
    const vertexShader = material2.vertexShader;
    const fragmentShader = material2.fragmentShader;
    const vertexShaderStage = this._getShaderStage(vertexShader);
    const fragmentShaderStage = this._getShaderStage(fragmentShader);
    const materialShaders = this._getShaderCacheForMaterial(material2);
    if (materialShaders.has(vertexShaderStage) === false) {
      materialShaders.add(vertexShaderStage);
      vertexShaderStage.usedTimes++;
    }
    if (materialShaders.has(fragmentShaderStage) === false) {
      materialShaders.add(fragmentShaderStage);
      fragmentShaderStage.usedTimes++;
    }
    return this;
  }
  remove(material2) {
    const materialShaders = this.materialCache.get(material2);
    for (const shaderStage of materialShaders) {
      shaderStage.usedTimes--;
      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
    }
    this.materialCache.delete(material2);
    return this;
  }
  getVertexShaderID(material2) {
    return this._getShaderStage(material2.vertexShader).id;
  }
  getFragmentShaderID(material2) {
    return this._getShaderStage(material2.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear();
    this.materialCache.clear();
  }
  _getShaderCacheForMaterial(material2) {
    const cache = this.materialCache;
    let set = cache.get(material2);
    if (set === void 0) {
      set = /* @__PURE__ */ new Set();
      cache.set(material2, set);
    }
    return set;
  }
  _getShaderStage(code) {
    const cache = this.shaderCache;
    let stage = cache.get(code);
    if (stage === void 0) {
      stage = new WebGLShaderStage(code);
      cache.set(code, stage);
    }
    return stage;
  }
}
class WebGLShaderStage {
  constructor(code) {
    this.id = _id++;
    this.code = code;
    this.usedTimes = 0;
  }
}
function WebGLPrograms(renderer2, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
  const _programLayers = new Layers();
  const _customShaders = new WebGLShaderCache();
  const _activeChannels = /* @__PURE__ */ new Set();
  const programs = [];
  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
  let precision = capabilities.precision;
  const shaderIDs = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function getChannel(value) {
    _activeChannels.add(value);
    if (value === 0) return "uv";
    return `uv${value}`;
  }
  function getParameters(material2, lights, shadows, scene2, object) {
    const fog = scene2.fog;
    const geometry2 = object.geometry;
    const environment = material2.isMeshStandardMaterial ? scene2.environment : null;
    const envMap = (material2.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material2.envMap || environment);
    const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
    const shaderID = shaderIDs[material2.type];
    if (material2.precision !== null) {
      precision = capabilities.getMaxPrecision(material2.precision);
      if (precision !== material2.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", material2.precision, "not supported, using", precision, "instead.");
      }
    }
    const morphAttribute = geometry2.morphAttributes.position || geometry2.morphAttributes.normal || geometry2.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let morphTextureStride = 0;
    if (geometry2.morphAttributes.position !== void 0) morphTextureStride = 1;
    if (geometry2.morphAttributes.normal !== void 0) morphTextureStride = 2;
    if (geometry2.morphAttributes.color !== void 0) morphTextureStride = 3;
    let vertexShader, fragmentShader;
    let customVertexShaderID, customFragmentShaderID;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      vertexShader = shader.vertexShader;
      fragmentShader = shader.fragmentShader;
    } else {
      vertexShader = material2.vertexShader;
      fragmentShader = material2.fragmentShader;
      _customShaders.update(material2);
      customVertexShaderID = _customShaders.getVertexShaderID(material2);
      customFragmentShaderID = _customShaders.getFragmentShaderID(material2);
    }
    const currentRenderTarget = renderer2.getRenderTarget();
    const reverseDepthBuffer = renderer2.state.buffers.depth.getReversed();
    const IS_INSTANCEDMESH = object.isInstancedMesh === true;
    const IS_BATCHEDMESH = object.isBatchedMesh === true;
    const HAS_MAP = !!material2.map;
    const HAS_MATCAP = !!material2.matcap;
    const HAS_ENVMAP = !!envMap;
    const HAS_AOMAP = !!material2.aoMap;
    const HAS_LIGHTMAP = !!material2.lightMap;
    const HAS_BUMPMAP = !!material2.bumpMap;
    const HAS_NORMALMAP = !!material2.normalMap;
    const HAS_DISPLACEMENTMAP = !!material2.displacementMap;
    const HAS_EMISSIVEMAP = !!material2.emissiveMap;
    const HAS_METALNESSMAP = !!material2.metalnessMap;
    const HAS_ROUGHNESSMAP = !!material2.roughnessMap;
    const HAS_ANISOTROPY = material2.anisotropy > 0;
    const HAS_CLEARCOAT = material2.clearcoat > 0;
    const HAS_DISPERSION = material2.dispersion > 0;
    const HAS_IRIDESCENCE = material2.iridescence > 0;
    const HAS_SHEEN = material2.sheen > 0;
    const HAS_TRANSMISSION = material2.transmission > 0;
    const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material2.anisotropyMap;
    const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material2.clearcoatMap;
    const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material2.clearcoatNormalMap;
    const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material2.clearcoatRoughnessMap;
    const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material2.iridescenceMap;
    const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material2.iridescenceThicknessMap;
    const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material2.sheenColorMap;
    const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material2.sheenRoughnessMap;
    const HAS_SPECULARMAP = !!material2.specularMap;
    const HAS_SPECULAR_COLORMAP = !!material2.specularColorMap;
    const HAS_SPECULAR_INTENSITYMAP = !!material2.specularIntensityMap;
    const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material2.transmissionMap;
    const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material2.thicknessMap;
    const HAS_GRADIENTMAP = !!material2.gradientMap;
    const HAS_ALPHAMAP = !!material2.alphaMap;
    const HAS_ALPHATEST = material2.alphaTest > 0;
    const HAS_ALPHAHASH = !!material2.alphaHash;
    const HAS_EXTENSIONS = !!material2.extensions;
    let toneMapping = NoToneMapping;
    if (material2.toneMapped) {
      if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
        toneMapping = renderer2.toneMapping;
      }
    }
    const parameters = {
      shaderID,
      shaderType: material2.type,
      shaderName: material2.name,
      vertexShader,
      fragmentShader,
      defines: material2.defines,
      customVertexShaderID,
      customFragmentShaderID,
      isRawShaderMaterial: material2.isRawShaderMaterial === true,
      glslVersion: material2.glslVersion,
      precision,
      batching: IS_BATCHEDMESH,
      batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
      instancing: IS_INSTANCEDMESH,
      instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
      instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,
      supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
      outputColorSpace: currentRenderTarget === null ? renderer2.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
      alphaToCoverage: !!material2.alphaToCoverage,
      map: HAS_MAP,
      matcap: HAS_MATCAP,
      envMap: HAS_ENVMAP,
      envMapMode: HAS_ENVMAP && envMap.mapping,
      envMapCubeUVHeight,
      aoMap: HAS_AOMAP,
      lightMap: HAS_LIGHTMAP,
      bumpMap: HAS_BUMPMAP,
      normalMap: HAS_NORMALMAP,
      displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
      emissiveMap: HAS_EMISSIVEMAP,
      normalMapObjectSpace: HAS_NORMALMAP && material2.normalMapType === ObjectSpaceNormalMap,
      normalMapTangentSpace: HAS_NORMALMAP && material2.normalMapType === TangentSpaceNormalMap,
      metalnessMap: HAS_METALNESSMAP,
      roughnessMap: HAS_ROUGHNESSMAP,
      anisotropy: HAS_ANISOTROPY,
      anisotropyMap: HAS_ANISOTROPYMAP,
      clearcoat: HAS_CLEARCOAT,
      clearcoatMap: HAS_CLEARCOATMAP,
      clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
      clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
      dispersion: HAS_DISPERSION,
      iridescence: HAS_IRIDESCENCE,
      iridescenceMap: HAS_IRIDESCENCEMAP,
      iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
      sheen: HAS_SHEEN,
      sheenColorMap: HAS_SHEEN_COLORMAP,
      sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
      specularMap: HAS_SPECULARMAP,
      specularColorMap: HAS_SPECULAR_COLORMAP,
      specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
      transmission: HAS_TRANSMISSION,
      transmissionMap: HAS_TRANSMISSIONMAP,
      thicknessMap: HAS_THICKNESSMAP,
      gradientMap: HAS_GRADIENTMAP,
      opaque: material2.transparent === false && material2.blending === NormalBlending && material2.alphaToCoverage === false,
      alphaMap: HAS_ALPHAMAP,
      alphaTest: HAS_ALPHATEST,
      alphaHash: HAS_ALPHAHASH,
      combine: material2.combine,
      //
      mapUv: HAS_MAP && getChannel(material2.map.channel),
      aoMapUv: HAS_AOMAP && getChannel(material2.aoMap.channel),
      lightMapUv: HAS_LIGHTMAP && getChannel(material2.lightMap.channel),
      bumpMapUv: HAS_BUMPMAP && getChannel(material2.bumpMap.channel),
      normalMapUv: HAS_NORMALMAP && getChannel(material2.normalMap.channel),
      displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material2.displacementMap.channel),
      emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material2.emissiveMap.channel),
      metalnessMapUv: HAS_METALNESSMAP && getChannel(material2.metalnessMap.channel),
      roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material2.roughnessMap.channel),
      anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material2.anisotropyMap.channel),
      clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material2.clearcoatMap.channel),
      clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material2.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material2.clearcoatRoughnessMap.channel),
      iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material2.iridescenceMap.channel),
      iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material2.iridescenceThicknessMap.channel),
      sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material2.sheenColorMap.channel),
      sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material2.sheenRoughnessMap.channel),
      specularMapUv: HAS_SPECULARMAP && getChannel(material2.specularMap.channel),
      specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material2.specularColorMap.channel),
      specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material2.specularIntensityMap.channel),
      transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material2.transmissionMap.channel),
      thicknessMapUv: HAS_THICKNESSMAP && getChannel(material2.thicknessMap.channel),
      alphaMapUv: HAS_ALPHAMAP && getChannel(material2.alphaMap.channel),
      //
      vertexTangents: !!geometry2.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
      vertexColors: material2.vertexColors,
      vertexAlphas: material2.vertexColors === true && !!geometry2.attributes.color && geometry2.attributes.color.itemSize === 4,
      pointsUvs: object.isPoints === true && !!geometry2.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
      fog: !!fog,
      useFog: material2.fog === true,
      fogExp2: !!fog && fog.isFogExp2,
      flatShading: material2.flatShading === true,
      sizeAttenuation: material2.sizeAttenuation === true,
      logarithmicDepthBuffer,
      reverseDepthBuffer,
      skinning: object.isSkinnedMesh === true,
      morphTargets: geometry2.morphAttributes.position !== void 0,
      morphNormals: geometry2.morphAttributes.normal !== void 0,
      morphColors: geometry2.morphAttributes.color !== void 0,
      morphTargetsCount,
      morphTextureStride,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numSpotLightMaps: lights.spotLightMap.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numDirLightShadows: lights.directionalShadowMap.length,
      numPointLightShadows: lights.pointShadowMap.length,
      numSpotLightShadows: lights.spotShadowMap.length,
      numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
      numLightProbes: lights.numLightProbes,
      numClippingPlanes: clipping.numPlanes,
      numClipIntersection: clipping.numIntersection,
      dithering: material2.dithering,
      shadowMapEnabled: renderer2.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer2.shadowMap.type,
      toneMapping,
      decodeVideoTexture: HAS_MAP && material2.map.isVideoTexture === true && ColorManagement.getTransfer(material2.map.colorSpace) === SRGBTransfer,
      decodeVideoTextureEmissive: HAS_EMISSIVEMAP && material2.emissiveMap.isVideoTexture === true && ColorManagement.getTransfer(material2.emissiveMap.colorSpace) === SRGBTransfer,
      premultipliedAlpha: material2.premultipliedAlpha,
      doubleSided: material2.side === DoubleSide,
      flipSided: material2.side === BackSide,
      useDepthPacking: material2.depthPacking >= 0,
      depthPacking: material2.depthPacking || 0,
      index0AttributeName: material2.index0AttributeName,
      extensionClipCullDistance: HAS_EXTENSIONS && material2.extensions.clipCullDistance === true && extensions.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (HAS_EXTENSIONS && material2.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: extensions.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: material2.customProgramCacheKey()
    };
    parameters.vertexUv1s = _activeChannels.has(1);
    parameters.vertexUv2s = _activeChannels.has(2);
    parameters.vertexUv3s = _activeChannels.has(3);
    _activeChannels.clear();
    return parameters;
  }
  function getProgramCacheKey(parameters) {
    const array = [];
    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(parameters.customVertexShaderID);
      array.push(parameters.customFragmentShaderID);
    }
    if (parameters.defines !== void 0) {
      for (const name in parameters.defines) {
        array.push(name);
        array.push(parameters.defines[name]);
      }
    }
    if (parameters.isRawShaderMaterial === false) {
      getProgramCacheKeyParameters(array, parameters);
      getProgramCacheKeyBooleans(array, parameters);
      array.push(renderer2.outputColorSpace);
    }
    array.push(parameters.customProgramCacheKey);
    return array.join();
  }
  function getProgramCacheKeyParameters(array, parameters) {
    array.push(parameters.precision);
    array.push(parameters.outputColorSpace);
    array.push(parameters.envMapMode);
    array.push(parameters.envMapCubeUVHeight);
    array.push(parameters.mapUv);
    array.push(parameters.alphaMapUv);
    array.push(parameters.lightMapUv);
    array.push(parameters.aoMapUv);
    array.push(parameters.bumpMapUv);
    array.push(parameters.normalMapUv);
    array.push(parameters.displacementMapUv);
    array.push(parameters.emissiveMapUv);
    array.push(parameters.metalnessMapUv);
    array.push(parameters.roughnessMapUv);
    array.push(parameters.anisotropyMapUv);
    array.push(parameters.clearcoatMapUv);
    array.push(parameters.clearcoatNormalMapUv);
    array.push(parameters.clearcoatRoughnessMapUv);
    array.push(parameters.iridescenceMapUv);
    array.push(parameters.iridescenceThicknessMapUv);
    array.push(parameters.sheenColorMapUv);
    array.push(parameters.sheenRoughnessMapUv);
    array.push(parameters.specularMapUv);
    array.push(parameters.specularColorMapUv);
    array.push(parameters.specularIntensityMapUv);
    array.push(parameters.transmissionMapUv);
    array.push(parameters.thicknessMapUv);
    array.push(parameters.combine);
    array.push(parameters.fogExp2);
    array.push(parameters.sizeAttenuation);
    array.push(parameters.morphTargetsCount);
    array.push(parameters.morphAttributeCount);
    array.push(parameters.numDirLights);
    array.push(parameters.numPointLights);
    array.push(parameters.numSpotLights);
    array.push(parameters.numSpotLightMaps);
    array.push(parameters.numHemiLights);
    array.push(parameters.numRectAreaLights);
    array.push(parameters.numDirLightShadows);
    array.push(parameters.numPointLightShadows);
    array.push(parameters.numSpotLightShadows);
    array.push(parameters.numSpotLightShadowsWithMaps);
    array.push(parameters.numLightProbes);
    array.push(parameters.shadowMapType);
    array.push(parameters.toneMapping);
    array.push(parameters.numClippingPlanes);
    array.push(parameters.numClipIntersection);
    array.push(parameters.depthPacking);
  }
  function getProgramCacheKeyBooleans(array, parameters) {
    _programLayers.disableAll();
    if (parameters.supportsVertexTextures)
      _programLayers.enable(0);
    if (parameters.instancing)
      _programLayers.enable(1);
    if (parameters.instancingColor)
      _programLayers.enable(2);
    if (parameters.instancingMorph)
      _programLayers.enable(3);
    if (parameters.matcap)
      _programLayers.enable(4);
    if (parameters.envMap)
      _programLayers.enable(5);
    if (parameters.normalMapObjectSpace)
      _programLayers.enable(6);
    if (parameters.normalMapTangentSpace)
      _programLayers.enable(7);
    if (parameters.clearcoat)
      _programLayers.enable(8);
    if (parameters.iridescence)
      _programLayers.enable(9);
    if (parameters.alphaTest)
      _programLayers.enable(10);
    if (parameters.vertexColors)
      _programLayers.enable(11);
    if (parameters.vertexAlphas)
      _programLayers.enable(12);
    if (parameters.vertexUv1s)
      _programLayers.enable(13);
    if (parameters.vertexUv2s)
      _programLayers.enable(14);
    if (parameters.vertexUv3s)
      _programLayers.enable(15);
    if (parameters.vertexTangents)
      _programLayers.enable(16);
    if (parameters.anisotropy)
      _programLayers.enable(17);
    if (parameters.alphaHash)
      _programLayers.enable(18);
    if (parameters.batching)
      _programLayers.enable(19);
    if (parameters.dispersion)
      _programLayers.enable(20);
    if (parameters.batchingColor)
      _programLayers.enable(21);
    array.push(_programLayers.mask);
    _programLayers.disableAll();
    if (parameters.fog)
      _programLayers.enable(0);
    if (parameters.useFog)
      _programLayers.enable(1);
    if (parameters.flatShading)
      _programLayers.enable(2);
    if (parameters.logarithmicDepthBuffer)
      _programLayers.enable(3);
    if (parameters.reverseDepthBuffer)
      _programLayers.enable(4);
    if (parameters.skinning)
      _programLayers.enable(5);
    if (parameters.morphTargets)
      _programLayers.enable(6);
    if (parameters.morphNormals)
      _programLayers.enable(7);
    if (parameters.morphColors)
      _programLayers.enable(8);
    if (parameters.premultipliedAlpha)
      _programLayers.enable(9);
    if (parameters.shadowMapEnabled)
      _programLayers.enable(10);
    if (parameters.doubleSided)
      _programLayers.enable(11);
    if (parameters.flipSided)
      _programLayers.enable(12);
    if (parameters.useDepthPacking)
      _programLayers.enable(13);
    if (parameters.dithering)
      _programLayers.enable(14);
    if (parameters.transmission)
      _programLayers.enable(15);
    if (parameters.sheen)
      _programLayers.enable(16);
    if (parameters.opaque)
      _programLayers.enable(17);
    if (parameters.pointsUvs)
      _programLayers.enable(18);
    if (parameters.decodeVideoTexture)
      _programLayers.enable(19);
    if (parameters.decodeVideoTextureEmissive)
      _programLayers.enable(20);
    if (parameters.alphaToCoverage)
      _programLayers.enable(21);
    array.push(_programLayers.mask);
  }
  function getUniforms(material2) {
    const shaderID = shaderIDs[material2.type];
    let uniforms;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material2.uniforms;
    }
    return uniforms;
  }
  function acquireProgram(parameters, cacheKey) {
    let program;
    for (let p = 0, pl = programs.length; p < pl; p++) {
      const preexistingProgram = programs[p];
      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }
    if (program === void 0) {
      program = new WebGLProgram(renderer2, cacheKey, parameters, bindingStates);
      programs.push(program);
    }
    return program;
  }
  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      const i2 = programs.indexOf(program);
      programs[i2] = programs[programs.length - 1];
      programs.pop();
      program.destroy();
    }
  }
  function releaseShaderCache(material2) {
    _customShaders.remove(material2);
  }
  function dispose() {
    _customShaders.dispose();
  }
  return {
    getParameters,
    getProgramCacheKey,
    getUniforms,
    acquireProgram,
    releaseProgram,
    releaseShaderCache,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs,
    dispose
  };
}
function WebGLProperties() {
  let properties = /* @__PURE__ */ new WeakMap();
  function has(object) {
    return properties.has(object);
  }
  function get(object) {
    let map = properties.get(object);
    if (map === void 0) {
      map = {};
      properties.set(object, map);
    }
    return map;
  }
  function remove(object) {
    properties.delete(object);
  }
  function update2(object, key, value) {
    properties.get(object)[key] = value;
  }
  function dispose() {
    properties = /* @__PURE__ */ new WeakMap();
  }
  return {
    has,
    get,
    remove,
    update: update2,
    dispose
  };
}
function painterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.material.id !== b.material.id) {
    return a.material.id - b.material.id;
  } else if (a.z !== b.z) {
    return a.z - b.z;
  } else {
    return a.id - b.id;
  }
}
function reversePainterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.z !== b.z) {
    return b.z - a.z;
  } else {
    return a.id - b.id;
  }
}
function WebGLRenderList() {
  const renderItems = [];
  let renderItemsIndex = 0;
  const opaque = [];
  const transmissive = [];
  const transparent = [];
  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transmissive.length = 0;
    transparent.length = 0;
  }
  function getNextRenderItem(object, geometry2, material2, groupOrder, z, group) {
    let renderItem = renderItems[renderItemsIndex];
    if (renderItem === void 0) {
      renderItem = {
        id: object.id,
        object,
        geometry: geometry2,
        material: material2,
        groupOrder,
        renderOrder: object.renderOrder,
        z,
        group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry2;
      renderItem.material = material2;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z;
      renderItem.group = group;
    }
    renderItemsIndex++;
    return renderItem;
  }
  function push(object, geometry2, material2, groupOrder, z, group) {
    const renderItem = getNextRenderItem(object, geometry2, material2, groupOrder, z, group);
    if (material2.transmission > 0) {
      transmissive.push(renderItem);
    } else if (material2.transparent === true) {
      transparent.push(renderItem);
    } else {
      opaque.push(renderItem);
    }
  }
  function unshift(object, geometry2, material2, groupOrder, z, group) {
    const renderItem = getNextRenderItem(object, geometry2, material2, groupOrder, z, group);
    if (material2.transmission > 0) {
      transmissive.unshift(renderItem);
    } else if (material2.transparent === true) {
      transparent.unshift(renderItem);
    } else {
      opaque.unshift(renderItem);
    }
  }
  function sort(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
    if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
    if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  function finish() {
    for (let i2 = renderItemsIndex, il = renderItems.length; i2 < il; i2++) {
      const renderItem = renderItems[i2];
      if (renderItem.id === null) break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.group = null;
    }
  }
  return {
    opaque,
    transmissive,
    transparent,
    init,
    push,
    unshift,
    finish,
    sort
  };
}
function WebGLRenderLists() {
  let lists = /* @__PURE__ */ new WeakMap();
  function get(scene2, renderCallDepth) {
    const listArray = lists.get(scene2);
    let list;
    if (listArray === void 0) {
      list = new WebGLRenderList();
      lists.set(scene2, [list]);
    } else {
      if (renderCallDepth >= listArray.length) {
        list = new WebGLRenderList();
        listArray.push(list);
      } else {
        list = listArray[renderCallDepth];
      }
    }
    return list;
  }
  function dispose() {
    lists = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
function UniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;
        case "SpotLight":
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;
        case "RectAreaLight":
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
function ShadowUniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "SpotLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "PointLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
let nextVersion = 0;
function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
}
function WebGLLights(extensions) {
  const cache = new UniformsCache();
  const shadowCache = ShadowUniformsCache();
  const state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let i2 = 0; i2 < 9; i2++) state.probe.push(new Vector3());
  const vector3 = new Vector3();
  const matrix4 = new Matrix4();
  const matrix42 = new Matrix4();
  function setup(lights) {
    let r = 0, g = 0, b = 0;
    for (let i2 = 0; i2 < 9; i2++) state.probe[i2].set(0, 0, 0);
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    let numDirectionalShadows = 0;
    let numPointShadows = 0;
    let numSpotShadows = 0;
    let numSpotMaps = 0;
    let numSpotShadowsWithMaps = 0;
    let numLightProbes = 0;
    lights.sort(shadowCastingAndTexturingLightsFirst);
    for (let i2 = 0, l = lights.length; i2 < l; i2++) {
      const light = lights[i2];
      const color = light.color;
      const intensity = light.intensity;
      const distance = light.distance;
      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
      if (light.isAmbientLight) {
        r += color.r * intensity;
        g += color.g * intensity;
        b += color.b * intensity;
      } else if (light.isLightProbe) {
        for (let j = 0; j < 9; j++) {
          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
        }
        numLightProbes++;
      } else if (light.isDirectionalLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.distance = distance;
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        state.spot[spotLength] = uniforms;
        const shadow = light.shadow;
        if (light.map) {
          state.spotLightMap[numSpotMaps] = light.map;
          numSpotMaps++;
          shadow.updateMatrices(light);
          if (light.castShadow) numSpotShadowsWithMaps++;
        }
        state.spotLightMatrix[spotLength] = shadow.matrix;
        if (light.castShadow) {
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.spotShadow[spotLength] = shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          numSpotShadows++;
        }
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          shadowUniforms.shadowCameraNear = shadow.camera.near;
          shadowUniforms.shadowCameraFar = shadow.camera.far;
          state.pointShadow[pointLength] = shadowUniforms;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = cache.get(light);
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }
    if (rectAreaLength > 0) {
      if (extensions.has("OES_texture_float_linear") === true) {
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
        state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
      }
    }
    state.ambient[0] = r;
    state.ambient[1] = g;
    state.ambient[2] = b;
    const hash = state.hash;
    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps || hash.numLightProbes !== numLightProbes) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
      state.spotLightMap.length = numSpotMaps;
      state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
      state.numLightProbes = numLightProbes;
      hash.directionalLength = directionalLength;
      hash.pointLength = pointLength;
      hash.spotLength = spotLength;
      hash.rectAreaLength = rectAreaLength;
      hash.hemiLength = hemiLength;
      hash.numDirectionalShadows = numDirectionalShadows;
      hash.numPointShadows = numPointShadows;
      hash.numSpotShadows = numSpotShadows;
      hash.numSpotMaps = numSpotMaps;
      hash.numLightProbes = numLightProbes;
      state.version = nextVersion++;
    }
  }
  function setupView(lights, camera2) {
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    const viewMatrix = camera2.matrixWorldInverse;
    for (let i2 = 0, l = lights.length; i2 < l; i2++) {
      const light = lights[i2];
      if (light.isDirectionalLight) {
        const uniforms = state.directional[directionalLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = state.spot[spotLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = state.rectArea[rectAreaLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42);
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = state.point[pointLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = state.hemi[hemiLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        hemiLength++;
      }
    }
  }
  return {
    setup,
    setupView,
    state
  };
}
function WebGLRenderState(extensions) {
  const lights = new WebGLLights(extensions);
  const lightsArray = [];
  const shadowsArray = [];
  function init(camera2) {
    state.camera = camera2;
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }
  function pushLight(light) {
    lightsArray.push(light);
  }
  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }
  function setupLights() {
    lights.setup(lightsArray);
  }
  function setupLightsView(camera2) {
    lights.setupView(lightsArray, camera2);
  }
  const state = {
    lightsArray,
    shadowsArray,
    camera: null,
    lights,
    transmissionRenderTarget: {}
  };
  return {
    init,
    state,
    setupLights,
    setupLightsView,
    pushLight,
    pushShadow
  };
}
function WebGLRenderStates(extensions) {
  let renderStates = /* @__PURE__ */ new WeakMap();
  function get(scene2, renderCallDepth = 0) {
    const renderStateArray = renderStates.get(scene2);
    let renderState;
    if (renderStateArray === void 0) {
      renderState = new WebGLRenderState(extensions);
      renderStates.set(scene2, [renderState]);
    } else {
      if (renderCallDepth >= renderStateArray.length) {
        renderState = new WebGLRenderState(extensions);
        renderStateArray.push(renderState);
      } else {
        renderState = renderStateArray[renderCallDepth];
      }
    }
    return renderState;
  }
  function dispose() {
    renderStates = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
const vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function WebGLShadowMap(renderer2, objects, capabilities) {
  let _frustum = new Frustum();
  const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = capabilities.maxTextureSize;
  const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
  const shadowMaterialVertical = new ShaderMaterial({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Vector2() },
      radius: { value: 4 }
    },
    vertexShader: vertex,
    fragmentShader: fragment
  });
  const shadowMaterialHorizontal = shadowMaterialVertical.clone();
  shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
  const fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute(
    "position",
    new BufferAttribute(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  const scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;
  let _previousType = this.type;
  this.render = function(lights, scene2, camera2) {
    if (scope.enabled === false) return;
    if (scope.autoUpdate === false && scope.needsUpdate === false) return;
    if (lights.length === 0) return;
    const currentRenderTarget = renderer2.getRenderTarget();
    const activeCubeFace = renderer2.getActiveCubeFace();
    const activeMipmapLevel = renderer2.getActiveMipmapLevel();
    const _state = renderer2.state;
    _state.setBlending(NoBlending);
    _state.buffers.color.setClear(1, 1, 1, 1);
    _state.buffers.depth.setTest(true);
    _state.setScissorTest(false);
    const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
    const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
    for (let i2 = 0, il = lights.length; i2 < il; i2++) {
      const light = lights[i2];
      const shadow = light.shadow;
      if (shadow === void 0) {
        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
        continue;
      }
      if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
      _shadowMapSize.copy(shadow.mapSize);
      const shadowFrameExtents = shadow.getFrameExtents();
      _shadowMapSize.multiply(shadowFrameExtents);
      _viewportSize.copy(shadow.mapSize);
      if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
        if (_shadowMapSize.x > _maxTextureSize) {
          _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }
        if (_shadowMapSize.y > _maxTextureSize) {
          _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }
      if (shadow.map === null || toVSM === true || fromVSM === true) {
        const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
        if (shadow.map !== null) {
          shadow.map.dispose();
        }
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.camera.updateProjectionMatrix();
      }
      renderer2.setRenderTarget(shadow.map);
      renderer2.clear();
      const viewportCount = shadow.getViewportCount();
      for (let vp = 0; vp < viewportCount; vp++) {
        const viewport = shadow.getViewport(vp);
        _viewport.set(
          _viewportSize.x * viewport.x,
          _viewportSize.y * viewport.y,
          _viewportSize.x * viewport.z,
          _viewportSize.y * viewport.w
        );
        _state.viewport(_viewport);
        shadow.updateMatrices(light, vp);
        _frustum = shadow.getFrustum();
        renderObject(scene2, camera2, shadow.camera, light, this.type);
      }
      if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
        VSMPass(shadow, camera2);
      }
      shadow.needsUpdate = false;
    }
    _previousType = this.type;
    scope.needsUpdate = false;
    renderer2.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };
  function VSMPass(shadow, camera2) {
    const geometry2 = objects.update(fullScreenMesh);
    if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
      shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialVertical.needsUpdate = true;
      shadowMaterialHorizontal.needsUpdate = true;
    }
    if (shadow.mapPass === null) {
      shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
    }
    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    renderer2.setRenderTarget(shadow.mapPass);
    renderer2.clear();
    renderer2.renderBufferDirect(camera2, null, geometry2, shadowMaterialVertical, fullScreenMesh, null);
    shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
    renderer2.setRenderTarget(shadow.map);
    renderer2.clear();
    renderer2.renderBufferDirect(camera2, null, geometry2, shadowMaterialHorizontal, fullScreenMesh, null);
  }
  function getDepthMaterial(object, material2, light, type) {
    let result = null;
    const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
    if (customMaterial !== void 0) {
      result = customMaterial;
    } else {
      result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
      if (renderer2.localClippingEnabled && material2.clipShadows === true && Array.isArray(material2.clippingPlanes) && material2.clippingPlanes.length !== 0 || material2.displacementMap && material2.displacementScale !== 0 || material2.alphaMap && material2.alphaTest > 0 || material2.map && material2.alphaTest > 0 || material2.alphaToCoverage === true) {
        const keyA = result.uuid, keyB = material2.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
          material2.addEventListener("dispose", onMaterialDispose);
        }
        result = cachedMaterial;
      }
    }
    result.visible = material2.visible;
    result.wireframe = material2.wireframe;
    if (type === VSMShadowMap) {
      result.side = material2.shadowSide !== null ? material2.shadowSide : material2.side;
    } else {
      result.side = material2.shadowSide !== null ? material2.shadowSide : shadowSide[material2.side];
    }
    result.alphaMap = material2.alphaMap;
    result.alphaTest = material2.alphaToCoverage === true ? 0.5 : material2.alphaTest;
    result.map = material2.map;
    result.clipShadows = material2.clipShadows;
    result.clippingPlanes = material2.clippingPlanes;
    result.clipIntersection = material2.clipIntersection;
    result.displacementMap = material2.displacementMap;
    result.displacementScale = material2.displacementScale;
    result.displacementBias = material2.displacementBias;
    result.wireframeLinewidth = material2.wireframeLinewidth;
    result.linewidth = material2.linewidth;
    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      const materialProperties = renderer2.properties.get(result);
      materialProperties.light = light;
    }
    return result;
  }
  function renderObject(object, camera2, shadowCamera, light, type) {
    if (object.visible === false) return;
    const visible = object.layers.test(camera2.layers);
    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
        const geometry2 = objects.update(object);
        const material2 = object.material;
        if (Array.isArray(material2)) {
          const groups = geometry2.groups;
          for (let k = 0, kl = groups.length; k < kl; k++) {
            const group = groups[k];
            const groupMaterial = material2[group.materialIndex];
            if (groupMaterial && groupMaterial.visible) {
              const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
              object.onBeforeShadow(renderer2, object, camera2, shadowCamera, geometry2, depthMaterial, group);
              renderer2.renderBufferDirect(shadowCamera, null, geometry2, depthMaterial, object, group);
              object.onAfterShadow(renderer2, object, camera2, shadowCamera, geometry2, depthMaterial, group);
            }
          }
        } else if (material2.visible) {
          const depthMaterial = getDepthMaterial(object, material2, light, type);
          object.onBeforeShadow(renderer2, object, camera2, shadowCamera, geometry2, depthMaterial, null);
          renderer2.renderBufferDirect(shadowCamera, null, geometry2, depthMaterial, object, null);
          object.onAfterShadow(renderer2, object, camera2, shadowCamera, geometry2, depthMaterial, null);
        }
      }
    }
    const children = object.children;
    for (let i2 = 0, l = children.length; i2 < l; i2++) {
      renderObject(children[i2], camera2, shadowCamera, light, type);
    }
  }
  function onMaterialDispose(event) {
    const material2 = event.target;
    material2.removeEventListener("dispose", onMaterialDispose);
    for (const id in _materialCache) {
      const cache = _materialCache[id];
      const uuid = event.target.uuid;
      if (uuid in cache) {
        const shadowMaterial = cache[uuid];
        shadowMaterial.dispose();
        delete cache[uuid];
      }
    }
  }
}
const reversedFuncs = {
  [NeverDepth]: AlwaysDepth,
  [LessDepth]: GreaterDepth,
  [EqualDepth]: NotEqualDepth,
  [LessEqualDepth]: GreaterEqualDepth,
  [AlwaysDepth]: NeverDepth,
  [GreaterDepth]: LessDepth,
  [NotEqualDepth]: EqualDepth,
  [GreaterEqualDepth]: LessEqualDepth
};
function WebGLState(gl, extensions) {
  function ColorBuffer() {
    let locked = false;
    const color = new Vector4();
    let currentColorMask = null;
    const currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(r, g, b, a, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r *= a;
          g *= a;
          b *= a;
        }
        color.set(r, g, b, a);
        if (currentColorClear.equals(color) === false) {
          gl.clearColor(r, g, b, a);
          currentColorClear.copy(color);
        }
      },
      reset: function() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0);
      }
    };
  }
  function DepthBuffer() {
    let locked = false;
    let currentReversed = false;
    let currentDepthMask = null;
    let currentDepthFunc = null;
    let currentDepthClear = null;
    return {
      setReversed: function(reversed) {
        if (currentReversed !== reversed) {
          const ext = extensions.get("EXT_clip_control");
          if (reversed) {
            ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT);
          } else {
            ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT);
          }
          currentReversed = reversed;
          const oldDepth = currentDepthClear;
          currentDepthClear = null;
          this.setClear(oldDepth);
        }
      },
      getReversed: function() {
        return currentReversed;
      },
      setTest: function(depthTest) {
        if (depthTest) {
          enable(gl.DEPTH_TEST);
        } else {
          disable(gl.DEPTH_TEST);
        }
      },
      setMask: function(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function(depthFunc) {
        if (currentReversed) depthFunc = reversedFuncs[depthFunc];
        if (currentDepthFunc !== depthFunc) {
          switch (depthFunc) {
            case NeverDepth:
              gl.depthFunc(gl.NEVER);
              break;
            case AlwaysDepth:
              gl.depthFunc(gl.ALWAYS);
              break;
            case LessDepth:
              gl.depthFunc(gl.LESS);
              break;
            case LessEqualDepth:
              gl.depthFunc(gl.LEQUAL);
              break;
            case EqualDepth:
              gl.depthFunc(gl.EQUAL);
              break;
            case GreaterEqualDepth:
              gl.depthFunc(gl.GEQUAL);
              break;
            case GreaterDepth:
              gl.depthFunc(gl.GREATER);
              break;
            case NotEqualDepth:
              gl.depthFunc(gl.NOTEQUAL);
              break;
            default:
              gl.depthFunc(gl.LEQUAL);
          }
          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(depth) {
        if (currentDepthClear !== depth) {
          if (currentReversed) {
            depth = 1 - depth;
          }
          gl.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
        currentReversed = false;
      }
    };
  }
  function StencilBuffer() {
    let locked = false;
    let currentStencilMask = null;
    let currentStencilFunc = null;
    let currentStencilRef = null;
    let currentStencilFuncMask = null;
    let currentStencilFail = null;
    let currentStencilZFail = null;
    let currentStencilZPass = null;
    let currentStencilClear = null;
    return {
      setTest: function(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(gl.STENCIL_TEST);
          } else {
            disable(gl.STENCIL_TEST);
          }
        }
      },
      setMask: function(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  }
  const colorBuffer = new ColorBuffer();
  const depthBuffer = new DepthBuffer();
  const stencilBuffer = new StencilBuffer();
  const uboBindings = /* @__PURE__ */ new WeakMap();
  const uboProgramMap = /* @__PURE__ */ new WeakMap();
  let enabledCapabilities = {};
  let currentBoundFramebuffers = {};
  let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
  let defaultDrawbuffers = [];
  let currentProgram = null;
  let currentBlendingEnabled = false;
  let currentBlending = null;
  let currentBlendEquation = null;
  let currentBlendSrc = null;
  let currentBlendDst = null;
  let currentBlendEquationAlpha = null;
  let currentBlendSrcAlpha = null;
  let currentBlendDstAlpha = null;
  let currentBlendColor = new Color(0, 0, 0);
  let currentBlendAlpha = 0;
  let currentPremultipledAlpha = false;
  let currentFlipSided = null;
  let currentCullFace = null;
  let currentLineWidth = null;
  let currentPolygonOffsetFactor = null;
  let currentPolygonOffsetUnits = null;
  const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let lineWidthAvailable = false;
  let version = 0;
  const glVersion = gl.getParameter(gl.VERSION);
  if (glVersion.indexOf("WebGL") !== -1) {
    version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 1;
  } else if (glVersion.indexOf("OpenGL ES") !== -1) {
    version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 2;
  }
  let currentTextureSlot = null;
  let currentBoundTextures = {};
  const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
  const viewportParam = gl.getParameter(gl.VIEWPORT);
  const currentScissor = new Vector4().fromArray(scissorParam);
  const currentViewport = new Vector4().fromArray(viewportParam);
  function createTexture(type, target, count, dimensions) {
    const data = new Uint8Array(4);
    const texture = gl.createTexture();
    gl.bindTexture(type, texture);
    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    for (let i2 = 0; i2 < count; i2++) {
      if (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
      } else {
        gl.texImage2D(target + i2, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
      }
    }
    return texture;
  }
  const emptyTextures = {};
  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
  emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
  emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(gl.DEPTH_TEST);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(gl.CULL_FACE);
  setBlending(NoBlending);
  function enable(id) {
    if (enabledCapabilities[id] !== true) {
      gl.enable(id);
      enabledCapabilities[id] = true;
    }
  }
  function disable(id) {
    if (enabledCapabilities[id] !== false) {
      gl.disable(id);
      enabledCapabilities[id] = false;
    }
  }
  function bindFramebuffer(target, framebuffer) {
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;
      if (target === gl.DRAW_FRAMEBUFFER) {
        currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
      }
      if (target === gl.FRAMEBUFFER) {
        currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
      }
      return true;
    }
    return false;
  }
  function drawBuffers(renderTarget, framebuffer) {
    let drawBuffers2 = defaultDrawbuffers;
    let needsUpdate = false;
    if (renderTarget) {
      drawBuffers2 = currentDrawbuffers.get(framebuffer);
      if (drawBuffers2 === void 0) {
        drawBuffers2 = [];
        currentDrawbuffers.set(framebuffer, drawBuffers2);
      }
      const textures = renderTarget.textures;
      if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          drawBuffers2[i2] = gl.COLOR_ATTACHMENT0 + i2;
        }
        drawBuffers2.length = textures.length;
        needsUpdate = true;
      }
    } else {
      if (drawBuffers2[0] !== gl.BACK) {
        drawBuffers2[0] = gl.BACK;
        needsUpdate = true;
      }
    }
    if (needsUpdate) {
      gl.drawBuffers(drawBuffers2);
    }
  }
  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }
    return false;
  }
  const equationToGL = {
    [AddEquation]: gl.FUNC_ADD,
    [SubtractEquation]: gl.FUNC_SUBTRACT,
    [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
  };
  equationToGL[MinEquation] = gl.MIN;
  equationToGL[MaxEquation] = gl.MAX;
  const factorToGL = {
    [ZeroFactor]: gl.ZERO,
    [OneFactor]: gl.ONE,
    [SrcColorFactor]: gl.SRC_COLOR,
    [SrcAlphaFactor]: gl.SRC_ALPHA,
    [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
    [DstColorFactor]: gl.DST_COLOR,
    [DstAlphaFactor]: gl.DST_ALPHA,
    [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
    [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
    [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
    [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,
    [ConstantColorFactor]: gl.CONSTANT_COLOR,
    [OneMinusConstantColorFactor]: gl.ONE_MINUS_CONSTANT_COLOR,
    [ConstantAlphaFactor]: gl.CONSTANT_ALPHA,
    [OneMinusConstantAlphaFactor]: gl.ONE_MINUS_CONSTANT_ALPHA
  };
  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled === true) {
        disable(gl.BLEND);
        currentBlendingEnabled = false;
      }
      return;
    }
    if (currentBlendingEnabled === false) {
      enable(gl.BLEND);
      currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(gl.FUNC_ADD);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFunc(gl.ONE, gl.ONE);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending:
              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlendColor.set(0, 0, 0);
        currentBlendAlpha = 0;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }
    if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {
      gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);
      currentBlendColor.copy(blendColor);
      currentBlendAlpha = blendAlpha;
    }
    currentBlending = blending;
    currentPremultipledAlpha = false;
  }
  function setMaterial(material2, frontFaceCW) {
    material2.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
    let flipSided = material2.side === BackSide;
    if (frontFaceCW) flipSided = !flipSided;
    setFlipSided(flipSided);
    material2.blending === NormalBlending && material2.transparent === false ? setBlending(NoBlending) : setBlending(material2.blending, material2.blendEquation, material2.blendSrc, material2.blendDst, material2.blendEquationAlpha, material2.blendSrcAlpha, material2.blendDstAlpha, material2.blendColor, material2.blendAlpha, material2.premultipliedAlpha);
    depthBuffer.setFunc(material2.depthFunc);
    depthBuffer.setTest(material2.depthTest);
    depthBuffer.setMask(material2.depthWrite);
    colorBuffer.setMask(material2.colorWrite);
    const stencilWrite = material2.stencilWrite;
    stencilBuffer.setTest(stencilWrite);
    if (stencilWrite) {
      stencilBuffer.setMask(material2.stencilWriteMask);
      stencilBuffer.setFunc(material2.stencilFunc, material2.stencilRef, material2.stencilFuncMask);
      stencilBuffer.setOp(material2.stencilFail, material2.stencilZFail, material2.stencilZPass);
    }
    setPolygonOffset(material2.polygonOffset, material2.polygonOffsetFactor, material2.polygonOffsetUnits);
    material2.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(gl.CW);
      } else {
        gl.frontFace(gl.CCW);
      }
      currentFlipSided = flipSided;
    }
  }
  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(gl.CULL_FACE);
      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(gl.BACK);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(gl.FRONT);
        } else {
          gl.cullFace(gl.FRONT_AND_BACK);
        }
      }
    } else {
      disable(gl.CULL_FACE);
    }
    currentCullFace = cullFace;
  }
  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable) gl.lineWidth(width);
      currentLineWidth = width;
    }
  }
  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(gl.POLYGON_OFFSET_FILL);
      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(gl.POLYGON_OFFSET_FILL);
    }
  }
  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(gl.SCISSOR_TEST);
    } else {
      disable(gl.SCISSOR_TEST);
    }
  }
  function activeTexture(webglSlot) {
    if (webglSlot === void 0) webglSlot = gl.TEXTURE0 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }
  function bindTexture(webglType, webglTexture, webglSlot) {
    if (webglSlot === void 0) {
      if (currentTextureSlot === null) {
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      } else {
        webglSlot = currentTextureSlot;
      }
    }
    let boundTexture = currentBoundTextures[webglSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[webglSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  function unbindTexture() {
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexImage3D() {
    try {
      gl.compressedTexImage3D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage2D() {
    try {
      gl.texSubImage2D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage3D() {
    try {
      gl.texSubImage3D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage2D() {
    try {
      gl.compressedTexSubImage2D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage3D() {
    try {
      gl.compressedTexSubImage3D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage2D() {
    try {
      gl.texStorage2D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage3D() {
    try {
      gl.texStorage3D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage2D() {
    try {
      gl.texImage2D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage3D() {
    try {
      gl.texImage3D(...arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function scissor(scissor2) {
    if (currentScissor.equals(scissor2) === false) {
      gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
      currentScissor.copy(scissor2);
    }
  }
  function viewport(viewport2) {
    if (currentViewport.equals(viewport2) === false) {
      gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
      currentViewport.copy(viewport2);
    }
  }
  function updateUBOMapping(uniformsGroup, program) {
    let mapping = uboProgramMap.get(program);
    if (mapping === void 0) {
      mapping = /* @__PURE__ */ new WeakMap();
      uboProgramMap.set(program, mapping);
    }
    let blockIndex = mapping.get(uniformsGroup);
    if (blockIndex === void 0) {
      blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
      mapping.set(uniformsGroup, blockIndex);
    }
  }
  function uniformBlockBinding(uniformsGroup, program) {
    const mapping = uboProgramMap.get(program);
    const blockIndex = mapping.get(uniformsGroup);
    if (uboBindings.get(program) !== blockIndex) {
      gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
      uboBindings.set(program, blockIndex);
    }
  }
  function reset() {
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.POLYGON_OFFSET_FILL);
    gl.disable(gl.SCISSOR_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.blendEquation(gl.FUNC_ADD);
    gl.blendFunc(gl.ONE, gl.ZERO);
    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
    gl.blendColor(0, 0, 0, 0);
    gl.colorMask(true, true, true, true);
    gl.clearColor(0, 0, 0, 0);
    gl.depthMask(true);
    gl.depthFunc(gl.LESS);
    depthBuffer.setReversed(false);
    gl.clearDepth(1);
    gl.stencilMask(4294967295);
    gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    gl.clearStencil(0);
    gl.cullFace(gl.BACK);
    gl.frontFace(gl.CCW);
    gl.polygonOffset(0, 0);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
    gl.useProgram(null);
    gl.lineWidth(1);
    gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentBoundFramebuffers = {};
    currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    defaultDrawbuffers = [];
    currentProgram = null;
    currentBlendingEnabled = false;
    currentBlending = null;
    currentBlendEquation = null;
    currentBlendSrc = null;
    currentBlendDst = null;
    currentBlendEquationAlpha = null;
    currentBlendSrcAlpha = null;
    currentBlendDstAlpha = null;
    currentBlendColor = new Color(0, 0, 0);
    currentBlendAlpha = 0;
    currentPremultipledAlpha = false;
    currentFlipSided = null;
    currentCullFace = null;
    currentLineWidth = null;
    currentPolygonOffsetFactor = null;
    currentPolygonOffsetUnits = null;
    currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
    currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }
  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable,
    disable,
    bindFramebuffer,
    drawBuffers,
    useProgram,
    setBlending,
    setMaterial,
    setFlipSided,
    setCullFace,
    setLineWidth,
    setPolygonOffset,
    setScissorTest,
    activeTexture,
    bindTexture,
    unbindTexture,
    compressedTexImage2D,
    compressedTexImage3D,
    texImage2D,
    texImage3D,
    updateUBOMapping,
    uniformBlockBinding,
    texStorage2D,
    texStorage3D,
    texSubImage2D,
    texSubImage3D,
    compressedTexSubImage2D,
    compressedTexSubImage3D,
    scissor,
    viewport,
    reset
  };
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
  const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
  const _imageDimensions = new Vector2();
  const _videoTextures = /* @__PURE__ */ new WeakMap();
  let _canvas2;
  const _sources = /* @__PURE__ */ new WeakMap();
  let useOffscreenCanvas = false;
  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (err) {
  }
  function createCanvas(width, height) {
    return useOffscreenCanvas ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(width, height)
    ) : createElementNS("canvas");
  }
  function resizeImage(image, needsNewCanvas, maxSize) {
    let scale = 1;
    const dimensions = getDimensions(image);
    if (dimensions.width > maxSize || dimensions.height > maxSize) {
      scale = maxSize / Math.max(dimensions.width, dimensions.height);
    }
    if (scale < 1) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap || typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
        const width = Math.floor(scale * dimensions.width);
        const height = Math.floor(scale * dimensions.height);
        if (_canvas2 === void 0) _canvas2 = createCanvas(width, height);
        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
        canvas.width = width;
        canvas.height = height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, width, height);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + dimensions.width + "x" + dimensions.height + ") to (" + width + "x" + height + ").");
        return canvas;
      } else {
        if ("data" in image) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + dimensions.width + "x" + dimensions.height + ").");
        }
        return image;
      }
    }
    return image;
  }
  function textureNeedsGenerateMipmaps(texture) {
    return texture.generateMipmaps;
  }
  function generateMipmap(target) {
    _gl.generateMipmap(target);
  }
  function getTargetType(texture) {
    if (texture.isWebGLCubeRenderTarget) return _gl.TEXTURE_CUBE_MAP;
    if (texture.isWebGL3DRenderTarget) return _gl.TEXTURE_3D;
    if (texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture) return _gl.TEXTURE_2D_ARRAY;
    return _gl.TEXTURE_2D;
  }
  function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== void 0) return _gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === _gl.RED) {
      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
    }
    if (glFormat === _gl.RED_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.R8I;
      if (glType === _gl.SHORT) internalFormat = _gl.R16I;
      if (glType === _gl.INT) internalFormat = _gl.R32I;
    }
    if (glFormat === _gl.RG) {
      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
    }
    if (glFormat === _gl.RG_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RG16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RG32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RG8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RG16I;
      if (glType === _gl.INT) internalFormat = _gl.RG32I;
    }
    if (glFormat === _gl.RGB_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGB16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGB32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RGB8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RGB16I;
      if (glType === _gl.INT) internalFormat = _gl.RGB32I;
    }
    if (glFormat === _gl.RGBA_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGBA16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGBA32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RGBA8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RGBA16I;
      if (glType === _gl.INT) internalFormat = _gl.RGBA32I;
    }
    if (glFormat === _gl.RGB) {
      if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = _gl.RGB9_E5;
    }
    if (glFormat === _gl.RGBA) {
      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
    }
    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  function getInternalDepthFormat(useStencil, depthType) {
    let glInternalFormat;
    if (useStencil) {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH32F_STENCIL8;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
        console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.");
      }
    } else {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH_COMPONENT24;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH_COMPONENT32F;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH_COMPONENT16;
      }
    }
    return glInternalFormat;
  }
  function getMipLevels(texture, image) {
    if (textureNeedsGenerateMipmaps(texture) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
      return Math.log2(Math.max(image.width, image.height)) + 1;
    } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
      return texture.mipmaps.length;
    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
      return image.mipmaps.length;
    } else {
      return 1;
    }
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    deallocateTexture(texture);
    if (texture.isVideoTexture) {
      _videoTextures.delete(texture);
    }
  }
  function onRenderTargetDispose(event) {
    const renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
  }
  function deallocateTexture(texture) {
    const textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === void 0) return;
    const source = texture.source;
    const webglTextures = _sources.get(source);
    if (webglTextures) {
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      webglTexture.usedTimes--;
      if (webglTexture.usedTimes === 0) {
        deleteTexture(texture);
      }
      if (Object.keys(webglTextures).length === 0) {
        _sources.delete(source);
      }
    }
    properties.remove(texture);
  }
  function deleteTexture(texture) {
    const textureProperties = properties.get(texture);
    _gl.deleteTexture(textureProperties.__webglTexture);
    const source = texture.source;
    const webglTextures = _sources.get(source);
    delete webglTextures[textureProperties.__cacheKey];
    info.memory.textures--;
  }
  function deallocateRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
      properties.remove(renderTarget.depthTexture);
    }
    if (renderTarget.isWebGLCubeRenderTarget) {
      for (let i2 = 0; i2 < 6; i2++) {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer[i2])) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i2].length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2][level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2]);
        }
        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i2]);
      }
    } else {
      if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
        for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
      }
      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer) {
        for (let i2 = 0; i2 < renderTargetProperties.__webglColorRenderbuffer.length; i2++) {
          if (renderTargetProperties.__webglColorRenderbuffer[i2]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i2]);
        }
      }
      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }
    const textures = renderTarget.textures;
    for (let i2 = 0, il = textures.length; i2 < il; i2++) {
      const attachmentProperties = properties.get(textures[i2]);
      if (attachmentProperties.__webglTexture) {
        _gl.deleteTexture(attachmentProperties.__webglTexture);
        info.memory.textures--;
      }
      properties.remove(textures[i2]);
    }
    properties.remove(renderTarget);
  }
  let textureUnits = 0;
  function resetTextureUnits() {
    textureUnits = 0;
  }
  function allocateTextureUnit() {
    const textureUnit = textureUnits;
    if (textureUnit >= capabilities.maxTextures) {
      console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures);
    }
    textureUnits += 1;
    return textureUnit;
  }
  function getTextureCacheKey(texture) {
    const array = [];
    array.push(texture.wrapS);
    array.push(texture.wrapT);
    array.push(texture.wrapR || 0);
    array.push(texture.magFilter);
    array.push(texture.minFilter);
    array.push(texture.anisotropy);
    array.push(texture.internalFormat);
    array.push(texture.format);
    array.push(texture.type);
    array.push(texture.generateMipmaps);
    array.push(texture.premultiplyAlpha);
    array.push(texture.flipY);
    array.push(texture.unpackAlignment);
    array.push(texture.colorSpace);
    return array.join();
  }
  function setTexture2D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.isVideoTexture) updateVideoTexture(texture);
    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
      const image = texture.image;
      if (image === null) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      } else if (image.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }
    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture2DArray(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture3D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTextureCube(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadCubeTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  const wrappingToGL = {
    [RepeatWrapping]: _gl.REPEAT,
    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
  };
  const filterToGL = {
    [NearestFilter]: _gl.NEAREST,
    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
    [LinearFilter]: _gl.LINEAR,
    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
  };
  const compareToGL = {
    [NeverCompare]: _gl.NEVER,
    [AlwaysCompare]: _gl.ALWAYS,
    [LessCompare]: _gl.LESS,
    [LessEqualCompare]: _gl.LEQUAL,
    [EqualCompare]: _gl.EQUAL,
    [GreaterEqualCompare]: _gl.GEQUAL,
    [GreaterCompare]: _gl.GREATER,
    [NotEqualCompare]: _gl.NOTEQUAL
  };
  function setTextureParameters(textureType, texture) {
    if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false && (texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter || texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter)) {
      console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
    if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
    if (texture.compareFunction) {
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
    }
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      if (texture.magFilter === NearestFilter) return;
      if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;
      if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false) return;
      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }
  function initTexture(textureProperties, texture) {
    let forceUpload = false;
    if (textureProperties.__webglInit === void 0) {
      textureProperties.__webglInit = true;
      texture.addEventListener("dispose", onTextureDispose);
    }
    const source = texture.source;
    let webglTextures = _sources.get(source);
    if (webglTextures === void 0) {
      webglTextures = {};
      _sources.set(source, webglTextures);
    }
    const textureCacheKey = getTextureCacheKey(texture);
    if (textureCacheKey !== textureProperties.__cacheKey) {
      if (webglTextures[textureCacheKey] === void 0) {
        webglTextures[textureCacheKey] = {
          texture: _gl.createTexture(),
          usedTimes: 0
        };
        info.memory.textures++;
        forceUpload = true;
      }
      webglTextures[textureCacheKey].usedTimes++;
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      if (webglTexture !== void 0) {
        webglTextures[textureProperties.__cacheKey].usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
      }
      textureProperties.__cacheKey = textureCacheKey;
      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
    }
    return forceUpload;
  }
  function uploadTexture(textureProperties, texture, slot) {
    let textureType = _gl.TEXTURE_2D;
    if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
    const forceUpload = initTexture(textureProperties, texture);
    const source = texture.source;
    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      let image = resizeImage(texture.image, false, capabilities.maxTextureSize);
      image = verifyColorSpace(texture, image);
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      let glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
      setTextureParameters(textureType, texture);
      let mipmap;
      const mipmaps = texture.mipmaps;
      const useTexStorage = texture.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      const levels = getMipLevels(texture, image);
      if (texture.isDepthTexture) {
        glInternalFormat = getInternalDepthFormat(texture.format === DepthStencilFormat, texture.type);
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
          }
        }
      } else if (texture.isDataTexture) {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          }
        }
      } else if (texture.isCompressedTexture) {
        if (texture.isCompressedArrayTexture) {
          if (useTexStorage && allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    if (texture.layerUpdates.size > 0) {
                      const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture.format, texture.type);
                      for (const layerIndex of texture.layerUpdates) {
                        const layerData = mipmap.data.subarray(
                          layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
                          (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
                        );
                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData);
                      }
                      texture.clearLayerUpdates();
                    } else {
                      state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);
                    }
                  }
                } else {
                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i2, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i2, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        } else {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else if (texture.isDataArrayTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            if (texture.layerUpdates.size > 0) {
              const layerByteLength = getByteLength(image.width, image.height, texture.format, texture.type);
              for (const layerIndex of texture.layerUpdates) {
                const layerData = image.data.subarray(
                  layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
                  (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
                );
                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
              }
              texture.clearLayerUpdates();
            } else {
              state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            }
          }
        } else {
          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isData3DTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          }
        } else {
          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isFramebufferTexture) {
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
          } else {
            let width = image.width, height = image.height;
            for (let i2 = 0; i2 < levels; i2++) {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, width, height, 0, glFormat, glType, null);
              width >>= 1;
              height >>= 1;
            }
          }
        }
      } else {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            const dimensions = getDimensions(mipmaps[0]);
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, glFormat, glType, mipmap);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, glFormat, glType, mipmap);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              const dimensions = getDimensions(image);
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(textureType);
      }
      sourceProperties.__version = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }
    textureProperties.__version = texture.version;
  }
  function uploadCubeTexture(textureProperties, texture, slot) {
    if (texture.image.length !== 6) return;
    const forceUpload = initTexture(textureProperties, texture);
    const source = texture.source;
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      const cubeImage = [];
      for (let i2 = 0; i2 < 6; i2++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i2] = resizeImage(texture.image[i2], true, capabilities.maxCubemapSize);
        } else {
          cubeImage[i2] = isDataTexture ? texture.image[i2].image : texture.image[i2];
        }
        cubeImage[i2] = verifyColorSpace(texture, cubeImage[i2]);
      }
      const image = cubeImage[0], glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const useTexStorage = texture.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      let levels = getMipLevels(texture, image);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
      let mipmaps;
      if (isCompressed) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          mipmaps = cubeImage[i2].mipmaps;
          for (let j = 0; j < mipmaps.length; j++) {
            const mipmap = mipmaps[j];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else {
        mipmaps = texture.mipmaps;
        if (useTexStorage && allocateMemory) {
          if (mipmaps.length > 0) levels++;
          const dimensions = getDimensions(cubeImage[0]);
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          if (isDataTexture) {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, cubeImage[i2].width, cubeImage[i2].height, glFormat, glType, cubeImage[i2].data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, glInternalFormat, cubeImage[i2].width, cubeImage[i2].height, 0, glFormat, glType, cubeImage[i2].data);
            }
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              const mipmapImage = mipmap.image[i2].image;
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
              }
            }
          } else {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, glFormat, glType, cubeImage[i2]);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, glInternalFormat, glFormat, glType, cubeImage[i2]);
            }
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j + 1, 0, 0, glFormat, glType, mipmap.image[i2]);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i2]);
              }
            }
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      sourceProperties.__version = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }
    textureProperties.__version = texture.version;
  }
  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
    const glFormat = utils.convert(texture.format, texture.colorSpace);
    const glType = utils.convert(texture.type);
    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(texture);
    textureProperties.__renderTarget = renderTarget;
    if (!renderTargetProperties.__hasExternalTextures) {
      const width = Math.max(1, renderTarget.width >> level);
      const height = Math.max(1, renderTarget.height >> level);
      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
        state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
      } else {
        state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (useMultisampledRTT(renderTarget)) {
      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples(renderTarget));
    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level);
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
    if (renderTarget.depthBuffer) {
      const depthTexture = renderTarget.depthTexture;
      const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
      const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);
      const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
      const samples = getRenderTargetSamples(renderTarget);
      const isUseMultisampledRTT = useMultisampledRTT(renderTarget);
      if (isUseMultisampledRTT) {
        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else if (isMultisample) {
        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
    } else {
      const textures = renderTarget.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture = textures[i2];
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && useMultisampledRTT(renderTarget) === false) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
    }
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
  }
  function setupDepthTexture(framebuffer, renderTarget) {
    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    const textureProperties = properties.get(renderTarget.depthTexture);
    textureProperties.__renderTarget = renderTarget;
    if (!textureProperties.__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }
    setTexture2D(renderTarget.depthTexture, 0);
    const webglDepthTexture = textureProperties.__webglTexture;
    const samples = getRenderTargetSamples(renderTarget);
    if (renderTarget.depthTexture.format === DepthFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function setupDepthRenderbuffer(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {
      const depthTexture = renderTarget.depthTexture;
      if (renderTargetProperties.__depthDisposeCallback) {
        renderTargetProperties.__depthDisposeCallback();
      }
      if (depthTexture) {
        const disposeEvent = () => {
          delete renderTargetProperties.__boundDepthTexture;
          delete renderTargetProperties.__depthDisposeCallback;
          depthTexture.removeEventListener("dispose", disposeEvent);
        };
        depthTexture.addEventListener("dispose", disposeEvent);
        renderTargetProperties.__depthDisposeCallback = disposeEvent;
      }
      renderTargetProperties.__boundDepthTexture = depthTexture;
    }
    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
      if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
      const mipmaps = renderTarget.texture.mipmaps;
      if (mipmaps && mipmaps.length > 0) {
        setupDepthTexture(renderTargetProperties.__webglFramebuffer[0], renderTarget);
      } else {
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      }
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];
        for (let i2 = 0; i2 < 6; i2++) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i2]);
          if (renderTargetProperties.__webglDepthbuffer[i2] === void 0) {
            renderTargetProperties.__webglDepthbuffer[i2] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i2], renderTarget, false);
          } else {
            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderbuffer = renderTargetProperties.__webglDepthbuffer[i2];
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
          }
        }
      } else {
        const mipmaps = renderTarget.texture.mipmaps;
        if (mipmaps && mipmaps.length > 0) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[0]);
        } else {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        }
        if (renderTargetProperties.__webglDepthbuffer === void 0) {
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        } else {
          const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderbuffer = renderTargetProperties.__webglDepthbuffer;
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
        }
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function rebindTextures(renderTarget, colorTexture, depthTexture) {
    const renderTargetProperties = properties.get(renderTarget);
    if (colorTexture !== void 0) {
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
    }
    if (depthTexture !== void 0) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function setupRenderTarget(renderTarget) {
    const texture = renderTarget.texture;
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(texture);
    renderTarget.addEventListener("dispose", onRenderTargetDispose);
    const textures = renderTarget.textures;
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    const isMultipleRenderTargets = textures.length > 1;
    if (!isMultipleRenderTargets) {
      if (textureProperties.__webglTexture === void 0) {
        textureProperties.__webglTexture = _gl.createTexture();
      }
      textureProperties.__version = texture.version;
      info.memory.textures++;
    }
    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];
      for (let i2 = 0; i2 < 6; i2++) {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer[i2] = [];
          for (let level = 0; level < texture.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[i2][level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer[i2] = _gl.createFramebuffer();
        }
      }
    } else {
      if (texture.mipmaps && texture.mipmaps.length > 0) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let level = 0; level < texture.mipmaps.length; level++) {
          renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
      }
      if (isMultipleRenderTargets) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          const attachmentProperties = properties.get(textures[i2]);
          if (attachmentProperties.__webglTexture === void 0) {
            attachmentProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
          }
        }
      }
      if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
        renderTargetProperties.__webglColorRenderbuffer = [];
        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        for (let i2 = 0; i2 < textures.length; i2++) {
          const texture2 = textures[i2];
          renderTargetProperties.__webglColorRenderbuffer[i2] = _gl.createRenderbuffer();
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
          const glFormat = utils.convert(texture2.format, texture2.colorSpace);
          const glType = utils.convert(texture2.type);
          const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
        if (renderTarget.depthBuffer) {
          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
      }
    }
    if (isCube) {
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
      for (let i2 = 0; i2 < 6; i2++) {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          for (let level = 0; level < texture.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0);
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      state.unbindTexture();
    } else if (isMultipleRenderTargets) {
      for (let i2 = 0, il = textures.length; i2 < il; i2++) {
        const attachment = textures[i2];
        const attachmentProperties = properties.get(attachment);
        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_2D, attachment);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, 0);
        if (textureNeedsGenerateMipmaps(attachment)) {
          generateMipmap(_gl.TEXTURE_2D);
        }
      }
      state.unbindTexture();
    } else {
      let glTextureType = _gl.TEXTURE_2D;
      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
        glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
      }
      state.bindTexture(glTextureType, textureProperties.__webglTexture);
      setTextureParameters(glTextureType, texture);
      if (texture.mipmaps && texture.mipmaps.length > 0) {
        for (let level = 0; level < texture.mipmaps.length; level++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
        }
      } else {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(glTextureType);
      }
      state.unbindTexture();
    }
    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function updateRenderTargetMipmap(renderTarget) {
    const textures = renderTarget.textures;
    for (let i2 = 0, il = textures.length; i2 < il; i2++) {
      const texture = textures[i2];
      if (textureNeedsGenerateMipmaps(texture)) {
        const targetType = getTargetType(renderTarget);
        const webglTexture = properties.get(texture).__webglTexture;
        state.bindTexture(targetType, webglTexture);
        generateMipmap(targetType);
        state.unbindTexture();
      }
    }
  }
  const invalidationArrayRead = [];
  const invalidationArrayDraw = [];
  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.samples > 0) {
      if (useMultisampledRTT(renderTarget) === false) {
        const textures = renderTarget.textures;
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = _gl.COLOR_BUFFER_BIT;
        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const renderTargetProperties = properties.get(renderTarget);
        const isMultipleRenderTargets = textures.length > 1;
        if (isMultipleRenderTargets) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, null);
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, null, 0);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        const mipmaps = renderTarget.texture.mipmaps;
        if (mipmaps && mipmaps.length > 0) {
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[0]);
        } else {
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        }
        for (let i2 = 0; i2 < textures.length; i2++) {
          if (renderTarget.resolveDepthBuffer) {
            if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
            if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
          }
          if (isMultipleRenderTargets) {
            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
            const webglTexture = properties.get(textures[i2]).__webglTexture;
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
          }
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
          if (supportsInvalidateFramebuffer === true) {
            invalidationArrayRead.length = 0;
            invalidationArrayDraw.length = 0;
            invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i2);
            if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {
              invalidationArrayRead.push(depthStyle);
              invalidationArrayDraw.push(depthStyle);
              _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);
            }
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        if (isMultipleRenderTargets) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
            const webglTexture = properties.get(textures[i2]).__webglTexture;
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, webglTexture, 0);
          }
        }
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
      } else {
        if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
        }
      }
    }
  }
  function getRenderTargetSamples(renderTarget) {
    return Math.min(capabilities.maxSamples, renderTarget.samples);
  }
  function useMultisampledRTT(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    return renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
  }
  function updateVideoTexture(texture) {
    const frame = info.render.frame;
    if (_videoTextures.get(texture) !== frame) {
      _videoTextures.set(texture, frame);
      texture.update();
    }
  }
  function verifyColorSpace(texture, image) {
    const colorSpace = texture.colorSpace;
    const format = texture.format;
    const type = texture.type;
    if (texture.isCompressedTexture === true || texture.isVideoTexture === true) return image;
    if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
      if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {
        if (format !== RGBAFormat || type !== UnsignedByteType) {
          console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
        }
      } else {
        console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
      }
    }
    return image;
  }
  function getDimensions(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement) {
      _imageDimensions.width = image.naturalWidth || image.width;
      _imageDimensions.height = image.naturalHeight || image.height;
    } else if (typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
      _imageDimensions.width = image.displayWidth;
      _imageDimensions.height = image.displayHeight;
    } else {
      _imageDimensions.width = image.width;
      _imageDimensions.height = image.height;
    }
    return _imageDimensions;
  }
  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.rebindTextures = rebindTextures;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.setupDepthRenderbuffer = setupDepthRenderbuffer;
  this.setupFrameBufferTexture = setupFrameBufferTexture;
  this.useMultisampledRTT = useMultisampledRTT;
}
function WebGLUtils(gl, extensions) {
  function convert(p, colorSpace = NoColorSpace) {
    let extension;
    const transfer = ColorManagement.getTransfer(colorSpace);
    if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
    if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
    if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
    if (p === UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;
    if (p === ByteType) return gl.BYTE;
    if (p === ShortType) return gl.SHORT;
    if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
    if (p === IntType) return gl.INT;
    if (p === UnsignedIntType) return gl.UNSIGNED_INT;
    if (p === FloatType) return gl.FLOAT;
    if (p === HalfFloatType) return gl.HALF_FLOAT;
    if (p === AlphaFormat) return gl.ALPHA;
    if (p === RGBFormat) return gl.RGB;
    if (p === RGBAFormat) return gl.RGBA;
    if (p === DepthFormat) return gl.DEPTH_COMPONENT;
    if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
    if (p === RedFormat) return gl.RED;
    if (p === RedIntegerFormat) return gl.RED_INTEGER;
    if (p === RGFormat) return gl.RG;
    if (p === RGIntegerFormat) return gl.RG_INTEGER;
    if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
      if (transfer === SRGBTransfer) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p === RGB_ETC1_Format || p === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        if (p === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        if (p === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (p === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (p === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else {
        return null;
      }
    }
    if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
      extension = extensions.get("EXT_texture_compression_rgtc");
      if (extension !== null) {
        if (p === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
        if (p === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (p === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (p === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (p === UnsignedInt248Type) return gl.UNSIGNED_INT_24_8;
    return gl[p] !== void 0 ? gl[p] : null;
  }
  return { convert };
}
const _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
const _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class WebXRDepthSensing {
  /**
   * Constructs a new depth sensing module.
   */
  constructor() {
    this.texture = null;
    this.mesh = null;
    this.depthNear = 0;
    this.depthFar = 0;
  }
  /**
   * Inits the depth sensing module
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {XRWebGLDepthInformation} depthData - The XR depth data.
   * @param {XRRenderState} renderState - The XR render state.
   */
  init(renderer2, depthData, renderState) {
    if (this.texture === null) {
      const texture = new Texture();
      const texProps = renderer2.properties.get(texture);
      texProps.__webglTexture = depthData.texture;
      if (depthData.depthNear !== renderState.depthNear || depthData.depthFar !== renderState.depthFar) {
        this.depthNear = depthData.depthNear;
        this.depthFar = depthData.depthFar;
      }
      this.texture = texture;
    }
  }
  /**
   * Returns a plane mesh that visualizes the depth texture.
   *
   * @param {ArrayCamera} cameraXR - The XR camera.
   * @return {?Mesh} The plane mesh.
   */
  getMesh(cameraXR) {
    if (this.texture !== null) {
      if (this.mesh === null) {
        const viewport = cameraXR.cameras[0].viewport;
        const material2 = new ShaderMaterial({
          vertexShader: _occlusion_vertex,
          fragmentShader: _occlusion_fragment,
          uniforms: {
            depthColor: { value: this.texture },
            depthWidth: { value: viewport.z },
            depthHeight: { value: viewport.w }
          }
        });
        this.mesh = new Mesh(new PlaneGeometry(20, 20), material2);
      }
    }
    return this.mesh;
  }
  /**
   * Resets the module
   */
  reset() {
    this.texture = null;
    this.mesh = null;
  }
  /**
   * Returns a texture representing the depth of the user's environment.
   *
   * @return {?Texture} The depth texture.
   */
  getDepthTexture() {
    return this.texture;
  }
}
class WebXRManager extends EventDispatcher {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGL2RenderingContext} gl - The rendering context.
   */
  constructor(renderer2, gl) {
    super();
    const scope = this;
    let session = null;
    let framebufferScaleFactor = 1;
    let referenceSpace = null;
    let referenceSpaceType = "local-floor";
    let foveation = 1;
    let customReferenceSpace = null;
    let pose = null;
    let glBinding = null;
    let glProjLayer = null;
    let glBaseLayer = null;
    let xrFrame = null;
    const depthSensing = new WebXRDepthSensing();
    const attributes = gl.getContextAttributes();
    let initialRenderTarget = null;
    let newRenderTarget = null;
    const controllers = [];
    const controllerInputSources = [];
    const currentSize = new Vector2();
    let currentPixelRatio = null;
    const cameraL = new PerspectiveCamera();
    cameraL.viewport = new Vector4();
    const cameraR = new PerspectiveCamera();
    cameraR.viewport = new Vector4();
    const cameras = [cameraL, cameraR];
    const cameraXR = new ArrayCamera();
    let _currentDepthNear = null;
    let _currentDepthFar = null;
    this.cameraAutoUpdate = true;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getTargetRaySpace();
    };
    this.getControllerGrip = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getGripSpace();
    };
    this.getHand = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getHandSpace();
    };
    function onSessionEvent(event) {
      const controllerIndex = controllerInputSources.indexOf(event.inputSource);
      if (controllerIndex === -1) {
        return;
      }
      const controller = controllers[controllerIndex];
      if (controller !== void 0) {
        controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
        controller.dispatchEvent({ type: event.type, data: event.inputSource });
      }
    }
    function onSessionEnd() {
      session.removeEventListener("select", onSessionEvent);
      session.removeEventListener("selectstart", onSessionEvent);
      session.removeEventListener("selectend", onSessionEvent);
      session.removeEventListener("squeeze", onSessionEvent);
      session.removeEventListener("squeezestart", onSessionEvent);
      session.removeEventListener("squeezeend", onSessionEvent);
      session.removeEventListener("end", onSessionEnd);
      session.removeEventListener("inputsourceschange", onInputSourcesChange);
      for (let i2 = 0; i2 < controllers.length; i2++) {
        const inputSource = controllerInputSources[i2];
        if (inputSource === null) continue;
        controllerInputSources[i2] = null;
        controllers[i2].disconnect(inputSource);
      }
      _currentDepthNear = null;
      _currentDepthFar = null;
      depthSensing.reset();
      renderer2.setRenderTarget(initialRenderTarget);
      glBaseLayer = null;
      glProjLayer = null;
      glBinding = null;
      session = null;
      newRenderTarget = null;
      animation.stop();
      scope.isPresenting = false;
      renderer2.setPixelRatio(currentPixelRatio);
      renderer2.setSize(currentSize.width, currentSize.height, false);
      scope.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(value) {
      framebufferScaleFactor = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(value) {
      referenceSpaceType = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return customReferenceSpace || referenceSpace;
    };
    this.setReferenceSpace = function(space) {
      customReferenceSpace = space;
    };
    this.getBaseLayer = function() {
      return glProjLayer !== null ? glProjLayer : glBaseLayer;
    };
    this.getBinding = function() {
      return glBinding;
    };
    this.getFrame = function() {
      return xrFrame;
    };
    this.getSession = function() {
      return session;
    };
    this.setSession = async function(value) {
      session = value;
      if (session !== null) {
        initialRenderTarget = renderer2.getRenderTarget();
        session.addEventListener("select", onSessionEvent);
        session.addEventListener("selectstart", onSessionEvent);
        session.addEventListener("selectend", onSessionEvent);
        session.addEventListener("squeeze", onSessionEvent);
        session.addEventListener("squeezestart", onSessionEvent);
        session.addEventListener("squeezeend", onSessionEvent);
        session.addEventListener("end", onSessionEnd);
        session.addEventListener("inputsourceschange", onInputSourcesChange);
        if (attributes.xrCompatible !== true) {
          await gl.makeXRCompatible();
        }
        currentPixelRatio = renderer2.getPixelRatio();
        renderer2.getSize(currentSize);
        const useLayers = typeof XRWebGLBinding !== "undefined" && "createProjectionLayer" in XRWebGLBinding.prototype;
        if (!useLayers) {
          const layerInit = {
            antialias: attributes.antialias,
            alpha: true,
            depth: attributes.depth,
            stencil: attributes.stencil,
            framebufferScaleFactor
          };
          glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
          session.updateRenderState({ baseLayer: glBaseLayer });
          renderer2.setPixelRatio(1);
          renderer2.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glBaseLayer.framebufferWidth,
            glBaseLayer.framebufferHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              colorSpace: renderer2.outputColorSpace,
              stencilBuffer: attributes.stencil,
              resolveDepthBuffer: glBaseLayer.ignoreDepthValues === false,
              resolveStencilBuffer: glBaseLayer.ignoreDepthValues === false
            }
          );
        } else {
          let depthFormat = null;
          let depthType = null;
          let glDepthFormat = null;
          if (attributes.depth) {
            glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
            depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
            depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
          }
          const projectionlayerInit = {
            colorFormat: gl.RGBA8,
            depthFormat: glDepthFormat,
            scaleFactor: framebufferScaleFactor
          };
          glBinding = new XRWebGLBinding(session, gl);
          glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
          session.updateRenderState({ layers: [glProjLayer] });
          renderer2.setPixelRatio(1);
          renderer2.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glProjLayer.textureWidth,
            glProjLayer.textureHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
              stencilBuffer: attributes.stencil,
              colorSpace: renderer2.outputColorSpace,
              samples: attributes.antialias ? 4 : 0,
              resolveDepthBuffer: glProjLayer.ignoreDepthValues === false,
              resolveStencilBuffer: glProjLayer.ignoreDepthValues === false
            }
          );
        }
        newRenderTarget.isXRRenderTarget = true;
        this.setFoveation(foveation);
        customReferenceSpace = null;
        referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
        animation.setContext(session);
        animation.start();
        scope.isPresenting = true;
        scope.dispatchEvent({ type: "sessionstart" });
      }
    };
    this.getEnvironmentBlendMode = function() {
      if (session !== null) {
        return session.environmentBlendMode;
      }
    };
    this.getDepthTexture = function() {
      return depthSensing.getDepthTexture();
    };
    function onInputSourcesChange(event) {
      for (let i2 = 0; i2 < event.removed.length; i2++) {
        const inputSource = event.removed[i2];
        const index = controllerInputSources.indexOf(inputSource);
        if (index >= 0) {
          controllerInputSources[index] = null;
          controllers[index].disconnect(inputSource);
        }
      }
      for (let i2 = 0; i2 < event.added.length; i2++) {
        const inputSource = event.added[i2];
        let controllerIndex = controllerInputSources.indexOf(inputSource);
        if (controllerIndex === -1) {
          for (let i3 = 0; i3 < controllers.length; i3++) {
            if (i3 >= controllerInputSources.length) {
              controllerInputSources.push(inputSource);
              controllerIndex = i3;
              break;
            } else if (controllerInputSources[i3] === null) {
              controllerInputSources[i3] = inputSource;
              controllerIndex = i3;
              break;
            }
          }
          if (controllerIndex === -1) break;
        }
        const controller = controllers[controllerIndex];
        if (controller) {
          controller.connect(inputSource);
        }
      }
    }
    const cameraLPos = new Vector3();
    const cameraRPos = new Vector3();
    function setProjectionFromUnion(camera2, cameraL2, cameraR2) {
      cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
      const ipd = cameraLPos.distanceTo(cameraRPos);
      const projL = cameraL2.projectionMatrix.elements;
      const projR = cameraR2.projectionMatrix.elements;
      const near = projL[14] / (projL[10] - 1);
      const far = projL[14] / (projL[10] + 1);
      const topFov = (projL[9] + 1) / projL[5];
      const bottomFov = (projL[9] - 1) / projL[5];
      const leftFov = (projL[8] - 1) / projL[0];
      const rightFov = (projR[8] + 1) / projR[0];
      const left = near * leftFov;
      const right = near * rightFov;
      const zOffset = ipd / (-leftFov + rightFov);
      const xOffset = zOffset * -leftFov;
      cameraL2.matrixWorld.decompose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.translateX(xOffset);
      camera2.translateZ(zOffset);
      camera2.matrixWorld.compose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
      if (projL[10] === -1) {
        camera2.projectionMatrix.copy(cameraL2.projectionMatrix);
        camera2.projectionMatrixInverse.copy(cameraL2.projectionMatrixInverse);
      } else {
        const near2 = near + zOffset;
        const far2 = far + zOffset;
        const left2 = left - xOffset;
        const right2 = right + (ipd - xOffset);
        const top2 = topFov * far / far2 * near2;
        const bottom2 = bottomFov * far / far2 * near2;
        camera2.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        camera2.projectionMatrixInverse.copy(camera2.projectionMatrix).invert();
      }
    }
    function updateCamera(camera2, parent2) {
      if (parent2 === null) {
        camera2.matrixWorld.copy(camera2.matrix);
      } else {
        camera2.matrixWorld.multiplyMatrices(parent2.matrixWorld, camera2.matrix);
      }
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
    }
    this.updateCamera = function(camera2) {
      if (session === null) return;
      let depthNear = camera2.near;
      let depthFar = camera2.far;
      if (depthSensing.texture !== null) {
        if (depthSensing.depthNear > 0) depthNear = depthSensing.depthNear;
        if (depthSensing.depthFar > 0) depthFar = depthSensing.depthFar;
      }
      cameraXR.near = cameraR.near = cameraL.near = depthNear;
      cameraXR.far = cameraR.far = cameraL.far = depthFar;
      if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
        session.updateRenderState({
          depthNear: cameraXR.near,
          depthFar: cameraXR.far
        });
        _currentDepthNear = cameraXR.near;
        _currentDepthFar = cameraXR.far;
      }
      cameraL.layers.mask = camera2.layers.mask | 2;
      cameraR.layers.mask = camera2.layers.mask | 4;
      cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;
      const parent2 = camera2.parent;
      const cameras2 = cameraXR.cameras;
      updateCamera(cameraXR, parent2);
      for (let i2 = 0; i2 < cameras2.length; i2++) {
        updateCamera(cameras2[i2], parent2);
      }
      if (cameras2.length === 2) {
        setProjectionFromUnion(cameraXR, cameraL, cameraR);
      } else {
        cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      updateUserCamera(camera2, cameraXR, parent2);
    };
    function updateUserCamera(camera2, cameraXR2, parent2) {
      if (parent2 === null) {
        camera2.matrix.copy(cameraXR2.matrixWorld);
      } else {
        camera2.matrix.copy(parent2.matrixWorld);
        camera2.matrix.invert();
        camera2.matrix.multiply(cameraXR2.matrixWorld);
      }
      camera2.matrix.decompose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.updateMatrixWorld(true);
      camera2.projectionMatrix.copy(cameraXR2.projectionMatrix);
      camera2.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
      if (camera2.isPerspectiveCamera) {
        camera2.fov = RAD2DEG * 2 * Math.atan(1 / camera2.projectionMatrix.elements[5]);
        camera2.zoom = 1;
      }
    }
    this.getCamera = function() {
      return cameraXR;
    };
    this.getFoveation = function() {
      if (glProjLayer === null && glBaseLayer === null) {
        return void 0;
      }
      return foveation;
    };
    this.setFoveation = function(value) {
      foveation = value;
      if (glProjLayer !== null) {
        glProjLayer.fixedFoveation = value;
      }
      if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
        glBaseLayer.fixedFoveation = value;
      }
    };
    this.hasDepthSensing = function() {
      return depthSensing.texture !== null;
    };
    this.getDepthSensingMesh = function() {
      return depthSensing.getMesh(cameraXR);
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time, frame) {
      pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
      xrFrame = frame;
      if (pose !== null) {
        const views = pose.views;
        if (glBaseLayer !== null) {
          renderer2.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
          renderer2.setRenderTarget(newRenderTarget);
        }
        let cameraXRNeedsUpdate = false;
        if (views.length !== cameraXR.cameras.length) {
          cameraXR.cameras.length = 0;
          cameraXRNeedsUpdate = true;
        }
        for (let i2 = 0; i2 < views.length; i2++) {
          const view = views[i2];
          let viewport = null;
          if (glBaseLayer !== null) {
            viewport = glBaseLayer.getViewport(view);
          } else {
            const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
            viewport = glSubImage.viewport;
            if (i2 === 0) {
              renderer2.setRenderTargetTextures(
                newRenderTarget,
                glSubImage.colorTexture,
                glSubImage.depthStencilTexture
              );
              renderer2.setRenderTarget(newRenderTarget);
            }
          }
          let camera2 = cameras[i2];
          if (camera2 === void 0) {
            camera2 = new PerspectiveCamera();
            camera2.layers.enable(i2);
            camera2.viewport = new Vector4();
            cameras[i2] = camera2;
          }
          camera2.matrix.fromArray(view.transform.matrix);
          camera2.matrix.decompose(camera2.position, camera2.quaternion, camera2.scale);
          camera2.projectionMatrix.fromArray(view.projectionMatrix);
          camera2.projectionMatrixInverse.copy(camera2.projectionMatrix).invert();
          camera2.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
          if (i2 === 0) {
            cameraXR.matrix.copy(camera2.matrix);
            cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
          }
          if (cameraXRNeedsUpdate === true) {
            cameraXR.cameras.push(camera2);
          }
        }
        const enabledFeatures = session.enabledFeatures;
        const gpuDepthSensingEnabled = enabledFeatures && enabledFeatures.includes("depth-sensing") && session.depthUsage == "gpu-optimized";
        if (gpuDepthSensingEnabled && glBinding) {
          const depthData = glBinding.getDepthInformation(views[0]);
          if (depthData && depthData.isValid && depthData.texture) {
            depthSensing.init(renderer2, depthData, session.renderState);
          }
        }
      }
      for (let i2 = 0; i2 < controllers.length; i2++) {
        const inputSource = controllerInputSources[i2];
        const controller = controllers[i2];
        if (inputSource !== null && controller !== void 0) {
          controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
        }
      }
      if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
      if (frame.detectedPlanes) {
        scope.dispatchEvent({ type: "planesdetected", data: frame });
      }
      xrFrame = null;
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
    };
    this.dispose = function() {
    };
  }
}
const _e1 = /* @__PURE__ */ new Euler();
const _m1 = /* @__PURE__ */ new Matrix4();
function WebGLMaterials(renderer2, properties) {
  function refreshTransformUniform(map, uniform) {
    if (map.matrixAutoUpdate === true) {
      map.updateMatrix();
    }
    uniform.value.copy(map.matrix);
  }
  function refreshFogUniforms(uniforms, fog) {
    fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer2));
    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }
  function refreshMaterialUniforms(uniforms, material2, pixelRatio, height, transmissionRenderTarget) {
    if (material2.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material2);
    } else if (material2.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material2);
    } else if (material2.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material2);
      refreshUniformsToon(uniforms, material2);
    } else if (material2.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material2);
      refreshUniformsPhong(uniforms, material2);
    } else if (material2.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material2);
      refreshUniformsStandard(uniforms, material2);
      if (material2.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material2, transmissionRenderTarget);
      }
    } else if (material2.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material2);
      refreshUniformsMatcap(uniforms, material2);
    } else if (material2.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material2);
    } else if (material2.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material2);
      refreshUniformsDistance(uniforms, material2);
    } else if (material2.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material2);
    } else if (material2.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material2);
      if (material2.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material2);
      }
    } else if (material2.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material2, pixelRatio, height);
    } else if (material2.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material2);
    } else if (material2.isShadowMaterial) {
      uniforms.color.value.copy(material2.color);
      uniforms.opacity.value = material2.opacity;
    } else if (material2.isShaderMaterial) {
      material2.uniformsNeedUpdate = false;
    }
  }
  function refreshUniformsCommon(uniforms, material2) {
    uniforms.opacity.value = material2.opacity;
    if (material2.color) {
      uniforms.diffuse.value.copy(material2.color);
    }
    if (material2.emissive) {
      uniforms.emissive.value.copy(material2.emissive).multiplyScalar(material2.emissiveIntensity);
    }
    if (material2.map) {
      uniforms.map.value = material2.map;
      refreshTransformUniform(material2.map, uniforms.mapTransform);
    }
    if (material2.alphaMap) {
      uniforms.alphaMap.value = material2.alphaMap;
      refreshTransformUniform(material2.alphaMap, uniforms.alphaMapTransform);
    }
    if (material2.bumpMap) {
      uniforms.bumpMap.value = material2.bumpMap;
      refreshTransformUniform(material2.bumpMap, uniforms.bumpMapTransform);
      uniforms.bumpScale.value = material2.bumpScale;
      if (material2.side === BackSide) {
        uniforms.bumpScale.value *= -1;
      }
    }
    if (material2.normalMap) {
      uniforms.normalMap.value = material2.normalMap;
      refreshTransformUniform(material2.normalMap, uniforms.normalMapTransform);
      uniforms.normalScale.value.copy(material2.normalScale);
      if (material2.side === BackSide) {
        uniforms.normalScale.value.negate();
      }
    }
    if (material2.displacementMap) {
      uniforms.displacementMap.value = material2.displacementMap;
      refreshTransformUniform(material2.displacementMap, uniforms.displacementMapTransform);
      uniforms.displacementScale.value = material2.displacementScale;
      uniforms.displacementBias.value = material2.displacementBias;
    }
    if (material2.emissiveMap) {
      uniforms.emissiveMap.value = material2.emissiveMap;
      refreshTransformUniform(material2.emissiveMap, uniforms.emissiveMapTransform);
    }
    if (material2.specularMap) {
      uniforms.specularMap.value = material2.specularMap;
      refreshTransformUniform(material2.specularMap, uniforms.specularMapTransform);
    }
    if (material2.alphaTest > 0) {
      uniforms.alphaTest.value = material2.alphaTest;
    }
    const materialProperties = properties.get(material2);
    const envMap = materialProperties.envMap;
    const envMapRotation = materialProperties.envMapRotation;
    if (envMap) {
      uniforms.envMap.value = envMap;
      _e1.copy(envMapRotation);
      _e1.x *= -1;
      _e1.y *= -1;
      _e1.z *= -1;
      if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {
        _e1.y *= -1;
        _e1.z *= -1;
      }
      uniforms.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1));
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      uniforms.reflectivity.value = material2.reflectivity;
      uniforms.ior.value = material2.ior;
      uniforms.refractionRatio.value = material2.refractionRatio;
    }
    if (material2.lightMap) {
      uniforms.lightMap.value = material2.lightMap;
      uniforms.lightMapIntensity.value = material2.lightMapIntensity;
      refreshTransformUniform(material2.lightMap, uniforms.lightMapTransform);
    }
    if (material2.aoMap) {
      uniforms.aoMap.value = material2.aoMap;
      uniforms.aoMapIntensity.value = material2.aoMapIntensity;
      refreshTransformUniform(material2.aoMap, uniforms.aoMapTransform);
    }
  }
  function refreshUniformsLine(uniforms, material2) {
    uniforms.diffuse.value.copy(material2.color);
    uniforms.opacity.value = material2.opacity;
    if (material2.map) {
      uniforms.map.value = material2.map;
      refreshTransformUniform(material2.map, uniforms.mapTransform);
    }
  }
  function refreshUniformsDash(uniforms, material2) {
    uniforms.dashSize.value = material2.dashSize;
    uniforms.totalSize.value = material2.dashSize + material2.gapSize;
    uniforms.scale.value = material2.scale;
  }
  function refreshUniformsPoints(uniforms, material2, pixelRatio, height) {
    uniforms.diffuse.value.copy(material2.color);
    uniforms.opacity.value = material2.opacity;
    uniforms.size.value = material2.size * pixelRatio;
    uniforms.scale.value = height * 0.5;
    if (material2.map) {
      uniforms.map.value = material2.map;
      refreshTransformUniform(material2.map, uniforms.uvTransform);
    }
    if (material2.alphaMap) {
      uniforms.alphaMap.value = material2.alphaMap;
      refreshTransformUniform(material2.alphaMap, uniforms.alphaMapTransform);
    }
    if (material2.alphaTest > 0) {
      uniforms.alphaTest.value = material2.alphaTest;
    }
  }
  function refreshUniformsSprites(uniforms, material2) {
    uniforms.diffuse.value.copy(material2.color);
    uniforms.opacity.value = material2.opacity;
    uniforms.rotation.value = material2.rotation;
    if (material2.map) {
      uniforms.map.value = material2.map;
      refreshTransformUniform(material2.map, uniforms.mapTransform);
    }
    if (material2.alphaMap) {
      uniforms.alphaMap.value = material2.alphaMap;
      refreshTransformUniform(material2.alphaMap, uniforms.alphaMapTransform);
    }
    if (material2.alphaTest > 0) {
      uniforms.alphaTest.value = material2.alphaTest;
    }
  }
  function refreshUniformsPhong(uniforms, material2) {
    uniforms.specular.value.copy(material2.specular);
    uniforms.shininess.value = Math.max(material2.shininess, 1e-4);
  }
  function refreshUniformsToon(uniforms, material2) {
    if (material2.gradientMap) {
      uniforms.gradientMap.value = material2.gradientMap;
    }
  }
  function refreshUniformsStandard(uniforms, material2) {
    uniforms.metalness.value = material2.metalness;
    if (material2.metalnessMap) {
      uniforms.metalnessMap.value = material2.metalnessMap;
      refreshTransformUniform(material2.metalnessMap, uniforms.metalnessMapTransform);
    }
    uniforms.roughness.value = material2.roughness;
    if (material2.roughnessMap) {
      uniforms.roughnessMap.value = material2.roughnessMap;
      refreshTransformUniform(material2.roughnessMap, uniforms.roughnessMapTransform);
    }
    if (material2.envMap) {
      uniforms.envMapIntensity.value = material2.envMapIntensity;
    }
  }
  function refreshUniformsPhysical(uniforms, material2, transmissionRenderTarget) {
    uniforms.ior.value = material2.ior;
    if (material2.sheen > 0) {
      uniforms.sheenColor.value.copy(material2.sheenColor).multiplyScalar(material2.sheen);
      uniforms.sheenRoughness.value = material2.sheenRoughness;
      if (material2.sheenColorMap) {
        uniforms.sheenColorMap.value = material2.sheenColorMap;
        refreshTransformUniform(material2.sheenColorMap, uniforms.sheenColorMapTransform);
      }
      if (material2.sheenRoughnessMap) {
        uniforms.sheenRoughnessMap.value = material2.sheenRoughnessMap;
        refreshTransformUniform(material2.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
      }
    }
    if (material2.clearcoat > 0) {
      uniforms.clearcoat.value = material2.clearcoat;
      uniforms.clearcoatRoughness.value = material2.clearcoatRoughness;
      if (material2.clearcoatMap) {
        uniforms.clearcoatMap.value = material2.clearcoatMap;
        refreshTransformUniform(material2.clearcoatMap, uniforms.clearcoatMapTransform);
      }
      if (material2.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material2.clearcoatRoughnessMap;
        refreshTransformUniform(material2.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
      }
      if (material2.clearcoatNormalMap) {
        uniforms.clearcoatNormalMap.value = material2.clearcoatNormalMap;
        refreshTransformUniform(material2.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
        uniforms.clearcoatNormalScale.value.copy(material2.clearcoatNormalScale);
        if (material2.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
    }
    if (material2.dispersion > 0) {
      uniforms.dispersion.value = material2.dispersion;
    }
    if (material2.iridescence > 0) {
      uniforms.iridescence.value = material2.iridescence;
      uniforms.iridescenceIOR.value = material2.iridescenceIOR;
      uniforms.iridescenceThicknessMinimum.value = material2.iridescenceThicknessRange[0];
      uniforms.iridescenceThicknessMaximum.value = material2.iridescenceThicknessRange[1];
      if (material2.iridescenceMap) {
        uniforms.iridescenceMap.value = material2.iridescenceMap;
        refreshTransformUniform(material2.iridescenceMap, uniforms.iridescenceMapTransform);
      }
      if (material2.iridescenceThicknessMap) {
        uniforms.iridescenceThicknessMap.value = material2.iridescenceThicknessMap;
        refreshTransformUniform(material2.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
      }
    }
    if (material2.transmission > 0) {
      uniforms.transmission.value = material2.transmission;
      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
      if (material2.transmissionMap) {
        uniforms.transmissionMap.value = material2.transmissionMap;
        refreshTransformUniform(material2.transmissionMap, uniforms.transmissionMapTransform);
      }
      uniforms.thickness.value = material2.thickness;
      if (material2.thicknessMap) {
        uniforms.thicknessMap.value = material2.thicknessMap;
        refreshTransformUniform(material2.thicknessMap, uniforms.thicknessMapTransform);
      }
      uniforms.attenuationDistance.value = material2.attenuationDistance;
      uniforms.attenuationColor.value.copy(material2.attenuationColor);
    }
    if (material2.anisotropy > 0) {
      uniforms.anisotropyVector.value.set(material2.anisotropy * Math.cos(material2.anisotropyRotation), material2.anisotropy * Math.sin(material2.anisotropyRotation));
      if (material2.anisotropyMap) {
        uniforms.anisotropyMap.value = material2.anisotropyMap;
        refreshTransformUniform(material2.anisotropyMap, uniforms.anisotropyMapTransform);
      }
    }
    uniforms.specularIntensity.value = material2.specularIntensity;
    uniforms.specularColor.value.copy(material2.specularColor);
    if (material2.specularColorMap) {
      uniforms.specularColorMap.value = material2.specularColorMap;
      refreshTransformUniform(material2.specularColorMap, uniforms.specularColorMapTransform);
    }
    if (material2.specularIntensityMap) {
      uniforms.specularIntensityMap.value = material2.specularIntensityMap;
      refreshTransformUniform(material2.specularIntensityMap, uniforms.specularIntensityMapTransform);
    }
  }
  function refreshUniformsMatcap(uniforms, material2) {
    if (material2.matcap) {
      uniforms.matcap.value = material2.matcap;
    }
  }
  function refreshUniformsDistance(uniforms, material2) {
    const light = properties.get(material2).light;
    uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
    uniforms.nearDistance.value = light.shadow.camera.near;
    uniforms.farDistance.value = light.shadow.camera.far;
  }
  return {
    refreshFogUniforms,
    refreshMaterialUniforms
  };
}
function WebGLUniformsGroups(gl, info, capabilities, state) {
  let buffers = {};
  let updateList = {};
  let allocatedBindingPoints = [];
  const maxBindingPoints = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
  function bind(uniformsGroup, program) {
    const webglProgram = program.program;
    state.uniformBlockBinding(uniformsGroup, webglProgram);
  }
  function update2(uniformsGroup, program) {
    let buffer = buffers[uniformsGroup.id];
    if (buffer === void 0) {
      prepareUniformsGroup(uniformsGroup);
      buffer = createBuffer(uniformsGroup);
      buffers[uniformsGroup.id] = buffer;
      uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
    }
    const webglProgram = program.program;
    state.updateUBOMapping(uniformsGroup, webglProgram);
    const frame = info.render.frame;
    if (updateList[uniformsGroup.id] !== frame) {
      updateBufferData(uniformsGroup);
      updateList[uniformsGroup.id] = frame;
    }
  }
  function createBuffer(uniformsGroup) {
    const bindingPointIndex = allocateBindingPointIndex();
    uniformsGroup.__bindingPointIndex = bindingPointIndex;
    const buffer = gl.createBuffer();
    const size = uniformsGroup.__size;
    const usage = uniformsGroup.usage;
    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
    gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
    return buffer;
  }
  function allocateBindingPointIndex() {
    for (let i2 = 0; i2 < maxBindingPoints; i2++) {
      if (allocatedBindingPoints.indexOf(i2) === -1) {
        allocatedBindingPoints.push(i2);
        return i2;
      }
    }
    console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
    return 0;
  }
  function updateBufferData(uniformsGroup) {
    const buffer = buffers[uniformsGroup.id];
    const uniforms = uniformsGroup.uniforms;
    const cache = uniformsGroup.__cache;
    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
    for (let i2 = 0, il = uniforms.length; i2 < il; i2++) {
      const uniformArray = Array.isArray(uniforms[i2]) ? uniforms[i2] : [uniforms[i2]];
      for (let j = 0, jl = uniformArray.length; j < jl; j++) {
        const uniform = uniformArray[j];
        if (hasUniformChanged(uniform, i2, j, cache) === true) {
          const offset = uniform.__offset;
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          let arrayOffset = 0;
          for (let k = 0; k < values.length; k++) {
            const value = values[k];
            const info2 = getUniformSize(value);
            if (typeof value === "number" || typeof value === "boolean") {
              uniform.__data[0] = value;
              gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
            } else if (value.isMatrix3) {
              uniform.__data[0] = value.elements[0];
              uniform.__data[1] = value.elements[1];
              uniform.__data[2] = value.elements[2];
              uniform.__data[3] = 0;
              uniform.__data[4] = value.elements[3];
              uniform.__data[5] = value.elements[4];
              uniform.__data[6] = value.elements[5];
              uniform.__data[7] = 0;
              uniform.__data[8] = value.elements[6];
              uniform.__data[9] = value.elements[7];
              uniform.__data[10] = value.elements[8];
              uniform.__data[11] = 0;
            } else {
              value.toArray(uniform.__data, arrayOffset);
              arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
            }
          }
          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
        }
      }
    }
    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
  }
  function hasUniformChanged(uniform, index, indexArray, cache) {
    const value = uniform.value;
    const indexString = index + "_" + indexArray;
    if (cache[indexString] === void 0) {
      if (typeof value === "number" || typeof value === "boolean") {
        cache[indexString] = value;
      } else {
        cache[indexString] = value.clone();
      }
      return true;
    } else {
      const cachedObject = cache[indexString];
      if (typeof value === "number" || typeof value === "boolean") {
        if (cachedObject !== value) {
          cache[indexString] = value;
          return true;
        }
      } else {
        if (cachedObject.equals(value) === false) {
          cachedObject.copy(value);
          return true;
        }
      }
    }
    return false;
  }
  function prepareUniformsGroup(uniformsGroup) {
    const uniforms = uniformsGroup.uniforms;
    let offset = 0;
    const chunkSize = 16;
    for (let i2 = 0, l = uniforms.length; i2 < l; i2++) {
      const uniformArray = Array.isArray(uniforms[i2]) ? uniforms[i2] : [uniforms[i2]];
      for (let j = 0, jl = uniformArray.length; j < jl; j++) {
        const uniform = uniformArray[j];
        const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
        for (let k = 0, kl = values.length; k < kl; k++) {
          const value = values[k];
          const info2 = getUniformSize(value);
          const chunkOffset2 = offset % chunkSize;
          const chunkPadding = chunkOffset2 % info2.boundary;
          const chunkStart = chunkOffset2 + chunkPadding;
          offset += chunkPadding;
          if (chunkStart !== 0 && chunkSize - chunkStart < info2.storage) {
            offset += chunkSize - chunkStart;
          }
          uniform.__data = new Float32Array(info2.storage / Float32Array.BYTES_PER_ELEMENT);
          uniform.__offset = offset;
          offset += info2.storage;
        }
      }
    }
    const chunkOffset = offset % chunkSize;
    if (chunkOffset > 0) offset += chunkSize - chunkOffset;
    uniformsGroup.__size = offset;
    uniformsGroup.__cache = {};
    return this;
  }
  function getUniformSize(value) {
    const info2 = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    if (typeof value === "number" || typeof value === "boolean") {
      info2.boundary = 4;
      info2.storage = 4;
    } else if (value.isVector2) {
      info2.boundary = 8;
      info2.storage = 8;
    } else if (value.isVector3 || value.isColor) {
      info2.boundary = 16;
      info2.storage = 12;
    } else if (value.isVector4) {
      info2.boundary = 16;
      info2.storage = 16;
    } else if (value.isMatrix3) {
      info2.boundary = 48;
      info2.storage = 48;
    } else if (value.isMatrix4) {
      info2.boundary = 64;
      info2.storage = 64;
    } else if (value.isTexture) {
      console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
    } else {
      console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
    }
    return info2;
  }
  function onUniformsGroupsDispose(event) {
    const uniformsGroup = event.target;
    uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
    const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
    allocatedBindingPoints.splice(index, 1);
    gl.deleteBuffer(buffers[uniformsGroup.id]);
    delete buffers[uniformsGroup.id];
    delete updateList[uniformsGroup.id];
  }
  function dispose() {
    for (const id in buffers) {
      gl.deleteBuffer(buffers[id]);
    }
    allocatedBindingPoints = [];
    buffers = {};
    updateList = {};
  }
  return {
    bind,
    update: update2,
    dispose
  };
}
class WebGLRenderer {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
   */
  constructor(parameters = {}) {
    const {
      canvas = createCanvasElement(),
      context = null,
      depth = true,
      stencil = false,
      alpha = false,
      antialias = false,
      premultipliedAlpha = true,
      preserveDrawingBuffer = false,
      powerPreference = "default",
      failIfMajorPerformanceCaveat = false,
      reverseDepthBuffer = false
    } = parameters;
    this.isWebGLRenderer = true;
    let _alpha;
    if (context !== null) {
      if (typeof WebGLRenderingContext !== "undefined" && context instanceof WebGLRenderingContext) {
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      }
      _alpha = context.getContextAttributes().alpha;
    } else {
      _alpha = alpha;
    }
    const uintClearColor = new Uint32Array(4);
    const intClearColor = new Int32Array(4);
    let currentRenderList = null;
    let currentRenderState = null;
    const renderListStack = [];
    const renderStateStack = [];
    this.domElement = canvas;
    this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled.
       * @type {boolean}
       */
      checkShaderErrors: true,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    this.transmissionResolutionScale = 1;
    const _this = this;
    let _isContextLost = false;
    this._outputColorSpace = SRGBColorSpace;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    const _currentClearColor = new Color(0);
    let _currentClearAlpha = 0;
    let _width = canvas.width;
    let _height = canvas.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    const _currentProjectionMatrix = new Matrix4();
    const _projScreenMatrix2 = new Matrix4();
    const _vector32 = new Vector3();
    const _vector4 = new Vector4();
    const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    let _renderBackground = false;
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = context;
    function getContext(contextName, contextAttributes) {
      return canvas.getContext(contextName, contextAttributes);
    }
    try {
      const contextAttributes = {
        alpha: true,
        depth,
        stencil,
        antialias,
        premultipliedAlpha,
        preserveDrawingBuffer,
        powerPreference,
        failIfMajorPerformanceCaveat
      };
      if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${REVISION}`);
      canvas.addEventListener("webglcontextlost", onContextLost, false);
      canvas.addEventListener("webglcontextrestored", onContextRestore, false);
      canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
      if (_gl === null) {
        const contextName = "webgl2";
        _gl = getContext(contextName, contextAttributes);
        if (_gl === null) {
          if (getContext(contextName)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates, uniformsGroups;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      extensions.init();
      utils = new WebGLUtils(_gl, extensions);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);
      state = new WebGLState(_gl, extensions);
      if (capabilities.reverseDepthBuffer && reverseDepthBuffer) {
        state.buffers.depth.setReversed(true);
      }
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
      cubemaps = new WebGLCubeMaps(_this);
      cubeuvmaps = new WebGLCubeUVMaps(_this);
      attributes = new WebGLAttributes(_gl);
      bindingStates = new WebGLBindingStates(_gl, attributes);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
      clipping = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
      materials = new WebGLMaterials(_this, properties);
      renderLists = new WebGLRenderLists();
      renderStates = new WebGLRenderStates(extensions);
      background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
      shadowMap = new WebGLShadowMap(_this, objects, capabilities);
      uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.shadowMap = shadowMap;
      _this.state = state;
      _this.info = info;
    }
    initGLContext();
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0) return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle = true) {
      if (xr.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width;
      _height = height;
      canvas.width = Math.floor(width * _pixelRatio);
      canvas.height = Math.floor(height * _pixelRatio);
      if (updateStyle === true) {
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
      _width = width;
      _height = height;
      _pixelRatio = pixelRatio;
      canvas.width = Math.floor(width * pixelRatio);
      canvas.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
      if (x.isVector4) {
        _viewport.set(x.x, x.y, x.z, x.w);
      } else {
        _viewport.set(x, y, width, height);
      }
      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).round());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
      if (x.isVector4) {
        _scissor.set(x.x, x.y, x.z, x.w);
      } else {
        _scissor.set(x, y, width, height);
      }
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function(target) {
      return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
      background.setClearColor(...arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha(...arguments);
    };
    this.clear = function(color = true, depth2 = true, stencil2 = true) {
      let bits = 0;
      if (color) {
        let isIntegerFormat = false;
        if (_currentRenderTarget !== null) {
          const targetFormat = _currentRenderTarget.texture.format;
          isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
        }
        if (isIntegerFormat) {
          const targetType = _currentRenderTarget.texture.type;
          const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
          const clearColor = background.getClearColor();
          const a = background.getClearAlpha();
          const r = clearColor.r;
          const g = clearColor.g;
          const b = clearColor.b;
          if (isUnsignedType) {
            uintClearColor[0] = r;
            uintClearColor[1] = g;
            uintClearColor[2] = b;
            uintClearColor[3] = a;
            _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
          } else {
            intClearColor[0] = r;
            intClearColor[1] = g;
            intClearColor[2] = b;
            intClearColor[3] = a;
            _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
          }
        } else {
          bits |= _gl.COLOR_BUFFER_BIT;
        }
      }
      if (depth2) {
        bits |= _gl.DEPTH_BUFFER_BIT;
      }
      if (stencil2) {
        bits |= _gl.STENCIL_BUFFER_BIT;
        this.state.buffers.stencil.setMask(4294967295);
      }
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      canvas.removeEventListener("webglcontextlost", onContextLost, false);
      canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
      canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
      background.dispose();
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      cubeuvmaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      uniformsGroups.dispose();
      programCache.dispose();
      xr.dispose();
      xr.removeEventListener("sessionstart", onXRSessionStart);
      xr.removeEventListener("sessionend", onXRSessionEnd);
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      const infoAutoReset = info.autoReset;
      const shadowMapEnabled = shadowMap.enabled;
      const shadowMapAutoUpdate = shadowMap.autoUpdate;
      const shadowMapNeedsUpdate = shadowMap.needsUpdate;
      const shadowMapType = shadowMap.type;
      initGLContext();
      info.autoReset = infoAutoReset;
      shadowMap.enabled = shadowMapEnabled;
      shadowMap.autoUpdate = shadowMapAutoUpdate;
      shadowMap.needsUpdate = shadowMapNeedsUpdate;
      shadowMap.type = shadowMapType;
    }
    function onContextCreationError(event) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
    }
    function onMaterialDispose(event) {
      const material2 = event.target;
      material2.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material2);
    }
    function deallocateMaterial(material2) {
      releaseMaterialProgramReferences(material2);
      properties.remove(material2);
    }
    function releaseMaterialProgramReferences(material2) {
      const programs = properties.get(material2).programs;
      if (programs !== void 0) {
        programs.forEach(function(program) {
          programCache.releaseProgram(program);
        });
        if (material2.isShaderMaterial) {
          programCache.releaseShaderCache(material2);
        }
      }
    }
    this.renderBufferDirect = function(camera2, scene2, geometry2, material2, object, group) {
      if (scene2 === null) scene2 = _emptyScene;
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      const program = setProgram(camera2, scene2, geometry2, material2, object);
      state.setMaterial(material2, frontFaceCW);
      let index = geometry2.index;
      let rangeFactor = 1;
      if (material2.wireframe === true) {
        index = geometries.getWireframeAttribute(geometry2);
        if (index === void 0) return;
        rangeFactor = 2;
      }
      const drawRange = geometry2.drawRange;
      const position = geometry2.attributes.position;
      let drawStart = drawRange.start * rangeFactor;
      let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
      if (group !== null) {
        drawStart = Math.max(drawStart, group.start * rangeFactor);
        drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
      }
      if (index !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, index.count);
      } else if (position !== void 0 && position !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, position.count);
      }
      const drawCount = drawEnd - drawStart;
      if (drawCount < 0 || drawCount === Infinity) return;
      bindingStates.setup(object, material2, program, geometry2, index);
      let attribute;
      let renderer2 = bufferRenderer;
      if (index !== null) {
        attribute = attributes.get(index);
        renderer2 = indexedBufferRenderer;
        renderer2.setIndex(attribute);
      }
      if (object.isMesh) {
        if (material2.wireframe === true) {
          state.setLineWidth(material2.wireframeLinewidth * getTargetPixelRatio());
          renderer2.setMode(_gl.LINES);
        } else {
          renderer2.setMode(_gl.TRIANGLES);
        }
      } else if (object.isLine) {
        let lineWidth = material2.linewidth;
        if (lineWidth === void 0) lineWidth = 1;
        state.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object.isLineSegments) {
          renderer2.setMode(_gl.LINES);
        } else if (object.isLineLoop) {
          renderer2.setMode(_gl.LINE_LOOP);
        } else {
          renderer2.setMode(_gl.LINE_STRIP);
        }
      } else if (object.isPoints) {
        renderer2.setMode(_gl.POINTS);
      } else if (object.isSprite) {
        renderer2.setMode(_gl.TRIANGLES);
      }
      if (object.isBatchedMesh) {
        if (object._multiDrawInstances !== null) {
          warnOnce("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");
          renderer2.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
        } else {
          if (!extensions.get("WEBGL_multi_draw")) {
            const starts = object._multiDrawStarts;
            const counts = object._multiDrawCounts;
            const drawCount2 = object._multiDrawCount;
            const bytesPerElement = index ? attributes.get(index).bytesPerElement : 1;
            const uniforms = properties.get(material2).currentProgram.getUniforms();
            for (let i2 = 0; i2 < drawCount2; i2++) {
              uniforms.setValue(_gl, "_gl_DrawID", i2);
              renderer2.render(starts[i2] / bytesPerElement, counts[i2]);
            }
          } else {
            renderer2.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
          }
        }
      } else if (object.isInstancedMesh) {
        renderer2.renderInstances(drawStart, drawCount, object.count);
      } else if (geometry2.isInstancedBufferGeometry) {
        const maxInstanceCount = geometry2._maxInstanceCount !== void 0 ? geometry2._maxInstanceCount : Infinity;
        const instanceCount = Math.min(geometry2.instanceCount, maxInstanceCount);
        renderer2.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer2.render(drawStart, drawCount);
      }
    };
    function prepareMaterial(material2, scene2, object) {
      if (material2.transparent === true && material2.side === DoubleSide && material2.forceSinglePass === false) {
        material2.side = BackSide;
        material2.needsUpdate = true;
        getProgram(material2, scene2, object);
        material2.side = FrontSide;
        material2.needsUpdate = true;
        getProgram(material2, scene2, object);
        material2.side = DoubleSide;
      } else {
        getProgram(material2, scene2, object);
      }
    }
    this.compile = function(scene2, camera2, targetScene = null) {
      if (targetScene === null) targetScene = scene2;
      currentRenderState = renderStates.get(targetScene);
      currentRenderState.init(camera2);
      renderStateStack.push(currentRenderState);
      targetScene.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera2.layers)) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        }
      });
      if (scene2 !== targetScene) {
        scene2.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera2.layers)) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          }
        });
      }
      currentRenderState.setupLights();
      const materials2 = /* @__PURE__ */ new Set();
      scene2.traverse(function(object) {
        if (!(object.isMesh || object.isPoints || object.isLine || object.isSprite)) {
          return;
        }
        const material2 = object.material;
        if (material2) {
          if (Array.isArray(material2)) {
            for (let i2 = 0; i2 < material2.length; i2++) {
              const material22 = material2[i2];
              prepareMaterial(material22, targetScene, object);
              materials2.add(material22);
            }
          } else {
            prepareMaterial(material2, targetScene, object);
            materials2.add(material2);
          }
        }
      });
      currentRenderState = renderStateStack.pop();
      return materials2;
    };
    this.compileAsync = function(scene2, camera2, targetScene = null) {
      const materials2 = this.compile(scene2, camera2, targetScene);
      return new Promise((resolve) => {
        function checkMaterialsReady() {
          materials2.forEach(function(material2) {
            const materialProperties = properties.get(material2);
            const program = materialProperties.currentProgram;
            if (program.isReady()) {
              materials2.delete(material2);
            }
          });
          if (materials2.size === 0) {
            resolve(scene2);
            return;
          }
          setTimeout(checkMaterialsReady, 10);
        }
        if (extensions.get("KHR_parallel_shader_compile") !== null) {
          checkMaterialsReady();
        } else {
          setTimeout(checkMaterialsReady, 10);
        }
      });
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
      if (onAnimationFrameCallback) onAnimationFrameCallback(time);
    }
    function onXRSessionStart() {
      animation.stop();
    }
    function onXRSessionEnd() {
      animation.start();
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof self !== "undefined") animation.setContext(self);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener("sessionstart", onXRSessionStart);
    xr.addEventListener("sessionend", onXRSessionEnd);
    this.render = function(scene2, camera2) {
      if (camera2 !== void 0 && camera2.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true) return;
      if (scene2.matrixWorldAutoUpdate === true) scene2.updateMatrixWorld();
      if (camera2.parent === null && camera2.matrixWorldAutoUpdate === true) camera2.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera2);
        camera2 = xr.getCamera();
      }
      if (scene2.isScene === true) scene2.onBeforeRender(_this, scene2, camera2, _currentRenderTarget);
      currentRenderState = renderStates.get(scene2, renderStateStack.length);
      currentRenderState.init(camera2);
      renderStateStack.push(currentRenderState);
      _projScreenMatrix2.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
      _frustum.setFromProjectionMatrix(_projScreenMatrix2);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
      currentRenderList = renderLists.get(scene2, renderListStack.length);
      currentRenderList.init();
      renderListStack.push(currentRenderList);
      if (xr.enabled === true && xr.isPresenting === true) {
        const depthSensingMesh = _this.xr.getDepthSensingMesh();
        if (depthSensingMesh !== null) {
          projectObject(depthSensingMesh, camera2, -Infinity, _this.sortObjects);
        }
      }
      projectObject(scene2, camera2, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      _renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
      if (_renderBackground) {
        background.addToRenderList(currentRenderList, scene2);
      }
      this.info.render.frame++;
      if (_clippingEnabled === true) clipping.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene2, camera2);
      if (_clippingEnabled === true) clipping.endShadows();
      if (this.info.autoReset === true) this.info.reset();
      const opaqueObjects = currentRenderList.opaque;
      const transmissiveObjects = currentRenderList.transmissive;
      currentRenderState.setupLights();
      if (camera2.isArrayCamera) {
        const cameras = camera2.cameras;
        if (transmissiveObjects.length > 0) {
          for (let i2 = 0, l = cameras.length; i2 < l; i2++) {
            const camera22 = cameras[i2];
            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene2, camera22);
          }
        }
        if (_renderBackground) background.render(scene2);
        for (let i2 = 0, l = cameras.length; i2 < l; i2++) {
          const camera22 = cameras[i2];
          renderScene(currentRenderList, scene2, camera22, camera22.viewport);
        }
      } else {
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene2, camera2);
        if (_renderBackground) background.render(scene2);
        renderScene(currentRenderList, scene2, camera2);
      }
      if (_currentRenderTarget !== null && _currentActiveMipmapLevel === 0) {
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
        textures.updateRenderTargetMipmap(_currentRenderTarget);
      }
      if (scene2.isScene === true) scene2.onAfterRender(_this, scene2, camera2);
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      renderStateStack.pop();
      if (renderStateStack.length > 0) {
        currentRenderState = renderStateStack[renderStateStack.length - 1];
        if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);
      } else {
        currentRenderState = null;
      }
      renderListStack.pop();
      if (renderListStack.length > 0) {
        currentRenderList = renderListStack[renderListStack.length - 1];
      } else {
        currentRenderList = null;
      }
    };
    function projectObject(object, camera2, groupOrder, sortObjects) {
      if (object.visible === false) return;
      const visible = object.layers.test(camera2.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
        } else if (object.isLOD) {
          if (object.autoUpdate === true) object.update(camera2);
        } else if (object.isLight) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        } else if (object.isSprite) {
          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
            if (sortObjects) {
              _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            const geometry2 = objects.update(object);
            const material2 = object.material;
            if (material2.visible) {
              currentRenderList.push(object, geometry2, material2, groupOrder, _vector4.z, null);
            }
          }
        } else if (object.isMesh || object.isLine || object.isPoints) {
          if (!object.frustumCulled || _frustum.intersectsObject(object)) {
            const geometry2 = objects.update(object);
            const material2 = object.material;
            if (sortObjects) {
              if (object.boundingSphere !== void 0) {
                if (object.boundingSphere === null) object.computeBoundingSphere();
                _vector4.copy(object.boundingSphere.center);
              } else {
                if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
                _vector4.copy(geometry2.boundingSphere.center);
              }
              _vector4.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            if (Array.isArray(material2)) {
              const groups = geometry2.groups;
              for (let i2 = 0, l = groups.length; i2 < l; i2++) {
                const group = groups[i2];
                const groupMaterial = material2[group.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object, geometry2, groupMaterial, groupOrder, _vector4.z, group);
                }
              }
            } else if (material2.visible) {
              currentRenderList.push(object, geometry2, material2, groupOrder, _vector4.z, null);
            }
          }
        }
      }
      const children = object.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        projectObject(children[i2], camera2, groupOrder, sortObjects);
      }
    }
    function renderScene(currentRenderList2, scene2, camera2, viewport) {
      const opaqueObjects = currentRenderList2.opaque;
      const transmissiveObjects = currentRenderList2.transmissive;
      const transparentObjects = currentRenderList2.transparent;
      currentRenderState.setupLightsView(camera2);
      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera2);
      if (viewport) state.viewport(_currentViewport.copy(viewport));
      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene2, camera2);
      if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene2, camera2);
      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene2, camera2);
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      state.setPolygonOffset(false);
    }
    function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene2, camera2) {
      const overrideMaterial = scene2.isScene === true ? scene2.overrideMaterial : null;
      if (overrideMaterial !== null) {
        return;
      }
      if (currentRenderState.state.transmissionRenderTarget[camera2.id] === void 0) {
        currentRenderState.state.transmissionRenderTarget[camera2.id] = new WebGLRenderTarget(1, 1, {
          generateMipmaps: true,
          type: extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float") ? HalfFloatType : UnsignedByteType,
          minFilter: LinearMipmapLinearFilter,
          samples: 4,
          stencilBuffer: stencil,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false,
          colorSpace: ColorManagement.workingColorSpace
        });
      }
      const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera2.id];
      const activeViewport = camera2.viewport || _currentViewport;
      transmissionRenderTarget.setSize(activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale);
      const currentRenderTarget = _this.getRenderTarget();
      _this.setRenderTarget(transmissionRenderTarget);
      _this.getClearColor(_currentClearColor);
      _currentClearAlpha = _this.getClearAlpha();
      if (_currentClearAlpha < 1) _this.setClearColor(16777215, 0.5);
      _this.clear();
      if (_renderBackground) background.render(scene2);
      const currentToneMapping = _this.toneMapping;
      _this.toneMapping = NoToneMapping;
      const currentCameraViewport = camera2.viewport;
      if (camera2.viewport !== void 0) camera2.viewport = void 0;
      currentRenderState.setupLightsView(camera2);
      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera2);
      renderObjects(opaqueObjects, scene2, camera2);
      textures.updateMultisampleRenderTarget(transmissionRenderTarget);
      textures.updateRenderTargetMipmap(transmissionRenderTarget);
      if (extensions.has("WEBGL_multisampled_render_to_texture") === false) {
        let renderTargetNeedsUpdate = false;
        for (let i2 = 0, l = transmissiveObjects.length; i2 < l; i2++) {
          const renderItem = transmissiveObjects[i2];
          const object = renderItem.object;
          const geometry2 = renderItem.geometry;
          const material2 = renderItem.material;
          const group = renderItem.group;
          if (material2.side === DoubleSide && object.layers.test(camera2.layers)) {
            const currentSide = material2.side;
            material2.side = BackSide;
            material2.needsUpdate = true;
            renderObject(object, scene2, camera2, geometry2, material2, group);
            material2.side = currentSide;
            material2.needsUpdate = true;
            renderTargetNeedsUpdate = true;
          }
        }
        if (renderTargetNeedsUpdate === true) {
          textures.updateMultisampleRenderTarget(transmissionRenderTarget);
          textures.updateRenderTargetMipmap(transmissionRenderTarget);
        }
      }
      _this.setRenderTarget(currentRenderTarget);
      _this.setClearColor(_currentClearColor, _currentClearAlpha);
      if (currentCameraViewport !== void 0) camera2.viewport = currentCameraViewport;
      _this.toneMapping = currentToneMapping;
    }
    function renderObjects(renderList, scene2, camera2) {
      const overrideMaterial = scene2.isScene === true ? scene2.overrideMaterial : null;
      for (let i2 = 0, l = renderList.length; i2 < l; i2++) {
        const renderItem = renderList[i2];
        const object = renderItem.object;
        const geometry2 = renderItem.geometry;
        const group = renderItem.group;
        let material2 = renderItem.material;
        if (material2.allowOverride === true && overrideMaterial !== null) {
          material2 = overrideMaterial;
        }
        if (object.layers.test(camera2.layers)) {
          renderObject(object, scene2, camera2, geometry2, material2, group);
        }
      }
    }
    function renderObject(object, scene2, camera2, geometry2, material2, group) {
      object.onBeforeRender(_this, scene2, camera2, geometry2, material2, group);
      object.modelViewMatrix.multiplyMatrices(camera2.matrixWorldInverse, object.matrixWorld);
      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
      material2.onBeforeRender(_this, scene2, camera2, geometry2, object, group);
      if (material2.transparent === true && material2.side === DoubleSide && material2.forceSinglePass === false) {
        material2.side = BackSide;
        material2.needsUpdate = true;
        _this.renderBufferDirect(camera2, scene2, geometry2, material2, object, group);
        material2.side = FrontSide;
        material2.needsUpdate = true;
        _this.renderBufferDirect(camera2, scene2, geometry2, material2, object, group);
        material2.side = DoubleSide;
      } else {
        _this.renderBufferDirect(camera2, scene2, geometry2, material2, object, group);
      }
      object.onAfterRender(_this, scene2, camera2, geometry2, material2, group);
    }
    function getProgram(material2, scene2, object) {
      if (scene2.isScene !== true) scene2 = _emptyScene;
      const materialProperties = properties.get(material2);
      const lights = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights.state.version;
      const parameters2 = programCache.getParameters(material2, lights.state, shadowsArray, scene2, object);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let programs = materialProperties.programs;
      materialProperties.environment = material2.isMeshStandardMaterial ? scene2.environment : null;
      materialProperties.fog = scene2.fog;
      materialProperties.envMap = (material2.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material2.envMap || materialProperties.environment);
      materialProperties.envMapRotation = materialProperties.environment !== null && material2.envMap === null ? scene2.environmentRotation : material2.envMapRotation;
      if (programs === void 0) {
        material2.addEventListener("dispose", onMaterialDispose);
        programs = /* @__PURE__ */ new Map();
        materialProperties.programs = programs;
      }
      let program = programs.get(programCacheKey);
      if (program !== void 0) {
        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
          updateCommonMaterialProperties(material2, parameters2);
          return program;
        }
      } else {
        parameters2.uniforms = programCache.getUniforms(material2);
        material2.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        programs.set(programCacheKey, program);
        materialProperties.uniforms = parameters2.uniforms;
      }
      const uniforms = materialProperties.uniforms;
      if (!material2.isShaderMaterial && !material2.isRawShaderMaterial || material2.clipping === true) {
        uniforms.clippingPlanes = clipping.uniform;
      }
      updateCommonMaterialProperties(material2, parameters2);
      materialProperties.needsLights = materialNeedsLights(material2);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights.state.ambient;
        uniforms.lightProbe.value = lights.state.probe;
        uniforms.directionalLights.value = lights.state.directional;
        uniforms.directionalLightShadows.value = lights.state.directionalShadow;
        uniforms.spotLights.value = lights.state.spot;
        uniforms.spotLightShadows.value = lights.state.spotShadow;
        uniforms.rectAreaLights.value = lights.state.rectArea;
        uniforms.ltc_1.value = lights.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights.state.rectAreaLTC2;
        uniforms.pointLights.value = lights.state.point;
        uniforms.pointLightShadows.value = lights.state.pointShadow;
        uniforms.hemisphereLights.value = lights.state.hemi;
        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights.state.spotShadowMap;
        uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
        uniforms.spotLightMap.value = lights.state.spotLightMap;
        uniforms.pointShadowMap.value = lights.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
      }
      materialProperties.currentProgram = program;
      materialProperties.uniformsList = null;
      return program;
    }
    function getUniformList(materialProperties) {
      if (materialProperties.uniformsList === null) {
        const progUniforms = materialProperties.currentProgram.getUniforms();
        materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);
      }
      return materialProperties.uniformsList;
    }
    function updateCommonMaterialProperties(material2, parameters2) {
      const materialProperties = properties.get(material2);
      materialProperties.outputColorSpace = parameters2.outputColorSpace;
      materialProperties.batching = parameters2.batching;
      materialProperties.batchingColor = parameters2.batchingColor;
      materialProperties.instancing = parameters2.instancing;
      materialProperties.instancingColor = parameters2.instancingColor;
      materialProperties.instancingMorph = parameters2.instancingMorph;
      materialProperties.skinning = parameters2.skinning;
      materialProperties.morphTargets = parameters2.morphTargets;
      materialProperties.morphNormals = parameters2.morphNormals;
      materialProperties.morphColors = parameters2.morphColors;
      materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
      materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
      materialProperties.numIntersection = parameters2.numClipIntersection;
      materialProperties.vertexAlphas = parameters2.vertexAlphas;
      materialProperties.vertexTangents = parameters2.vertexTangents;
      materialProperties.toneMapping = parameters2.toneMapping;
    }
    function setProgram(camera2, scene2, geometry2, material2, object) {
      if (scene2.isScene !== true) scene2 = _emptyScene;
      textures.resetTextureUnits();
      const fog = scene2.fog;
      const environment = material2.isMeshStandardMaterial ? scene2.environment : null;
      const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
      const envMap = (material2.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material2.envMap || environment);
      const vertexAlphas = material2.vertexColors === true && !!geometry2.attributes.color && geometry2.attributes.color.itemSize === 4;
      const vertexTangents = !!geometry2.attributes.tangent && (!!material2.normalMap || material2.anisotropy > 0);
      const morphTargets = !!geometry2.morphAttributes.position;
      const morphNormals = !!geometry2.morphAttributes.normal;
      const morphColors = !!geometry2.morphAttributes.color;
      let toneMapping = NoToneMapping;
      if (material2.toneMapped) {
        if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
          toneMapping = _this.toneMapping;
        }
      }
      const morphAttribute = geometry2.morphAttributes.position || geometry2.morphAttributes.normal || geometry2.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      const materialProperties = properties.get(material2);
      const lights = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera2 !== _currentCamera) {
          const useCache = camera2 === _currentCamera && material2.id === _currentMaterialId;
          clipping.setState(material2, camera2, useCache);
        }
      }
      let needsProgramChange = false;
      if (material2.version === materialProperties.__version) {
        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
          needsProgramChange = true;
        } else if (materialProperties.outputColorSpace !== colorSpace) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batching === false) {
          needsProgramChange = true;
        } else if (!object.isBatchedMesh && materialProperties.batching === true) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancing === false) {
          needsProgramChange = true;
        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
          needsProgramChange = true;
        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
          needsProgramChange = true;
        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null) {
          needsProgramChange = true;
        } else if (materialProperties.envMap !== envMap) {
          needsProgramChange = true;
        } else if (material2.fog === true && materialProperties.fog !== fog) {
          needsProgramChange = true;
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
          needsProgramChange = true;
        } else if (materialProperties.vertexAlphas !== vertexAlphas) {
          needsProgramChange = true;
        } else if (materialProperties.vertexTangents !== vertexTangents) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargets !== morphTargets) {
          needsProgramChange = true;
        } else if (materialProperties.morphNormals !== morphNormals) {
          needsProgramChange = true;
        } else if (materialProperties.morphColors !== morphColors) {
          needsProgramChange = true;
        } else if (materialProperties.toneMapping !== toneMapping) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {
          needsProgramChange = true;
        }
      } else {
        needsProgramChange = true;
        materialProperties.__version = material2.version;
      }
      let program = materialProperties.currentProgram;
      if (needsProgramChange === true) {
        program = getProgram(material2, scene2, object);
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material2.id !== _currentMaterialId) {
        _currentMaterialId = material2.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera2) {
        const reverseDepthBuffer2 = state.buffers.depth.getReversed();
        if (reverseDepthBuffer2) {
          _currentProjectionMatrix.copy(camera2.projectionMatrix);
          toNormalizedProjectionMatrix(_currentProjectionMatrix);
          toReversedProjectionMatrix(_currentProjectionMatrix);
          p_uniforms.setValue(_gl, "projectionMatrix", _currentProjectionMatrix);
        } else {
          p_uniforms.setValue(_gl, "projectionMatrix", camera2.projectionMatrix);
        }
        p_uniforms.setValue(_gl, "viewMatrix", camera2.matrixWorldInverse);
        const uCamPos = p_uniforms.map.cameraPosition;
        if (uCamPos !== void 0) {
          uCamPos.setValue(_gl, _vector32.setFromMatrixPosition(camera2.matrixWorld));
        }
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(
            _gl,
            "logDepthBufFC",
            2 / (Math.log(camera2.far + 1) / Math.LN2)
          );
        }
        if (material2.isMeshPhongMaterial || material2.isMeshToonMaterial || material2.isMeshLambertMaterial || material2.isMeshBasicMaterial || material2.isMeshStandardMaterial || material2.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera2.isOrthographicCamera === true);
        }
        if (_currentCamera !== camera2) {
          _currentCamera = camera2;
          refreshMaterial = true;
          refreshLights = true;
        }
      }
      if (object.isSkinnedMesh) {
        p_uniforms.setOptional(_gl, object, "bindMatrix");
        p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
        const skeleton = object.skeleton;
        if (skeleton) {
          if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
          p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
        }
      }
      if (object.isBatchedMesh) {
        p_uniforms.setOptional(_gl, object, "batchingTexture");
        p_uniforms.setValue(_gl, "batchingTexture", object._matricesTexture, textures);
        p_uniforms.setOptional(_gl, object, "batchingIdTexture");
        p_uniforms.setValue(_gl, "batchingIdTexture", object._indirectTexture, textures);
        p_uniforms.setOptional(_gl, object, "batchingColorTexture");
        if (object._colorsTexture !== null) {
          p_uniforms.setValue(_gl, "batchingColorTexture", object._colorsTexture, textures);
        }
      }
      const morphAttributes = geometry2.morphAttributes;
      if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0) {
        morphtargets.update(object, geometry2, program);
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
        materialProperties.receiveShadow = object.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
      }
      if (material2.isMeshGouraudMaterial && material2.envMap !== null) {
        m_uniforms.envMap.value = envMap;
        m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      }
      if (material2.isMeshStandardMaterial && material2.envMap === null && scene2.environment !== null) {
        m_uniforms.envMapIntensity.value = scene2.environmentIntensity;
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog && material2.fog === true) {
          materials.refreshFogUniforms(m_uniforms, fog);
        }
        materials.refreshMaterialUniforms(m_uniforms, material2, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera2.id]);
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
      }
      if (material2.isShaderMaterial && material2.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
        material2.uniformsNeedUpdate = false;
      }
      if (material2.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
      if (material2.isShaderMaterial || material2.isRawShaderMaterial) {
        const groups = material2.uniformsGroups;
        for (let i2 = 0, l = groups.length; i2 < l; i2++) {
          const group = groups[i2];
          uniformsGroups.update(group, program);
          uniformsGroups.bind(group, program);
        }
      }
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material2) {
      return material2.isMeshLambertMaterial || material2.isMeshToonMaterial || material2.isMeshPhongMaterial || material2.isMeshStandardMaterial || material2.isShadowMaterial || material2.isShaderMaterial && material2.lights === true;
    }
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__autoAllocateDepthBuffer = renderTarget.resolveDepthBuffer === false;
      if (renderTargetProperties.__autoAllocateDepthBuffer === false) {
        renderTargetProperties.__useRenderToTexture = false;
      }
      properties.get(renderTarget.texture).__webglTexture = colorTexture;
      properties.get(renderTarget.depthTexture).__webglTexture = renderTargetProperties.__autoAllocateDepthBuffer ? void 0 : depthTexture;
      renderTargetProperties.__hasExternalTextures = true;
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
      renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
    };
    const _scratchFrameBuffer = _gl.createFramebuffer();
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      let useDefaultFramebuffer = true;
      let framebuffer = null;
      let isCube = false;
      let isRenderTarget3D = false;
      if (renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
          useDefaultFramebuffer = false;
        } else if (renderTargetProperties.__webglFramebuffer === void 0) {
          textures.setupRenderTarget(renderTarget);
        } else if (renderTargetProperties.__hasExternalTextures) {
          textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        } else if (renderTarget.depthBuffer) {
          const depthTexture = renderTarget.depthTexture;
          if (renderTargetProperties.__boundDepthTexture !== depthTexture) {
            if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            }
            textures.setupDepthRenderbuffer(renderTarget);
          }
        }
        const texture = renderTarget.texture;
        if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
          isRenderTarget3D = true;
        }
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
            framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer[activeCubeFace];
          }
          isCube = true;
        } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          if (Array.isArray(__webglFramebuffer)) {
            framebuffer = __webglFramebuffer[activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer;
          }
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      if (activeMipmapLevel !== 0) {
        framebuffer = _scratchFrameBuffer;
      }
      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (framebufferBound && useDefaultFramebuffer) {
        state.drawBuffers(renderTarget, framebuffer);
      }
      state.viewport(_currentViewport);
      state.scissor(_currentScissor);
      state.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      } else if (isRenderTarget3D) {
        const textureProperties = properties.get(renderTarget.texture);
        const layer = activeCubeFace;
        _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer);
      } else if (renderTarget !== null && activeMipmapLevel !== 0) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel);
      }
      _currentMaterialId = -1;
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        try {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
          }
        } finally {
          const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
        }
      }
    };
    this.readRenderTargetPixelsAsync = async function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          }
          const glBuffer = _gl.createBuffer();
          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
          _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ);
          _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);
          const currFramebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, currFramebuffer);
          const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
          _gl.flush();
          await probeAsync(_gl, sync, 4);
          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
          _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer);
          _gl.deleteBuffer(glBuffer);
          _gl.deleteSync(sync);
          return buffer;
        } else {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
        }
      }
    };
    this.copyFramebufferToTexture = function(texture, position = null, level = 0) {
      const levelScale = Math.pow(2, -level);
      const width = Math.floor(texture.image.width * levelScale);
      const height = Math.floor(texture.image.height * levelScale);
      const x = position !== null ? position.x : 0;
      const y = position !== null ? position.y : 0;
      textures.setTexture2D(texture, 0);
      _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x, y, width, height);
      state.unbindTexture();
    };
    const _srcFramebuffer = _gl.createFramebuffer();
    const _dstFramebuffer = _gl.createFramebuffer();
    this.copyTextureToTexture = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = null) {
      if (dstLevel === null) {
        if (srcLevel !== 0) {
          warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");
          dstLevel = srcLevel;
          srcLevel = 0;
        } else {
          dstLevel = 0;
        }
      }
      let width, height, depth2, minX, minY, minZ;
      let dstX, dstY, dstZ;
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        depth2 = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
        minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;
      } else {
        const levelScale = Math.pow(2, -srcLevel);
        width = Math.floor(image.width * levelScale);
        height = Math.floor(image.height * levelScale);
        if (srcTexture.isDataArrayTexture) {
          depth2 = image.depth;
        } else if (srcTexture.isData3DTexture) {
          depth2 = Math.floor(image.depth * levelScale);
        } else {
          depth2 = 1;
        }
        minX = 0;
        minY = 0;
        minZ = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
        dstZ = dstPosition.z;
      } else {
        dstX = 0;
        dstY = 0;
        dstZ = 0;
      }
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      let glTarget;
      if (dstTexture.isData3DTexture) {
        textures.setTexture3D(dstTexture, 0);
        glTarget = _gl.TEXTURE_3D;
      } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {
        textures.setTexture2DArray(dstTexture, 0);
        glTarget = _gl.TEXTURE_2D_ARRAY;
      } else {
        textures.setTexture2D(dstTexture, 0);
        glTarget = _gl.TEXTURE_2D;
      }
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);
      const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;
      const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;
      if (srcTexture.isDepthTexture) {
        const srcTextureProperties = properties.get(srcTexture);
        const dstTextureProperties = properties.get(dstTexture);
        const srcRenderTargetProperties = properties.get(srcTextureProperties.__renderTarget);
        const dstRenderTargetProperties = properties.get(dstTextureProperties.__renderTarget);
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer);
        for (let i2 = 0; i2 < depth2; i2++) {
          if (isSrc3D) {
            _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(srcTexture).__webglTexture, srcLevel, minZ + i2);
            _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(dstTexture).__webglTexture, dstLevel, dstZ + i2);
          }
          _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST);
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
      } else if (srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has(srcTexture)) {
        const srcTextureProperties = properties.get(srcTexture);
        const dstTextureProperties = properties.get(dstTexture);
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, _srcFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, _dstFramebuffer);
        for (let i2 = 0; i2 < depth2; i2++) {
          if (isSrc3D) {
            _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i2);
          } else {
            _gl.framebufferTexture2D(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel);
          }
          if (isDst3D) {
            _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i2);
          } else {
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel);
          }
          if (srcLevel !== 0) {
            _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST);
          } else if (isDst3D) {
            _gl.copyTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ + i2, minX, minY, width, height);
          } else {
            _gl.copyTexSubImage2D(glTarget, dstLevel, dstX, dstY, minX, minY, width, height);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
      } else {
        if (isDst3D) {
          if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
            _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image.data);
          } else if (dstTexture.isCompressedArrayTexture) {
            _gl.compressedTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, image.data);
          } else {
            _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image);
          }
        } else {
          if (srcTexture.isDataTexture) {
            _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);
          } else if (srcTexture.isCompressedTexture) {
            _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);
          } else {
            _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image);
          }
        }
      }
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (dstLevel === 0 && dstTexture.generateMipmaps) {
        _gl.generateMipmap(glTarget);
      }
      state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
      warnOnce('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');
      return this.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);
    };
    this.initRenderTarget = function(target) {
      if (properties.get(target).__webglFramebuffer === void 0) {
        textures.setupRenderTarget(target);
      }
    };
    this.initTexture = function(texture) {
      if (texture.isCubeTexture) {
        textures.setTextureCube(texture, 0);
      } else if (texture.isData3DTexture) {
        textures.setTexture3D(texture, 0);
      } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
        textures.setTexture2DArray(texture, 0);
      } else {
        textures.setTexture2D(texture, 0);
      }
      state.unbindTexture();
    };
    this.resetState = function() {
      _currentActiveCubeFace = 0;
      _currentActiveMipmapLevel = 0;
      _currentRenderTarget = null;
      state.reset();
      bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  /**
   * Defines the coordinate system of the renderer.
   *
   * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
   *
   * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
   * @default WebGLCoordinateSystem
   * @readonly
   */
  get coordinateSystem() {
    return WebGLCoordinateSystem;
  }
  /**
   * Defines the output color space of the renderer.
   *
   * @type {SRGBColorSpace|LinearSRGBColorSpace}
   * @default SRGBColorSpace
   */
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(colorSpace) {
    this._outputColorSpace = colorSpace;
    const gl = this.getContext();
    gl.drawingBufferColorSpace = ColorManagement._getDrawingBufferColorSpace(colorSpace);
    gl.unpackColorSpace = ColorManagement._getUnpackColorSpace();
  }
}
const _raycaster = new Raycaster();
const _tempVector = new Vector3();
const _tempVector2 = new Vector3();
const _tempQuaternion = new Quaternion();
const _unit = {
  X: new Vector3(1, 0, 0),
  Y: new Vector3(0, 1, 0),
  Z: new Vector3(0, 0, 1)
};
const _changeEvent = { type: "change" };
const _mouseDownEvent = { type: "mouseDown", mode: null };
const _mouseUpEvent = { type: "mouseUp", mode: null };
const _objectChangeEvent = { type: "objectChange" };
class TransformControls extends Controls {
  /**
   * Constructs a new controls instance.
   *
   * @param {Camera} camera - The camera of the rendered scene.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(camera2, domElement = null) {
    super(void 0, domElement);
    const root = new TransformControlsRoot(this);
    this._root = root;
    const gizmo = new TransformControlsGizmo();
    this._gizmo = gizmo;
    root.add(gizmo);
    const plane = new TransformControlsPlane();
    this._plane = plane;
    root.add(plane);
    const scope = this;
    function defineProperty(propName, defaultValue) {
      let propValue = defaultValue;
      Object.defineProperty(scope, propName, {
        get: function() {
          return propValue !== void 0 ? propValue : defaultValue;
        },
        set: function(value) {
          if (propValue !== value) {
            propValue = value;
            plane[propName] = value;
            gizmo[propName] = value;
            scope.dispatchEvent({ type: propName + "-changed", value });
            scope.dispatchEvent(_changeEvent);
          }
        }
      });
      scope[propName] = defaultValue;
      plane[propName] = defaultValue;
      gizmo[propName] = defaultValue;
    }
    defineProperty("camera", camera2);
    defineProperty("object", void 0);
    defineProperty("enabled", true);
    defineProperty("axis", null);
    defineProperty("mode", "translate");
    defineProperty("translationSnap", null);
    defineProperty("rotationSnap", null);
    defineProperty("scaleSnap", null);
    defineProperty("space", "world");
    defineProperty("size", 1);
    defineProperty("dragging", false);
    defineProperty("showX", true);
    defineProperty("showY", true);
    defineProperty("showZ", true);
    defineProperty("minX", -Infinity);
    defineProperty("maxX", Infinity);
    defineProperty("minY", -Infinity);
    defineProperty("maxY", Infinity);
    defineProperty("minZ", -Infinity);
    defineProperty("maxZ", Infinity);
    const worldPosition = new Vector3();
    const worldPositionStart = new Vector3();
    const worldQuaternion = new Quaternion();
    const worldQuaternionStart = new Quaternion();
    const cameraPosition = new Vector3();
    const cameraQuaternion = new Quaternion();
    const pointStart = new Vector3();
    const pointEnd = new Vector3();
    const rotationAxis = new Vector3();
    const rotationAngle = 0;
    const eye = new Vector3();
    defineProperty("worldPosition", worldPosition);
    defineProperty("worldPositionStart", worldPositionStart);
    defineProperty("worldQuaternion", worldQuaternion);
    defineProperty("worldQuaternionStart", worldQuaternionStart);
    defineProperty("cameraPosition", cameraPosition);
    defineProperty("cameraQuaternion", cameraQuaternion);
    defineProperty("pointStart", pointStart);
    defineProperty("pointEnd", pointEnd);
    defineProperty("rotationAxis", rotationAxis);
    defineProperty("rotationAngle", rotationAngle);
    defineProperty("eye", eye);
    this._offset = new Vector3();
    this._startNorm = new Vector3();
    this._endNorm = new Vector3();
    this._cameraScale = new Vector3();
    this._parentPosition = new Vector3();
    this._parentQuaternion = new Quaternion();
    this._parentQuaternionInv = new Quaternion();
    this._parentScale = new Vector3();
    this._worldScaleStart = new Vector3();
    this._worldQuaternionInv = new Quaternion();
    this._worldScale = new Vector3();
    this._positionStart = new Vector3();
    this._quaternionStart = new Quaternion();
    this._scaleStart = new Vector3();
    this._getPointer = getPointer.bind(this);
    this._onPointerDown = onPointerDown.bind(this);
    this._onPointerHover = onPointerHover.bind(this);
    this._onPointerMove = onPointerMove.bind(this);
    this._onPointerUp = onPointerUp.bind(this);
    if (domElement !== null) {
      this.connect(domElement);
    }
  }
  connect(element) {
    super.connect(element);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointermove", this._onPointerHover);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerHover);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.style.touchAction = "auto";
  }
  /**
   * Returns the visual representation of the controls. Add the helper to your scene to
   * visually transform the attached  3D object.
   *
   * @return {TransformControlsRoot} The helper.
   */
  getHelper() {
    return this._root;
  }
  pointerHover(pointer) {
    if (this.object === void 0 || this.dragging === true) return;
    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);
    const intersect2 = intersectObjectWithRay(this._gizmo.picker[this.mode], _raycaster);
    if (intersect2) {
      this.axis = intersect2.object.name;
    } else {
      this.axis = null;
    }
  }
  pointerDown(pointer) {
    if (this.object === void 0 || this.dragging === true || pointer != null && pointer.button !== 0) return;
    if (this.axis !== null) {
      if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);
      const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);
      if (planeIntersect) {
        this.object.updateMatrixWorld();
        this.object.parent.updateMatrixWorld();
        this._positionStart.copy(this.object.position);
        this._quaternionStart.copy(this.object.quaternion);
        this._scaleStart.copy(this.object.scale);
        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart);
        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);
      }
      this.dragging = true;
      _mouseDownEvent.mode = this.mode;
      this.dispatchEvent(_mouseDownEvent);
    }
  }
  pointerMove(pointer) {
    const axis = this.axis;
    const mode = this.mode;
    const object = this.object;
    let space = this.space;
    if (mode === "scale") {
      space = "local";
    } else if (axis === "E" || axis === "XYZE" || axis === "XYZ") {
      space = "world";
    }
    if (object === void 0 || axis === null || this.dragging === false || pointer !== null && pointer.button !== -1) return;
    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);
    const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);
    if (!planeIntersect) return;
    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);
    if (mode === "translate") {
      this._offset.copy(this.pointEnd).sub(this.pointStart);
      if (space === "local" && axis !== "XYZ") {
        this._offset.applyQuaternion(this._worldQuaternionInv);
      }
      if (axis.indexOf("X") === -1) this._offset.x = 0;
      if (axis.indexOf("Y") === -1) this._offset.y = 0;
      if (axis.indexOf("Z") === -1) this._offset.z = 0;
      if (space === "local" && axis !== "XYZ") {
        this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale);
      } else {
        this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale);
      }
      object.position.copy(this._offset).add(this._positionStart);
      if (this.translationSnap) {
        if (space === "local") {
          object.position.applyQuaternion(_tempQuaternion.copy(this._quaternionStart).invert());
          if (axis.search("X") !== -1) {
            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;
          }
          if (axis.search("Y") !== -1) {
            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;
          }
          if (axis.search("Z") !== -1) {
            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;
          }
          object.position.applyQuaternion(this._quaternionStart);
        }
        if (space === "world") {
          if (object.parent) {
            object.position.add(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));
          }
          if (axis.search("X") !== -1) {
            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;
          }
          if (axis.search("Y") !== -1) {
            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;
          }
          if (axis.search("Z") !== -1) {
            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;
          }
          if (object.parent) {
            object.position.sub(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));
          }
        }
      }
      object.position.x = Math.max(this.minX, Math.min(this.maxX, object.position.x));
      object.position.y = Math.max(this.minY, Math.min(this.maxY, object.position.y));
      object.position.z = Math.max(this.minZ, Math.min(this.maxZ, object.position.z));
    } else if (mode === "scale") {
      if (axis.search("XYZ") !== -1) {
        let d = this.pointEnd.length() / this.pointStart.length();
        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1;
        _tempVector2.set(d, d, d);
      } else {
        _tempVector.copy(this.pointStart);
        _tempVector2.copy(this.pointEnd);
        _tempVector.applyQuaternion(this._worldQuaternionInv);
        _tempVector2.applyQuaternion(this._worldQuaternionInv);
        _tempVector2.divide(_tempVector);
        if (axis.search("X") === -1) {
          _tempVector2.x = 1;
        }
        if (axis.search("Y") === -1) {
          _tempVector2.y = 1;
        }
        if (axis.search("Z") === -1) {
          _tempVector2.z = 1;
        }
      }
      object.scale.copy(this._scaleStart).multiply(_tempVector2);
      if (this.scaleSnap) {
        if (axis.search("X") !== -1) {
          object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap;
        }
        if (axis.search("Y") !== -1) {
          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap;
        }
        if (axis.search("Z") !== -1) {
          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap;
        }
      }
    } else if (mode === "rotate") {
      this._offset.copy(this.pointEnd).sub(this.pointStart);
      const ROTATION_SPEED = 20 / this.worldPosition.distanceTo(_tempVector.setFromMatrixPosition(this.camera.matrixWorld));
      let _inPlaneRotation = false;
      if (axis === "XYZE") {
        this.rotationAxis.copy(this._offset).cross(this.eye).normalize();
        this.rotationAngle = this._offset.dot(_tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;
      } else if (axis === "X" || axis === "Y" || axis === "Z") {
        this.rotationAxis.copy(_unit[axis]);
        _tempVector.copy(_unit[axis]);
        if (space === "local") {
          _tempVector.applyQuaternion(this.worldQuaternion);
        }
        _tempVector.cross(this.eye);
        if (_tempVector.length() === 0) {
          _inPlaneRotation = true;
        } else {
          this.rotationAngle = this._offset.dot(_tempVector.normalize()) * ROTATION_SPEED;
        }
      }
      if (axis === "E" || _inPlaneRotation) {
        this.rotationAxis.copy(this.eye);
        this.rotationAngle = this.pointEnd.angleTo(this.pointStart);
        this._startNorm.copy(this.pointStart).normalize();
        this._endNorm.copy(this.pointEnd).normalize();
        this.rotationAngle *= this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1;
      }
      if (this.rotationSnap) this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap;
      if (space === "local" && axis !== "E" && axis !== "XYZE") {
        object.quaternion.copy(this._quaternionStart);
        object.quaternion.multiply(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle)).normalize();
      } else {
        this.rotationAxis.applyQuaternion(this._parentQuaternionInv);
        object.quaternion.copy(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));
        object.quaternion.multiply(this._quaternionStart).normalize();
      }
    }
    this.dispatchEvent(_changeEvent);
    this.dispatchEvent(_objectChangeEvent);
  }
  pointerUp(pointer) {
    if (pointer !== null && pointer.button !== 0) return;
    if (this.dragging && this.axis !== null) {
      _mouseUpEvent.mode = this.mode;
      this.dispatchEvent(_mouseUpEvent);
    }
    this.dragging = false;
    this.axis = null;
  }
  dispose() {
    this.disconnect();
    this._root.dispose();
  }
  /**
   * Sets the 3D object that should be transformed and ensures the controls UI is visible.
   *
   * @param {Object3D} object -  The 3D object that should be transformed.
   * @return {TransformControls} A reference to this controls.
   */
  attach(object) {
    this.object = object;
    this._root.visible = true;
    return this;
  }
  /**
   * Removes the current 3D object from the controls and makes the helper UI invisible.
   *
   * @return {TransformControls} A reference to this controls.
   */
  detach() {
    this.object = void 0;
    this.axis = null;
    this._root.visible = false;
    return this;
  }
  /**
   * Resets the object's position, rotation and scale to when the current transform began.
   */
  reset() {
    if (!this.enabled) return;
    if (this.dragging) {
      this.object.position.copy(this._positionStart);
      this.object.quaternion.copy(this._quaternionStart);
      this.object.scale.copy(this._scaleStart);
      this.dispatchEvent(_changeEvent);
      this.dispatchEvent(_objectChangeEvent);
      this.pointStart.copy(this.pointEnd);
    }
  }
  /**
   * Returns the raycaster that is used for user interaction. This object is shared between all
   * instances of `TransformControls`.
   *
   * @returns {Raycaster} The internal raycaster.
   */
  getRaycaster() {
    return _raycaster;
  }
  /**
   * Returns the transformation mode.
   *
   * @returns {'translate'|'rotate'|'scale'} The transformation mode.
   */
  getMode() {
    return this.mode;
  }
  /**
   * Sets the given transformation mode.
   *
   * @param {'translate'|'rotate'|'scale'} mode - The transformation mode to set.
   */
  setMode(mode) {
    this.mode = mode;
  }
  /**
   * Sets the translation snap.
   *
   * @param {?number} translationSnap - The translation snap to set.
   */
  setTranslationSnap(translationSnap) {
    this.translationSnap = translationSnap;
  }
  /**
   * Sets the rotation snap.
   *
   * @param {?number} rotationSnap - The rotation snap to set.
   */
  setRotationSnap(rotationSnap) {
    this.rotationSnap = rotationSnap;
  }
  /**
   * Sets the scale snap.
   *
   * @param {?number} scaleSnap - The scale snap to set.
   */
  setScaleSnap(scaleSnap) {
    this.scaleSnap = scaleSnap;
  }
  /**
   * Sets the size of the helper UI.
   *
   * @param {number} size - The size to set.
   */
  setSize(size) {
    this.size = size;
  }
  /**
   * Sets the coordinate space in which transformations are applied.
   *
   * @param {'world'|'local'} space - The space to set.
   */
  setSpace(space) {
    this.space = space;
  }
}
function getPointer(event) {
  if (this.domElement.ownerDocument.pointerLockElement) {
    return {
      x: 0,
      y: 0,
      button: event.button
    };
  } else {
    const rect = this.domElement.getBoundingClientRect();
    return {
      x: (event.clientX - rect.left) / rect.width * 2 - 1,
      y: -(event.clientY - rect.top) / rect.height * 2 + 1,
      button: event.button
    };
  }
}
function onPointerHover(event) {
  if (!this.enabled) return;
  switch (event.pointerType) {
    case "mouse":
    case "pen":
      this.pointerHover(this._getPointer(event));
      break;
  }
}
function onPointerDown(event) {
  if (!this.enabled) return;
  if (!document.pointerLockElement) {
    this.domElement.setPointerCapture(event.pointerId);
  }
  this.domElement.addEventListener("pointermove", this._onPointerMove);
  this.pointerHover(this._getPointer(event));
  this.pointerDown(this._getPointer(event));
}
function onPointerMove(event) {
  if (!this.enabled) return;
  this.pointerMove(this._getPointer(event));
}
function onPointerUp(event) {
  if (!this.enabled) return;
  this.domElement.releasePointerCapture(event.pointerId);
  this.domElement.removeEventListener("pointermove", this._onPointerMove);
  this.pointerUp(this._getPointer(event));
}
function intersectObjectWithRay(object, raycaster, includeInvisible) {
  const allIntersections = raycaster.intersectObject(object, true);
  for (let i2 = 0; i2 < allIntersections.length; i2++) {
    if (allIntersections[i2].object.visible || includeInvisible) {
      return allIntersections[i2];
    }
  }
  return false;
}
const _tempEuler = new Euler();
const _alignVector = new Vector3(0, 1, 0);
const _zeroVector = new Vector3(0, 0, 0);
const _lookAtMatrix = new Matrix4();
const _tempQuaternion2 = new Quaternion();
const _identityQuaternion = new Quaternion();
const _dirVector = new Vector3();
const _tempMatrix = new Matrix4();
const _unitX = new Vector3(1, 0, 0);
const _unitY = new Vector3(0, 1, 0);
const _unitZ = new Vector3(0, 0, 1);
const _v1 = new Vector3();
const _v2 = new Vector3();
const _v3 = new Vector3();
class TransformControlsRoot extends Object3D {
  constructor(controls) {
    super();
    this.isTransformControlsRoot = true;
    this.controls = controls;
    this.visible = false;
  }
  // updateMatrixWorld updates key transformation variables
  updateMatrixWorld(force) {
    const controls = this.controls;
    if (controls.object !== void 0) {
      controls.object.updateMatrixWorld();
      if (controls.object.parent === null) {
        console.error("TransformControls: The attached 3D object must be a part of the scene graph.");
      } else {
        controls.object.parent.matrixWorld.decompose(controls._parentPosition, controls._parentQuaternion, controls._parentScale);
      }
      controls.object.matrixWorld.decompose(controls.worldPosition, controls.worldQuaternion, controls._worldScale);
      controls._parentQuaternionInv.copy(controls._parentQuaternion).invert();
      controls._worldQuaternionInv.copy(controls.worldQuaternion).invert();
    }
    controls.camera.updateMatrixWorld();
    controls.camera.matrixWorld.decompose(controls.cameraPosition, controls.cameraQuaternion, controls._cameraScale);
    if (controls.camera.isOrthographicCamera) {
      controls.camera.getWorldDirection(controls.eye).negate();
    } else {
      controls.eye.copy(controls.cameraPosition).sub(controls.worldPosition).normalize();
    }
    super.updateMatrixWorld(force);
  }
  dispose() {
    this.traverse(function(child) {
      if (child.geometry) child.geometry.dispose();
      if (child.material) child.material.dispose();
    });
  }
}
class TransformControlsGizmo extends Object3D {
  constructor() {
    super();
    this.isTransformControlsGizmo = true;
    this.type = "TransformControlsGizmo";
    const gizmoMaterial = new MeshBasicMaterial({
      depthTest: false,
      depthWrite: false,
      fog: false,
      toneMapped: false,
      transparent: true
    });
    const gizmoLineMaterial = new LineBasicMaterial({
      depthTest: false,
      depthWrite: false,
      fog: false,
      toneMapped: false,
      transparent: true
    });
    const matInvisible = gizmoMaterial.clone();
    matInvisible.opacity = 0.15;
    const matHelper = gizmoLineMaterial.clone();
    matHelper.opacity = 0.5;
    const matRed = gizmoMaterial.clone();
    matRed.color.setHex(16711680);
    const matGreen = gizmoMaterial.clone();
    matGreen.color.setHex(65280);
    const matBlue = gizmoMaterial.clone();
    matBlue.color.setHex(255);
    const matRedTransparent = gizmoMaterial.clone();
    matRedTransparent.color.setHex(16711680);
    matRedTransparent.opacity = 0.5;
    const matGreenTransparent = gizmoMaterial.clone();
    matGreenTransparent.color.setHex(65280);
    matGreenTransparent.opacity = 0.5;
    const matBlueTransparent = gizmoMaterial.clone();
    matBlueTransparent.color.setHex(255);
    matBlueTransparent.opacity = 0.5;
    const matWhiteTransparent = gizmoMaterial.clone();
    matWhiteTransparent.opacity = 0.25;
    const matYellowTransparent = gizmoMaterial.clone();
    matYellowTransparent.color.setHex(16776960);
    matYellowTransparent.opacity = 0.25;
    const matYellow = gizmoMaterial.clone();
    matYellow.color.setHex(16776960);
    const matGray = gizmoMaterial.clone();
    matGray.color.setHex(7895160);
    const arrowGeometry = new CylinderGeometry(0, 0.04, 0.1, 12);
    arrowGeometry.translate(0, 0.05, 0);
    const scaleHandleGeometry = new BoxGeometry(0.08, 0.08, 0.08);
    scaleHandleGeometry.translate(0, 0.04, 0);
    const lineGeometry = new BufferGeometry();
    lineGeometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));
    const lineGeometry2 = new CylinderGeometry(75e-4, 75e-4, 0.5, 3);
    lineGeometry2.translate(0, 0.25, 0);
    function CircleGeometry(radius, arc) {
      const geometry2 = new TorusGeometry(radius, 75e-4, 3, 64, arc * Math.PI * 2);
      geometry2.rotateY(Math.PI / 2);
      geometry2.rotateX(Math.PI / 2);
      return geometry2;
    }
    function TranslateHelperGeometry() {
      const geometry2 = new BufferGeometry();
      geometry2.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));
      return geometry2;
    }
    const gizmoTranslate = {
      X: [
        [new Mesh(arrowGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]],
        [new Mesh(arrowGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]],
        [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]]
      ],
      Y: [
        [new Mesh(arrowGeometry, matGreen), [0, 0.5, 0]],
        [new Mesh(arrowGeometry, matGreen), [0, -0.5, 0], [Math.PI, 0, 0]],
        [new Mesh(lineGeometry2, matGreen)]
      ],
      Z: [
        [new Mesh(arrowGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]],
        [new Mesh(arrowGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]],
        [new Mesh(lineGeometry2, matBlue), null, [Math.PI / 2, 0, 0]]
      ],
      XYZ: [
        [new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0]]
      ],
      XY: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent.clone()), [0.15, 0.15, 0]]
      ],
      YZ: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]
      ],
      XZ: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent.clone()), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]
      ]
    };
    const pickerTranslate = {
      X: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]
      ],
      Y: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]
      ],
      Z: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]
      ],
      XYZ: [
        [new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]
      ],
      XY: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]
      ],
      YZ: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]
      ],
      XZ: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]
      ]
    };
    const helperTranslate = {
      START: [
        [new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, "helper"]
      ],
      END: [
        [new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, "helper"]
      ],
      DELTA: [
        [new Line(TranslateHelperGeometry(), matHelper), null, null, null, "helper"]
      ],
      X: [
        [new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], "helper"]
      ],
      Y: [
        [new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], "helper"]
      ],
      Z: [
        [new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], "helper"]
      ]
    };
    const gizmoRotate = {
      XYZE: [
        [new Mesh(CircleGeometry(0.5, 1), matGray), null, [0, Math.PI / 2, 0]]
      ],
      X: [
        [new Mesh(CircleGeometry(0.5, 0.5), matRed)]
      ],
      Y: [
        [new Mesh(CircleGeometry(0.5, 0.5), matGreen), null, [0, 0, -Math.PI / 2]]
      ],
      Z: [
        [new Mesh(CircleGeometry(0.5, 0.5), matBlue), null, [0, Math.PI / 2, 0]]
      ],
      E: [
        [new Mesh(CircleGeometry(0.75, 1), matYellowTransparent), null, [0, Math.PI / 2, 0]]
      ]
    };
    const helperRotate = {
      AXIS: [
        [new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], "helper"]
      ]
    };
    const pickerRotate = {
      XYZE: [
        [new Mesh(new SphereGeometry(0.25, 10, 8), matInvisible)]
      ],
      X: [
        [new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]
      ],
      Y: [
        [new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]
      ],
      Z: [
        [new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]
      ],
      E: [
        [new Mesh(new TorusGeometry(0.75, 0.1, 2, 24), matInvisible)]
      ]
    };
    const gizmoScale = {
      X: [
        [new Mesh(scaleHandleGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]],
        [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]],
        [new Mesh(scaleHandleGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]]
      ],
      Y: [
        [new Mesh(scaleHandleGeometry, matGreen), [0, 0.5, 0]],
        [new Mesh(lineGeometry2, matGreen)],
        [new Mesh(scaleHandleGeometry, matGreen), [0, -0.5, 0], [0, 0, Math.PI]]
      ],
      Z: [
        [new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]],
        [new Mesh(lineGeometry2, matBlue), [0, 0, 0], [Math.PI / 2, 0, 0]],
        [new Mesh(scaleHandleGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]]
      ],
      XY: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent), [0.15, 0.15, 0]]
      ],
      YZ: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]
      ],
      XZ: [
        [new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]
      ],
      XYZ: [
        [new Mesh(new BoxGeometry(0.1, 0.1, 0.1), matWhiteTransparent.clone())]
      ]
    };
    const pickerScale = {
      X: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]
      ],
      Y: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]
      ],
      Z: [
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]],
        [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]
      ],
      XY: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]
      ],
      YZ: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]
      ],
      XZ: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]
      ],
      XYZ: [
        [new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 0]]
      ]
    };
    const helperScale = {
      X: [
        [new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], "helper"]
      ],
      Y: [
        [new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], "helper"]
      ],
      Z: [
        [new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], "helper"]
      ]
    };
    function setupGizmo(gizmoMap) {
      const gizmo = new Object3D();
      for (const name in gizmoMap) {
        for (let i2 = gizmoMap[name].length; i2--; ) {
          const object = gizmoMap[name][i2][0].clone();
          const position = gizmoMap[name][i2][1];
          const rotation = gizmoMap[name][i2][2];
          const scale = gizmoMap[name][i2][3];
          const tag = gizmoMap[name][i2][4];
          object.name = name;
          object.tag = tag;
          if (position) {
            object.position.set(position[0], position[1], position[2]);
          }
          if (rotation) {
            object.rotation.set(rotation[0], rotation[1], rotation[2]);
          }
          if (scale) {
            object.scale.set(scale[0], scale[1], scale[2]);
          }
          object.updateMatrix();
          const tempGeometry = object.geometry.clone();
          tempGeometry.applyMatrix4(object.matrix);
          object.geometry = tempGeometry;
          object.renderOrder = Infinity;
          object.position.set(0, 0, 0);
          object.rotation.set(0, 0, 0);
          object.scale.set(1, 1, 1);
          gizmo.add(object);
        }
      }
      return gizmo;
    }
    this.gizmo = {};
    this.picker = {};
    this.helper = {};
    this.add(this.gizmo["translate"] = setupGizmo(gizmoTranslate));
    this.add(this.gizmo["rotate"] = setupGizmo(gizmoRotate));
    this.add(this.gizmo["scale"] = setupGizmo(gizmoScale));
    this.add(this.picker["translate"] = setupGizmo(pickerTranslate));
    this.add(this.picker["rotate"] = setupGizmo(pickerRotate));
    this.add(this.picker["scale"] = setupGizmo(pickerScale));
    this.add(this.helper["translate"] = setupGizmo(helperTranslate));
    this.add(this.helper["rotate"] = setupGizmo(helperRotate));
    this.add(this.helper["scale"] = setupGizmo(helperScale));
    this.picker["translate"].visible = false;
    this.picker["rotate"].visible = false;
    this.picker["scale"].visible = false;
  }
  // updateMatrixWorld will update transformations and appearance of individual handles
  updateMatrixWorld(force) {
    const space = this.mode === "scale" ? "local" : this.space;
    const quaternion = space === "local" ? this.worldQuaternion : _identityQuaternion;
    this.gizmo["translate"].visible = this.mode === "translate";
    this.gizmo["rotate"].visible = this.mode === "rotate";
    this.gizmo["scale"].visible = this.mode === "scale";
    this.helper["translate"].visible = this.mode === "translate";
    this.helper["rotate"].visible = this.mode === "rotate";
    this.helper["scale"].visible = this.mode === "scale";
    let handles = [];
    handles = handles.concat(this.picker[this.mode].children);
    handles = handles.concat(this.gizmo[this.mode].children);
    handles = handles.concat(this.helper[this.mode].children);
    for (let i2 = 0; i2 < handles.length; i2++) {
      const handle = handles[i2];
      handle.visible = true;
      handle.rotation.set(0, 0, 0);
      handle.position.copy(this.worldPosition);
      let factor;
      if (this.camera.isOrthographicCamera) {
        factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;
      } else {
        factor = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom, 7);
      }
      handle.scale.set(1, 1, 1).multiplyScalar(factor * this.size / 4);
      if (handle.tag === "helper") {
        handle.visible = false;
        if (handle.name === "AXIS") {
          handle.visible = !!this.axis;
          if (this.axis === "X") {
            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, 0));
            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
            if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {
              handle.visible = false;
            }
          }
          if (this.axis === "Y") {
            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, Math.PI / 2));
            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
            if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {
              handle.visible = false;
            }
          }
          if (this.axis === "Z") {
            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));
            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
            if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {
              handle.visible = false;
            }
          }
          if (this.axis === "XYZE") {
            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));
            _alignVector.copy(this.rotationAxis);
            handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(_zeroVector, _alignVector, _unitY));
            handle.quaternion.multiply(_tempQuaternion);
            handle.visible = this.dragging;
          }
          if (this.axis === "E") {
            handle.visible = false;
          }
        } else if (handle.name === "START") {
          handle.position.copy(this.worldPositionStart);
          handle.visible = this.dragging;
        } else if (handle.name === "END") {
          handle.position.copy(this.worldPosition);
          handle.visible = this.dragging;
        } else if (handle.name === "DELTA") {
          handle.position.copy(this.worldPositionStart);
          handle.quaternion.copy(this.worldQuaternionStart);
          _tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);
          _tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());
          handle.scale.copy(_tempVector);
          handle.visible = this.dragging;
        } else {
          handle.quaternion.copy(quaternion);
          if (this.dragging) {
            handle.position.copy(this.worldPositionStart);
          } else {
            handle.position.copy(this.worldPosition);
          }
          if (this.axis) {
            handle.visible = this.axis.search(handle.name) !== -1;
          }
        }
        continue;
      }
      handle.quaternion.copy(quaternion);
      if (this.mode === "translate" || this.mode === "scale") {
        const AXIS_HIDE_THRESHOLD = 0.99;
        const PLANE_HIDE_THRESHOLD = 0.2;
        if (handle.name === "X") {
          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
        if (handle.name === "Y") {
          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
        if (handle.name === "Z") {
          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
        if (handle.name === "XY") {
          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
        if (handle.name === "YZ") {
          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
        if (handle.name === "XZ") {
          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {
            handle.scale.set(1e-10, 1e-10, 1e-10);
            handle.visible = false;
          }
        }
      } else if (this.mode === "rotate") {
        _tempQuaternion2.copy(quaternion);
        _alignVector.copy(this.eye).applyQuaternion(_tempQuaternion.copy(quaternion).invert());
        if (handle.name.search("E") !== -1) {
          handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(this.eye, _zeroVector, _unitY));
        }
        if (handle.name === "X") {
          _tempQuaternion.setFromAxisAngle(_unitX, Math.atan2(-_alignVector.y, _alignVector.z));
          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
          handle.quaternion.copy(_tempQuaternion);
        }
        if (handle.name === "Y") {
          _tempQuaternion.setFromAxisAngle(_unitY, Math.atan2(_alignVector.x, _alignVector.z));
          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
          handle.quaternion.copy(_tempQuaternion);
        }
        if (handle.name === "Z") {
          _tempQuaternion.setFromAxisAngle(_unitZ, Math.atan2(_alignVector.y, _alignVector.x));
          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
          handle.quaternion.copy(_tempQuaternion);
        }
      }
      handle.visible = handle.visible && (handle.name.indexOf("X") === -1 || this.showX);
      handle.visible = handle.visible && (handle.name.indexOf("Y") === -1 || this.showY);
      handle.visible = handle.visible && (handle.name.indexOf("Z") === -1 || this.showZ);
      handle.visible = handle.visible && (handle.name.indexOf("E") === -1 || this.showX && this.showY && this.showZ);
      handle.material._color = handle.material._color || handle.material.color.clone();
      handle.material._opacity = handle.material._opacity || handle.material.opacity;
      handle.material.color.copy(handle.material._color);
      handle.material.opacity = handle.material._opacity;
      if (this.enabled && this.axis) {
        if (handle.name === this.axis) {
          handle.material.color.setHex(16776960);
          handle.material.opacity = 1;
        } else if (this.axis.split("").some(function(a) {
          return handle.name === a;
        })) {
          handle.material.color.setHex(16776960);
          handle.material.opacity = 1;
        }
      }
    }
    super.updateMatrixWorld(force);
  }
}
class TransformControlsPlane extends Mesh {
  constructor() {
    super(
      new PlaneGeometry(1e5, 1e5, 2, 2),
      new MeshBasicMaterial({ visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false })
    );
    this.isTransformControlsPlane = true;
    this.type = "TransformControlsPlane";
  }
  updateMatrixWorld(force) {
    let space = this.space;
    this.position.copy(this.worldPosition);
    if (this.mode === "scale") space = "local";
    _v1.copy(_unitX).applyQuaternion(space === "local" ? this.worldQuaternion : _identityQuaternion);
    _v2.copy(_unitY).applyQuaternion(space === "local" ? this.worldQuaternion : _identityQuaternion);
    _v3.copy(_unitZ).applyQuaternion(space === "local" ? this.worldQuaternion : _identityQuaternion);
    _alignVector.copy(_v2);
    switch (this.mode) {
      case "translate":
      case "scale":
        switch (this.axis) {
          case "X":
            _alignVector.copy(this.eye).cross(_v1);
            _dirVector.copy(_v1).cross(_alignVector);
            break;
          case "Y":
            _alignVector.copy(this.eye).cross(_v2);
            _dirVector.copy(_v2).cross(_alignVector);
            break;
          case "Z":
            _alignVector.copy(this.eye).cross(_v3);
            _dirVector.copy(_v3).cross(_alignVector);
            break;
          case "XY":
            _dirVector.copy(_v3);
            break;
          case "YZ":
            _dirVector.copy(_v1);
            break;
          case "XZ":
            _alignVector.copy(_v3);
            _dirVector.copy(_v2);
            break;
          case "XYZ":
          case "E":
            _dirVector.set(0, 0, 0);
            break;
        }
        break;
      case "rotate":
      default:
        _dirVector.set(0, 0, 0);
    }
    if (_dirVector.length() === 0) {
      this.quaternion.copy(this.cameraQuaternion);
    } else {
      _tempMatrix.lookAt(_tempVector.set(0, 0, 0), _dirVector, _alignVector);
      this.quaternion.setFromRotationMatrix(_tempMatrix);
    }
    super.updateMatrixWorld(force);
  }
}
function toTrianglesDrawMode(geometry2, drawMode) {
  if (drawMode === TrianglesDrawMode) {
    console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.");
    return geometry2;
  }
  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {
    let index = geometry2.getIndex();
    if (index === null) {
      const indices = [];
      const position = geometry2.getAttribute("position");
      if (position !== void 0) {
        for (let i2 = 0; i2 < position.count; i2++) {
          indices.push(i2);
        }
        geometry2.setIndex(indices);
        index = geometry2.getIndex();
      } else {
        console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.");
        return geometry2;
      }
    }
    const numberOfTriangles = index.count - 2;
    const newIndices = [];
    if (drawMode === TriangleFanDrawMode) {
      for (let i2 = 1; i2 <= numberOfTriangles; i2++) {
        newIndices.push(index.getX(0));
        newIndices.push(index.getX(i2));
        newIndices.push(index.getX(i2 + 1));
      }
    } else {
      for (let i2 = 0; i2 < numberOfTriangles; i2++) {
        if (i2 % 2 === 0) {
          newIndices.push(index.getX(i2));
          newIndices.push(index.getX(i2 + 1));
          newIndices.push(index.getX(i2 + 2));
        } else {
          newIndices.push(index.getX(i2 + 2));
          newIndices.push(index.getX(i2 + 1));
          newIndices.push(index.getX(i2));
        }
      }
    }
    if (newIndices.length / 3 !== numberOfTriangles) {
      console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
    }
    const newGeometry = geometry2.clone();
    newGeometry.setIndex(newIndices);
    newGeometry.clearGroups();
    return newGeometry;
  } else {
    console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", drawMode);
    return geometry2;
  }
}
class GLTFLoader extends Loader {
  /**
   * Constructs a new glTF loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(manager) {
    super(manager);
    this.dracoLoader = null;
    this.ktx2Loader = null;
    this.meshoptDecoder = null;
    this.pluginCallbacks = [];
    this.register(function(parser) {
      return new GLTFMaterialsClearcoatExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsDispersionExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFTextureBasisUExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFTextureWebPExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFTextureAVIFExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsSheenExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsTransmissionExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsVolumeExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsIorExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsEmissiveStrengthExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsSpecularExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsIridescenceExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsAnisotropyExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMaterialsBumpExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFLightsExtension(parser);
    });
    this.register(function(parser) {
      return new GLTFMeshoptCompression(parser);
    });
    this.register(function(parser) {
      return new GLTFMeshGpuInstancing(parser);
    });
  }
  /**
   * Starts loading from the given URL and passes the loaded glTF asset
   * to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(url, onLoad2, onProgress, onError) {
    const scope = this;
    let resourcePath;
    if (this.resourcePath !== "") {
      resourcePath = this.resourcePath;
    } else if (this.path !== "") {
      const relativeUrl = LoaderUtils.extractUrlBase(url);
      resourcePath = LoaderUtils.resolveURL(relativeUrl, this.path);
    } else {
      resourcePath = LoaderUtils.extractUrlBase(url);
    }
    this.manager.itemStart(url);
    const _onError = function(e) {
      if (onError) {
        onError(e);
      } else {
        console.error(e);
      }
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    };
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(this.withCredentials);
    loader.load(url, function(data) {
      try {
        scope.parse(data, resourcePath, function(gltf) {
          onLoad2(gltf);
          scope.manager.itemEnd(url);
        }, _onError);
      } catch (e) {
        _onError(e);
      }
    }, onProgress, _onError);
  }
  /**
   * Sets the given Draco loader to this loader. Required for decoding assets
   * compressed with the `KHR_draco_mesh_compression` extension.
   *
   * @param {DRACOLoader} dracoLoader - The Draco loader to set.
   * @return {GLTFLoader} A reference to this loader.
   */
  setDRACOLoader(dracoLoader) {
    this.dracoLoader = dracoLoader;
    return this;
  }
  /**
   * Sets the given KTX2 loader to this loader. Required for loading KTX2
   * compressed textures.
   *
   * @param {KTX2Loader} ktx2Loader - The KTX2 loader to set.
   * @return {GLTFLoader} A reference to this loader.
   */
  setKTX2Loader(ktx2Loader) {
    this.ktx2Loader = ktx2Loader;
    return this;
  }
  /**
   * Sets the given meshopt decoder. Required for decoding assets
   * compressed with the `EXT_meshopt_compression` extension.
   *
   * @param {Object} meshoptDecoder - The meshopt decoder to set.
   * @return {GLTFLoader} A reference to this loader.
   */
  setMeshoptDecoder(meshoptDecoder) {
    this.meshoptDecoder = meshoptDecoder;
    return this;
  }
  /**
   * Registers a plugin callback. This API is internally used to implement the various
   * glTF extensions but can also used by third-party code to add additional logic
   * to the loader.
   *
   * @param {function(parser:GLTFParser)} callback - The callback function to register.
   * @return {GLTFLoader} A reference to this loader.
   */
  register(callback) {
    if (this.pluginCallbacks.indexOf(callback) === -1) {
      this.pluginCallbacks.push(callback);
    }
    return this;
  }
  /**
   * Unregisters a plugin callback.
   *
   * @param {Function} callback - The callback function to unregister.
   * @return {GLTFLoader} A reference to this loader.
   */
  unregister(callback) {
    if (this.pluginCallbacks.indexOf(callback) !== -1) {
      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);
    }
    return this;
  }
  /**
   * Parses the given FBX data and returns the resulting group.
   *
   * @param {string|ArrayBuffer} data - The raw glTF data.
   * @param {string} path - The URL base path.
   * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  parse(data, path, onLoad2, onError) {
    let json;
    const extensions = {};
    const plugins = {};
    const textDecoder = new TextDecoder();
    if (typeof data === "string") {
      json = JSON.parse(data);
    } else if (data instanceof ArrayBuffer) {
      const magic = textDecoder.decode(new Uint8Array(data, 0, 4));
      if (magic === BINARY_EXTENSION_HEADER_MAGIC) {
        try {
          extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);
        } catch (error) {
          if (onError) onError(error);
          return;
        }
        json = JSON.parse(extensions[EXTENSIONS.KHR_BINARY_GLTF].content);
      } else {
        json = JSON.parse(textDecoder.decode(data));
      }
    } else {
      json = data;
    }
    if (json.asset === void 0 || json.asset.version[0] < 2) {
      if (onError) onError(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));
      return;
    }
    const parser = new GLTFParser(json, {
      path: path || this.resourcePath || "",
      crossOrigin: this.crossOrigin,
      requestHeader: this.requestHeader,
      manager: this.manager,
      ktx2Loader: this.ktx2Loader,
      meshoptDecoder: this.meshoptDecoder
    });
    parser.fileLoader.setRequestHeader(this.requestHeader);
    for (let i2 = 0; i2 < this.pluginCallbacks.length; i2++) {
      const plugin = this.pluginCallbacks[i2](parser);
      if (!plugin.name) console.error("THREE.GLTFLoader: Invalid plugin found: missing name");
      plugins[plugin.name] = plugin;
      extensions[plugin.name] = true;
    }
    if (json.extensionsUsed) {
      for (let i2 = 0; i2 < json.extensionsUsed.length; ++i2) {
        const extensionName = json.extensionsUsed[i2];
        const extensionsRequired = json.extensionsRequired || [];
        switch (extensionName) {
          case EXTENSIONS.KHR_MATERIALS_UNLIT:
            extensions[extensionName] = new GLTFMaterialsUnlitExtension();
            break;
          case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);
            break;
          case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
            extensions[extensionName] = new GLTFTextureTransformExtension();
            break;
          case EXTENSIONS.KHR_MESH_QUANTIZATION:
            extensions[extensionName] = new GLTFMeshQuantizationExtension();
            break;
          default:
            if (extensionsRequired.indexOf(extensionName) >= 0 && plugins[extensionName] === void 0) {
              console.warn('THREE.GLTFLoader: Unknown extension "' + extensionName + '".');
            }
        }
      }
    }
    parser.setExtensions(extensions);
    parser.setPlugins(plugins);
    parser.parse(onLoad2, onError);
  }
  /**
   * Async version of {@link GLTFLoader#parse}.
   *
   * @async
   * @param {string|ArrayBuffer} data - The raw glTF data.
   * @param {string} path - The URL base path.
   * @return {Promise<GLTFLoader~LoadObject>} A Promise that resolves with the loaded glTF when the parsing has been finished.
   */
  parseAsync(data, path) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.parse(data, path, resolve, reject);
    });
  }
}
function GLTFRegistry() {
  let objects = {};
  return {
    get: function(key) {
      return objects[key];
    },
    add: function(key, object) {
      objects[key] = object;
    },
    remove: function(key) {
      delete objects[key];
    },
    removeAll: function() {
      objects = {};
    }
  };
}
const EXTENSIONS = {
  KHR_BINARY_GLTF: "KHR_binary_glTF",
  KHR_DRACO_MESH_COMPRESSION: "KHR_draco_mesh_compression",
  KHR_LIGHTS_PUNCTUAL: "KHR_lights_punctual",
  KHR_MATERIALS_CLEARCOAT: "KHR_materials_clearcoat",
  KHR_MATERIALS_DISPERSION: "KHR_materials_dispersion",
  KHR_MATERIALS_IOR: "KHR_materials_ior",
  KHR_MATERIALS_SHEEN: "KHR_materials_sheen",
  KHR_MATERIALS_SPECULAR: "KHR_materials_specular",
  KHR_MATERIALS_TRANSMISSION: "KHR_materials_transmission",
  KHR_MATERIALS_IRIDESCENCE: "KHR_materials_iridescence",
  KHR_MATERIALS_ANISOTROPY: "KHR_materials_anisotropy",
  KHR_MATERIALS_UNLIT: "KHR_materials_unlit",
  KHR_MATERIALS_VOLUME: "KHR_materials_volume",
  KHR_TEXTURE_BASISU: "KHR_texture_basisu",
  KHR_TEXTURE_TRANSFORM: "KHR_texture_transform",
  KHR_MESH_QUANTIZATION: "KHR_mesh_quantization",
  KHR_MATERIALS_EMISSIVE_STRENGTH: "KHR_materials_emissive_strength",
  EXT_MATERIALS_BUMP: "EXT_materials_bump",
  EXT_TEXTURE_WEBP: "EXT_texture_webp",
  EXT_TEXTURE_AVIF: "EXT_texture_avif",
  EXT_MESHOPT_COMPRESSION: "EXT_meshopt_compression",
  EXT_MESH_GPU_INSTANCING: "EXT_mesh_gpu_instancing"
};
class GLTFLightsExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;
    this.cache = { refs: {}, uses: {} };
  }
  _markDefs() {
    const parser = this.parser;
    const nodeDefs = this.parser.json.nodes || [];
    for (let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {
      const nodeDef = nodeDefs[nodeIndex];
      if (nodeDef.extensions && nodeDef.extensions[this.name] && nodeDef.extensions[this.name].light !== void 0) {
        parser._addNodeRef(this.cache, nodeDef.extensions[this.name].light);
      }
    }
  }
  _loadLight(lightIndex) {
    const parser = this.parser;
    const cacheKey = "light:" + lightIndex;
    let dependency = parser.cache.get(cacheKey);
    if (dependency) return dependency;
    const json = parser.json;
    const extensions = json.extensions && json.extensions[this.name] || {};
    const lightDefs = extensions.lights || [];
    const lightDef = lightDefs[lightIndex];
    let lightNode;
    const color = new Color(16777215);
    if (lightDef.color !== void 0) color.setRGB(lightDef.color[0], lightDef.color[1], lightDef.color[2], LinearSRGBColorSpace);
    const range = lightDef.range !== void 0 ? lightDef.range : 0;
    switch (lightDef.type) {
      case "directional":
        lightNode = new DirectionalLight(color);
        lightNode.target.position.set(0, 0, -1);
        lightNode.add(lightNode.target);
        break;
      case "point":
        lightNode = new PointLight(color);
        lightNode.distance = range;
        break;
      case "spot":
        lightNode = new SpotLight(color);
        lightNode.distance = range;
        lightDef.spot = lightDef.spot || {};
        lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== void 0 ? lightDef.spot.innerConeAngle : 0;
        lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== void 0 ? lightDef.spot.outerConeAngle : Math.PI / 4;
        lightNode.angle = lightDef.spot.outerConeAngle;
        lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
        lightNode.target.position.set(0, 0, -1);
        lightNode.add(lightNode.target);
        break;
      default:
        throw new Error("THREE.GLTFLoader: Unexpected light type: " + lightDef.type);
    }
    lightNode.position.set(0, 0, 0);
    assignExtrasToUserData(lightNode, lightDef);
    if (lightDef.intensity !== void 0) lightNode.intensity = lightDef.intensity;
    lightNode.name = parser.createUniqueName(lightDef.name || "light_" + lightIndex);
    dependency = Promise.resolve(lightNode);
    parser.cache.add(cacheKey, dependency);
    return dependency;
  }
  getDependency(type, index) {
    if (type !== "light") return;
    return this._loadLight(index);
  }
  createNodeAttachment(nodeIndex) {
    const self2 = this;
    const parser = this.parser;
    const json = parser.json;
    const nodeDef = json.nodes[nodeIndex];
    const lightDef = nodeDef.extensions && nodeDef.extensions[this.name] || {};
    const lightIndex = lightDef.light;
    if (lightIndex === void 0) return null;
    return this._loadLight(lightIndex).then(function(light) {
      return parser._getNodeRef(self2.cache, lightIndex, light);
    });
  }
}
class GLTFMaterialsUnlitExtension {
  constructor() {
    this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;
  }
  getMaterialType() {
    return MeshBasicMaterial;
  }
  extendParams(materialParams, materialDef, parser) {
    const pending = [];
    materialParams.color = new Color(1, 1, 1);
    materialParams.opacity = 1;
    const metallicRoughness = materialDef.pbrMetallicRoughness;
    if (metallicRoughness) {
      if (Array.isArray(metallicRoughness.baseColorFactor)) {
        const array = metallicRoughness.baseColorFactor;
        materialParams.color.setRGB(array[0], array[1], array[2], LinearSRGBColorSpace);
        materialParams.opacity = array[3];
      }
      if (metallicRoughness.baseColorTexture !== void 0) {
        pending.push(parser.assignTexture(materialParams, "map", metallicRoughness.baseColorTexture, SRGBColorSpace));
      }
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsEmissiveStrengthExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_EMISSIVE_STRENGTH;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const emissiveStrength = materialDef.extensions[this.name].emissiveStrength;
    if (emissiveStrength !== void 0) {
      materialParams.emissiveIntensity = emissiveStrength;
    }
    return Promise.resolve();
  }
}
class GLTFMaterialsClearcoatExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    if (extension.clearcoatFactor !== void 0) {
      materialParams.clearcoat = extension.clearcoatFactor;
    }
    if (extension.clearcoatTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "clearcoatMap", extension.clearcoatTexture));
    }
    if (extension.clearcoatRoughnessFactor !== void 0) {
      materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;
    }
    if (extension.clearcoatRoughnessTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "clearcoatRoughnessMap", extension.clearcoatRoughnessTexture));
    }
    if (extension.clearcoatNormalTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "clearcoatNormalMap", extension.clearcoatNormalTexture));
      if (extension.clearcoatNormalTexture.scale !== void 0) {
        const scale = extension.clearcoatNormalTexture.scale;
        materialParams.clearcoatNormalScale = new Vector2(scale, scale);
      }
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsDispersionExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_DISPERSION;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const extension = materialDef.extensions[this.name];
    materialParams.dispersion = extension.dispersion !== void 0 ? extension.dispersion : 0;
    return Promise.resolve();
  }
}
class GLTFMaterialsIridescenceExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_IRIDESCENCE;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    if (extension.iridescenceFactor !== void 0) {
      materialParams.iridescence = extension.iridescenceFactor;
    }
    if (extension.iridescenceTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "iridescenceMap", extension.iridescenceTexture));
    }
    if (extension.iridescenceIor !== void 0) {
      materialParams.iridescenceIOR = extension.iridescenceIor;
    }
    if (materialParams.iridescenceThicknessRange === void 0) {
      materialParams.iridescenceThicknessRange = [100, 400];
    }
    if (extension.iridescenceThicknessMinimum !== void 0) {
      materialParams.iridescenceThicknessRange[0] = extension.iridescenceThicknessMinimum;
    }
    if (extension.iridescenceThicknessMaximum !== void 0) {
      materialParams.iridescenceThicknessRange[1] = extension.iridescenceThicknessMaximum;
    }
    if (extension.iridescenceThicknessTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "iridescenceThicknessMap", extension.iridescenceThicknessTexture));
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsSheenExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_SHEEN;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    materialParams.sheenColor = new Color(0, 0, 0);
    materialParams.sheenRoughness = 0;
    materialParams.sheen = 1;
    const extension = materialDef.extensions[this.name];
    if (extension.sheenColorFactor !== void 0) {
      const colorFactor = extension.sheenColorFactor;
      materialParams.sheenColor.setRGB(colorFactor[0], colorFactor[1], colorFactor[2], LinearSRGBColorSpace);
    }
    if (extension.sheenRoughnessFactor !== void 0) {
      materialParams.sheenRoughness = extension.sheenRoughnessFactor;
    }
    if (extension.sheenColorTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "sheenColorMap", extension.sheenColorTexture, SRGBColorSpace));
    }
    if (extension.sheenRoughnessTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "sheenRoughnessMap", extension.sheenRoughnessTexture));
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsTransmissionExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_TRANSMISSION;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    if (extension.transmissionFactor !== void 0) {
      materialParams.transmission = extension.transmissionFactor;
    }
    if (extension.transmissionTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "transmissionMap", extension.transmissionTexture));
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsVolumeExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_VOLUME;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    materialParams.thickness = extension.thicknessFactor !== void 0 ? extension.thicknessFactor : 0;
    if (extension.thicknessTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "thicknessMap", extension.thicknessTexture));
    }
    materialParams.attenuationDistance = extension.attenuationDistance || Infinity;
    const colorArray = extension.attenuationColor || [1, 1, 1];
    materialParams.attenuationColor = new Color().setRGB(colorArray[0], colorArray[1], colorArray[2], LinearSRGBColorSpace);
    return Promise.all(pending);
  }
}
class GLTFMaterialsIorExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_IOR;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const extension = materialDef.extensions[this.name];
    materialParams.ior = extension.ior !== void 0 ? extension.ior : 1.5;
    return Promise.resolve();
  }
}
class GLTFMaterialsSpecularExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_SPECULAR;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    materialParams.specularIntensity = extension.specularFactor !== void 0 ? extension.specularFactor : 1;
    if (extension.specularTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "specularIntensityMap", extension.specularTexture));
    }
    const colorArray = extension.specularColorFactor || [1, 1, 1];
    materialParams.specularColor = new Color().setRGB(colorArray[0], colorArray[1], colorArray[2], LinearSRGBColorSpace);
    if (extension.specularColorTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "specularColorMap", extension.specularColorTexture, SRGBColorSpace));
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsBumpExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.EXT_MATERIALS_BUMP;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    materialParams.bumpScale = extension.bumpFactor !== void 0 ? extension.bumpFactor : 1;
    if (extension.bumpTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "bumpMap", extension.bumpTexture));
    }
    return Promise.all(pending);
  }
}
class GLTFMaterialsAnisotropyExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_MATERIALS_ANISOTROPY;
  }
  getMaterialType(materialIndex) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) return null;
    return MeshPhysicalMaterial;
  }
  extendMaterialParams(materialIndex, materialParams) {
    const parser = this.parser;
    const materialDef = parser.json.materials[materialIndex];
    if (!materialDef.extensions || !materialDef.extensions[this.name]) {
      return Promise.resolve();
    }
    const pending = [];
    const extension = materialDef.extensions[this.name];
    if (extension.anisotropyStrength !== void 0) {
      materialParams.anisotropy = extension.anisotropyStrength;
    }
    if (extension.anisotropyRotation !== void 0) {
      materialParams.anisotropyRotation = extension.anisotropyRotation;
    }
    if (extension.anisotropyTexture !== void 0) {
      pending.push(parser.assignTexture(materialParams, "anisotropyMap", extension.anisotropyTexture));
    }
    return Promise.all(pending);
  }
}
class GLTFTextureBasisUExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.KHR_TEXTURE_BASISU;
  }
  loadTexture(textureIndex) {
    const parser = this.parser;
    const json = parser.json;
    const textureDef = json.textures[textureIndex];
    if (!textureDef.extensions || !textureDef.extensions[this.name]) {
      return null;
    }
    const extension = textureDef.extensions[this.name];
    const loader = parser.options.ktx2Loader;
    if (!loader) {
      if (json.extensionsRequired && json.extensionsRequired.indexOf(this.name) >= 0) {
        throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");
      } else {
        return null;
      }
    }
    return parser.loadTextureImage(textureIndex, extension.source, loader);
  }
}
class GLTFTextureWebPExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.EXT_TEXTURE_WEBP;
  }
  loadTexture(textureIndex) {
    const name = this.name;
    const parser = this.parser;
    const json = parser.json;
    const textureDef = json.textures[textureIndex];
    if (!textureDef.extensions || !textureDef.extensions[name]) {
      return null;
    }
    const extension = textureDef.extensions[name];
    const source = json.images[extension.source];
    let loader = parser.textureLoader;
    if (source.uri) {
      const handler = parser.options.manager.getHandler(source.uri);
      if (handler !== null) loader = handler;
    }
    return parser.loadTextureImage(textureIndex, extension.source, loader);
  }
}
class GLTFTextureAVIFExtension {
  constructor(parser) {
    this.parser = parser;
    this.name = EXTENSIONS.EXT_TEXTURE_AVIF;
  }
  loadTexture(textureIndex) {
    const name = this.name;
    const parser = this.parser;
    const json = parser.json;
    const textureDef = json.textures[textureIndex];
    if (!textureDef.extensions || !textureDef.extensions[name]) {
      return null;
    }
    const extension = textureDef.extensions[name];
    const source = json.images[extension.source];
    let loader = parser.textureLoader;
    if (source.uri) {
      const handler = parser.options.manager.getHandler(source.uri);
      if (handler !== null) loader = handler;
    }
    return parser.loadTextureImage(textureIndex, extension.source, loader);
  }
}
class GLTFMeshoptCompression {
  constructor(parser) {
    this.name = EXTENSIONS.EXT_MESHOPT_COMPRESSION;
    this.parser = parser;
  }
  loadBufferView(index) {
    const json = this.parser.json;
    const bufferView = json.bufferViews[index];
    if (bufferView.extensions && bufferView.extensions[this.name]) {
      const extensionDef = bufferView.extensions[this.name];
      const buffer = this.parser.getDependency("buffer", extensionDef.buffer);
      const decoder = this.parser.options.meshoptDecoder;
      if (!decoder || !decoder.supported) {
        if (json.extensionsRequired && json.extensionsRequired.indexOf(this.name) >= 0) {
          throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");
        } else {
          return null;
        }
      }
      return buffer.then(function(res) {
        const byteOffset = extensionDef.byteOffset || 0;
        const byteLength = extensionDef.byteLength || 0;
        const count = extensionDef.count;
        const stride = extensionDef.byteStride;
        const source = new Uint8Array(res, byteOffset, byteLength);
        if (decoder.decodeGltfBufferAsync) {
          return decoder.decodeGltfBufferAsync(count, stride, source, extensionDef.mode, extensionDef.filter).then(function(res2) {
            return res2.buffer;
          });
        } else {
          return decoder.ready.then(function() {
            const result = new ArrayBuffer(count * stride);
            decoder.decodeGltfBuffer(new Uint8Array(result), count, stride, source, extensionDef.mode, extensionDef.filter);
            return result;
          });
        }
      });
    } else {
      return null;
    }
  }
}
class GLTFMeshGpuInstancing {
  constructor(parser) {
    this.name = EXTENSIONS.EXT_MESH_GPU_INSTANCING;
    this.parser = parser;
  }
  createNodeMesh(nodeIndex) {
    const json = this.parser.json;
    const nodeDef = json.nodes[nodeIndex];
    if (!nodeDef.extensions || !nodeDef.extensions[this.name] || nodeDef.mesh === void 0) {
      return null;
    }
    const meshDef = json.meshes[nodeDef.mesh];
    for (const primitive of meshDef.primitives) {
      if (primitive.mode !== WEBGL_CONSTANTS.TRIANGLES && primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_STRIP && primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_FAN && primitive.mode !== void 0) {
        return null;
      }
    }
    const extensionDef = nodeDef.extensions[this.name];
    const attributesDef = extensionDef.attributes;
    const pending = [];
    const attributes = {};
    for (const key in attributesDef) {
      pending.push(this.parser.getDependency("accessor", attributesDef[key]).then((accessor) => {
        attributes[key] = accessor;
        return attributes[key];
      }));
    }
    if (pending.length < 1) {
      return null;
    }
    pending.push(this.parser.createNodeMesh(nodeIndex));
    return Promise.all(pending).then((results) => {
      const nodeObject = results.pop();
      const meshes = nodeObject.isGroup ? nodeObject.children : [nodeObject];
      const count = results[0].count;
      const instancedMeshes = [];
      for (const mesh2 of meshes) {
        const m = new Matrix4();
        const p = new Vector3();
        const q = new Quaternion();
        const s = new Vector3(1, 1, 1);
        const instancedMesh = new InstancedMesh(mesh2.geometry, mesh2.material, count);
        for (let i2 = 0; i2 < count; i2++) {
          if (attributes.TRANSLATION) {
            p.fromBufferAttribute(attributes.TRANSLATION, i2);
          }
          if (attributes.ROTATION) {
            q.fromBufferAttribute(attributes.ROTATION, i2);
          }
          if (attributes.SCALE) {
            s.fromBufferAttribute(attributes.SCALE, i2);
          }
          instancedMesh.setMatrixAt(i2, m.compose(p, q, s));
        }
        for (const attributeName in attributes) {
          if (attributeName === "_COLOR_0") {
            const attr = attributes[attributeName];
            instancedMesh.instanceColor = new InstancedBufferAttribute(attr.array, attr.itemSize, attr.normalized);
          } else if (attributeName !== "TRANSLATION" && attributeName !== "ROTATION" && attributeName !== "SCALE") {
            mesh2.geometry.setAttribute(attributeName, attributes[attributeName]);
          }
        }
        Object3D.prototype.copy.call(instancedMesh, mesh2);
        this.parser.assignFinalMaterial(instancedMesh);
        instancedMeshes.push(instancedMesh);
      }
      if (nodeObject.isGroup) {
        nodeObject.clear();
        nodeObject.add(...instancedMeshes);
        return nodeObject;
      }
      return instancedMeshes[0];
    });
  }
}
const BINARY_EXTENSION_HEADER_MAGIC = "glTF";
const BINARY_EXTENSION_HEADER_LENGTH = 12;
const BINARY_EXTENSION_CHUNK_TYPES = { JSON: 1313821514, BIN: 5130562 };
class GLTFBinaryExtension {
  constructor(data) {
    this.name = EXTENSIONS.KHR_BINARY_GLTF;
    this.content = null;
    this.body = null;
    const headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);
    const textDecoder = new TextDecoder();
    this.header = {
      magic: textDecoder.decode(new Uint8Array(data.slice(0, 4))),
      version: headerView.getUint32(4, true),
      length: headerView.getUint32(8, true)
    };
    if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {
      throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");
    } else if (this.header.version < 2) {
      throw new Error("THREE.GLTFLoader: Legacy binary file detected.");
    }
    const chunkContentsLength = this.header.length - BINARY_EXTENSION_HEADER_LENGTH;
    const chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);
    let chunkIndex = 0;
    while (chunkIndex < chunkContentsLength) {
      const chunkLength = chunkView.getUint32(chunkIndex, true);
      chunkIndex += 4;
      const chunkType = chunkView.getUint32(chunkIndex, true);
      chunkIndex += 4;
      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {
        const contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);
        this.content = textDecoder.decode(contentArray);
      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {
        const byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
        this.body = data.slice(byteOffset, byteOffset + chunkLength);
      }
      chunkIndex += chunkLength;
    }
    if (this.content === null) {
      throw new Error("THREE.GLTFLoader: JSON content not found.");
    }
  }
}
class GLTFDracoMeshCompressionExtension {
  constructor(json, dracoLoader) {
    if (!dracoLoader) {
      throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");
    }
    this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
    this.json = json;
    this.dracoLoader = dracoLoader;
    this.dracoLoader.preload();
  }
  decodePrimitive(primitive, parser) {
    const json = this.json;
    const dracoLoader = this.dracoLoader;
    const bufferViewIndex = primitive.extensions[this.name].bufferView;
    const gltfAttributeMap = primitive.extensions[this.name].attributes;
    const threeAttributeMap = {};
    const attributeNormalizedMap = {};
    const attributeTypeMap = {};
    for (const attributeName in gltfAttributeMap) {
      const threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
      threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];
    }
    for (const attributeName in primitive.attributes) {
      const threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
      if (gltfAttributeMap[attributeName] !== void 0) {
        const accessorDef = json.accessors[primitive.attributes[attributeName]];
        const componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
        attributeTypeMap[threeAttributeName] = componentType.name;
        attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;
      }
    }
    return parser.getDependency("bufferView", bufferViewIndex).then(function(bufferView) {
      return new Promise(function(resolve, reject) {
        dracoLoader.decodeDracoFile(bufferView, function(geometry2) {
          for (const attributeName in geometry2.attributes) {
            const attribute = geometry2.attributes[attributeName];
            const normalized = attributeNormalizedMap[attributeName];
            if (normalized !== void 0) attribute.normalized = normalized;
          }
          resolve(geometry2);
        }, threeAttributeMap, attributeTypeMap, LinearSRGBColorSpace, reject);
      });
    });
  }
}
class GLTFTextureTransformExtension {
  constructor() {
    this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;
  }
  extendTexture(texture, transform) {
    if ((transform.texCoord === void 0 || transform.texCoord === texture.channel) && transform.offset === void 0 && transform.rotation === void 0 && transform.scale === void 0) {
      return texture;
    }
    texture = texture.clone();
    if (transform.texCoord !== void 0) {
      texture.channel = transform.texCoord;
    }
    if (transform.offset !== void 0) {
      texture.offset.fromArray(transform.offset);
    }
    if (transform.rotation !== void 0) {
      texture.rotation = transform.rotation;
    }
    if (transform.scale !== void 0) {
      texture.repeat.fromArray(transform.scale);
    }
    texture.needsUpdate = true;
    return texture;
  }
}
class GLTFMeshQuantizationExtension {
  constructor() {
    this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;
  }
}
class GLTFCubicSplineInterpolant extends Interpolant {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  copySampleValue_(index) {
    const result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;
    for (let i2 = 0; i2 !== valueSize; i2++) {
      result[i2] = values[offset + i2];
    }
    return result;
  }
  interpolate_(i1, t0, t2, t1) {
    const result = this.resultBuffer;
    const values = this.sampleValues;
    const stride = this.valueSize;
    const stride2 = stride * 2;
    const stride3 = stride * 3;
    const td = t1 - t0;
    const p = (t2 - t0) / td;
    const pp = p * p;
    const ppp = pp * p;
    const offset1 = i1 * stride3;
    const offset0 = offset1 - stride3;
    const s2 = -2 * ppp + 3 * pp;
    const s3 = ppp - pp;
    const s0 = 1 - s2;
    const s1 = s3 - pp + p;
    for (let i2 = 0; i2 !== stride; i2++) {
      const p0 = values[offset0 + i2 + stride];
      const m0 = values[offset0 + i2 + stride2] * td;
      const p1 = values[offset1 + i2 + stride];
      const m1 = values[offset1 + i2] * td;
      result[i2] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
    }
    return result;
  }
}
const _quaternion = new Quaternion();
class GLTFCubicSplineQuaternionInterpolant extends GLTFCubicSplineInterpolant {
  interpolate_(i1, t0, t2, t1) {
    const result = super.interpolate_(i1, t0, t2, t1);
    _quaternion.fromArray(result).normalize().toArray(result);
    return result;
  }
}
const WEBGL_CONSTANTS = {
  POINTS: 0,
  LINES: 1,
  LINE_LOOP: 2,
  LINE_STRIP: 3,
  TRIANGLES: 4,
  TRIANGLE_STRIP: 5,
  TRIANGLE_FAN: 6
};
const WEBGL_COMPONENT_TYPES = {
  5120: Int8Array,
  5121: Uint8Array,
  5122: Int16Array,
  5123: Uint16Array,
  5125: Uint32Array,
  5126: Float32Array
};
const WEBGL_FILTERS = {
  9728: NearestFilter,
  9729: LinearFilter,
  9984: NearestMipmapNearestFilter,
  9985: LinearMipmapNearestFilter,
  9986: NearestMipmapLinearFilter,
  9987: LinearMipmapLinearFilter
};
const WEBGL_WRAPPINGS = {
  33071: ClampToEdgeWrapping,
  33648: MirroredRepeatWrapping,
  10497: RepeatWrapping
};
const WEBGL_TYPE_SIZES = {
  "SCALAR": 1,
  "VEC2": 2,
  "VEC3": 3,
  "VEC4": 4,
  "MAT2": 4,
  "MAT3": 9,
  "MAT4": 16
};
const ATTRIBUTES = {
  POSITION: "position",
  NORMAL: "normal",
  TANGENT: "tangent",
  TEXCOORD_0: "uv",
  TEXCOORD_1: "uv1",
  TEXCOORD_2: "uv2",
  TEXCOORD_3: "uv3",
  COLOR_0: "color",
  WEIGHTS_0: "skinWeight",
  JOINTS_0: "skinIndex"
};
const PATH_PROPERTIES = {
  scale: "scale",
  translation: "position",
  rotation: "quaternion",
  weights: "morphTargetInfluences"
};
const INTERPOLATION = {
  CUBICSPLINE: void 0,
  // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each
  // keyframe track will be initialized with a default interpolation type, then modified.
  LINEAR: InterpolateLinear,
  STEP: InterpolateDiscrete
};
const ALPHA_MODES = {
  OPAQUE: "OPAQUE",
  MASK: "MASK",
  BLEND: "BLEND"
};
function createDefaultMaterial(cache) {
  if (cache["DefaultMaterial"] === void 0) {
    cache["DefaultMaterial"] = new MeshStandardMaterial({
      color: 16777215,
      emissive: 0,
      metalness: 1,
      roughness: 1,
      transparent: false,
      depthTest: true,
      side: FrontSide
    });
  }
  return cache["DefaultMaterial"];
}
function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {
  for (const name in objectDef.extensions) {
    if (knownExtensions[name] === void 0) {
      object.userData.gltfExtensions = object.userData.gltfExtensions || {};
      object.userData.gltfExtensions[name] = objectDef.extensions[name];
    }
  }
}
function assignExtrasToUserData(object, gltfDef) {
  if (gltfDef.extras !== void 0) {
    if (typeof gltfDef.extras === "object") {
      Object.assign(object.userData, gltfDef.extras);
    } else {
      console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, " + gltfDef.extras);
    }
  }
}
function addMorphTargets(geometry2, targets, parser) {
  let hasMorphPosition = false;
  let hasMorphNormal = false;
  let hasMorphColor = false;
  for (let i2 = 0, il = targets.length; i2 < il; i2++) {
    const target = targets[i2];
    if (target.POSITION !== void 0) hasMorphPosition = true;
    if (target.NORMAL !== void 0) hasMorphNormal = true;
    if (target.COLOR_0 !== void 0) hasMorphColor = true;
    if (hasMorphPosition && hasMorphNormal && hasMorphColor) break;
  }
  if (!hasMorphPosition && !hasMorphNormal && !hasMorphColor) return Promise.resolve(geometry2);
  const pendingPositionAccessors = [];
  const pendingNormalAccessors = [];
  const pendingColorAccessors = [];
  for (let i2 = 0, il = targets.length; i2 < il; i2++) {
    const target = targets[i2];
    if (hasMorphPosition) {
      const pendingAccessor = target.POSITION !== void 0 ? parser.getDependency("accessor", target.POSITION) : geometry2.attributes.position;
      pendingPositionAccessors.push(pendingAccessor);
    }
    if (hasMorphNormal) {
      const pendingAccessor = target.NORMAL !== void 0 ? parser.getDependency("accessor", target.NORMAL) : geometry2.attributes.normal;
      pendingNormalAccessors.push(pendingAccessor);
    }
    if (hasMorphColor) {
      const pendingAccessor = target.COLOR_0 !== void 0 ? parser.getDependency("accessor", target.COLOR_0) : geometry2.attributes.color;
      pendingColorAccessors.push(pendingAccessor);
    }
  }
  return Promise.all([
    Promise.all(pendingPositionAccessors),
    Promise.all(pendingNormalAccessors),
    Promise.all(pendingColorAccessors)
  ]).then(function(accessors) {
    const morphPositions = accessors[0];
    const morphNormals = accessors[1];
    const morphColors = accessors[2];
    if (hasMorphPosition) geometry2.morphAttributes.position = morphPositions;
    if (hasMorphNormal) geometry2.morphAttributes.normal = morphNormals;
    if (hasMorphColor) geometry2.morphAttributes.color = morphColors;
    geometry2.morphTargetsRelative = true;
    return geometry2;
  });
}
function updateMorphTargets(mesh2, meshDef) {
  mesh2.updateMorphTargets();
  if (meshDef.weights !== void 0) {
    for (let i2 = 0, il = meshDef.weights.length; i2 < il; i2++) {
      mesh2.morphTargetInfluences[i2] = meshDef.weights[i2];
    }
  }
  if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {
    const targetNames = meshDef.extras.targetNames;
    if (mesh2.morphTargetInfluences.length === targetNames.length) {
      mesh2.morphTargetDictionary = {};
      for (let i2 = 0, il = targetNames.length; i2 < il; i2++) {
        mesh2.morphTargetDictionary[targetNames[i2]] = i2;
      }
    } else {
      console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.");
    }
  }
}
function createPrimitiveKey(primitiveDef) {
  let geometryKey;
  const dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];
  if (dracoExtension) {
    geometryKey = "draco:" + dracoExtension.bufferView + ":" + dracoExtension.indices + ":" + createAttributesKey(dracoExtension.attributes);
  } else {
    geometryKey = primitiveDef.indices + ":" + createAttributesKey(primitiveDef.attributes) + ":" + primitiveDef.mode;
  }
  if (primitiveDef.targets !== void 0) {
    for (let i2 = 0, il = primitiveDef.targets.length; i2 < il; i2++) {
      geometryKey += ":" + createAttributesKey(primitiveDef.targets[i2]);
    }
  }
  return geometryKey;
}
function createAttributesKey(attributes) {
  let attributesKey = "";
  const keys = Object.keys(attributes).sort();
  for (let i2 = 0, il = keys.length; i2 < il; i2++) {
    attributesKey += keys[i2] + ":" + attributes[keys[i2]] + ";";
  }
  return attributesKey;
}
function getNormalizedComponentScale(constructor) {
  switch (constructor) {
    case Int8Array:
      return 1 / 127;
    case Uint8Array:
      return 1 / 255;
    case Int16Array:
      return 1 / 32767;
    case Uint16Array:
      return 1 / 65535;
    default:
      throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.");
  }
}
function getImageURIMimeType(uri) {
  if (uri.search(/\.jpe?g($|\?)/i) > 0 || uri.search(/^data\:image\/jpeg/) === 0) return "image/jpeg";
  if (uri.search(/\.webp($|\?)/i) > 0 || uri.search(/^data\:image\/webp/) === 0) return "image/webp";
  if (uri.search(/\.ktx2($|\?)/i) > 0 || uri.search(/^data\:image\/ktx2/) === 0) return "image/ktx2";
  return "image/png";
}
const _identityMatrix = new Matrix4();
class GLTFParser {
  constructor(json = {}, options = {}) {
    this.json = json;
    this.extensions = {};
    this.plugins = {};
    this.options = options;
    this.cache = new GLTFRegistry();
    this.associations = /* @__PURE__ */ new Map();
    this.primitiveCache = {};
    this.nodeCache = {};
    this.meshCache = { refs: {}, uses: {} };
    this.cameraCache = { refs: {}, uses: {} };
    this.lightCache = { refs: {}, uses: {} };
    this.sourceCache = {};
    this.textureCache = {};
    this.nodeNamesUsed = {};
    let isSafari = false;
    let safariVersion = -1;
    let isFirefox = false;
    let firefoxVersion = -1;
    if (typeof navigator !== "undefined") {
      const userAgent = navigator.userAgent;
      isSafari = /^((?!chrome|android).)*safari/i.test(userAgent) === true;
      const safariMatch = userAgent.match(/Version\/(\d+)/);
      safariVersion = isSafari && safariMatch ? parseInt(safariMatch[1], 10) : -1;
      isFirefox = userAgent.indexOf("Firefox") > -1;
      firefoxVersion = isFirefox ? userAgent.match(/Firefox\/([0-9]+)\./)[1] : -1;
    }
    if (typeof createImageBitmap === "undefined" || isSafari && safariVersion < 17 || isFirefox && firefoxVersion < 98) {
      this.textureLoader = new TextureLoader(this.options.manager);
    } else {
      this.textureLoader = new ImageBitmapLoader(this.options.manager);
    }
    this.textureLoader.setCrossOrigin(this.options.crossOrigin);
    this.textureLoader.setRequestHeader(this.options.requestHeader);
    this.fileLoader = new FileLoader(this.options.manager);
    this.fileLoader.setResponseType("arraybuffer");
    if (this.options.crossOrigin === "use-credentials") {
      this.fileLoader.setWithCredentials(true);
    }
  }
  setExtensions(extensions) {
    this.extensions = extensions;
  }
  setPlugins(plugins) {
    this.plugins = plugins;
  }
  parse(onLoad2, onError) {
    const parser = this;
    const json = this.json;
    const extensions = this.extensions;
    this.cache.removeAll();
    this.nodeCache = {};
    this._invokeAll(function(ext) {
      return ext._markDefs && ext._markDefs();
    });
    Promise.all(this._invokeAll(function(ext) {
      return ext.beforeRoot && ext.beforeRoot();
    })).then(function() {
      return Promise.all([
        parser.getDependencies("scene"),
        parser.getDependencies("animation"),
        parser.getDependencies("camera")
      ]);
    }).then(function(dependencies) {
      const result = {
        scene: dependencies[0][json.scene || 0],
        scenes: dependencies[0],
        animations: dependencies[1],
        cameras: dependencies[2],
        asset: json.asset,
        parser,
        userData: {}
      };
      addUnknownExtensionsToUserData(extensions, result, json);
      assignExtrasToUserData(result, json);
      return Promise.all(parser._invokeAll(function(ext) {
        return ext.afterRoot && ext.afterRoot(result);
      })).then(function() {
        for (const scene2 of result.scenes) {
          scene2.updateMatrixWorld();
        }
        onLoad2(result);
      });
    }).catch(onError);
  }
  /**
   * Marks the special nodes/meshes in json for efficient parse.
   *
   * @private
   */
  _markDefs() {
    const nodeDefs = this.json.nodes || [];
    const skinDefs = this.json.skins || [];
    const meshDefs = this.json.meshes || [];
    for (let skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {
      const joints = skinDefs[skinIndex].joints;
      for (let i2 = 0, il = joints.length; i2 < il; i2++) {
        nodeDefs[joints[i2]].isBone = true;
      }
    }
    for (let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {
      const nodeDef = nodeDefs[nodeIndex];
      if (nodeDef.mesh !== void 0) {
        this._addNodeRef(this.meshCache, nodeDef.mesh);
        if (nodeDef.skin !== void 0) {
          meshDefs[nodeDef.mesh].isSkinnedMesh = true;
        }
      }
      if (nodeDef.camera !== void 0) {
        this._addNodeRef(this.cameraCache, nodeDef.camera);
      }
    }
  }
  /**
   * Counts references to shared node / Object3D resources. These resources
   * can be reused, or "instantiated", at multiple nodes in the scene
   * hierarchy. Mesh, Camera, and Light instances are instantiated and must
   * be marked. Non-scenegraph resources (like Materials, Geometries, and
   * Textures) can be reused directly and are not marked here.
   *
   * Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
   *
   * @private
   * @param {Object} cache
   * @param {Object3D} index
   */
  _addNodeRef(cache, index) {
    if (index === void 0) return;
    if (cache.refs[index] === void 0) {
      cache.refs[index] = cache.uses[index] = 0;
    }
    cache.refs[index]++;
  }
  /**
   * Returns a reference to a shared resource, cloning it if necessary.
   *
   * @private
   * @param {Object} cache
   * @param {number} index
   * @param {Object} object
   * @return {Object}
   */
  _getNodeRef(cache, index, object) {
    if (cache.refs[index] <= 1) return object;
    const ref = object.clone();
    const updateMappings = (original, clone) => {
      const mappings = this.associations.get(original);
      if (mappings != null) {
        this.associations.set(clone, mappings);
      }
      for (const [i2, child] of original.children.entries()) {
        updateMappings(child, clone.children[i2]);
      }
    };
    updateMappings(object, ref);
    ref.name += "_instance_" + cache.uses[index]++;
    return ref;
  }
  _invokeOne(func) {
    const extensions = Object.values(this.plugins);
    extensions.push(this);
    for (let i2 = 0; i2 < extensions.length; i2++) {
      const result = func(extensions[i2]);
      if (result) return result;
    }
    return null;
  }
  _invokeAll(func) {
    const extensions = Object.values(this.plugins);
    extensions.unshift(this);
    const pending = [];
    for (let i2 = 0; i2 < extensions.length; i2++) {
      const result = func(extensions[i2]);
      if (result) pending.push(result);
    }
    return pending;
  }
  /**
   * Requests the specified dependency asynchronously, with caching.
   *
   * @private
   * @param {string} type
   * @param {number} index
   * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}
   */
  getDependency(type, index) {
    const cacheKey = type + ":" + index;
    let dependency = this.cache.get(cacheKey);
    if (!dependency) {
      switch (type) {
        case "scene":
          dependency = this.loadScene(index);
          break;
        case "node":
          dependency = this._invokeOne(function(ext) {
            return ext.loadNode && ext.loadNode(index);
          });
          break;
        case "mesh":
          dependency = this._invokeOne(function(ext) {
            return ext.loadMesh && ext.loadMesh(index);
          });
          break;
        case "accessor":
          dependency = this.loadAccessor(index);
          break;
        case "bufferView":
          dependency = this._invokeOne(function(ext) {
            return ext.loadBufferView && ext.loadBufferView(index);
          });
          break;
        case "buffer":
          dependency = this.loadBuffer(index);
          break;
        case "material":
          dependency = this._invokeOne(function(ext) {
            return ext.loadMaterial && ext.loadMaterial(index);
          });
          break;
        case "texture":
          dependency = this._invokeOne(function(ext) {
            return ext.loadTexture && ext.loadTexture(index);
          });
          break;
        case "skin":
          dependency = this.loadSkin(index);
          break;
        case "animation":
          dependency = this._invokeOne(function(ext) {
            return ext.loadAnimation && ext.loadAnimation(index);
          });
          break;
        case "camera":
          dependency = this.loadCamera(index);
          break;
        default:
          dependency = this._invokeOne(function(ext) {
            return ext != this && ext.getDependency && ext.getDependency(type, index);
          });
          if (!dependency) {
            throw new Error("Unknown type: " + type);
          }
          break;
      }
      this.cache.add(cacheKey, dependency);
    }
    return dependency;
  }
  /**
   * Requests all dependencies of the specified type asynchronously, with caching.
   *
   * @private
   * @param {string} type
   * @return {Promise<Array<Object>>}
   */
  getDependencies(type) {
    let dependencies = this.cache.get(type);
    if (!dependencies) {
      const parser = this;
      const defs = this.json[type + (type === "mesh" ? "es" : "s")] || [];
      dependencies = Promise.all(defs.map(function(def, index) {
        return parser.getDependency(type, index);
      }));
      this.cache.add(type, dependencies);
    }
    return dependencies;
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
   *
   * @private
   * @param {number} bufferIndex
   * @return {Promise<ArrayBuffer>}
   */
  loadBuffer(bufferIndex) {
    const bufferDef = this.json.buffers[bufferIndex];
    const loader = this.fileLoader;
    if (bufferDef.type && bufferDef.type !== "arraybuffer") {
      throw new Error("THREE.GLTFLoader: " + bufferDef.type + " buffer type is not supported.");
    }
    if (bufferDef.uri === void 0 && bufferIndex === 0) {
      return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);
    }
    const options = this.options;
    return new Promise(function(resolve, reject) {
      loader.load(LoaderUtils.resolveURL(bufferDef.uri, options.path), resolve, void 0, function() {
        reject(new Error('THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".'));
      });
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
   *
   * @private
   * @param {number} bufferViewIndex
   * @return {Promise<ArrayBuffer>}
   */
  loadBufferView(bufferViewIndex) {
    const bufferViewDef = this.json.bufferViews[bufferViewIndex];
    return this.getDependency("buffer", bufferViewDef.buffer).then(function(buffer) {
      const byteLength = bufferViewDef.byteLength || 0;
      const byteOffset = bufferViewDef.byteOffset || 0;
      return buffer.slice(byteOffset, byteOffset + byteLength);
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
   *
   * @private
   * @param {number} accessorIndex
   * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}
   */
  loadAccessor(accessorIndex) {
    const parser = this;
    const json = this.json;
    const accessorDef = this.json.accessors[accessorIndex];
    if (accessorDef.bufferView === void 0 && accessorDef.sparse === void 0) {
      const itemSize = WEBGL_TYPE_SIZES[accessorDef.type];
      const TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
      const normalized = accessorDef.normalized === true;
      const array = new TypedArray(accessorDef.count * itemSize);
      return Promise.resolve(new BufferAttribute(array, itemSize, normalized));
    }
    const pendingBufferViews = [];
    if (accessorDef.bufferView !== void 0) {
      pendingBufferViews.push(this.getDependency("bufferView", accessorDef.bufferView));
    } else {
      pendingBufferViews.push(null);
    }
    if (accessorDef.sparse !== void 0) {
      pendingBufferViews.push(this.getDependency("bufferView", accessorDef.sparse.indices.bufferView));
      pendingBufferViews.push(this.getDependency("bufferView", accessorDef.sparse.values.bufferView));
    }
    return Promise.all(pendingBufferViews).then(function(bufferViews) {
      const bufferView = bufferViews[0];
      const itemSize = WEBGL_TYPE_SIZES[accessorDef.type];
      const TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
      const elementBytes = TypedArray.BYTES_PER_ELEMENT;
      const itemBytes = elementBytes * itemSize;
      const byteOffset = accessorDef.byteOffset || 0;
      const byteStride = accessorDef.bufferView !== void 0 ? json.bufferViews[accessorDef.bufferView].byteStride : void 0;
      const normalized = accessorDef.normalized === true;
      let array, bufferAttribute;
      if (byteStride && byteStride !== itemBytes) {
        const ibSlice = Math.floor(byteOffset / byteStride);
        const ibCacheKey = "InterleavedBuffer:" + accessorDef.bufferView + ":" + accessorDef.componentType + ":" + ibSlice + ":" + accessorDef.count;
        let ib = parser.cache.get(ibCacheKey);
        if (!ib) {
          array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);
          ib = new InterleavedBuffer(array, byteStride / elementBytes);
          parser.cache.add(ibCacheKey, ib);
        }
        bufferAttribute = new InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);
      } else {
        if (bufferView === null) {
          array = new TypedArray(accessorDef.count * itemSize);
        } else {
          array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);
        }
        bufferAttribute = new BufferAttribute(array, itemSize, normalized);
      }
      if (accessorDef.sparse !== void 0) {
        const itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
        const TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];
        const byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
        const byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
        const sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);
        const sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);
        if (bufferView !== null) {
          bufferAttribute = new BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);
        }
        bufferAttribute.normalized = false;
        for (let i2 = 0, il = sparseIndices.length; i2 < il; i2++) {
          const index = sparseIndices[i2];
          bufferAttribute.setX(index, sparseValues[i2 * itemSize]);
          if (itemSize >= 2) bufferAttribute.setY(index, sparseValues[i2 * itemSize + 1]);
          if (itemSize >= 3) bufferAttribute.setZ(index, sparseValues[i2 * itemSize + 2]);
          if (itemSize >= 4) bufferAttribute.setW(index, sparseValues[i2 * itemSize + 3]);
          if (itemSize >= 5) throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.");
        }
        bufferAttribute.normalized = normalized;
      }
      return bufferAttribute;
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
   *
   * @private
   * @param {number} textureIndex
   * @return {Promise<THREE.Texture|null>}
   */
  loadTexture(textureIndex) {
    const json = this.json;
    const options = this.options;
    const textureDef = json.textures[textureIndex];
    const sourceIndex = textureDef.source;
    const sourceDef = json.images[sourceIndex];
    let loader = this.textureLoader;
    if (sourceDef.uri) {
      const handler = options.manager.getHandler(sourceDef.uri);
      if (handler !== null) loader = handler;
    }
    return this.loadTextureImage(textureIndex, sourceIndex, loader);
  }
  loadTextureImage(textureIndex, sourceIndex, loader) {
    const parser = this;
    const json = this.json;
    const textureDef = json.textures[textureIndex];
    const sourceDef = json.images[sourceIndex];
    const cacheKey = (sourceDef.uri || sourceDef.bufferView) + ":" + textureDef.sampler;
    if (this.textureCache[cacheKey]) {
      return this.textureCache[cacheKey];
    }
    const promise = this.loadImageSource(sourceIndex, loader).then(function(texture) {
      texture.flipY = false;
      texture.name = textureDef.name || sourceDef.name || "";
      if (texture.name === "" && typeof sourceDef.uri === "string" && sourceDef.uri.startsWith("data:image/") === false) {
        texture.name = sourceDef.uri;
      }
      const samplers = json.samplers || {};
      const sampler = samplers[textureDef.sampler] || {};
      texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || LinearFilter;
      texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || LinearMipmapLinearFilter;
      texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || RepeatWrapping;
      texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || RepeatWrapping;
      texture.generateMipmaps = !texture.isCompressedTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
      parser.associations.set(texture, { textures: textureIndex });
      return texture;
    }).catch(function() {
      return null;
    });
    this.textureCache[cacheKey] = promise;
    return promise;
  }
  loadImageSource(sourceIndex, loader) {
    const parser = this;
    const json = this.json;
    const options = this.options;
    if (this.sourceCache[sourceIndex] !== void 0) {
      return this.sourceCache[sourceIndex].then((texture) => texture.clone());
    }
    const sourceDef = json.images[sourceIndex];
    const URL2 = self.URL || self.webkitURL;
    let sourceURI = sourceDef.uri || "";
    let isObjectURL = false;
    if (sourceDef.bufferView !== void 0) {
      sourceURI = parser.getDependency("bufferView", sourceDef.bufferView).then(function(bufferView) {
        isObjectURL = true;
        const blob = new Blob([bufferView], { type: sourceDef.mimeType });
        sourceURI = URL2.createObjectURL(blob);
        return sourceURI;
      });
    } else if (sourceDef.uri === void 0) {
      throw new Error("THREE.GLTFLoader: Image " + sourceIndex + " is missing URI and bufferView");
    }
    const promise = Promise.resolve(sourceURI).then(function(sourceURI2) {
      return new Promise(function(resolve, reject) {
        let onLoad2 = resolve;
        if (loader.isImageBitmapLoader === true) {
          onLoad2 = function(imageBitmap) {
            const texture = new Texture(imageBitmap);
            texture.needsUpdate = true;
            resolve(texture);
          };
        }
        loader.load(LoaderUtils.resolveURL(sourceURI2, options.path), onLoad2, void 0, reject);
      });
    }).then(function(texture) {
      if (isObjectURL === true) {
        URL2.revokeObjectURL(sourceURI);
      }
      assignExtrasToUserData(texture, sourceDef);
      texture.userData.mimeType = sourceDef.mimeType || getImageURIMimeType(sourceDef.uri);
      return texture;
    }).catch(function(error) {
      console.error("THREE.GLTFLoader: Couldn't load texture", sourceURI);
      throw error;
    });
    this.sourceCache[sourceIndex] = promise;
    return promise;
  }
  /**
   * Asynchronously assigns a texture to the given material parameters.
   *
   * @private
   * @param {Object} materialParams
   * @param {string} mapName
   * @param {Object} mapDef
   * @param {string} [colorSpace]
   * @return {Promise<Texture>}
   */
  assignTexture(materialParams, mapName, mapDef, colorSpace) {
    const parser = this;
    return this.getDependency("texture", mapDef.index).then(function(texture) {
      if (!texture) return null;
      if (mapDef.texCoord !== void 0 && mapDef.texCoord > 0) {
        texture = texture.clone();
        texture.channel = mapDef.texCoord;
      }
      if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {
        const transform = mapDef.extensions !== void 0 ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : void 0;
        if (transform) {
          const gltfReference = parser.associations.get(texture);
          texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);
          parser.associations.set(texture, gltfReference);
        }
      }
      if (colorSpace !== void 0) {
        texture.colorSpace = colorSpace;
      }
      materialParams[mapName] = texture;
      return texture;
    });
  }
  /**
   * Assigns final material to a Mesh, Line, or Points instance. The instance
   * already has a material (generated from the glTF material options alone)
   * but reuse of the same glTF material may require multiple threejs materials
   * to accommodate different primitive types, defines, etc. New materials will
   * be created if necessary, and reused from a cache.
   *
   * @private
   * @param {Object3D} mesh Mesh, Line, or Points instance.
   */
  assignFinalMaterial(mesh2) {
    const geometry2 = mesh2.geometry;
    let material2 = mesh2.material;
    const useDerivativeTangents = geometry2.attributes.tangent === void 0;
    const useVertexColors = geometry2.attributes.color !== void 0;
    const useFlatShading = geometry2.attributes.normal === void 0;
    if (mesh2.isPoints) {
      const cacheKey = "PointsMaterial:" + material2.uuid;
      let pointsMaterial = this.cache.get(cacheKey);
      if (!pointsMaterial) {
        pointsMaterial = new PointsMaterial();
        Material.prototype.copy.call(pointsMaterial, material2);
        pointsMaterial.color.copy(material2.color);
        pointsMaterial.map = material2.map;
        pointsMaterial.sizeAttenuation = false;
        this.cache.add(cacheKey, pointsMaterial);
      }
      material2 = pointsMaterial;
    } else if (mesh2.isLine) {
      const cacheKey = "LineBasicMaterial:" + material2.uuid;
      let lineMaterial = this.cache.get(cacheKey);
      if (!lineMaterial) {
        lineMaterial = new LineBasicMaterial();
        Material.prototype.copy.call(lineMaterial, material2);
        lineMaterial.color.copy(material2.color);
        lineMaterial.map = material2.map;
        this.cache.add(cacheKey, lineMaterial);
      }
      material2 = lineMaterial;
    }
    if (useDerivativeTangents || useVertexColors || useFlatShading) {
      let cacheKey = "ClonedMaterial:" + material2.uuid + ":";
      if (useDerivativeTangents) cacheKey += "derivative-tangents:";
      if (useVertexColors) cacheKey += "vertex-colors:";
      if (useFlatShading) cacheKey += "flat-shading:";
      let cachedMaterial = this.cache.get(cacheKey);
      if (!cachedMaterial) {
        cachedMaterial = material2.clone();
        if (useVertexColors) cachedMaterial.vertexColors = true;
        if (useFlatShading) cachedMaterial.flatShading = true;
        if (useDerivativeTangents) {
          if (cachedMaterial.normalScale) cachedMaterial.normalScale.y *= -1;
          if (cachedMaterial.clearcoatNormalScale) cachedMaterial.clearcoatNormalScale.y *= -1;
        }
        this.cache.add(cacheKey, cachedMaterial);
        this.associations.set(cachedMaterial, this.associations.get(material2));
      }
      material2 = cachedMaterial;
    }
    mesh2.material = material2;
  }
  getMaterialType() {
    return MeshStandardMaterial;
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
   *
   * @private
   * @param {number} materialIndex
   * @return {Promise<Material>}
   */
  loadMaterial(materialIndex) {
    const parser = this;
    const json = this.json;
    const extensions = this.extensions;
    const materialDef = json.materials[materialIndex];
    let materialType;
    const materialParams = {};
    const materialExtensions = materialDef.extensions || {};
    const pending = [];
    if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {
      const kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];
      materialType = kmuExtension.getMaterialType();
      pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));
    } else {
      const metallicRoughness = materialDef.pbrMetallicRoughness || {};
      materialParams.color = new Color(1, 1, 1);
      materialParams.opacity = 1;
      if (Array.isArray(metallicRoughness.baseColorFactor)) {
        const array = metallicRoughness.baseColorFactor;
        materialParams.color.setRGB(array[0], array[1], array[2], LinearSRGBColorSpace);
        materialParams.opacity = array[3];
      }
      if (metallicRoughness.baseColorTexture !== void 0) {
        pending.push(parser.assignTexture(materialParams, "map", metallicRoughness.baseColorTexture, SRGBColorSpace));
      }
      materialParams.metalness = metallicRoughness.metallicFactor !== void 0 ? metallicRoughness.metallicFactor : 1;
      materialParams.roughness = metallicRoughness.roughnessFactor !== void 0 ? metallicRoughness.roughnessFactor : 1;
      if (metallicRoughness.metallicRoughnessTexture !== void 0) {
        pending.push(parser.assignTexture(materialParams, "metalnessMap", metallicRoughness.metallicRoughnessTexture));
        pending.push(parser.assignTexture(materialParams, "roughnessMap", metallicRoughness.metallicRoughnessTexture));
      }
      materialType = this._invokeOne(function(ext) {
        return ext.getMaterialType && ext.getMaterialType(materialIndex);
      });
      pending.push(Promise.all(this._invokeAll(function(ext) {
        return ext.extendMaterialParams && ext.extendMaterialParams(materialIndex, materialParams);
      })));
    }
    if (materialDef.doubleSided === true) {
      materialParams.side = DoubleSide;
    }
    const alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
    if (alphaMode === ALPHA_MODES.BLEND) {
      materialParams.transparent = true;
      materialParams.depthWrite = false;
    } else {
      materialParams.transparent = false;
      if (alphaMode === ALPHA_MODES.MASK) {
        materialParams.alphaTest = materialDef.alphaCutoff !== void 0 ? materialDef.alphaCutoff : 0.5;
      }
    }
    if (materialDef.normalTexture !== void 0 && materialType !== MeshBasicMaterial) {
      pending.push(parser.assignTexture(materialParams, "normalMap", materialDef.normalTexture));
      materialParams.normalScale = new Vector2(1, 1);
      if (materialDef.normalTexture.scale !== void 0) {
        const scale = materialDef.normalTexture.scale;
        materialParams.normalScale.set(scale, scale);
      }
    }
    if (materialDef.occlusionTexture !== void 0 && materialType !== MeshBasicMaterial) {
      pending.push(parser.assignTexture(materialParams, "aoMap", materialDef.occlusionTexture));
      if (materialDef.occlusionTexture.strength !== void 0) {
        materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
      }
    }
    if (materialDef.emissiveFactor !== void 0 && materialType !== MeshBasicMaterial) {
      const emissiveFactor = materialDef.emissiveFactor;
      materialParams.emissive = new Color().setRGB(emissiveFactor[0], emissiveFactor[1], emissiveFactor[2], LinearSRGBColorSpace);
    }
    if (materialDef.emissiveTexture !== void 0 && materialType !== MeshBasicMaterial) {
      pending.push(parser.assignTexture(materialParams, "emissiveMap", materialDef.emissiveTexture, SRGBColorSpace));
    }
    return Promise.all(pending).then(function() {
      const material2 = new materialType(materialParams);
      if (materialDef.name) material2.name = materialDef.name;
      assignExtrasToUserData(material2, materialDef);
      parser.associations.set(material2, { materials: materialIndex });
      if (materialDef.extensions) addUnknownExtensionsToUserData(extensions, material2, materialDef);
      return material2;
    });
  }
  /**
   * When Object3D instances are targeted by animation, they need unique names.
   *
   * @private
   * @param {string} originalName
   * @return {string}
   */
  createUniqueName(originalName) {
    const sanitizedName = PropertyBinding.sanitizeNodeName(originalName || "");
    if (sanitizedName in this.nodeNamesUsed) {
      return sanitizedName + "_" + ++this.nodeNamesUsed[sanitizedName];
    } else {
      this.nodeNamesUsed[sanitizedName] = 0;
      return sanitizedName;
    }
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
   *
   * Creates BufferGeometries from primitives.
   *
   * @private
   * @param {Array<GLTF.Primitive>} primitives
   * @return {Promise<Array<BufferGeometry>>}
   */
  loadGeometries(primitives) {
    const parser = this;
    const extensions = this.extensions;
    const cache = this.primitiveCache;
    function createDracoPrimitive(primitive) {
      return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function(geometry2) {
        return addPrimitiveAttributes(geometry2, primitive, parser);
      });
    }
    const pending = [];
    for (let i2 = 0, il = primitives.length; i2 < il; i2++) {
      const primitive = primitives[i2];
      const cacheKey = createPrimitiveKey(primitive);
      const cached = cache[cacheKey];
      if (cached) {
        pending.push(cached.promise);
      } else {
        let geometryPromise;
        if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {
          geometryPromise = createDracoPrimitive(primitive);
        } else {
          geometryPromise = addPrimitiveAttributes(new BufferGeometry(), primitive, parser);
        }
        cache[cacheKey] = { primitive, promise: geometryPromise };
        pending.push(geometryPromise);
      }
    }
    return Promise.all(pending);
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
   *
   * @private
   * @param {number} meshIndex
   * @return {Promise<Group|Mesh|SkinnedMesh|Line|Points>}
   */
  loadMesh(meshIndex) {
    const parser = this;
    const json = this.json;
    const extensions = this.extensions;
    const meshDef = json.meshes[meshIndex];
    const primitives = meshDef.primitives;
    const pending = [];
    for (let i2 = 0, il = primitives.length; i2 < il; i2++) {
      const material2 = primitives[i2].material === void 0 ? createDefaultMaterial(this.cache) : this.getDependency("material", primitives[i2].material);
      pending.push(material2);
    }
    pending.push(parser.loadGeometries(primitives));
    return Promise.all(pending).then(function(results) {
      const materials = results.slice(0, results.length - 1);
      const geometries = results[results.length - 1];
      const meshes = [];
      for (let i2 = 0, il = geometries.length; i2 < il; i2++) {
        const geometry2 = geometries[i2];
        const primitive = primitives[i2];
        let mesh2;
        const material2 = materials[i2];
        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === void 0) {
          mesh2 = meshDef.isSkinnedMesh === true ? new SkinnedMesh(geometry2, material2) : new Mesh(geometry2, material2);
          if (mesh2.isSkinnedMesh === true) {
            mesh2.normalizeSkinWeights();
          }
          if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {
            mesh2.geometry = toTrianglesDrawMode(mesh2.geometry, TriangleStripDrawMode);
          } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {
            mesh2.geometry = toTrianglesDrawMode(mesh2.geometry, TriangleFanDrawMode);
          }
        } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {
          mesh2 = new LineSegments(geometry2, material2);
        } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {
          mesh2 = new Line(geometry2, material2);
        } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {
          mesh2 = new LineLoop(geometry2, material2);
        } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {
          mesh2 = new Points(geometry2, material2);
        } else {
          throw new Error("THREE.GLTFLoader: Primitive mode unsupported: " + primitive.mode);
        }
        if (Object.keys(mesh2.geometry.morphAttributes).length > 0) {
          updateMorphTargets(mesh2, meshDef);
        }
        mesh2.name = parser.createUniqueName(meshDef.name || "mesh_" + meshIndex);
        assignExtrasToUserData(mesh2, meshDef);
        if (primitive.extensions) addUnknownExtensionsToUserData(extensions, mesh2, primitive);
        parser.assignFinalMaterial(mesh2);
        meshes.push(mesh2);
      }
      for (let i2 = 0, il = meshes.length; i2 < il; i2++) {
        parser.associations.set(meshes[i2], {
          meshes: meshIndex,
          primitives: i2
        });
      }
      if (meshes.length === 1) {
        if (meshDef.extensions) addUnknownExtensionsToUserData(extensions, meshes[0], meshDef);
        return meshes[0];
      }
      const group = new Group();
      if (meshDef.extensions) addUnknownExtensionsToUserData(extensions, group, meshDef);
      parser.associations.set(group, { meshes: meshIndex });
      for (let i2 = 0, il = meshes.length; i2 < il; i2++) {
        group.add(meshes[i2]);
      }
      return group;
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
   *
   * @private
   * @param {number} cameraIndex
   * @return {Promise<THREE.Camera>}
   */
  loadCamera(cameraIndex) {
    let camera2;
    const cameraDef = this.json.cameras[cameraIndex];
    const params = cameraDef[cameraDef.type];
    if (!params) {
      console.warn("THREE.GLTFLoader: Missing camera parameters.");
      return;
    }
    if (cameraDef.type === "perspective") {
      camera2 = new PerspectiveCamera(MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6);
    } else if (cameraDef.type === "orthographic") {
      camera2 = new OrthographicCamera(-params.xmag, params.xmag, params.ymag, -params.ymag, params.znear, params.zfar);
    }
    if (cameraDef.name) camera2.name = this.createUniqueName(cameraDef.name);
    assignExtrasToUserData(camera2, cameraDef);
    return Promise.resolve(camera2);
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
   *
   * @private
   * @param {number} skinIndex
   * @return {Promise<Skeleton>}
   */
  loadSkin(skinIndex) {
    const skinDef = this.json.skins[skinIndex];
    const pending = [];
    for (let i2 = 0, il = skinDef.joints.length; i2 < il; i2++) {
      pending.push(this._loadNodeShallow(skinDef.joints[i2]));
    }
    if (skinDef.inverseBindMatrices !== void 0) {
      pending.push(this.getDependency("accessor", skinDef.inverseBindMatrices));
    } else {
      pending.push(null);
    }
    return Promise.all(pending).then(function(results) {
      const inverseBindMatrices = results.pop();
      const jointNodes = results;
      const bones = [];
      const boneInverses = [];
      for (let i2 = 0, il = jointNodes.length; i2 < il; i2++) {
        const jointNode = jointNodes[i2];
        if (jointNode) {
          bones.push(jointNode);
          const mat = new Matrix4();
          if (inverseBindMatrices !== null) {
            mat.fromArray(inverseBindMatrices.array, i2 * 16);
          }
          boneInverses.push(mat);
        } else {
          console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', skinDef.joints[i2]);
        }
      }
      return new Skeleton(bones, boneInverses);
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
   *
   * @private
   * @param {number} animationIndex
   * @return {Promise<AnimationClip>}
   */
  loadAnimation(animationIndex) {
    const json = this.json;
    const parser = this;
    const animationDef = json.animations[animationIndex];
    const animationName = animationDef.name ? animationDef.name : "animation_" + animationIndex;
    const pendingNodes = [];
    const pendingInputAccessors = [];
    const pendingOutputAccessors = [];
    const pendingSamplers = [];
    const pendingTargets = [];
    for (let i2 = 0, il = animationDef.channels.length; i2 < il; i2++) {
      const channel = animationDef.channels[i2];
      const sampler = animationDef.samplers[channel.sampler];
      const target = channel.target;
      const name = target.node;
      const input = animationDef.parameters !== void 0 ? animationDef.parameters[sampler.input] : sampler.input;
      const output = animationDef.parameters !== void 0 ? animationDef.parameters[sampler.output] : sampler.output;
      if (target.node === void 0) continue;
      pendingNodes.push(this.getDependency("node", name));
      pendingInputAccessors.push(this.getDependency("accessor", input));
      pendingOutputAccessors.push(this.getDependency("accessor", output));
      pendingSamplers.push(sampler);
      pendingTargets.push(target);
    }
    return Promise.all([
      Promise.all(pendingNodes),
      Promise.all(pendingInputAccessors),
      Promise.all(pendingOutputAccessors),
      Promise.all(pendingSamplers),
      Promise.all(pendingTargets)
    ]).then(function(dependencies) {
      const nodes = dependencies[0];
      const inputAccessors = dependencies[1];
      const outputAccessors = dependencies[2];
      const samplers = dependencies[3];
      const targets = dependencies[4];
      const tracks = [];
      for (let i2 = 0, il = nodes.length; i2 < il; i2++) {
        const node = nodes[i2];
        const inputAccessor = inputAccessors[i2];
        const outputAccessor = outputAccessors[i2];
        const sampler = samplers[i2];
        const target = targets[i2];
        if (node === void 0) continue;
        if (node.updateMatrix) {
          node.updateMatrix();
        }
        const createdTracks = parser._createAnimationTracks(node, inputAccessor, outputAccessor, sampler, target);
        if (createdTracks) {
          for (let k = 0; k < createdTracks.length; k++) {
            tracks.push(createdTracks[k]);
          }
        }
      }
      return new AnimationClip(animationName, void 0, tracks);
    });
  }
  createNodeMesh(nodeIndex) {
    const json = this.json;
    const parser = this;
    const nodeDef = json.nodes[nodeIndex];
    if (nodeDef.mesh === void 0) return null;
    return parser.getDependency("mesh", nodeDef.mesh).then(function(mesh2) {
      const node = parser._getNodeRef(parser.meshCache, nodeDef.mesh, mesh2);
      if (nodeDef.weights !== void 0) {
        node.traverse(function(o) {
          if (!o.isMesh) return;
          for (let i2 = 0, il = nodeDef.weights.length; i2 < il; i2++) {
            o.morphTargetInfluences[i2] = nodeDef.weights[i2];
          }
        });
      }
      return node;
    });
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
   *
   * @private
   * @param {number} nodeIndex
   * @return {Promise<Object3D>}
   */
  loadNode(nodeIndex) {
    const json = this.json;
    const parser = this;
    const nodeDef = json.nodes[nodeIndex];
    const nodePending = parser._loadNodeShallow(nodeIndex);
    const childPending = [];
    const childrenDef = nodeDef.children || [];
    for (let i2 = 0, il = childrenDef.length; i2 < il; i2++) {
      childPending.push(parser.getDependency("node", childrenDef[i2]));
    }
    const skeletonPending = nodeDef.skin === void 0 ? Promise.resolve(null) : parser.getDependency("skin", nodeDef.skin);
    return Promise.all([
      nodePending,
      Promise.all(childPending),
      skeletonPending
    ]).then(function(results) {
      const node = results[0];
      const children = results[1];
      const skeleton = results[2];
      if (skeleton !== null) {
        node.traverse(function(mesh2) {
          if (!mesh2.isSkinnedMesh) return;
          mesh2.bind(skeleton, _identityMatrix);
        });
      }
      for (let i2 = 0, il = children.length; i2 < il; i2++) {
        node.add(children[i2]);
      }
      return node;
    });
  }
  // ._loadNodeShallow() parses a single node.
  // skin and child nodes are created and added in .loadNode() (no '_' prefix).
  _loadNodeShallow(nodeIndex) {
    const json = this.json;
    const extensions = this.extensions;
    const parser = this;
    if (this.nodeCache[nodeIndex] !== void 0) {
      return this.nodeCache[nodeIndex];
    }
    const nodeDef = json.nodes[nodeIndex];
    const nodeName = nodeDef.name ? parser.createUniqueName(nodeDef.name) : "";
    const pending = [];
    const meshPromise = parser._invokeOne(function(ext) {
      return ext.createNodeMesh && ext.createNodeMesh(nodeIndex);
    });
    if (meshPromise) {
      pending.push(meshPromise);
    }
    if (nodeDef.camera !== void 0) {
      pending.push(parser.getDependency("camera", nodeDef.camera).then(function(camera2) {
        return parser._getNodeRef(parser.cameraCache, nodeDef.camera, camera2);
      }));
    }
    parser._invokeAll(function(ext) {
      return ext.createNodeAttachment && ext.createNodeAttachment(nodeIndex);
    }).forEach(function(promise) {
      pending.push(promise);
    });
    this.nodeCache[nodeIndex] = Promise.all(pending).then(function(objects) {
      let node;
      if (nodeDef.isBone === true) {
        node = new Bone();
      } else if (objects.length > 1) {
        node = new Group();
      } else if (objects.length === 1) {
        node = objects[0];
      } else {
        node = new Object3D();
      }
      if (node !== objects[0]) {
        for (let i2 = 0, il = objects.length; i2 < il; i2++) {
          node.add(objects[i2]);
        }
      }
      if (nodeDef.name) {
        node.userData.name = nodeDef.name;
        node.name = nodeName;
      }
      assignExtrasToUserData(node, nodeDef);
      if (nodeDef.extensions) addUnknownExtensionsToUserData(extensions, node, nodeDef);
      if (nodeDef.matrix !== void 0) {
        const matrix = new Matrix4();
        matrix.fromArray(nodeDef.matrix);
        node.applyMatrix4(matrix);
      } else {
        if (nodeDef.translation !== void 0) {
          node.position.fromArray(nodeDef.translation);
        }
        if (nodeDef.rotation !== void 0) {
          node.quaternion.fromArray(nodeDef.rotation);
        }
        if (nodeDef.scale !== void 0) {
          node.scale.fromArray(nodeDef.scale);
        }
      }
      if (!parser.associations.has(node)) {
        parser.associations.set(node, {});
      }
      parser.associations.get(node).nodes = nodeIndex;
      return node;
    });
    return this.nodeCache[nodeIndex];
  }
  /**
   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
   *
   * @private
   * @param {number} sceneIndex
   * @return {Promise<Group>}
   */
  loadScene(sceneIndex) {
    const extensions = this.extensions;
    const sceneDef = this.json.scenes[sceneIndex];
    const parser = this;
    const scene2 = new Group();
    if (sceneDef.name) scene2.name = parser.createUniqueName(sceneDef.name);
    assignExtrasToUserData(scene2, sceneDef);
    if (sceneDef.extensions) addUnknownExtensionsToUserData(extensions, scene2, sceneDef);
    const nodeIds = sceneDef.nodes || [];
    const pending = [];
    for (let i2 = 0, il = nodeIds.length; i2 < il; i2++) {
      pending.push(parser.getDependency("node", nodeIds[i2]));
    }
    return Promise.all(pending).then(function(nodes) {
      for (let i2 = 0, il = nodes.length; i2 < il; i2++) {
        scene2.add(nodes[i2]);
      }
      const reduceAssociations = (node) => {
        const reducedAssociations = /* @__PURE__ */ new Map();
        for (const [key, value] of parser.associations) {
          if (key instanceof Material || key instanceof Texture) {
            reducedAssociations.set(key, value);
          }
        }
        node.traverse((node2) => {
          const mappings = parser.associations.get(node2);
          if (mappings != null) {
            reducedAssociations.set(node2, mappings);
          }
        });
        return reducedAssociations;
      };
      parser.associations = reduceAssociations(scene2);
      return scene2;
    });
  }
  _createAnimationTracks(node, inputAccessor, outputAccessor, sampler, target) {
    const tracks = [];
    const targetName = node.name ? node.name : node.uuid;
    const targetNames = [];
    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {
      node.traverse(function(object) {
        if (object.morphTargetInfluences) {
          targetNames.push(object.name ? object.name : object.uuid);
        }
      });
    } else {
      targetNames.push(targetName);
    }
    let TypedKeyframeTrack;
    switch (PATH_PROPERTIES[target.path]) {
      case PATH_PROPERTIES.weights:
        TypedKeyframeTrack = NumberKeyframeTrack;
        break;
      case PATH_PROPERTIES.rotation:
        TypedKeyframeTrack = QuaternionKeyframeTrack;
        break;
      case PATH_PROPERTIES.translation:
      case PATH_PROPERTIES.scale:
        TypedKeyframeTrack = VectorKeyframeTrack;
        break;
      default:
        switch (outputAccessor.itemSize) {
          case 1:
            TypedKeyframeTrack = NumberKeyframeTrack;
            break;
          case 2:
          case 3:
          default:
            TypedKeyframeTrack = VectorKeyframeTrack;
            break;
        }
        break;
    }
    const interpolation = sampler.interpolation !== void 0 ? INTERPOLATION[sampler.interpolation] : InterpolateLinear;
    const outputArray = this._getArrayFromAccessor(outputAccessor);
    for (let j = 0, jl = targetNames.length; j < jl; j++) {
      const track = new TypedKeyframeTrack(
        targetNames[j] + "." + PATH_PROPERTIES[target.path],
        inputAccessor.array,
        outputArray,
        interpolation
      );
      if (sampler.interpolation === "CUBICSPLINE") {
        this._createCubicSplineTrackInterpolant(track);
      }
      tracks.push(track);
    }
    return tracks;
  }
  _getArrayFromAccessor(accessor) {
    let outputArray = accessor.array;
    if (accessor.normalized) {
      const scale = getNormalizedComponentScale(outputArray.constructor);
      const scaled = new Float32Array(outputArray.length);
      for (let j = 0, jl = outputArray.length; j < jl; j++) {
        scaled[j] = outputArray[j] * scale;
      }
      outputArray = scaled;
    }
    return outputArray;
  }
  _createCubicSplineTrackInterpolant(track) {
    track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {
      const interpolantType = this instanceof QuaternionKeyframeTrack ? GLTFCubicSplineQuaternionInterpolant : GLTFCubicSplineInterpolant;
      return new interpolantType(this.times, this.values, this.getValueSize() / 3, result);
    };
    track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
  }
}
function computeBounds(geometry2, primitiveDef, parser) {
  const attributes = primitiveDef.attributes;
  const box = new Box3();
  if (attributes.POSITION !== void 0) {
    const accessor = parser.json.accessors[attributes.POSITION];
    const min = accessor.min;
    const max = accessor.max;
    if (min !== void 0 && max !== void 0) {
      box.set(
        new Vector3(min[0], min[1], min[2]),
        new Vector3(max[0], max[1], max[2])
      );
      if (accessor.normalized) {
        const boxScale = getNormalizedComponentScale(WEBGL_COMPONENT_TYPES[accessor.componentType]);
        box.min.multiplyScalar(boxScale);
        box.max.multiplyScalar(boxScale);
      }
    } else {
      console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
      return;
    }
  } else {
    return;
  }
  const targets = primitiveDef.targets;
  if (targets !== void 0) {
    const maxDisplacement = new Vector3();
    const vector = new Vector3();
    for (let i2 = 0, il = targets.length; i2 < il; i2++) {
      const target = targets[i2];
      if (target.POSITION !== void 0) {
        const accessor = parser.json.accessors[target.POSITION];
        const min = accessor.min;
        const max = accessor.max;
        if (min !== void 0 && max !== void 0) {
          vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));
          vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));
          vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));
          if (accessor.normalized) {
            const boxScale = getNormalizedComponentScale(WEBGL_COMPONENT_TYPES[accessor.componentType]);
            vector.multiplyScalar(boxScale);
          }
          maxDisplacement.max(vector);
        } else {
          console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
        }
      }
    }
    box.expandByVector(maxDisplacement);
  }
  geometry2.boundingBox = box;
  const sphere = new Sphere();
  box.getCenter(sphere.center);
  sphere.radius = box.min.distanceTo(box.max) / 2;
  geometry2.boundingSphere = sphere;
}
function addPrimitiveAttributes(geometry2, primitiveDef, parser) {
  const attributes = primitiveDef.attributes;
  const pending = [];
  function assignAttributeAccessor(accessorIndex, attributeName) {
    return parser.getDependency("accessor", accessorIndex).then(function(accessor) {
      geometry2.setAttribute(attributeName, accessor);
    });
  }
  for (const gltfAttributeName in attributes) {
    const threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();
    if (threeAttributeName in geometry2.attributes) continue;
    pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));
  }
  if (primitiveDef.indices !== void 0 && !geometry2.index) {
    const accessor = parser.getDependency("accessor", primitiveDef.indices).then(function(accessor2) {
      geometry2.setIndex(accessor2);
    });
    pending.push(accessor);
  }
  if (ColorManagement.workingColorSpace !== LinearSRGBColorSpace && "COLOR_0" in attributes) {
    console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${ColorManagement.workingColorSpace}" not supported.`);
  }
  assignExtrasToUserData(geometry2, primitiveDef);
  computeBounds(geometry2, primitiveDef, parser);
  return Promise.all(pending).then(function() {
    return primitiveDef.targets !== void 0 ? addMorphTargets(geometry2, primitiveDef.targets, parser) : geometry2;
  });
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var dist$2 = { exports: {} };
var dist$1 = {};
var hasRequiredDist$2;
function requireDist$2() {
  if (hasRequiredDist$2) return dist$1;
  hasRequiredDist$2 = 1;
  (function(exports) {
    var __defProp = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    __export(exports, {
      Atom: () => Atom,
      PointerProxy: () => PointerProxy,
      Ticker: () => Ticker,
      getPointerParts: () => getPointerParts,
      isPointer: () => isPointer,
      isPrism: () => isPrism,
      iterateAndCountTicks: () => iterateAndCountTicks,
      iterateOver: () => iterateOver,
      pointer: () => pointer_default,
      pointerToPrism: () => pointerToPrism,
      prism: () => prism_default,
      val: () => val
    });
    var isArray = Array.isArray;
    var isArray_default = isArray;
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeGlobal_default = freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal_default || freeSelf || Function("return this")();
    var root_default = root;
    var Symbol2 = root_default.Symbol;
    var Symbol_default = Symbol2;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getRawTag_default = getRawTag;
    var objectProto2 = Object.prototype;
    var nativeObjectToString2 = objectProto2.toString;
    function objectToString(value) {
      return nativeObjectToString2.call(value);
    }
    var objectToString_default = objectToString;
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
    }
    var baseGetTag_default = baseGetTag;
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isObjectLike_default = isObjectLike;
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
    }
    var isSymbol_default = isSymbol;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray_default(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    var isKey_default = isKey;
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    var isObject_default = isObject2;
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject_default(value)) {
        return false;
      }
      var tag = baseGetTag_default(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_default = isFunction;
    var coreJsData = root_default["__core-js_shared__"];
    var coreJsData_default = coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var isMasked_default = isMasked;
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    var toSource_default = toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto2 = Function.prototype;
    var objectProto3 = Object.prototype;
    var funcToString2 = funcProto2.toString;
    var hasOwnProperty2 = objectProto3.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject_default(value) || isMasked_default(value)) {
        return false;
      }
      var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource_default(value));
    }
    var baseIsNative_default = baseIsNative;
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    var getValue_default = getValue;
    function getNative(object, key) {
      var value = getValue_default(object, key);
      return baseIsNative_default(value) ? value : void 0;
    }
    var getNative_default = getNative;
    var nativeCreate = getNative_default(Object, "create");
    var nativeCreate_default = nativeCreate;
    function hashClear() {
      this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
      this.size = 0;
    }
    var hashClear_default = hashClear;
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var hashDelete_default = hashDelete;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto4 = Object.prototype;
    var hasOwnProperty3 = objectProto4.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate_default) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    var hashGet_default = hashGet;
    var objectProto5 = Object.prototype;
    var hasOwnProperty4 = objectProto5.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
    }
    var hashHas_default = hashHas;
    var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
      return this;
    }
    var hashSet_default = hashSet;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear_default;
    Hash.prototype["delete"] = hashDelete_default;
    Hash.prototype.get = hashGet_default;
    Hash.prototype.has = hashHas_default;
    Hash.prototype.set = hashSet_default;
    var Hash_default = Hash;
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    var listCacheClear_default = listCacheClear;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var eq_default = eq;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq_default(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var assocIndexOf_default = assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var listCacheDelete_default = listCacheDelete;
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var listCacheGet_default = listCacheGet;
    function listCacheHas(key) {
      return assocIndexOf_default(this.__data__, key) > -1;
    }
    var listCacheHas_default = listCacheHas;
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    var listCacheSet_default = listCacheSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear_default;
    ListCache.prototype["delete"] = listCacheDelete_default;
    ListCache.prototype.get = listCacheGet_default;
    ListCache.prototype.has = listCacheHas_default;
    ListCache.prototype.set = listCacheSet_default;
    var ListCache_default = ListCache;
    var Map2 = getNative_default(root_default, "Map");
    var Map_default = Map2;
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash_default(),
        "map": new (Map_default || ListCache_default)(),
        "string": new Hash_default()
      };
    }
    var mapCacheClear_default = mapCacheClear;
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    var isKeyable_default = isKeyable;
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var getMapData_default = getMapData;
    function mapCacheDelete(key) {
      var result = getMapData_default(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var mapCacheDelete_default = mapCacheDelete;
    function mapCacheGet(key) {
      return getMapData_default(this, key).get(key);
    }
    var mapCacheGet_default = mapCacheGet;
    function mapCacheHas(key) {
      return getMapData_default(this, key).has(key);
    }
    var mapCacheHas_default = mapCacheHas;
    function mapCacheSet(key, value) {
      var data = getMapData_default(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var mapCacheSet_default = mapCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear_default;
    MapCache.prototype["delete"] = mapCacheDelete_default;
    MapCache.prototype.get = mapCacheGet_default;
    MapCache.prototype.has = mapCacheHas_default;
    MapCache.prototype.set = mapCacheSet_default;
    var MapCache_default = MapCache;
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache_default)();
      return memoized;
    }
    memoize.Cache = MapCache_default;
    var memoize_default = memoize;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize_default(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    var memoizeCapped_default = memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped_default(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    var stringToPath_default = stringToPath;
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var arrayMap_default = arrayMap;
    var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray_default(value)) {
        return arrayMap_default(value, baseToString) + "";
      }
      if (isSymbol_default(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    var baseToString_default = baseToString;
    function toString(value) {
      return value == null ? "" : baseToString_default(value);
    }
    var toString_default = toString;
    function castPath(value, object) {
      if (isArray_default(value)) {
        return value;
      }
      return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
    }
    var castPath_default = castPath;
    function toKey(value) {
      if (typeof value == "string" || isSymbol_default(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    var toKey_default = toKey;
    function baseGet(object, path) {
      path = castPath_default(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey_default(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    var baseGet_default = baseGet;
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet_default(object, path);
      return result === void 0 ? defaultValue : result;
    }
    var get_default = get;
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var overArg_default = overArg;
    var getPrototype = overArg_default(Object.getPrototypeOf, Object);
    var getPrototype_default = getPrototype;
    var objectTag = "[object Object]";
    var funcProto3 = Function.prototype;
    var objectProto6 = Object.prototype;
    var funcToString3 = funcProto3.toString;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    var objectCtorString = funcToString3.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
        return false;
      }
      var proto = getPrototype_default(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty5.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
    }
    var isPlainObject_default = isPlainObject;
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    var last_default = last;
    var pointerMetaWeakMap = /* @__PURE__ */ new WeakMap();
    var cachedSubPathPointersWeakMap = /* @__PURE__ */ new WeakMap();
    var pointerMetaSymbol = Symbol("pointerMeta");
    var proxyHandler = {
      get(pointerKey, prop) {
        if (prop === pointerMetaSymbol)
          return pointerMetaWeakMap.get(pointerKey);
        let subPathPointers = cachedSubPathPointersWeakMap.get(pointerKey);
        if (!subPathPointers) {
          subPathPointers = /* @__PURE__ */ new Map();
          cachedSubPathPointersWeakMap.set(pointerKey, subPathPointers);
        }
        const existing = subPathPointers.get(prop);
        if (existing !== void 0)
          return existing;
        const meta = pointerMetaWeakMap.get(pointerKey);
        const subPointer = pointer({ root: meta.root, path: [...meta.path, prop] });
        subPathPointers.set(prop, subPointer);
        return subPointer;
      }
    };
    var getPointerMeta = (p) => {
      const meta = p[pointerMetaSymbol];
      return meta;
    };
    var getPointerParts = (p) => {
      const { root: root2, path } = getPointerMeta(p);
      return { root: root2, path };
    };
    function pointer(args) {
      var _a;
      const meta = {
        root: args.root,
        path: (_a = args.path) != null ? _a : []
      };
      const pointerKey = {};
      pointerMetaWeakMap.set(pointerKey, meta);
      return new Proxy(pointerKey, proxyHandler);
    }
    var pointer_default = pointer;
    var isPointer = (p) => {
      return p && !!getPointerMeta(p);
    };
    function updateDeep(state2, path, reducer) {
      if (path.length === 0)
        return reducer(state2);
      return hoop(state2, path, reducer);
    }
    var hoop = (s, path, reducer) => {
      if (path.length === 0) {
        return reducer(s);
      }
      if (Array.isArray(s)) {
        let [index, ...restOfPath] = path;
        index = parseInt(String(index), 10);
        if (isNaN(index))
          index = 0;
        const oldVal = s[index];
        const newVal = hoop(oldVal, restOfPath, reducer);
        if (oldVal === newVal)
          return s;
        const newS = [...s];
        newS.splice(index, 1, newVal);
        return newS;
      } else if (typeof s === "object" && s !== null) {
        const [key, ...restOfPath] = path;
        const oldVal = s[key];
        const newVal = hoop(oldVal, restOfPath, reducer);
        if (oldVal === newVal)
          return s;
        const newS = __spreadProps(__spreadValues({}, s), { [key]: newVal });
        return newS;
      } else {
        const [key, ...restOfPath] = path;
        return { [key]: hoop(void 0, restOfPath, reducer) };
      }
    };
    var Stack = class {
      constructor() {
        this._head = void 0;
      }
      peek() {
        return this._head && this._head.data;
      }
      pop() {
        const head = this._head;
        if (!head) {
          return void 0;
        }
        this._head = head.next;
        return head.data;
      }
      push(data) {
        const node = { next: this._head, data };
        this._head = node;
      }
    };
    function isPrism(d) {
      return !!(d && d.isPrism && d.isPrism === true);
    }
    function createMechanism() {
      const noop = () => {
      };
      const stack = new Stack();
      const noopCollector = noop;
      const pushCollector2 = (collector) => {
        stack.push(collector);
      };
      const popCollector2 = (collector) => {
        const existing = stack.peek();
        if (existing !== collector) {
          throw new Error(`Popped collector is not on top of the stack`);
        }
        stack.pop();
      };
      const startIgnoringDependencies2 = () => {
        stack.push(noopCollector);
      };
      const stopIgnoringDependencies2 = () => {
        if (stack.peek() !== noopCollector) ;
        else {
          stack.pop();
        }
      };
      const reportResolutionStart2 = (d) => {
        const possibleCollector = stack.peek();
        if (possibleCollector) {
          possibleCollector(d);
        }
        stack.push(noopCollector);
      };
      const reportResolutionEnd2 = (_d) => {
        stack.pop();
      };
      return {
        type: "Dataverse_discoveryMechanism",
        startIgnoringDependencies: startIgnoringDependencies2,
        stopIgnoringDependencies: stopIgnoringDependencies2,
        reportResolutionStart: reportResolutionStart2,
        reportResolutionEnd: reportResolutionEnd2,
        pushCollector: pushCollector2,
        popCollector: popCollector2
      };
    }
    function getSharedMechanism() {
      const varName = "__dataverse_discoveryMechanism_sharedStack";
      const root2 = typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : {};
      if (root2) {
        const existingMechanism = root2[varName];
        if (existingMechanism && typeof existingMechanism === "object" && existingMechanism.type === "Dataverse_discoveryMechanism") {
          return existingMechanism;
        } else {
          const mechanism = createMechanism();
          root2[varName] = mechanism;
          return mechanism;
        }
      } else {
        return createMechanism();
      }
    }
    var {
      startIgnoringDependencies,
      stopIgnoringDependencies,
      reportResolutionEnd,
      reportResolutionStart,
      pushCollector,
      popCollector
    } = getSharedMechanism();
    var voidFn = () => {
    };
    var HotHandle = class {
      constructor(_fn, _prismInstance) {
        this._fn = _fn;
        this._prismInstance = _prismInstance;
        this._didMarkDependentsAsStale = false;
        this._isFresh = false;
        this._cacheOfDendencyValues = /* @__PURE__ */ new Map();
        this._dependents = /* @__PURE__ */ new Set();
        this._dependencies = /* @__PURE__ */ new Set();
        this._possiblyStaleDeps = /* @__PURE__ */ new Set();
        this._scope = new HotScope(this);
        this._lastValue = void 0;
        this._forciblySetToStale = false;
        this._reactToDependencyGoingStale = (which) => {
          this._possiblyStaleDeps.add(which);
          this._markAsStale();
        };
        for (const d of this._dependencies) {
          d._addDependent(this._reactToDependencyGoingStale);
        }
        startIgnoringDependencies();
        this.getValue();
        stopIgnoringDependencies();
      }
      get hasDependents() {
        return this._dependents.size > 0;
      }
      removeDependent(d) {
        this._dependents.delete(d);
      }
      addDependent(d) {
        this._dependents.add(d);
      }
      destroy() {
        for (const d of this._dependencies) {
          d._removeDependent(this._reactToDependencyGoingStale);
        }
        cleanupScopeStack(this._scope);
      }
      getValue() {
        if (!this._isFresh) {
          const newValue = this._recalculate();
          this._lastValue = newValue;
          this._isFresh = true;
          this._didMarkDependentsAsStale = false;
          this._forciblySetToStale = false;
        }
        return this._lastValue;
      }
      _recalculate() {
        let value;
        if (!this._forciblySetToStale) {
          if (this._possiblyStaleDeps.size > 0) {
            let anActuallyStaleDepWasFound = false;
            startIgnoringDependencies();
            for (const dep of this._possiblyStaleDeps) {
              if (this._cacheOfDendencyValues.get(dep) !== dep.getValue()) {
                anActuallyStaleDepWasFound = true;
                break;
              }
            }
            stopIgnoringDependencies();
            this._possiblyStaleDeps.clear();
            if (!anActuallyStaleDepWasFound) {
              return this._lastValue;
            }
          }
        }
        const newDeps = /* @__PURE__ */ new Set();
        this._cacheOfDendencyValues.clear();
        const collector = (observedDep) => {
          newDeps.add(observedDep);
          this._addDependency(observedDep);
        };
        pushCollector(collector);
        hookScopeStack.push(this._scope);
        try {
          value = this._fn();
        } catch (error) {
          console.error(error);
        } finally {
          const topOfTheStack = hookScopeStack.pop();
          if (topOfTheStack !== this._scope) {
            console.warn(`The Prism hook stack has slipped. This is a bug.`);
          }
        }
        popCollector(collector);
        for (const dep of this._dependencies) {
          if (!newDeps.has(dep)) {
            this._removeDependency(dep);
          }
        }
        this._dependencies = newDeps;
        startIgnoringDependencies();
        for (const dep of newDeps) {
          this._cacheOfDendencyValues.set(dep, dep.getValue());
        }
        stopIgnoringDependencies();
        return value;
      }
      forceStale() {
        this._forciblySetToStale = true;
        this._markAsStale();
      }
      _markAsStale() {
        if (this._didMarkDependentsAsStale)
          return;
        this._didMarkDependentsAsStale = true;
        this._isFresh = false;
        for (const dependent of this._dependents) {
          dependent(this._prismInstance);
        }
      }
      _addDependency(d) {
        if (this._dependencies.has(d))
          return;
        this._dependencies.add(d);
        d._addDependent(this._reactToDependencyGoingStale);
      }
      _removeDependency(d) {
        if (!this._dependencies.has(d))
          return;
        this._dependencies.delete(d);
        d._removeDependent(this._reactToDependencyGoingStale);
      }
    };
    var emptyObject = {};
    var PrismInstance = class {
      constructor(_fn) {
        this._fn = _fn;
        this.isPrism = true;
        this._state = {
          hot: false,
          handle: void 0
        };
      }
      get isHot() {
        return this._state.hot;
      }
      onChange(ticker, listener, immediate = false) {
        const dependent = () => {
          ticker.onThisOrNextTick(refresh);
        };
        let lastValue = emptyObject;
        const refresh = () => {
          const newValue = this.getValue();
          if (newValue === lastValue)
            return;
          lastValue = newValue;
          listener(newValue);
        };
        this._addDependent(dependent);
        if (immediate) {
          lastValue = this.getValue();
          listener(lastValue);
        }
        const unsubscribe = () => {
          this._removeDependent(dependent);
          ticker.offThisOrNextTick(refresh);
          ticker.offNextTick(refresh);
        };
        return unsubscribe;
      }
      onStale(callback) {
        const untap = () => {
          this._removeDependent(fn);
        };
        const fn = () => callback();
        this._addDependent(fn);
        return untap;
      }
      keepHot() {
        return this.onStale(() => {
        });
      }
      _addDependent(d) {
        if (!this._state.hot) {
          this._goHot();
        }
        this._state.handle.addDependent(d);
      }
      _goHot() {
        const hotHandle = new HotHandle(this._fn, this);
        this._state = {
          hot: true,
          handle: hotHandle
        };
      }
      _removeDependent(d) {
        const state2 = this._state;
        if (!state2.hot) {
          return;
        }
        const handle = state2.handle;
        handle.removeDependent(d);
        if (!handle.hasDependents) {
          this._state = { hot: false, handle: void 0 };
          handle.destroy();
        }
      }
      getValue() {
        reportResolutionStart(this);
        const state2 = this._state;
        let val2;
        if (state2.hot) {
          val2 = state2.handle.getValue();
        } else {
          val2 = calculateColdPrism(this._fn);
        }
        reportResolutionEnd(this);
        return val2;
      }
    };
    var HotScope = class {
      constructor(_hotHandle) {
        this._hotHandle = _hotHandle;
        this._refs = /* @__PURE__ */ new Map();
        this.isPrismScope = true;
        this.subs = {};
        this.effects = /* @__PURE__ */ new Map();
        this.memos = /* @__PURE__ */ new Map();
      }
      ref(key, initialValue) {
        let ref2 = this._refs.get(key);
        if (ref2 !== void 0) {
          return ref2;
        } else {
          const ref3 = {
            current: initialValue
          };
          this._refs.set(key, ref3);
          return ref3;
        }
      }
      effect(key, cb, deps) {
        let effect2 = this.effects.get(key);
        if (effect2 === void 0) {
          effect2 = {
            cleanup: voidFn,
            deps: void 0
          };
          this.effects.set(key, effect2);
        }
        if (depsHaveChanged(effect2.deps, deps)) {
          effect2.cleanup();
          startIgnoringDependencies();
          effect2.cleanup = safelyRun(cb, voidFn).value;
          stopIgnoringDependencies();
          effect2.deps = deps;
        }
      }
      memo(key, fn, deps) {
        let memo2 = this.memos.get(key);
        if (memo2 === void 0) {
          memo2 = {
            cachedValue: null,
            deps: void 0
          };
          this.memos.set(key, memo2);
        }
        if (depsHaveChanged(memo2.deps, deps)) {
          startIgnoringDependencies();
          memo2.cachedValue = safelyRun(fn, void 0).value;
          stopIgnoringDependencies();
          memo2.deps = deps;
        }
        return memo2.cachedValue;
      }
      state(key, initialValue) {
        const { value, setValue } = this.memo("state/" + key, () => {
          const value2 = { current: initialValue };
          const setValue2 = (newValue) => {
            value2.current = newValue;
            this._hotHandle.forceStale();
          };
          return { value: value2, setValue: setValue2 };
        }, []);
        return [value.current, setValue];
      }
      sub(key) {
        if (!this.subs[key]) {
          this.subs[key] = new HotScope(this._hotHandle);
        }
        return this.subs[key];
      }
      cleanupEffects() {
        for (const effect2 of this.effects.values()) {
          safelyRun(effect2.cleanup, void 0);
        }
        this.effects.clear();
      }
      source(subscribe, getValue2) {
        const sourceKey = "$$source/blah";
        this.effect(sourceKey, () => {
          const unsub = subscribe(() => {
            this._hotHandle.forceStale();
          });
          return unsub;
        }, [subscribe]);
        return getValue2();
      }
    };
    function cleanupScopeStack(scope2) {
      for (const sub2 of Object.values(scope2.subs)) {
        cleanupScopeStack(sub2);
      }
      scope2.cleanupEffects();
    }
    function safelyRun(fn, returnValueInCaseOfError) {
      try {
        return { value: fn(), ok: true };
      } catch (error) {
        setTimeout(function PrismReportThrow() {
          throw error;
        });
        return { value: returnValueInCaseOfError, ok: false };
      }
    }
    var hookScopeStack = new Stack();
    function ref(key, initialValue) {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`prism.ref() is called outside of a prism() call.`);
      }
      return scope2.ref(key, initialValue);
    }
    function effect(key, cb, deps) {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`prism.effect() is called outside of a prism() call.`);
      }
      return scope2.effect(key, cb, deps);
    }
    function depsHaveChanged(oldDeps, newDeps) {
      if (oldDeps === void 0 || newDeps === void 0) {
        return true;
      }
      const len = oldDeps.length;
      if (len !== newDeps.length)
        return true;
      for (let i2 = 0; i2 < len; i2++) {
        if (oldDeps[i2] !== newDeps[i2])
          return true;
      }
      return false;
    }
    function memo(key, fn, deps) {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`prism.memo() is called outside of a prism() call.`);
      }
      return scope2.memo(key, fn, deps);
    }
    function state(key, initialValue) {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`prism.state() is called outside of a prism() call.`);
      }
      return scope2.state(key, initialValue);
    }
    function ensurePrism() {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`The parent function is called outside of a prism() call.`);
      }
    }
    function scope(key, fn) {
      const parentScope = hookScopeStack.peek();
      if (!parentScope) {
        throw new Error(`prism.scope() is called outside of a prism() call.`);
      }
      const subScope = parentScope.sub(key);
      hookScopeStack.push(subScope);
      const ret = safelyRun(fn, void 0).value;
      hookScopeStack.pop();
      return ret;
    }
    function sub(key, fn, deps) {
      return memo(key, () => prism(fn), deps).getValue();
    }
    function inPrism() {
      return !!hookScopeStack.peek();
    }
    function source(subscribe, getValue2) {
      const scope2 = hookScopeStack.peek();
      if (!scope2) {
        throw new Error(`prism.source() is called outside of a prism() call.`);
      }
      return scope2.source(subscribe, getValue2);
    }
    var prism = (fn) => {
      return new PrismInstance(fn);
    };
    var ColdScope = class {
      effect(key, cb, deps) {
        console.warn(`prism.effect() does not run in cold prisms`);
      }
      memo(key, fn, deps) {
        return fn();
      }
      state(key, initialValue) {
        return [initialValue, () => {
        }];
      }
      ref(key, initialValue) {
        return { current: initialValue };
      }
      sub(key) {
        return new ColdScope();
      }
      source(subscribe, getValue2) {
        return getValue2();
      }
    };
    function calculateColdPrism(fn) {
      const scope2 = new ColdScope();
      hookScopeStack.push(scope2);
      let value;
      try {
        value = fn();
      } catch (error) {
        console.error(error);
      } finally {
        const topOfTheStack = hookScopeStack.pop();
        if (topOfTheStack !== scope2) {
          console.warn(`The Prism hook stack has slipped. This is a bug.`);
        }
      }
      return value;
    }
    prism.ref = ref;
    prism.effect = effect;
    prism.memo = memo;
    prism.ensurePrism = ensurePrism;
    prism.state = state;
    prism.scope = scope;
    prism.sub = sub;
    prism.inPrism = inPrism;
    prism.source = source;
    var prism_default = prism;
    var ValueTypes;
    (function(ValueTypes2) {
      ValueTypes2[ValueTypes2["Dict"] = 0] = "Dict";
      ValueTypes2[ValueTypes2["Array"] = 1] = "Array";
      ValueTypes2[ValueTypes2["Other"] = 2] = "Other";
    })(ValueTypes || (ValueTypes = {}));
    var getTypeOfValue = (v) => {
      if (Array.isArray(v))
        return 1;
      if (isPlainObject_default(v))
        return 0;
      return 2;
    };
    var getKeyOfValue = (v, key, vType = getTypeOfValue(v)) => {
      if (vType === 0 && typeof key === "string") {
        return v[key];
      } else if (vType === 1 && isValidArrayIndex(key)) {
        return v[key];
      } else {
        return void 0;
      }
    };
    var isValidArrayIndex = (key) => {
      const inNumber = typeof key === "number" ? key : parseInt(key, 10);
      return !isNaN(inNumber) && inNumber >= 0 && inNumber < Infinity && (inNumber | 0) === inNumber;
    };
    var Scope = class {
      constructor(_parent, _path) {
        this._parent = _parent;
        this._path = _path;
        this.children = /* @__PURE__ */ new Map();
        this.identityChangeListeners = /* @__PURE__ */ new Set();
      }
      addIdentityChangeListener(cb) {
        this.identityChangeListeners.add(cb);
      }
      removeIdentityChangeListener(cb) {
        this.identityChangeListeners.delete(cb);
        this._checkForGC();
      }
      removeChild(key) {
        this.children.delete(key);
        this._checkForGC();
      }
      getChild(key) {
        return this.children.get(key);
      }
      getOrCreateChild(key) {
        let child = this.children.get(key);
        if (!child) {
          child = child = new Scope(this, this._path.concat([key]));
          this.children.set(key, child);
        }
        return child;
      }
      _checkForGC() {
        if (this.identityChangeListeners.size > 0)
          return;
        if (this.children.size > 0)
          return;
        if (this._parent) {
          this._parent.removeChild(last_default(this._path));
        }
      }
    };
    var Atom = class {
      constructor(initialState) {
        this.$$isPointerToPrismProvider = true;
        this.pointer = pointer_default({ root: this, path: [] });
        this.prism = this.pointerToPrism(this.pointer);
        this._onPointerValueChange = (pointer2, cb) => {
          const { path } = getPointerParts(pointer2);
          const scope2 = this._getOrCreateScopeForPath(path);
          scope2.identityChangeListeners.add(cb);
          const unsubscribe = () => {
            scope2.identityChangeListeners.delete(cb);
          };
          return unsubscribe;
        };
        this._currentState = initialState;
        this._rootScope = new Scope(void 0, []);
      }
      set(newState) {
        const oldState = this._currentState;
        this._currentState = newState;
        this._checkUpdates(this._rootScope, oldState, newState);
      }
      get() {
        return this._currentState;
      }
      getByPointer(pointerOrFn) {
        const pointer2 = isPointer(pointerOrFn) ? pointerOrFn : pointerOrFn(this.pointer);
        const path = getPointerParts(pointer2).path;
        return this._getIn(path);
      }
      _getIn(path) {
        return path.length === 0 ? this.get() : get_default(this.get(), path);
      }
      reduce(fn) {
        this.set(fn(this.get()));
      }
      reduceByPointer(pointerOrFn, reducer) {
        const pointer2 = isPointer(pointerOrFn) ? pointerOrFn : pointerOrFn(this.pointer);
        const path = getPointerParts(pointer2).path;
        const newState = updateDeep(this.get(), path, reducer);
        this.set(newState);
      }
      setByPointer(pointerOrFn, val2) {
        this.reduceByPointer(pointerOrFn, () => val2);
      }
      _checkUpdates(scope2, oldState, newState) {
        if (oldState === newState)
          return;
        for (const cb of scope2.identityChangeListeners) {
          cb(newState);
        }
        if (scope2.children.size === 0)
          return;
        const oldValueType = getTypeOfValue(oldState);
        const newValueType = getTypeOfValue(newState);
        if (oldValueType === 2 && oldValueType === newValueType)
          return;
        for (const [childKey, childScope] of scope2.children) {
          const oldChildVal = getKeyOfValue(oldState, childKey, oldValueType);
          const newChildVal = getKeyOfValue(newState, childKey, newValueType);
          this._checkUpdates(childScope, oldChildVal, newChildVal);
        }
      }
      _getOrCreateScopeForPath(path) {
        let curScope = this._rootScope;
        for (const pathEl of path) {
          curScope = curScope.getOrCreateChild(pathEl);
        }
        return curScope;
      }
      pointerToPrism(pointer2) {
        const { path } = getPointerParts(pointer2);
        const subscribe = (listener) => this._onPointerValueChange(pointer2, listener);
        const getValue2 = () => this._getIn(path);
        return prism_default(() => {
          return prism_default.source(subscribe, getValue2);
        });
      }
    };
    var identifyPrismWeakMap = /* @__PURE__ */ new WeakMap();
    function isPointerToPrismProvider(val2) {
      return typeof val2 === "object" && val2 !== null && val2["$$isPointerToPrismProvider"] === true;
    }
    var pointerToPrism = (pointer2) => {
      const meta = getPointerMeta(pointer2);
      let prismInstance = identifyPrismWeakMap.get(meta);
      if (!prismInstance) {
        const root2 = meta.root;
        if (!isPointerToPrismProvider(root2)) {
          throw new Error(`Cannot run pointerToPrism() on a pointer whose root is not an PointerToPrismProvider`);
        }
        prismInstance = root2.pointerToPrism(pointer2);
        identifyPrismWeakMap.set(meta, prismInstance);
      }
      return prismInstance;
    };
    var val = (input) => {
      if (isPointer(input)) {
        return pointerToPrism(input).getValue();
      } else if (isPrism(input)) {
        return input.getValue();
      } else {
        return input;
      }
    };
    function* iterateAndCountTicks(pointerOrPrism) {
      let d;
      if (isPointer(pointerOrPrism)) {
        d = pointerToPrism(pointerOrPrism);
      } else if (isPrism(pointerOrPrism)) {
        d = pointerOrPrism;
      } else {
        throw new Error(`Only pointers and prisms are supported`);
      }
      let ticksCountedSinceLastYield = 0;
      const untap = d.onStale(() => {
        ticksCountedSinceLastYield++;
      });
      try {
        while (true) {
          const ticks = ticksCountedSinceLastYield;
          ticksCountedSinceLastYield = 0;
          yield { value: d.getValue(), ticks };
        }
      } finally {
        untap();
      }
    }
    var EMPTY_TICKS_BEFORE_GOING_DORMANT = 60 * 3;
    var Ticker = class {
      constructor(_conf) {
        this._conf = _conf;
        this._ticking = false;
        this._dormant = true;
        this._numberOfDormantTicks = 0;
        this.__ticks = 0;
        this._scheduledForThisOrNextTick = /* @__PURE__ */ new Set();
        this._scheduledForNextTick = /* @__PURE__ */ new Set();
        this._timeAtCurrentTick = 0;
      }
      get dormant() {
        return this._dormant;
      }
      onThisOrNextTick(fn) {
        this._scheduledForThisOrNextTick.add(fn);
        if (this._dormant) {
          this._goActive();
        }
      }
      onNextTick(fn) {
        this._scheduledForNextTick.add(fn);
        if (this._dormant) {
          this._goActive();
        }
      }
      offThisOrNextTick(fn) {
        this._scheduledForThisOrNextTick.delete(fn);
      }
      offNextTick(fn) {
        this._scheduledForNextTick.delete(fn);
      }
      get time() {
        if (this._ticking) {
          return this._timeAtCurrentTick;
        } else
          return performance.now();
      }
      _goActive() {
        var _a, _b;
        if (!this._dormant)
          return;
        this._dormant = false;
        (_b = (_a = this._conf) == null ? void 0 : _a.onActive) == null ? void 0 : _b.call(_a);
      }
      _goDormant() {
        var _a, _b;
        if (this._dormant)
          return;
        this._dormant = true;
        this._numberOfDormantTicks = 0;
        (_b = (_a = this._conf) == null ? void 0 : _a.onDormant) == null ? void 0 : _b.call(_a);
      }
      tick(t2 = performance.now()) {
        this.__ticks++;
        if (!this._dormant) {
          if (this._scheduledForNextTick.size === 0 && this._scheduledForThisOrNextTick.size === 0) {
            this._numberOfDormantTicks++;
            if (this._numberOfDormantTicks >= EMPTY_TICKS_BEFORE_GOING_DORMANT) {
              this._goDormant();
              return;
            }
          }
        }
        this._ticking = true;
        this._timeAtCurrentTick = t2;
        for (const v of this._scheduledForNextTick) {
          this._scheduledForThisOrNextTick.add(v);
        }
        this._scheduledForNextTick.clear();
        this._tick(0);
        this._ticking = false;
      }
      _tick(iterationNumber) {
        const time = this.time;
        if (iterationNumber > 10) {
          console.warn("_tick() recursing for 10 times");
        }
        if (iterationNumber > 100) {
          throw new Error(`Maximum recursion limit for _tick()`);
        }
        const oldSet = this._scheduledForThisOrNextTick;
        this._scheduledForThisOrNextTick = /* @__PURE__ */ new Set();
        for (const fn of oldSet) {
          fn(time);
        }
        if (this._scheduledForThisOrNextTick.size > 0) {
          return this._tick(iterationNumber + 1);
        }
      }
    };
    function* iterateOver(pointerOrPrism) {
      let d;
      if (isPointer(pointerOrPrism)) {
        d = pointerToPrism(pointerOrPrism);
      } else if (isPrism(pointerOrPrism)) {
        d = pointerOrPrism;
      } else {
        throw new Error(`Only pointers and prisms are supported`);
      }
      const ticker = new Ticker();
      const untap = d.onChange(ticker, (v) => {
      });
      try {
        while (true) {
          ticker.tick();
          yield d.getValue();
        }
      } finally {
        untap();
      }
    }
    var PointerProxy = class {
      constructor(currentPointer) {
        this.$$isPointerToPrismProvider = true;
        this._currentPointerBox = new Atom(currentPointer);
        this.pointer = pointer_default({ root: this, path: [] });
      }
      setPointer(p) {
        this._currentPointerBox.set(p);
      }
      pointerToPrism(pointer2) {
        const { path } = getPointerMeta(pointer2);
        return prism_default(() => {
          const currentPointer = this._currentPointerBox.prism.getValue();
          const subPointer = path.reduce((pointerSoFar, pathItem) => pointerSoFar[pathItem], currentPointer);
          return val(subPointer);
        });
      }
    };
  })(dist$1);
  return dist$1;
}
dist$2.exports;
var hasRequiredDist$1;
function requireDist$1() {
  if (hasRequiredDist$1) return dist$2.exports;
  hasRequiredDist$1 = 1;
  (function(module, exports) {
    var define_process_env_default = {};
    var wq = Object.create, xf = Object.freeze, L7 = Object.defineProperty, Bq = Object.defineProperties, yq = Object.getOwnPropertyDescriptor, Sq = Object.getOwnPropertyDescriptors, kq = Object.getOwnPropertyNames, ge = Object.getOwnPropertySymbols, Aq = Object.getPrototypeOf, hv = Object.prototype.hasOwnProperty, Cf = Object.prototype.propertyIsEnumerable;
    var ov = (t2, a) => {
      if (a = Symbol[t2]) return a;
      throw Error("Symbol." + t2 + " is not defined");
    }, vv = Math.pow, nv = (t2, a, c) => a in t2 ? L7(t2, a, { enumerable: true, configurable: true, writable: true, value: c }) : t2[a] = c, S = (t2, a) => {
      for (var c in a || (a = {})) hv.call(a, c) && nv(t2, c, a[c]);
      if (ge) for (var c of ge(a)) Cf.call(a, c) && nv(t2, c, a[c]);
      return t2;
    }, D = (t2, a) => Bq(t2, Sq(a));
    var m4 = (t2, a) => {
      var c = {};
      for (var r in t2) hv.call(t2, r) && a.indexOf(r) < 0 && (c[r] = t2[r]);
      if (t2 != null && ge) for (var r of ge(t2)) a.indexOf(r) < 0 && Cf.call(t2, r) && (c[r] = t2[r]);
      return c;
    };
    var x = (t2, a) => () => (t2 && (a = t2(t2 = 0)), a);
    var L1 = (t2, a) => () => (a || t2((a = { exports: {} }).exports, a), a.exports), Lf = (t2, a) => {
      for (var c in a) L7(t2, c, { get: a[c], enumerable: true });
    }, Hf = (t2, a, c, r) => {
      if (a && typeof a == "object" || typeof a == "function") for (let e of kq(a)) !hv.call(t2, e) && e !== c && L7(t2, e, { get: () => a[e], enumerable: !(r = yq(a, e)) || r.enumerable });
      return t2;
    };
    var I = (t2, a, c) => (c = t2 != null ? wq(Aq(t2)) : {}, Hf(a || !t2 || !t2.__esModule ? L7(c, "default", { value: t2, enumerable: true }) : c, t2)), Rq = (t2) => Hf(L7({}, "__esModule", { value: true }), t2);
    var y1 = (t2, a, c) => (nv(t2, typeof a != "symbol" ? a + "" : a, c), c);
    var V = (t2, a) => xf(L7(t2, "raw", { value: xf(t2.slice()) })), e2 = (t2, a, c) => new Promise((r, e) => {
      var l = (n) => {
        try {
          o(c.next(n));
        } catch (h) {
          e(h);
        }
      }, i5 = (n) => {
        try {
          o(c.throw(n));
        } catch (h) {
          e(h);
        }
      }, o = (n) => n.done ? r(n.value) : Promise.resolve(n.value).then(l, i5);
      o((c = c.apply(t2, a)).next());
    }), bq = function(t2, a) {
      this[0] = t2, this[1] = a;
    };
    var Vf = (t2) => {
      var a = t2[ov("asyncIterator")], c = false, r, e = {};
      return a == null ? (a = t2[ov("iterator")](), r = (l) => e[l] = (i5) => a[l](i5)) : (a = a.call(t2), r = (l) => e[l] = (i5) => {
        if (c) {
          if (c = false, l === "throw") throw i5;
          return i5;
        }
        return c = true, { done: false, value: new bq(new Promise((o) => {
          var n = a[l](i5);
          if (!(n instanceof Object)) throw TypeError("Object expected");
          o(n);
        }), 1) };
      }), e[ov("iterator")] = () => e, r("next"), "throw" in a ? r("throw") : e.throw = (l) => {
        throw l;
      }, "return" in a && r("return"), e;
    };
    function Bf(t2) {
      wf = t2;
    }
    function T() {
      return wf;
    }
    var wf, f1 = x(() => {
    });
    function q5(t2, a, c = []) {
      if (typeof t2 == "object" && t2) {
        if (Fq(t2) || Iq(t2)) {
          a(t2, c);
          return;
        }
        for (let [r, e] of Object.entries(t2)) q5(e, a, [...c, r]);
      } else {
        if (t2 == null) return;
        a(t2, c);
      }
    }
    var Fq, Iq, de = x(() => {
      Fq = (t2) => typeof t2 == "object" && t2 !== null && Object.hasOwnProperty.call(t2, "type") && t2.type === "image" && Object.hasOwnProperty.call(t2, "id") && typeof t2.id == "string" && t2.id !== "", Iq = (t2) => typeof t2 == "object" && t2 !== null && Object.hasOwnProperty.call(t2, "r") && Object.hasOwnProperty.call(t2, "g") && Object.hasOwnProperty.call(t2, "b") && Object.hasOwnProperty.call(t2, "a") && typeof t2.r == "number" && typeof t2.g == "number" && typeof t2.b == "number" && typeof t2.a == "number";
    });
    function c5(t2) {
      return (a) => typeof a == "object" && !!a && a.type === t2;
    }
    var se, H7, yf, c0, Sf, kf, gv, dv, N5 = x(() => {
      se = c5("Theatre_Project"), H7 = c5("Theatre_Sheet"), yf = c5("Theatre_SheetTemplate"), c0 = c5("Theatre_SheetObject"), Sf = c5("Theatre_Sequence"), kf = c5("Theatre_SheetObjectTemplate"), gv = c5("Theatre_Sheet_PublicAPI"), dv = c5("Theatre_SheetObject_PublicAPI");
    });
    var Gq, ze, zv = x(() => {
      Gq = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal, ze = Gq;
    });
    var Tq, Zq, g2, m3 = x(() => {
      zv();
      Tq = typeof self == "object" && self && self.Object === Object && self, Zq = ze || Tq || Function("return this")(), g2 = Zq;
    });
    var Oq, p0, V7 = x(() => {
      m3();
      Oq = g2.Symbol, p0 = Oq;
    });
    function Wq(t2) {
      var a = Eq.call(t2, ta), c = t2[ta];
      try {
        t2[ta] = void 0;
        var r = true;
      } catch (l) {
      }
      var e = Dq.call(t2);
      return r && (a ? t2[ta] = c : delete t2[ta]), e;
    }
    var Af, Eq, Dq, ta, Rf, bf = x(() => {
      V7();
      Af = Object.prototype, Eq = Af.hasOwnProperty, Dq = Af.toString, ta = p0 ? p0.toStringTag : void 0;
      Rf = Wq;
    });
    function qq(t2) {
      return jq.call(t2);
    }
    var _q, jq, Ff, If = x(() => {
      _q = Object.prototype, jq = _q.toString;
      Ff = qq;
    });
    function Kq(t2) {
      return t2 == null ? t2 === void 0 ? Uq : Nq : Pf && Pf in Object(t2) ? Rf(t2) : Ff(t2);
    }
    var Nq, Uq, Pf, q0, p8 = x(() => {
      V7();
      bf();
      If();
      Nq = "[object Null]", Uq = "[object Undefined]", Pf = p0 ? p0.toStringTag : void 0;
      q0 = Kq;
    });
    function $q(t2) {
      return t2 != null && typeof t2 == "object";
    }
    var N0, m8 = x(() => {
      N0 = $q;
    });
    function Xq(t2) {
      return typeof t2 == "symbol" || N0(t2) && q0(t2) == Qq;
    }
    var Qq, E3, w7 = x(() => {
      p8();
      m8();
      Qq = "[object Symbol]";
      E3 = Xq;
    });
    function Yq(t2, a) {
      for (var c = -1, r = t2 == null ? 0 : t2.length, e = Array(r); ++c < r; ) e[c] = a(t2[c], c, t2);
      return e;
    }
    var U5, ue = x(() => {
      U5 = Yq;
    });
    var Jq, o2, f3 = x(() => {
      Jq = Array.isArray, o2 = Jq;
    });
    function Zf(t2) {
      if (typeof t2 == "string") return t2;
      if (o2(t2)) return U5(t2, Zf) + "";
      if (E3(t2)) return Tf ? Tf.call(t2) : "";
      var a = t2 + "";
      return a == "0" && 1 / t2 == -tN ? "-0" : a;
    }
    var tN, Gf, Tf, Of, Ef = x(() => {
      V7();
      ue();
      f3();
      w7();
      tN = 1 / 0, Gf = p0 ? p0.prototype : void 0, Tf = Gf ? Gf.toString : void 0;
      Of = Zf;
    });
    function cN(t2) {
      for (var a = t2.length; a-- && aN.test(t2.charAt(a)); ) ;
      return a;
    }
    var aN, Df, Wf = x(() => {
      aN = /\s/;
      Df = cN;
    });
    function eN(t2) {
      return t2 && t2.slice(0, Df(t2) + 1).replace(rN, "");
    }
    var rN, _f, jf = x(() => {
      Wf();
      rN = /^\s+/;
      _f = eN;
    });
    function lN(t2) {
      var a = typeof t2;
      return t2 != null && (a == "object" || a == "function");
    }
    var r0, K5 = x(() => {
      r0 = lN;
    });
    function vN(t2) {
      if (typeof t2 == "number") return t2;
      if (E3(t2)) return qf;
      if (r0(t2)) {
        var a = typeof t2.valueOf == "function" ? t2.valueOf() : t2;
        t2 = r0(a) ? a + "" : a;
      }
      if (typeof t2 != "string") return t2 === 0 ? t2 : +t2;
      t2 = _f(t2);
      var c = oN.test(t2);
      return c || nN.test(t2) ? hN(t2.slice(2), c ? 2 : 8) : iN.test(t2) ? qf : +t2;
    }
    var qf, iN, oN, nN, hN, U0, B7 = x(() => {
      jf();
      K5();
      w7();
      qf = 0 / 0, iN = /^[-+]0x[0-9a-f]+$/i, oN = /^0b[01]+$/i, nN = /^0o[0-7]+$/i, hN = parseInt;
      U0 = vN;
    });
    function dN(t2) {
      if (!t2) return t2 === 0 ? t2 : 0;
      if (t2 = U0(t2), t2 === Nf || t2 === -Nf) {
        var a = t2 < 0 ? -1 : 1;
        return a * gN;
      }
      return t2 === t2 ? t2 : 0;
    }
    var Nf, gN, aa, uv = x(() => {
      B7();
      Nf = 1 / 0, gN = 17976931348623157e292;
      aa = dN;
    });
    function sN(t2) {
      var a = aa(t2), c = a % 1;
      return a === a ? c ? a - c : a : 0;
    }
    var $5, ca = x(() => {
      uv();
      $5 = sN;
    });
    function zN(t2) {
      return t2;
    }
    var Q5, ra = x(() => {
      Q5 = zN;
    });
    function MN(t2) {
      if (!r0(t2)) return false;
      var a = q0(t2);
      return a == pN || a == mN || a == uN || a == fN;
    }
    var uN, pN, mN, fN, pe, pv = x(() => {
      p8();
      K5();
      uN = "[object AsyncFunction]", pN = "[object Function]", mN = "[object GeneratorFunction]", fN = "[object Proxy]";
      pe = MN;
    });
    var xN, me, Uf = x(() => {
      m3();
      xN = g2["__core-js_shared__"], me = xN;
    });
    function CN(t2) {
      return !!Kf && Kf in t2;
    }
    var Kf, $f, Qf = x(() => {
      Uf();
      Kf = function() {
        var t2 = /[^.]+$/.exec(me && me.keys && me.keys.IE_PROTO || "");
        return t2 ? "Symbol(src)_1." + t2 : "";
      }();
      $f = CN;
    });
    function VN(t2) {
      if (t2 != null) {
        try {
          return HN.call(t2);
        } catch (a) {
        }
        try {
          return t2 + "";
        } catch (a) {
        }
      }
      return "";
    }
    var LN, HN, r5, mv = x(() => {
      LN = Function.prototype, HN = LN.toString;
      r5 = VN;
    });
    function bN(t2) {
      if (!r0(t2) || $f(t2)) return false;
      var a = pe(t2) ? RN : BN;
      return a.test(r5(t2));
    }
    var wN, BN, yN, SN, kN, AN, RN, Xf, Yf = x(() => {
      pv();
      Qf();
      K5();
      mv();
      wN = /[\\^$.*+?()[\]{}|]/g, BN = /^\[object .+?Constructor\]$/, yN = Function.prototype, SN = Object.prototype, kN = yN.toString, AN = SN.hasOwnProperty, RN = RegExp("^" + kN.call(AN).replace(wN, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      Xf = bN;
    });
    function FN(t2, a) {
      return t2 == null ? void 0 : t2[a];
    }
    var Jf, tM = x(() => {
      Jf = FN;
    });
    function IN(t2, a) {
      var c = Jf(t2, a);
      return Xf(c) ? c : void 0;
    }
    var w0, X5 = x(() => {
      Yf();
      tM();
      w0 = IN;
    });
    var PN, fe, aM = x(() => {
      X5();
      m3();
      PN = w0(g2, "WeakMap"), fe = PN;
    });
    function GN(t2, a, c) {
      switch (c.length) {
        case 0:
          return t2.call(a);
        case 1:
          return t2.call(a, c[0]);
        case 2:
          return t2.call(a, c[0], c[1]);
        case 3:
          return t2.call(a, c[0], c[1], c[2]);
      }
      return t2.apply(a, c);
    }
    var cM, rM = x(() => {
      cM = GN;
    });
    function TN() {
    }
    var eM, lM = x(() => {
      eM = TN;
    });
    function ZN(t2, a) {
      var c = -1, r = t2.length;
      for (a || (a = Array(r)); ++c < r; ) a[c] = t2[c];
      return a;
    }
    var iM, oM = x(() => {
      iM = ZN;
    });
    function WN(t2) {
      var a = 0, c = 0;
      return function() {
        var r = DN(), e = EN - (r - c);
        if (c = r, e > 0) {
          if (++a >= ON) return arguments[0];
        } else a = 0;
        return t2.apply(void 0, arguments);
      };
    }
    var ON, EN, DN, nM, hM = x(() => {
      ON = 800, EN = 16, DN = Date.now;
      nM = WN;
    });
    function _N(t2) {
      return function() {
        return t2;
      };
    }
    var vM, gM = x(() => {
      vM = _N;
    });
    var jN, y7, fv = x(() => {
      X5();
      jN = function() {
        try {
          var t2 = w0(Object, "defineProperty");
          return t2({}, "", {}), t2;
        } catch (a) {
        }
      }(), y7 = jN;
    });
    var qN, dM, sM = x(() => {
      gM();
      fv();
      ra();
      qN = y7 ? function(t2, a) {
        return y7(t2, "toString", { configurable: true, enumerable: false, value: vM(a), writable: true });
      } : Q5, dM = qN;
    });
    var NN, zM, uM = x(() => {
      sM();
      hM();
      NN = nM(dM), zM = NN;
    });
    function UN(t2, a, c, r) {
      for (var e = t2.length, l = c + (r ? 1 : -1); r ? l-- : ++l < e; ) if (a(t2[l], l, t2)) return l;
      return -1;
    }
    var S7, Me = x(() => {
      S7 = UN;
    });
    function KN(t2) {
      return t2 !== t2;
    }
    var pM, mM = x(() => {
      pM = KN;
    });
    function $N(t2, a, c) {
      for (var r = c - 1, e = t2.length; ++r < e; ) if (t2[r] === a) return r;
      return -1;
    }
    var fM, MM = x(() => {
      fM = $N;
    });
    function QN(t2, a, c) {
      return a === a ? fM(t2, a, c) : S7(t2, pM, c);
    }
    var xe, Mv = x(() => {
      Me();
      mM();
      MM();
      xe = QN;
    });
    function XN(t2, a) {
      var c = t2 == null ? 0 : t2.length;
      return !!c && xe(t2, a, 0) > -1;
    }
    var xM, CM = x(() => {
      Mv();
      xM = XN;
    });
    function tU(t2, a) {
      var c = typeof t2;
      return a = a == null ? YN : a, !!a && (c == "number" || c != "symbol" && JN.test(t2)) && t2 > -1 && t2 % 1 == 0 && t2 < a;
    }
    var YN, JN, Y5, ea = x(() => {
      YN = 9007199254740991, JN = /^(?:0|[1-9]\d*)$/;
      Y5 = tU;
    });
    function aU(t2, a, c) {
      a == "__proto__" && y7 ? y7(t2, a, { configurable: true, enumerable: true, value: c, writable: true }) : t2[a] = c;
    }
    var k7, Ce = x(() => {
      fv();
      k7 = aU;
    });
    function cU(t2, a) {
      return t2 === a || t2 !== t2 && a !== a;
    }
    var J5, la = x(() => {
      J5 = cU;
    });
    function lU(t2, a, c) {
      var r = t2[a];
      (!(eU.call(t2, a) && J5(r, c)) || c === void 0 && !(a in t2)) && k7(t2, a, c);
    }
    var rU, eU, LM, HM = x(() => {
      Ce();
      la();
      rU = Object.prototype, eU = rU.hasOwnProperty;
      LM = lU;
    });
    function iU(t2, a, c) {
      return a = VM(a === void 0 ? t2.length - 1 : a, 0), function() {
        for (var r = arguments, e = -1, l = VM(r.length - a, 0), i5 = Array(l); ++e < l; ) i5[e] = r[a + e];
        e = -1;
        for (var o = Array(a + 1); ++e < a; ) o[e] = r[e];
        return o[a] = c(i5), cM(t2, this, o);
      };
    }
    var VM, wM, BM = x(() => {
      rM();
      VM = Math.max;
      wM = iU;
    });
    function oU(t2, a) {
      return zM(wM(t2, a, Q5), t2 + "");
    }
    var Le, xv = x(() => {
      ra();
      BM();
      uM();
      Le = oU;
    });
    function hU(t2) {
      return typeof t2 == "number" && t2 > -1 && t2 % 1 == 0 && t2 <= nU;
    }
    var nU, A7, He = x(() => {
      nU = 9007199254740991;
      A7 = hU;
    });
    function vU(t2) {
      return t2 != null && A7(t2.length) && !pe(t2);
    }
    var t6, ia = x(() => {
      pv();
      He();
      t6 = vU;
    });
    function gU(t2, a, c) {
      if (!r0(c)) return false;
      var r = typeof a;
      return (r == "number" ? t6(c) && Y5(a, c.length) : r == "string" && a in c) ? J5(c[a], t2) : false;
    }
    var Cv, yM = x(() => {
      la();
      ia();
      ea();
      K5();
      Cv = gU;
    });
    function sU(t2) {
      var a = t2 && t2.constructor, c = typeof a == "function" && a.prototype || dU;
      return t2 === c;
    }
    var dU, SM, kM = x(() => {
      dU = Object.prototype;
      SM = sU;
    });
    function zU(t2, a) {
      for (var c = -1, r = Array(t2); ++c < t2; ) r[c] = a(c);
      return r;
    }
    var AM, RM = x(() => {
      AM = zU;
    });
    function pU(t2) {
      return N0(t2) && q0(t2) == uU;
    }
    var uU, Lv, bM = x(() => {
      p8();
      m8();
      uU = "[object Arguments]";
      Lv = pU;
    });
    var FM, mU, fU, MU, R7, Ve = x(() => {
      bM();
      m8();
      FM = Object.prototype, mU = FM.hasOwnProperty, fU = FM.propertyIsEnumerable, MU = Lv(/* @__PURE__ */ function() {
        return arguments;
      }()) ? Lv : function(t2) {
        return N0(t2) && mU.call(t2, "callee") && !fU.call(t2, "callee");
      }, R7 = MU;
    });
    function xU() {
      return false;
    }
    var IM, PM = x(() => {
      IM = xU;
    });
    var ZM, GM, CU, TM, LU, HU, oa, Hv = x(() => {
      m3();
      PM();
      ZM = exports && !exports.nodeType && exports, GM = ZM && true && module && !module.nodeType && module, CU = GM && GM.exports === ZM, TM = CU ? g2.Buffer : void 0, LU = TM ? TM.isBuffer : void 0, HU = LU || IM, oa = HU;
    });
    function KU(t2) {
      return N0(t2) && A7(t2.length) && !!J1[q0(t2)];
    }
    var VU, wU, BU, yU, SU, kU, AU, RU, bU, FU, IU, PU, GU, TU, ZU, OU, EU, DU, WU, _U, jU, qU, NU, UU, J1, OM, EM = x(() => {
      p8();
      He();
      m8();
      VU = "[object Arguments]", wU = "[object Array]", BU = "[object Boolean]", yU = "[object Date]", SU = "[object Error]", kU = "[object Function]", AU = "[object Map]", RU = "[object Number]", bU = "[object Object]", FU = "[object RegExp]", IU = "[object Set]", PU = "[object String]", GU = "[object WeakMap]", TU = "[object ArrayBuffer]", ZU = "[object DataView]", OU = "[object Float32Array]", EU = "[object Float64Array]", DU = "[object Int8Array]", WU = "[object Int16Array]", _U = "[object Int32Array]", jU = "[object Uint8Array]", qU = "[object Uint8ClampedArray]", NU = "[object Uint16Array]", UU = "[object Uint32Array]", J1 = {};
      J1[OU] = J1[EU] = J1[DU] = J1[WU] = J1[_U] = J1[jU] = J1[qU] = J1[NU] = J1[UU] = true;
      J1[VU] = J1[wU] = J1[TU] = J1[BU] = J1[ZU] = J1[yU] = J1[SU] = J1[kU] = J1[AU] = J1[RU] = J1[bU] = J1[FU] = J1[IU] = J1[PU] = J1[GU] = false;
      OM = KU;
    });
    function $U(t2) {
      return function(a) {
        return t2(a);
      };
    }
    var b7, we = x(() => {
      b7 = $U;
    });
    var DM, na, QU, Vv, XU, wv, WM = x(() => {
      zv();
      DM = exports && !exports.nodeType && exports, na = DM && true && module && !module.nodeType && module, QU = na && na.exports === DM, Vv = QU && ze.process, XU = function() {
        try {
          var t2 = na && na.require && na.require("util").types;
          return t2 || Vv && Vv.binding && Vv.binding("util");
        } catch (a) {
        }
      }(), wv = XU;
    });
    var _M, YU, Be, Bv = x(() => {
      EM();
      we();
      WM();
      _M = wv && wv.isTypedArray, YU = _M ? b7(_M) : OM, Be = YU;
    });
    function aK(t2, a) {
      var c = o2(t2), r = !c && R7(t2), e = !c && !r && oa(t2), l = !c && !r && !e && Be(t2), i5 = c || r || e || l, o = i5 ? AM(t2.length, String) : [], n = o.length;
      for (var h in t2) (a || tK.call(t2, h)) && !(i5 && (h == "length" || e && (h == "offset" || h == "parent") || l && (h == "buffer" || h == "byteLength" || h == "byteOffset") || Y5(h, n))) && o.push(h);
      return o;
    }
    var JU, tK, jM, qM = x(() => {
      RM();
      Ve();
      f3();
      Hv();
      ea();
      Bv();
      JU = Object.prototype, tK = JU.hasOwnProperty;
      jM = aK;
    });
    function cK(t2, a) {
      return function(c) {
        return t2(a(c));
      };
    }
    var ye, yv = x(() => {
      ye = cK;
    });
    var rK, NM, UM = x(() => {
      yv();
      rK = ye(Object.keys, Object), NM = rK;
    });
    function iK(t2) {
      if (!SM(t2)) return NM(t2);
      var a = [];
      for (var c in Object(t2)) lK.call(t2, c) && c != "constructor" && a.push(c);
      return a;
    }
    var eK, lK, KM, $M = x(() => {
      kM();
      UM();
      eK = Object.prototype, lK = eK.hasOwnProperty;
      KM = iK;
    });
    function oK(t2) {
      return t6(t2) ? jM(t2) : KM(t2);
    }
    var F7, Se = x(() => {
      qM();
      $M();
      ia();
      F7 = oK;
    });
    function vK(t2, a) {
      if (o2(t2)) return false;
      var c = typeof t2;
      return c == "number" || c == "symbol" || c == "boolean" || t2 == null || E3(t2) ? true : hK.test(t2) || !nK.test(t2) || a != null && t2 in Object(a);
    }
    var nK, hK, I7, ke = x(() => {
      f3();
      w7();
      nK = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, hK = /^\w*$/;
      I7 = vK;
    });
    var gK, e5, ha = x(() => {
      X5();
      gK = w0(Object, "create"), e5 = gK;
    });
    function dK() {
      this.__data__ = e5 ? e5(null) : {}, this.size = 0;
    }
    var QM, XM = x(() => {
      ha();
      QM = dK;
    });
    function sK(t2) {
      var a = this.has(t2) && delete this.__data__[t2];
      return this.size -= a ? 1 : 0, a;
    }
    var YM, JM = x(() => {
      YM = sK;
    });
    function mK(t2) {
      var a = this.__data__;
      if (e5) {
        var c = a[t2];
        return c === zK ? void 0 : c;
      }
      return pK.call(a, t2) ? a[t2] : void 0;
    }
    var zK, uK, pK, tx, ax = x(() => {
      ha();
      zK = "__lodash_hash_undefined__", uK = Object.prototype, pK = uK.hasOwnProperty;
      tx = mK;
    });
    function xK(t2) {
      var a = this.__data__;
      return e5 ? a[t2] !== void 0 : MK.call(a, t2);
    }
    var fK, MK, cx, rx = x(() => {
      ha();
      fK = Object.prototype, MK = fK.hasOwnProperty;
      cx = xK;
    });
    function LK(t2, a) {
      var c = this.__data__;
      return this.size += this.has(t2) ? 0 : 1, c[t2] = e5 && a === void 0 ? CK : a, this;
    }
    var CK, ex, lx = x(() => {
      ha();
      CK = "__lodash_hash_undefined__";
      ex = LK;
    });
    function P7(t2) {
      var a = -1, c = t2 == null ? 0 : t2.length;
      for (this.clear(); ++a < c; ) {
        var r = t2[a];
        this.set(r[0], r[1]);
      }
    }
    var Sv, ix = x(() => {
      XM();
      JM();
      ax();
      rx();
      lx();
      P7.prototype.clear = QM;
      P7.prototype.delete = YM;
      P7.prototype.get = tx;
      P7.prototype.has = cx;
      P7.prototype.set = ex;
      Sv = P7;
    });
    function HK() {
      this.__data__ = [], this.size = 0;
    }
    var ox, nx = x(() => {
      ox = HK;
    });
    function VK(t2, a) {
      for (var c = t2.length; c--; ) if (J5(t2[c][0], a)) return c;
      return -1;
    }
    var a6, va = x(() => {
      la();
      a6 = VK;
    });
    function yK(t2) {
      var a = this.__data__, c = a6(a, t2);
      if (c < 0) return false;
      var r = a.length - 1;
      return c == r ? a.pop() : BK.call(a, c, 1), --this.size, true;
    }
    var wK, BK, hx, vx = x(() => {
      va();
      wK = Array.prototype, BK = wK.splice;
      hx = yK;
    });
    function SK(t2) {
      var a = this.__data__, c = a6(a, t2);
      return c < 0 ? void 0 : a[c][1];
    }
    var gx, dx = x(() => {
      va();
      gx = SK;
    });
    function kK(t2) {
      return a6(this.__data__, t2) > -1;
    }
    var sx, zx = x(() => {
      va();
      sx = kK;
    });
    function AK(t2, a) {
      var c = this.__data__, r = a6(c, t2);
      return r < 0 ? (++this.size, c.push([t2, a])) : c[r][1] = a, this;
    }
    var ux, px = x(() => {
      va();
      ux = AK;
    });
    function G7(t2) {
      var a = -1, c = t2 == null ? 0 : t2.length;
      for (this.clear(); ++a < c; ) {
        var r = t2[a];
        this.set(r[0], r[1]);
      }
    }
    var c6, ga = x(() => {
      nx();
      vx();
      dx();
      zx();
      px();
      G7.prototype.clear = ox;
      G7.prototype.delete = hx;
      G7.prototype.get = gx;
      G7.prototype.has = sx;
      G7.prototype.set = ux;
      c6 = G7;
    });
    var RK, r6, Ae = x(() => {
      X5();
      m3();
      RK = w0(g2, "Map"), r6 = RK;
    });
    function bK() {
      this.size = 0, this.__data__ = { hash: new Sv(), map: new (r6 || c6)(), string: new Sv() };
    }
    var mx, fx = x(() => {
      ix();
      ga();
      Ae();
      mx = bK;
    });
    function FK(t2) {
      var a = typeof t2;
      return a == "string" || a == "number" || a == "symbol" || a == "boolean" ? t2 !== "__proto__" : t2 === null;
    }
    var Mx, xx = x(() => {
      Mx = FK;
    });
    function IK(t2, a) {
      var c = t2.__data__;
      return Mx(a) ? c[typeof a == "string" ? "string" : "hash"] : c.map;
    }
    var e6, da = x(() => {
      xx();
      e6 = IK;
    });
    function PK(t2) {
      var a = e6(this, t2).delete(t2);
      return this.size -= a ? 1 : 0, a;
    }
    var Cx, Lx = x(() => {
      da();
      Cx = PK;
    });
    function GK(t2) {
      return e6(this, t2).get(t2);
    }
    var Hx, Vx = x(() => {
      da();
      Hx = GK;
    });
    function TK(t2) {
      return e6(this, t2).has(t2);
    }
    var wx, Bx = x(() => {
      da();
      wx = TK;
    });
    function ZK(t2, a) {
      var c = e6(this, t2), r = c.size;
      return c.set(t2, a), this.size += c.size == r ? 0 : 1, this;
    }
    var yx, Sx = x(() => {
      da();
      yx = ZK;
    });
    function T7(t2) {
      var a = -1, c = t2 == null ? 0 : t2.length;
      for (this.clear(); ++a < c; ) {
        var r = t2[a];
        this.set(r[0], r[1]);
      }
    }
    var f8, Re = x(() => {
      fx();
      Lx();
      Vx();
      Bx();
      Sx();
      T7.prototype.clear = mx;
      T7.prototype.delete = Cx;
      T7.prototype.get = Hx;
      T7.prototype.has = wx;
      T7.prototype.set = yx;
      f8 = T7;
    });
    function kv(t2, a) {
      if (typeof t2 != "function" || a != null && typeof a != "function") throw new TypeError(OK);
      var c = function() {
        var r = arguments, e = a ? a.apply(this, r) : r[0], l = c.cache;
        if (l.has(e)) return l.get(e);
        var i5 = t2.apply(this, r);
        return c.cache = l.set(e, i5) || l, i5;
      };
      return c.cache = new (kv.Cache || f8)(), c;
    }
    var OK, sa, Av = x(() => {
      Re();
      OK = "Expected a function";
      kv.Cache = f8;
      sa = kv;
    });
    function DK(t2) {
      var a = sa(t2, function(r) {
        return c.size === EK && c.clear(), r;
      }), c = a.cache;
      return a;
    }
    var EK, kx, Ax = x(() => {
      Av();
      EK = 500;
      kx = DK;
    });
    var WK, _K, jK, Rx, bx = x(() => {
      Ax();
      WK = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, _K = /\\(\\)?/g, jK = kx(function(t2) {
        var a = [];
        return t2.charCodeAt(0) === 46 && a.push(""), t2.replace(WK, function(c, r, e, l) {
          a.push(e ? l.replace(_K, "$1") : r || c);
        }), a;
      }), Rx = jK;
    });
    function qK(t2) {
      return t2 == null ? "" : Of(t2);
    }
    var za, Rv = x(() => {
      Ef();
      za = qK;
    });
    function NK(t2, a) {
      return o2(t2) ? t2 : I7(t2, a) ? [t2] : Rx(za(t2));
    }
    var Z7, be = x(() => {
      f3();
      ke();
      bx();
      Rv();
      Z7 = NK;
    });
    function KK(t2) {
      if (typeof t2 == "string" || E3(t2)) return t2;
      var a = t2 + "";
      return a == "0" && 1 / t2 == -UK ? "-0" : a;
    }
    var UK, f4, O7 = x(() => {
      w7();
      UK = 1 / 0;
      f4 = KK;
    });
    function $K(t2, a) {
      a = Z7(a, t2);
      for (var c = 0, r = a.length; t2 != null && c < r; ) t2 = t2[f4(a[c++])];
      return c && c == r ? t2 : void 0;
    }
    var E7, Fe = x(() => {
      be();
      O7();
      E7 = $K;
    });
    function QK(t2, a, c) {
      var r = t2 == null ? void 0 : E7(t2, a);
      return r === void 0 ? c : r;
    }
    var D3, D7 = x(() => {
      Fe();
      D3 = QK;
    });
    function XK(t2, a) {
      for (var c = -1, r = a.length, e = t2.length; ++c < r; ) t2[e + c] = a[c];
      return t2;
    }
    var Ie, bv = x(() => {
      Ie = XK;
    });
    function YK(t2) {
      return o2(t2) || R7(t2) || !!(Fx && t2 && t2[Fx]);
    }
    var Fx, Ix, Px = x(() => {
      V7();
      Ve();
      f3();
      Fx = p0 ? p0.isConcatSpreadable : void 0;
      Ix = YK;
    });
    function Gx(t2, a, c, r, e) {
      var l = -1, i5 = t2.length;
      for (c || (c = Ix), e || (e = []); ++l < i5; ) {
        var o = t2[l];
        a > 0 && c(o) ? a > 1 ? Gx(o, a - 1, c, r, e) : Ie(e, o) : r || (e[e.length] = o);
      }
      return e;
    }
    var Tx, Zx = x(() => {
      bv();
      Px();
      Tx = Gx;
    });
    var JK, Ox, Ex = x(() => {
      yv();
      JK = ye(Object.getPrototypeOf, Object), Ox = JK;
    });
    function l$(t2) {
      if (!N0(t2) || q0(t2) != t$) return false;
      var a = Ox(t2);
      if (a === null) return true;
      var c = r$.call(a, "constructor") && a.constructor;
      return typeof c == "function" && c instanceof c && Dx.call(c) == e$;
    }
    var t$, a$, c$, Dx, r$, e$, M8, Fv = x(() => {
      p8();
      Ex();
      m8();
      t$ = "[object Object]", a$ = Function.prototype, c$ = Object.prototype, Dx = a$.toString, r$ = c$.hasOwnProperty, e$ = Dx.call(Object);
      M8 = l$;
    });
    function n$(t2) {
      var a = Math[t2];
      return function(c, r) {
        if (c = U0(c), r = r == null ? 0 : o$($5(r), 292), r && i$(c)) {
          var e = (za(c) + "e").split("e"), l = a(e[0] + "e" + (+e[1] + r));
          return e = (za(l) + "e").split("e"), +(e[0] + "e" + (+e[1] - r));
        }
        return a(c);
      };
    }
    var i$, o$, Wx, _x2 = x(() => {
      m3();
      ca();
      B7();
      Rv();
      i$ = g2.isFinite, o$ = Math.min;
      Wx = n$;
    });
    function h$(t2, a, c) {
      return t2 === t2 && (c !== void 0 && (t2 = t2 <= c ? t2 : c), a !== void 0 && (t2 = t2 >= a ? t2 : a)), t2;
    }
    var jx, qx = x(() => {
      jx = h$;
    });
    function v$(t2, a, c) {
      return c === void 0 && (c = a, a = void 0), c !== void 0 && (c = U0(c), c = c === c ? c : 0), a !== void 0 && (a = U0(a), a = a === a ? a : 0), jx(U0(t2), a, c);
    }
    var b1, ua = x(() => {
      qx();
      B7();
      b1 = v$;
    });
    function g$() {
      this.__data__ = new c6(), this.size = 0;
    }
    var Nx, Ux = x(() => {
      ga();
      Nx = g$;
    });
    function d$(t2) {
      var a = this.__data__, c = a.delete(t2);
      return this.size = a.size, c;
    }
    var Kx, $x = x(() => {
      Kx = d$;
    });
    function s$(t2) {
      return this.__data__.get(t2);
    }
    var Qx, Xx = x(() => {
      Qx = s$;
    });
    function z$(t2) {
      return this.__data__.has(t2);
    }
    var Yx, Jx = x(() => {
      Yx = z$;
    });
    function p$(t2, a) {
      var c = this.__data__;
      if (c instanceof c6) {
        var r = c.__data__;
        if (!r6 || r.length < u$ - 1) return r.push([t2, a]), this.size = ++c.size, this;
        c = this.__data__ = new f8(r);
      }
      return c.set(t2, a), this.size = c.size, this;
    }
    var u$, tC, aC = x(() => {
      ga();
      Ae();
      Re();
      u$ = 200;
      tC = p$;
    });
    function W7(t2) {
      var a = this.__data__ = new c6(t2);
      this.size = a.size;
    }
    var _7, Iv = x(() => {
      ga();
      Ux();
      $x();
      Xx();
      Jx();
      aC();
      W7.prototype.clear = Nx;
      W7.prototype.delete = Kx;
      W7.prototype.get = Qx;
      W7.prototype.has = Yx;
      W7.prototype.set = tC;
      _7 = W7;
    });
    function m$(t2, a) {
      for (var c = -1, r = t2 == null ? 0 : t2.length, e = 0, l = []; ++c < r; ) {
        var i5 = t2[c];
        a(i5, c, t2) && (l[e++] = i5);
      }
      return l;
    }
    var cC, rC = x(() => {
      cC = m$;
    });
    function f$() {
      return [];
    }
    var eC, lC = x(() => {
      eC = f$;
    });
    var M$, x$, iC, C$, oC, nC = x(() => {
      rC();
      lC();
      M$ = Object.prototype, x$ = M$.propertyIsEnumerable, iC = Object.getOwnPropertySymbols, C$ = iC ? function(t2) {
        return t2 == null ? [] : (t2 = Object(t2), cC(iC(t2), function(a) {
          return x$.call(t2, a);
        }));
      } : eC, oC = C$;
    });
    function L$(t2, a, c) {
      var r = a(t2);
      return o2(t2) ? r : Ie(r, c(t2));
    }
    var hC, vC = x(() => {
      bv();
      f3();
      hC = L$;
    });
    function H$(t2) {
      return hC(t2, F7, oC);
    }
    var Pv, gC = x(() => {
      vC();
      nC();
      Se();
      Pv = H$;
    });
    var V$, Pe, dC = x(() => {
      X5();
      m3();
      V$ = w0(g2, "DataView"), Pe = V$;
    });
    var w$, Ge, sC = x(() => {
      X5();
      m3();
      w$ = w0(g2, "Promise"), Ge = w$;
    });
    var B$, l6, Gv = x(() => {
      X5();
      m3();
      B$ = w0(g2, "Set"), l6 = B$;
    });
    var zC, y$, uC, pC, mC, fC, S$, k$, A$, R$, b$, x8, Tv, MC = x(() => {
      dC();
      Ae();
      sC();
      Gv();
      aM();
      p8();
      mv();
      zC = "[object Map]", y$ = "[object Object]", uC = "[object Promise]", pC = "[object Set]", mC = "[object WeakMap]", fC = "[object DataView]", S$ = r5(Pe), k$ = r5(r6), A$ = r5(Ge), R$ = r5(l6), b$ = r5(fe), x8 = q0;
      (Pe && x8(new Pe(new ArrayBuffer(1))) != fC || r6 && x8(new r6()) != zC || Ge && x8(Ge.resolve()) != uC || l6 && x8(new l6()) != pC || fe && x8(new fe()) != mC) && (x8 = function(t2) {
        var a = q0(t2), c = a == y$ ? t2.constructor : void 0, r = c ? r5(c) : "";
        if (r) switch (r) {
          case S$:
            return fC;
          case k$:
            return zC;
          case A$:
            return uC;
          case R$:
            return pC;
          case b$:
            return mC;
        }
        return a;
      });
      Tv = x8;
    });
    var F$, Zv, xC = x(() => {
      m3();
      F$ = g2.Uint8Array, Zv = F$;
    });
    function P$(t2) {
      return this.__data__.set(t2, I$), this;
    }
    var I$, CC, LC = x(() => {
      I$ = "__lodash_hash_undefined__";
      CC = P$;
    });
    function G$(t2) {
      return this.__data__.has(t2);
    }
    var HC, VC = x(() => {
      HC = G$;
    });
    function Te(t2) {
      var a = -1, c = t2 == null ? 0 : t2.length;
      for (this.__data__ = new f8(); ++a < c; ) this.add(t2[a]);
    }
    var Ze, Ov = x(() => {
      Re();
      LC();
      VC();
      Te.prototype.add = Te.prototype.push = CC;
      Te.prototype.has = HC;
      Ze = Te;
    });
    function T$(t2, a) {
      for (var c = -1, r = t2 == null ? 0 : t2.length; ++c < r; ) if (a(t2[c], c, t2)) return true;
      return false;
    }
    var wC, BC = x(() => {
      wC = T$;
    });
    function Z$(t2, a) {
      return t2.has(a);
    }
    var Oe, Ev = x(() => {
      Oe = Z$;
    });
    function D$(t2, a, c, r, e, l) {
      var i5 = c & O$, o = t2.length, n = a.length;
      if (o != n && !(i5 && n > o)) return false;
      var h = l.get(t2), v = l.get(a);
      if (h && v) return h == a && v == t2;
      var g = -1, s = true, d = c & E$ ? new Ze() : void 0;
      for (l.set(t2, a), l.set(a, t2); ++g < o; ) {
        var z = t2[g], u = a[g];
        if (r) var f = i5 ? r(u, z, g, a, t2, l) : r(z, u, g, t2, a, l);
        if (f !== void 0) {
          if (f) continue;
          s = false;
          break;
        }
        if (d) {
          if (!wC(a, function(p, m) {
            if (!Oe(d, m) && (z === p || e(z, p, c, r, l))) return d.push(m);
          })) {
            s = false;
            break;
          }
        } else if (!(z === u || e(z, u, c, r, l))) {
          s = false;
          break;
        }
      }
      return l.delete(t2), l.delete(a), s;
    }
    var O$, E$, Ee, Dv = x(() => {
      Ov();
      BC();
      Ev();
      O$ = 1, E$ = 2;
      Ee = D$;
    });
    function W$(t2) {
      var a = -1, c = Array(t2.size);
      return t2.forEach(function(r, e) {
        c[++a] = [e, r];
      }), c;
    }
    var yC, SC = x(() => {
      yC = W$;
    });
    function _$(t2) {
      var a = -1, c = Array(t2.size);
      return t2.forEach(function(r) {
        c[++a] = r;
      }), c;
    }
    var j7, De = x(() => {
      j7 = _$;
    });
    function rQ(t2, a, c, r, e, l, i5) {
      switch (c) {
        case cQ:
          if (t2.byteLength != a.byteLength || t2.byteOffset != a.byteOffset) return false;
          t2 = t2.buffer, a = a.buffer;
        case aQ:
          return !(t2.byteLength != a.byteLength || !l(new Zv(t2), new Zv(a)));
        case N$:
        case U$:
        case Q$:
          return J5(+t2, +a);
        case K$:
          return t2.name == a.name && t2.message == a.message;
        case X$:
        case J$:
          return t2 == a + "";
        case $$:
          var o = yC;
        case Y$:
          var n = r & j$;
          if (o || (o = j7), t2.size != a.size && !n) return false;
          var h = i5.get(t2);
          if (h) return h == a;
          r |= q$, i5.set(t2, a);
          var v = Ee(o(t2), o(a), r, e, l, i5);
          return i5.delete(t2), v;
        case tQ:
          if (Wv) return Wv.call(t2) == Wv.call(a);
      }
      return false;
    }
    var j$, q$, N$, U$, K$, $$, Q$, X$, Y$, J$, tQ, aQ, cQ, kC, Wv, AC, RC = x(() => {
      V7();
      xC();
      la();
      Dv();
      SC();
      De();
      j$ = 1, q$ = 2, N$ = "[object Boolean]", U$ = "[object Date]", K$ = "[object Error]", $$ = "[object Map]", Q$ = "[object Number]", X$ = "[object RegExp]", Y$ = "[object Set]", J$ = "[object String]", tQ = "[object Symbol]", aQ = "[object ArrayBuffer]", cQ = "[object DataView]", kC = p0 ? p0.prototype : void 0, Wv = kC ? kC.valueOf : void 0;
      AC = rQ;
    });
    function oQ(t2, a, c, r, e, l) {
      var i5 = c & eQ, o = Pv(t2), n = o.length, h = Pv(a), v = h.length;
      if (n != v && !i5) return false;
      for (var g = n; g--; ) {
        var s = o[g];
        if (!(i5 ? s in a : iQ.call(a, s))) return false;
      }
      var d = l.get(t2), z = l.get(a);
      if (d && z) return d == a && z == t2;
      var u = true;
      l.set(t2, a), l.set(a, t2);
      for (var f = i5; ++g < n; ) {
        s = o[g];
        var p = t2[s], m = a[s];
        if (r) var M = i5 ? r(m, p, s, a, t2, l) : r(p, m, s, t2, a, l);
        if (!(M === void 0 ? p === m || e(p, m, c, r, l) : M)) {
          u = false;
          break;
        }
        f || (f = s == "constructor");
      }
      if (u && !f) {
        var w = t2.constructor, H = a.constructor;
        w != H && "constructor" in t2 && "constructor" in a && !(typeof w == "function" && w instanceof w && typeof H == "function" && H instanceof H) && (u = false);
      }
      return l.delete(t2), l.delete(a), u;
    }
    var eQ, lQ, iQ, bC, FC = x(() => {
      gC();
      eQ = 1, lQ = Object.prototype, iQ = lQ.hasOwnProperty;
      bC = oQ;
    });
    function vQ(t2, a, c, r, e, l) {
      var i5 = o2(t2), o = o2(a), n = i5 ? PC : Tv(t2), h = o ? PC : Tv(a);
      n = n == IC ? We : n, h = h == IC ? We : h;
      var v = n == We, g = h == We, s = n == h;
      if (s && oa(t2)) {
        if (!oa(a)) return false;
        i5 = true, v = false;
      }
      if (s && !v) return l || (l = new _7()), i5 || Be(t2) ? Ee(t2, a, c, r, e, l) : AC(t2, a, n, c, r, e, l);
      if (!(c & nQ)) {
        var d = v && GC.call(t2, "__wrapped__"), z = g && GC.call(a, "__wrapped__");
        if (d || z) {
          var u = d ? t2.value() : t2, f = z ? a.value() : a;
          return l || (l = new _7()), e(u, f, c, r, l);
        }
      }
      return s ? (l || (l = new _7()), bC(t2, a, c, r, e, l)) : false;
    }
    var nQ, IC, PC, We, hQ, GC, TC, ZC = x(() => {
      Iv();
      Dv();
      RC();
      FC();
      MC();
      f3();
      Hv();
      Bv();
      nQ = 1, IC = "[object Arguments]", PC = "[object Array]", We = "[object Object]", hQ = Object.prototype, GC = hQ.hasOwnProperty;
      TC = vQ;
    });
    function OC(t2, a, c, r, e) {
      return t2 === a ? true : t2 == null || a == null || !N0(t2) && !N0(a) ? t2 !== t2 && a !== a : TC(t2, a, c, r, OC, e);
    }
    var _e, _v = x(() => {
      ZC();
      m8();
      _e = OC;
    });
    function sQ(t2, a, c, r) {
      var e = c.length, l = e, i5 = !r;
      if (t2 == null) return !l;
      for (t2 = Object(t2); e--; ) {
        var o = c[e];
        if (i5 && o[2] ? o[1] !== t2[o[0]] : !(o[0] in t2)) return false;
      }
      for (; ++e < l; ) {
        o = c[e];
        var n = o[0], h = t2[n], v = o[1];
        if (i5 && o[2]) {
          if (h === void 0 && !(n in t2)) return false;
        } else {
          var g = new _7();
          if (r) var s = r(h, v, n, t2, a, g);
          if (!(s === void 0 ? _e(v, h, gQ | dQ, r, g) : s)) return false;
        }
      }
      return true;
    }
    var gQ, dQ, EC, DC = x(() => {
      Iv();
      _v();
      gQ = 1, dQ = 2;
      EC = sQ;
    });
    function zQ(t2) {
      return t2 === t2 && !r0(t2);
    }
    var je, jv = x(() => {
      K5();
      je = zQ;
    });
    function uQ(t2) {
      for (var a = F7(t2), c = a.length; c--; ) {
        var r = a[c], e = t2[r];
        a[c] = [r, e, je(e)];
      }
      return a;
    }
    var WC, _C = x(() => {
      jv();
      Se();
      WC = uQ;
    });
    function pQ(t2, a) {
      return function(c) {
        return c == null ? false : c[t2] === a && (a !== void 0 || t2 in Object(c));
      };
    }
    var qe, qv = x(() => {
      qe = pQ;
    });
    function mQ(t2) {
      var a = WC(t2);
      return a.length == 1 && a[0][2] ? qe(a[0][0], a[0][1]) : function(c) {
        return c === t2 || EC(c, t2, a);
      };
    }
    var jC, qC = x(() => {
      DC();
      _C();
      qv();
      jC = mQ;
    });
    function fQ(t2, a) {
      return t2 != null && a in Object(t2);
    }
    var NC, UC = x(() => {
      NC = fQ;
    });
    function MQ(t2, a, c) {
      a = Z7(a, t2);
      for (var r = -1, e = a.length, l = false; ++r < e; ) {
        var i5 = f4(a[r]);
        if (!(l = t2 != null && c(t2, i5))) break;
        t2 = t2[i5];
      }
      return l || ++r != e ? l : (e = t2 == null ? 0 : t2.length, !!e && A7(e) && Y5(i5, e) && (o2(t2) || R7(t2)));
    }
    var KC, $C = x(() => {
      be();
      Ve();
      f3();
      ea();
      He();
      O7();
      KC = MQ;
    });
    function xQ(t2, a) {
      return t2 != null && KC(t2, a, NC);
    }
    var QC, XC = x(() => {
      UC();
      $C();
      QC = xQ;
    });
    function HQ(t2, a) {
      return I7(t2) && je(a) ? qe(f4(t2), a) : function(c) {
        var r = D3(c, t2);
        return r === void 0 && r === a ? QC(c, t2) : _e(a, r, CQ | LQ);
      };
    }
    var CQ, LQ, YC, JC = x(() => {
      _v();
      D7();
      XC();
      ke();
      jv();
      qv();
      O7();
      CQ = 1, LQ = 2;
      YC = HQ;
    });
    function VQ(t2) {
      return function(a) {
        return a == null ? void 0 : a[t2];
      };
    }
    var tL, aL = x(() => {
      tL = VQ;
    });
    function wQ(t2) {
      return function(a) {
        return E7(a, t2);
      };
    }
    var cL, rL = x(() => {
      Fe();
      cL = wQ;
    });
    function BQ(t2) {
      return I7(t2) ? tL(f4(t2)) : cL(t2);
    }
    var eL, lL = x(() => {
      aL();
      rL();
      ke();
      O7();
      eL = BQ;
    });
    function yQ(t2) {
      return typeof t2 == "function" ? t2 : t2 == null ? Q5 : typeof t2 == "object" ? o2(t2) ? YC(t2[0], t2[1]) : jC(t2) : eL(t2);
    }
    var M4, q7 = x(() => {
      qC();
      JC();
      ra();
      f3();
      lL();
      M4 = yQ;
    });
    function SQ(t2, a, c, r) {
      for (var e = -1, l = t2 == null ? 0 : t2.length; ++e < l; ) {
        var i5 = t2[e];
        a(r, i5, c(i5), t2);
      }
      return r;
    }
    var iL, oL = x(() => {
      iL = SQ;
    });
    function kQ(t2) {
      return function(a, c, r) {
        for (var e = -1, l = Object(a), i5 = r(a), o = i5.length; o--; ) {
          var n = i5[t2 ? o : ++e];
          if (c(l[n], n, l) === false) break;
        }
        return a;
      };
    }
    var nL, hL = x(() => {
      nL = kQ;
    });
    var AQ, vL, gL = x(() => {
      hL();
      AQ = nL(), vL = AQ;
    });
    function RQ(t2, a) {
      return t2 && vL(t2, a, F7);
    }
    var Ne, Nv = x(() => {
      gL();
      Se();
      Ne = RQ;
    });
    function bQ(t2, a) {
      return function(c, r) {
        if (c == null) return c;
        if (!t6(c)) return t2(c, r);
        for (var e = c.length, l = a ? e : -1, i5 = Object(c); (a ? l-- : ++l < e) && r(i5[l], l, i5) !== false; ) ;
        return c;
      };
    }
    var dL, sL = x(() => {
      ia();
      dL = bQ;
    });
    var FQ, Ue, Uv = x(() => {
      Nv();
      sL();
      FQ = dL(Ne), Ue = FQ;
    });
    function IQ(t2, a, c, r) {
      return Ue(t2, function(e, l, i5) {
        a(r, e, c(e), i5);
      }), r;
    }
    var zL, uL = x(() => {
      Uv();
      zL = IQ;
    });
    function PQ(t2, a) {
      return function(c, r) {
        var e = o2(c) ? iL : zL, l = a ? a() : {};
        return e(c, t2, M4(r, 2), l);
      };
    }
    var pL, mL = x(() => {
      oL();
      uL();
      q7();
      f3();
      pL = PQ;
    });
    var GQ, Ke, fL = x(() => {
      m3();
      GQ = function() {
        return g2.Date.now();
      }, Ke = GQ;
    });
    function EQ(t2, a, c) {
      var r, e, l, i5, o, n, h = 0, v = false, g = false, s = true;
      if (typeof t2 != "function") throw new TypeError(TQ);
      a = U0(a) || 0, r0(c) && (v = !!c.leading, g = "maxWait" in c, l = g ? ZQ(U0(c.maxWait) || 0, a) : l, s = "trailing" in c ? !!c.trailing : s);
      function d(y) {
        var k = r, F = e;
        return r = e = void 0, h = y, i5 = t2.apply(F, k), i5;
      }
      function z(y) {
        return h = y, o = setTimeout(p, a), v ? d(y) : i5;
      }
      function u(y) {
        var k = y - n, F = y - h, U = a - k;
        return g ? OQ(U, l - F) : U;
      }
      function f(y) {
        var k = y - n, F = y - h;
        return n === void 0 || k >= a || k < 0 || g && F >= l;
      }
      function p() {
        var y = Ke();
        if (f(y)) return m(y);
        o = setTimeout(p, u(y));
      }
      function m(y) {
        return o = void 0, s && r ? d(y) : (r = e = void 0, i5);
      }
      function M() {
        o !== void 0 && clearTimeout(o), h = 0, r = n = e = o = void 0;
      }
      function w() {
        return o === void 0 ? i5 : m(Ke());
      }
      function H() {
        var y = Ke(), k = f(y);
        if (r = arguments, e = this, n = y, k) {
          if (o === void 0) return z(n);
          if (g) return clearTimeout(o), o = setTimeout(p, a), d(n);
        }
        return o === void 0 && (o = setTimeout(p, a)), i5;
      }
      return H.cancel = M, H.flush = w, H;
    }
    var TQ, ZQ, OQ, pa, Kv = x(() => {
      K5();
      fL();
      B7();
      TQ = "Expected a function", ZQ = Math.max, OQ = Math.min;
      pa = EQ;
    });
    function DQ(t2, a, c) {
      for (var r = -1, e = t2 == null ? 0 : t2.length; ++r < e; ) if (c(a, t2[r])) return true;
      return false;
    }
    var ML, xL = x(() => {
      ML = DQ;
    });
    function WQ(t2) {
      var a = t2 == null ? 0 : t2.length;
      return a ? t2[a - 1] : void 0;
    }
    var M3, ma = x(() => {
      M3 = WQ;
    });
    function jQ(t2, a, c) {
      var r = t2 == null ? 0 : t2.length;
      if (!r) return -1;
      var e = c == null ? 0 : $5(c);
      return e < 0 && (e = _Q(r + e, 0)), S7(t2, M4(a, 3), e);
    }
    var _Q, $e, CL = x(() => {
      Me();
      q7();
      ca();
      _Q = Math.max;
      $e = jQ;
    });
    function UQ(t2, a, c) {
      var r = t2 == null ? 0 : t2.length;
      if (!r) return -1;
      var e = r - 1;
      return c !== void 0 && (e = $5(c), e = c < 0 ? qQ(r + e, 0) : NQ(e, r - 1)), S7(t2, M4(a, 3), e, true);
    }
    var qQ, NQ, LL, HL = x(() => {
      Me();
      q7();
      ca();
      qQ = Math.max, NQ = Math.min;
      LL = UQ;
    });
    function KQ(t2, a) {
      var c = -1, r = t6(t2) ? Array(t2.length) : [];
      return Ue(t2, function(e, l, i5) {
        r[++c] = a(e, l, i5);
      }), r;
    }
    var VL, wL = x(() => {
      Uv();
      ia();
      VL = KQ;
    });
    function XQ(t2, a, c) {
      return t2 >= QQ(a, c) && t2 < $Q(a, c);
    }
    var $Q, QQ, BL, yL = x(() => {
      $Q = Math.max, QQ = Math.min;
      BL = XQ;
    });
    function YQ(t2, a, c) {
      return a = aa(a), c === void 0 ? (c = a, a = 0) : c = aa(c), t2 = U0(t2), BL(t2, a, c);
    }
    var Qe, SL = x(() => {
      yL();
      uv();
      B7();
      Qe = YQ;
    });
    function JQ(t2) {
      return typeof t2 == "number" && t2 == $5(t2);
    }
    var fa, $v = x(() => {
      ca();
      fa = JQ;
    });
    var tX, Ma, kL = x(() => {
      Ce();
      mL();
      tX = pL(function(t2, a, c) {
        k7(t2, c, a);
      }), Ma = tX;
    });
    function aX(t2, a) {
      var c = {};
      return a = M4(a, 3), Ne(t2, function(r, e, l) {
        k7(c, e, a(r, e, l));
      }), c;
    }
    var l5, Qv = x(() => {
      Ce();
      Nv();
      q7();
      l5 = aX;
    });
    function cX(t2, a, c, r) {
      if (!r0(t2)) return t2;
      a = Z7(a, t2);
      for (var e = -1, l = a.length, i5 = l - 1, o = t2; o != null && ++e < l; ) {
        var n = f4(a[e]), h = c;
        if (n === "__proto__" || n === "constructor" || n === "prototype") return t2;
        if (e != i5) {
          var v = o[n];
          h = r ? r(v, n, o) : void 0, h === void 0 && (h = r0(v) ? v : Y5(a[e + 1]) ? [] : {});
        }
        LM(o, n, h), o = o[n];
      }
      return t2;
    }
    var AL, RL = x(() => {
      HM();
      be();
      ea();
      K5();
      O7();
      AL = cX;
    });
    function rX(t2, a) {
      var c = t2.length;
      for (t2.sort(a); c--; ) t2[c] = t2[c].value;
      return t2;
    }
    var bL, FL = x(() => {
      bL = rX;
    });
    function eX(t2, a) {
      if (t2 !== a) {
        var c = t2 !== void 0, r = t2 === null, e = t2 === t2, l = E3(t2), i5 = a !== void 0, o = a === null, n = a === a, h = E3(a);
        if (!o && !h && !l && t2 > a || l && i5 && n && !o && !h || r && i5 && n || !c && n || !e) return 1;
        if (!r && !l && !h && t2 < a || h && c && e && !r && !l || o && c && e || !i5 && e || !n) return -1;
      }
      return 0;
    }
    var IL, PL = x(() => {
      w7();
      IL = eX;
    });
    function lX(t2, a, c) {
      for (var r = -1, e = t2.criteria, l = a.criteria, i5 = e.length, o = c.length; ++r < i5; ) {
        var n = IL(e[r], l[r]);
        if (n) {
          if (r >= o) return n;
          var h = c[r];
          return n * (h == "desc" ? -1 : 1);
        }
      }
      return t2.index - a.index;
    }
    var GL, TL = x(() => {
      PL();
      GL = lX;
    });
    function iX(t2, a, c) {
      a.length ? a = U5(a, function(l) {
        return o2(l) ? function(i5) {
          return E7(i5, l.length === 1 ? l[0] : l);
        } : l;
      }) : a = [Q5];
      var r = -1;
      a = U5(a, b7(M4));
      var e = VL(t2, function(l, i5, o) {
        var n = U5(a, function(h) {
          return h(l);
        });
        return { criteria: n, index: ++r, value: l };
      });
      return bL(e, function(l, i5) {
        return GL(l, i5, c);
      });
    }
    var ZL, OL = x(() => {
      ue();
      Fe();
      q7();
      wL();
      FL();
      we();
      TL();
      ra();
      f3();
      ZL = iX;
    });
    function oX(t2, a, c, r) {
      for (var e = c - 1, l = t2.length; ++e < l; ) if (r(t2[e], a)) return e;
      return -1;
    }
    var EL, DL = x(() => {
      EL = oX;
    });
    function hX(t2, a, c, r) {
      var e = r ? EL : xe, l = -1, i5 = a.length, o = t2;
      for (t2 === a && (a = iM(a)), c && (o = U5(t2, b7(c))); ++l < i5; ) for (var n = 0, h = a[l], v = c ? c(h) : h; (n = e(o, v, n, r)) > -1; ) o !== t2 && WL.call(o, n, 1), WL.call(t2, n, 1);
      return t2;
    }
    var nX, WL, _L, jL = x(() => {
      ue();
      Mv();
      DL();
      we();
      oM();
      nX = Array.prototype, WL = nX.splice;
      _L = hX;
    });
    function vX(t2, a) {
      return t2 && t2.length && a && a.length ? _L(t2, a) : t2;
    }
    var qL, NL = x(() => {
      jL();
      qL = vX;
    });
    var gX, UL, KL = x(() => {
      xv();
      NL();
      gX = Le(qL), UL = gX;
    });
    var dX, Xv, $L = x(() => {
      _x2();
      dX = Wx("round"), Xv = dX;
    });
    function sX(t2, a, c) {
      return t2 == null ? t2 : AL(t2, a, c);
    }
    var i6, Xe = x(() => {
      RL();
      i6 = sX;
    });
    var zX, QL, XL = x(() => {
      Zx();
      OL();
      xv();
      yM();
      zX = Le(function(t2, a) {
        if (t2 == null) return [];
        var c = a.length;
        return c > 1 && Cv(t2, a[0], a[1]) ? a = [] : c > 2 && Cv(a[0], a[1], a[2]) && (a = [a[0]]), ZL(t2, Tx(a, 1), []);
      }), QL = zX;
    });
    var uX, pX, YL, JL = x(() => {
      Gv();
      lM();
      De();
      uX = 1 / 0, pX = l6 && 1 / j7(new l6([, -0]))[1] == uX ? function(t2) {
        return new l6(t2);
      } : eM, YL = pX;
    });
    function fX(t2, a, c) {
      var r = -1, e = xM, l = t2.length, i5 = true, o = [], n = o;
      if (c) i5 = false, e = ML;
      else if (l >= mX) {
        var h = a ? null : YL(t2);
        if (h) return j7(h);
        i5 = false, e = Oe, n = new Ze();
      } else n = a ? [] : o;
      t: for (; ++r < l; ) {
        var v = t2[r], g = a ? a(v) : v;
        if (v = c || v !== 0 ? v : 0, i5 && g === g) {
          for (var s = n.length; s--; ) if (n[s] === g) continue t;
          a && n.push(g), o.push(v);
        } else e(n, g, c) || (n !== o && n.push(g), o.push(v));
      }
      return o;
    }
    var mX, tH, aH = x(() => {
      Ov();
      CM();
      xL();
      Ev();
      JL();
      De();
      mX = 200;
      tH = fX;
    });
    function MX(t2) {
      return t2 && t2.length ? tH(t2) : [];
    }
    var x3, cH = x(() => {
      aH();
      x3 = MX;
    });
    var H2 = x(() => {
      ua();
      Kv();
      CL();
      SL();
      $v();
      Fv();
      ma();
      Qv();
      Av();
      $L();
      cH();
    });
    var lH = L1((yz1, eH) => {
      var rH;
      eH.exports = typeof queueMicrotask == "function" ? queueMicrotask.bind(typeof window != "undefined" ? window : commonjsGlobal) : (t2) => (rH || (rH = Promise.resolve())).then(t2).catch((a) => setTimeout(() => {
        throw a;
      }, 0));
    });
    var pH = L1((F1) => {
      var xa = Symbol.for("react.element"), xX = Symbol.for("react.portal"), CX = Symbol.for("react.fragment"), LX = Symbol.for("react.strict_mode"), HX = Symbol.for("react.profiler"), VX = Symbol.for("react.provider"), wX = Symbol.for("react.context"), BX = Symbol.for("react.forward_ref"), yX = Symbol.for("react.suspense"), SX = Symbol.for("react.memo"), kX = Symbol.for("react.lazy"), iH = Symbol.iterator;
      function AX(t2) {
        return t2 === null || typeof t2 != "object" ? null : (t2 = iH && t2[iH] || t2["@@iterator"], typeof t2 == "function" ? t2 : null);
      }
      var hH = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } }, vH = Object.assign, gH = {};
      function N7(t2, a, c) {
        this.props = t2, this.context = a, this.refs = gH, this.updater = c || hH;
      }
      N7.prototype.isReactComponent = {};
      N7.prototype.setState = function(t2, a) {
        if (typeof t2 != "object" && typeof t2 != "function" && t2 != null) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, t2, a, "setState");
      };
      N7.prototype.forceUpdate = function(t2) {
        this.updater.enqueueForceUpdate(this, t2, "forceUpdate");
      };
      function dH() {
      }
      dH.prototype = N7.prototype;
      function Jv(t2, a, c) {
        this.props = t2, this.context = a, this.refs = gH, this.updater = c || hH;
      }
      var tg = Jv.prototype = new dH();
      tg.constructor = Jv;
      vH(tg, N7.prototype);
      tg.isPureReactComponent = true;
      var oH = Array.isArray, sH = Object.prototype.hasOwnProperty, ag = { current: null }, zH = { key: true, ref: true, __self: true, __source: true };
      function uH(t2, a, c) {
        var r, e = {}, l = null, i5 = null;
        if (a != null) for (r in a.ref !== void 0 && (i5 = a.ref), a.key !== void 0 && (l = "" + a.key), a) sH.call(a, r) && !zH.hasOwnProperty(r) && (e[r] = a[r]);
        var o = arguments.length - 2;
        if (o === 1) e.children = c;
        else if (1 < o) {
          for (var n = Array(o), h = 0; h < o; h++) n[h] = arguments[h + 2];
          e.children = n;
        }
        if (t2 && t2.defaultProps) for (r in o = t2.defaultProps, o) e[r] === void 0 && (e[r] = o[r]);
        return { $$typeof: xa, type: t2, key: l, ref: i5, props: e, _owner: ag.current };
      }
      function RX(t2, a) {
        return { $$typeof: xa, type: t2.type, key: a, ref: t2.ref, props: t2.props, _owner: t2._owner };
      }
      function cg(t2) {
        return typeof t2 == "object" && t2 !== null && t2.$$typeof === xa;
      }
      function bX(t2) {
        var a = { "=": "=0", ":": "=2" };
        return "$" + t2.replace(/[=:]/g, function(c) {
          return a[c];
        });
      }
      var nH = /\/+/g;
      function Yv(t2, a) {
        return typeof t2 == "object" && t2 !== null && t2.key != null ? bX("" + t2.key) : a.toString(36);
      }
      function Je(t2, a, c, r, e) {
        var l = typeof t2;
        (l === "undefined" || l === "boolean") && (t2 = null);
        var i5 = false;
        if (t2 === null) i5 = true;
        else switch (l) {
          case "string":
          case "number":
            i5 = true;
            break;
          case "object":
            switch (t2.$$typeof) {
              case xa:
              case xX:
                i5 = true;
            }
        }
        if (i5) return i5 = t2, e = e(i5), t2 = r === "" ? "." + Yv(i5, 0) : r, oH(e) ? (c = "", t2 != null && (c = t2.replace(nH, "$&/") + "/"), Je(e, a, c, "", function(h) {
          return h;
        })) : e != null && (cg(e) && (e = RX(e, c + (!e.key || i5 && i5.key === e.key ? "" : ("" + e.key).replace(nH, "$&/") + "/") + t2)), a.push(e)), 1;
        if (i5 = 0, r = r === "" ? "." : r + ":", oH(t2)) for (var o = 0; o < t2.length; o++) {
          l = t2[o];
          var n = r + Yv(l, o);
          i5 += Je(l, a, c, n, e);
        }
        else if (n = AX(t2), typeof n == "function") for (t2 = n.call(t2), o = 0; !(l = t2.next()).done; ) l = l.value, n = r + Yv(l, o++), i5 += Je(l, a, c, n, e);
        else if (l === "object") throw a = String(t2), Error("Objects are not valid as a React child (found: " + (a === "[object Object]" ? "object with keys {" + Object.keys(t2).join(", ") + "}" : a) + "). If you meant to render a collection of children, use an array instead.");
        return i5;
      }
      function Ye(t2, a, c) {
        if (t2 == null) return t2;
        var r = [], e = 0;
        return Je(t2, r, "", "", function(l) {
          return a.call(c, l, e++);
        }), r;
      }
      function FX(t2) {
        if (t2._status === -1) {
          var a = t2._result;
          a = a(), a.then(function(c) {
            (t2._status === 0 || t2._status === -1) && (t2._status = 1, t2._result = c);
          }, function(c) {
            (t2._status === 0 || t2._status === -1) && (t2._status = 2, t2._result = c);
          }), t2._status === -1 && (t2._status = 0, t2._result = a);
        }
        if (t2._status === 1) return t2._result.default;
        throw t2._result;
      }
      var m0 = { current: null }, tl = { transition: null }, IX = { ReactCurrentDispatcher: m0, ReactCurrentBatchConfig: tl, ReactCurrentOwner: ag };
      F1.Children = { map: Ye, forEach: function(t2, a, c) {
        Ye(t2, function() {
          a.apply(this, arguments);
        }, c);
      }, count: function(t2) {
        var a = 0;
        return Ye(t2, function() {
          a++;
        }), a;
      }, toArray: function(t2) {
        return Ye(t2, function(a) {
          return a;
        }) || [];
      }, only: function(t2) {
        if (!cg(t2)) throw Error("React.Children.only expected to receive a single React element child.");
        return t2;
      } };
      F1.Component = N7;
      F1.Fragment = CX;
      F1.Profiler = HX;
      F1.PureComponent = Jv;
      F1.StrictMode = LX;
      F1.Suspense = yX;
      F1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = IX;
      F1.cloneElement = function(t2, a, c) {
        if (t2 == null) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + t2 + ".");
        var r = vH({}, t2.props), e = t2.key, l = t2.ref, i5 = t2._owner;
        if (a != null) {
          if (a.ref !== void 0 && (l = a.ref, i5 = ag.current), a.key !== void 0 && (e = "" + a.key), t2.type && t2.type.defaultProps) var o = t2.type.defaultProps;
          for (n in a) sH.call(a, n) && !zH.hasOwnProperty(n) && (r[n] = a[n] === void 0 && o !== void 0 ? o[n] : a[n]);
        }
        var n = arguments.length - 2;
        if (n === 1) r.children = c;
        else if (1 < n) {
          o = Array(n);
          for (var h = 0; h < n; h++) o[h] = arguments[h + 2];
          r.children = o;
        }
        return { $$typeof: xa, type: t2.type, key: e, ref: l, props: r, _owner: i5 };
      };
      F1.createContext = function(t2) {
        return t2 = { $$typeof: wX, _currentValue: t2, _currentValue2: t2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, t2.Provider = { $$typeof: VX, _context: t2 }, t2.Consumer = t2;
      };
      F1.createElement = uH;
      F1.createFactory = function(t2) {
        var a = uH.bind(null, t2);
        return a.type = t2, a;
      };
      F1.createRef = function() {
        return { current: null };
      };
      F1.forwardRef = function(t2) {
        return { $$typeof: BX, render: t2 };
      };
      F1.isValidElement = cg;
      F1.lazy = function(t2) {
        return { $$typeof: kX, _payload: { _status: -1, _result: t2 }, _init: FX };
      };
      F1.memo = function(t2, a) {
        return { $$typeof: SX, type: t2, compare: a === void 0 ? null : a };
      };
      F1.startTransition = function(t2) {
        var a = tl.transition;
        tl.transition = {};
        try {
          t2();
        } finally {
          tl.transition = a;
        }
      };
      F1.unstable_act = function() {
        throw Error("act(...) is not supported in production builds of React.");
      };
      F1.useCallback = function(t2, a) {
        return m0.current.useCallback(t2, a);
      };
      F1.useContext = function(t2) {
        return m0.current.useContext(t2);
      };
      F1.useDebugValue = function() {
      };
      F1.useDeferredValue = function(t2) {
        return m0.current.useDeferredValue(t2);
      };
      F1.useEffect = function(t2, a) {
        return m0.current.useEffect(t2, a);
      };
      F1.useId = function() {
        return m0.current.useId();
      };
      F1.useImperativeHandle = function(t2, a, c) {
        return m0.current.useImperativeHandle(t2, a, c);
      };
      F1.useInsertionEffect = function(t2, a) {
        return m0.current.useInsertionEffect(t2, a);
      };
      F1.useLayoutEffect = function(t2, a) {
        return m0.current.useLayoutEffect(t2, a);
      };
      F1.useMemo = function(t2, a) {
        return m0.current.useMemo(t2, a);
      };
      F1.useReducer = function(t2, a, c) {
        return m0.current.useReducer(t2, a, c);
      };
      F1.useRef = function(t2) {
        return m0.current.useRef(t2);
      };
      F1.useState = function(t2) {
        return m0.current.useState(t2);
      };
      F1.useSyncExternalStore = function(t2, a, c) {
        return m0.current.useSyncExternalStore(t2, a, c);
      };
      F1.useTransition = function() {
        return m0.current.useTransition();
      };
      F1.version = "18.2.0";
    });
    var G = L1((kz1, mH) => {
      mH.exports = pH();
    });
    var yH = L1((K1) => {
      function ig(t2, a) {
        var c = t2.length;
        t2.push(a);
        t: for (; 0 < c; ) {
          var r = c - 1 >>> 1, e = t2[r];
          if (0 < al(e, a)) t2[r] = a, t2[c] = e, c = r;
          else break t;
        }
      }
      function W3(t2) {
        return t2.length === 0 ? null : t2[0];
      }
      function rl(t2) {
        if (t2.length === 0) return null;
        var a = t2[0], c = t2.pop();
        if (c !== a) {
          t2[0] = c;
          t: for (var r = 0, e = t2.length, l = e >>> 1; r < l; ) {
            var i5 = 2 * (r + 1) - 1, o = t2[i5], n = i5 + 1, h = t2[n];
            if (0 > al(o, c)) n < e && 0 > al(h, o) ? (t2[r] = h, t2[n] = c, r = n) : (t2[r] = o, t2[i5] = c, r = i5);
            else if (n < e && 0 > al(h, c)) t2[r] = h, t2[n] = c, r = n;
            else break t;
          }
        }
        return a;
      }
      function al(t2, a) {
        var c = t2.sortIndex - a.sortIndex;
        return c !== 0 ? c : t2.id - a.id;
      }
      typeof performance == "object" && typeof performance.now == "function" ? (fH = performance, K1.unstable_now = function() {
        return fH.now();
      }) : (rg = Date, MH = rg.now(), K1.unstable_now = function() {
        return rg.now() - MH;
      });
      var fH, rg, MH, x4 = [], o6 = [], PX = 1, C3 = null, e0 = 3, el = false, C8 = false, La = false, LH = typeof setTimeout == "function" ? setTimeout : null, HH = typeof clearTimeout == "function" ? clearTimeout : null, xH = typeof setImmediate != "undefined" ? setImmediate : null;
      typeof navigator != "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function og(t2) {
        for (var a = W3(o6); a !== null; ) {
          if (a.callback === null) rl(o6);
          else if (a.startTime <= t2) rl(o6), a.sortIndex = a.expirationTime, ig(x4, a);
          else break;
          a = W3(o6);
        }
      }
      function ng(t2) {
        if (La = false, og(t2), !C8) if (W3(x4) !== null) C8 = true, vg(hg);
        else {
          var a = W3(o6);
          a !== null && gg(ng, a.startTime - t2);
        }
      }
      function hg(t2, a) {
        C8 = false, La && (La = false, HH(Ha), Ha = -1), el = true;
        var c = e0;
        try {
          for (og(a), C3 = W3(x4); C3 !== null && (!(C3.expirationTime > a) || t2 && !BH()); ) {
            var r = C3.callback;
            if (typeof r == "function") {
              C3.callback = null, e0 = C3.priorityLevel;
              var e = r(C3.expirationTime <= a);
              a = K1.unstable_now(), typeof e == "function" ? C3.callback = e : C3 === W3(x4) && rl(x4), og(a);
            } else rl(x4);
            C3 = W3(x4);
          }
          if (C3 !== null) var l = true;
          else {
            var i5 = W3(o6);
            i5 !== null && gg(ng, i5.startTime - a), l = false;
          }
          return l;
        } finally {
          C3 = null, e0 = c, el = false;
        }
      }
      var ll = false, cl = null, Ha = -1, VH = 5, wH = -1;
      function BH() {
        return !(K1.unstable_now() - wH < VH);
      }
      function eg() {
        if (cl !== null) {
          var t2 = K1.unstable_now();
          wH = t2;
          var a = true;
          try {
            a = cl(true, t2);
          } finally {
            a ? Ca() : (ll = false, cl = null);
          }
        } else ll = false;
      }
      var Ca;
      typeof xH == "function" ? Ca = function() {
        xH(eg);
      } : typeof MessageChannel != "undefined" ? (lg = new MessageChannel(), CH = lg.port2, lg.port1.onmessage = eg, Ca = function() {
        CH.postMessage(null);
      }) : Ca = function() {
        LH(eg, 0);
      };
      var lg, CH;
      function vg(t2) {
        cl = t2, ll || (ll = true, Ca());
      }
      function gg(t2, a) {
        Ha = LH(function() {
          t2(K1.unstable_now());
        }, a);
      }
      K1.unstable_IdlePriority = 5;
      K1.unstable_ImmediatePriority = 1;
      K1.unstable_LowPriority = 4;
      K1.unstable_NormalPriority = 3;
      K1.unstable_Profiling = null;
      K1.unstable_UserBlockingPriority = 2;
      K1.unstable_cancelCallback = function(t2) {
        t2.callback = null;
      };
      K1.unstable_continueExecution = function() {
        C8 || el || (C8 = true, vg(hg));
      };
      K1.unstable_forceFrameRate = function(t2) {
        0 > t2 || 125 < t2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : VH = 0 < t2 ? Math.floor(1e3 / t2) : 5;
      };
      K1.unstable_getCurrentPriorityLevel = function() {
        return e0;
      };
      K1.unstable_getFirstCallbackNode = function() {
        return W3(x4);
      };
      K1.unstable_next = function(t2) {
        switch (e0) {
          case 1:
          case 2:
          case 3:
            var a = 3;
            break;
          default:
            a = e0;
        }
        var c = e0;
        e0 = a;
        try {
          return t2();
        } finally {
          e0 = c;
        }
      };
      K1.unstable_pauseExecution = function() {
      };
      K1.unstable_requestPaint = function() {
      };
      K1.unstable_runWithPriority = function(t2, a) {
        switch (t2) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            t2 = 3;
        }
        var c = e0;
        e0 = t2;
        try {
          return a();
        } finally {
          e0 = c;
        }
      };
      K1.unstable_scheduleCallback = function(t2, a, c) {
        var r = K1.unstable_now();
        switch (typeof c == "object" && c !== null ? (c = c.delay, c = typeof c == "number" && 0 < c ? r + c : r) : c = r, t2) {
          case 1:
            var e = -1;
            break;
          case 2:
            e = 250;
            break;
          case 5:
            e = 1073741823;
            break;
          case 4:
            e = 1e4;
            break;
          default:
            e = 5e3;
        }
        return e = c + e, t2 = { id: PX++, callback: a, priorityLevel: t2, startTime: c, expirationTime: e, sortIndex: -1 }, c > r ? (t2.sortIndex = c, ig(o6, t2), W3(x4) === null && t2 === W3(o6) && (La ? (HH(Ha), Ha = -1) : La = true, gg(ng, c - r))) : (t2.sortIndex = e, ig(x4, t2), C8 || el || (C8 = true, vg(hg))), t2;
      };
      K1.unstable_shouldYield = BH;
      K1.unstable_wrapCallback = function(t2) {
        var a = e0;
        return function() {
          var c = e0;
          e0 = a;
          try {
            return t2.apply(this, arguments);
          } finally {
            e0 = c;
          }
        };
      };
    });
    var kH = L1((Rz1, SH) => {
      SH.exports = yH();
    });
    var PB = L1((J0) => {
      var GV = G(), X0 = kH();
      function n1(t3) {
        for (var a = "https://reactjs.org/docs/error-decoder.html?invariant=" + t3, c = 1; c < arguments.length; c++) a += "&args[]=" + encodeURIComponent(arguments[c]);
        return "Minified React error #" + t3 + "; visit " + a + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var TV = /* @__PURE__ */ new Set(), qa = {};
      function I8(t3, a) {
        s9(t3, a), s9(t3 + "Capture", a);
      }
      function s9(t3, a) {
        for (qa[t3] = a, t3 = 0; t3 < a.length; t3++) TV.add(a[t3]);
      }
      var g5 = !(typeof window == "undefined" || typeof window.document == "undefined" || typeof window.document.createElement == "undefined"), Ig = Object.prototype.hasOwnProperty, GX = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, AH = {}, RH = {};
      function TX(t3) {
        return Ig.call(RH, t3) ? true : Ig.call(AH, t3) ? false : GX.test(t3) ? RH[t3] = true : (AH[t3] = true, false);
      }
      function ZX(t3, a, c, r) {
        if (c !== null && c.type === 0) return false;
        switch (typeof a) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            return r ? false : c !== null ? !c.acceptsBooleans : (t3 = t3.toLowerCase().slice(0, 5), t3 !== "data-" && t3 !== "aria-");
          default:
            return false;
        }
      }
      function OX(t3, a, c, r) {
        if (a === null || typeof a == "undefined" || ZX(t3, a, c, r)) return true;
        if (r) return false;
        if (c !== null) switch (c.type) {
          case 3:
            return !a;
          case 4:
            return a === false;
          case 5:
            return isNaN(a);
          case 6:
            return isNaN(a) || 1 > a;
        }
        return false;
      }
      function x0(t3, a, c, r, e, l, i10) {
        this.acceptsBooleans = a === 2 || a === 3 || a === 4, this.attributeName = r, this.attributeNamespace = e, this.mustUseProperty = c, this.propertyName = t3, this.type = a, this.sanitizeURL = l, this.removeEmptyString = i10;
      }
      var q2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t3) {
        q2[t3] = new x0(t3, 0, false, t3, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(t3) {
        var a = t3[0];
        q2[a] = new x0(a, 1, false, t3[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(t3) {
        q2[t3] = new x0(t3, 2, false, t3.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(t3) {
        q2[t3] = new x0(t3, 2, false, t3, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t3) {
        q2[t3] = new x0(t3, 3, false, t3.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(t3) {
        q2[t3] = new x0(t3, 3, true, t3, null, false, false);
      });
      ["capture", "download"].forEach(function(t3) {
        q2[t3] = new x0(t3, 4, false, t3, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(t3) {
        q2[t3] = new x0(t3, 6, false, t3, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(t3) {
        q2[t3] = new x0(t3, 5, false, t3.toLowerCase(), null, false, false);
      });
      var Bd = /[\-:]([a-z])/g;
      function yd(t3) {
        return t3[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t3) {
        var a = t3.replace(Bd, yd);
        q2[a] = new x0(a, 1, false, t3, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t3) {
        var a = t3.replace(Bd, yd);
        q2[a] = new x0(a, 1, false, t3, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(t3) {
        var a = t3.replace(Bd, yd);
        q2[a] = new x0(a, 1, false, t3, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(t3) {
        q2[t3] = new x0(t3, 1, false, t3.toLowerCase(), null, false, false);
      });
      q2.xlinkHref = new x0("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(t3) {
        q2[t3] = new x0(t3, 1, false, t3.toLowerCase(), null, true, true);
      });
      function Sd(t3, a, c, r) {
        var e = q2.hasOwnProperty(a) ? q2[a] : null;
        (e !== null ? e.type !== 0 : r || !(2 < a.length) || a[0] !== "o" && a[0] !== "O" || a[1] !== "n" && a[1] !== "N") && (OX(a, c, e, r) && (c = null), r || e === null ? TX(a) && (c === null ? t3.removeAttribute(a) : t3.setAttribute(a, "" + c)) : e.mustUseProperty ? t3[e.propertyName] = c === null ? e.type === 3 ? false : "" : c : (a = e.attributeName, r = e.attributeNamespace, c === null ? t3.removeAttribute(a) : (e = e.type, c = e === 3 || e === 4 && c === true ? "" : "" + c, r ? t3.setAttributeNS(r, a, c) : t3.setAttribute(a, c))));
      }
      var u5 = GV.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, il = Symbol.for("react.element"), $7 = Symbol.for("react.portal"), Q7 = Symbol.for("react.fragment"), kd = Symbol.for("react.strict_mode"), Pg = Symbol.for("react.profiler"), ZV = Symbol.for("react.provider"), OV = Symbol.for("react.context"), Ad = Symbol.for("react.forward_ref"), Gg = Symbol.for("react.suspense"), Tg = Symbol.for("react.suspense_list"), Rd = Symbol.for("react.memo"), h6 = Symbol.for("react.lazy");
      var EV = Symbol.for("react.offscreen");
      var bH = Symbol.iterator;
      function Va(t3) {
        return t3 === null || typeof t3 != "object" ? null : (t3 = bH && t3[bH] || t3["@@iterator"], typeof t3 == "function" ? t3 : null);
      }
      var v2 = Object.assign, dg;
      function ba(t3) {
        if (dg === void 0) try {
          throw Error();
        } catch (c) {
          var a = c.stack.trim().match(/\n( *(at )?)/);
          dg = a && a[1] || "";
        }
        return "\n" + dg + t3;
      }
      var sg = false;
      function zg(t3, a) {
        if (!t3 || sg) return "";
        sg = true;
        var c = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (a) if (a = function() {
            throw Error();
          }, Object.defineProperty(a.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(a, []);
            } catch (h) {
              var r = h;
            }
            Reflect.construct(t3, [], a);
          } else {
            try {
              a.call();
            } catch (h) {
              r = h;
            }
            t3.call(a.prototype);
          }
          else {
            try {
              throw Error();
            } catch (h) {
              r = h;
            }
            t3();
          }
        } catch (h) {
          if (h && r && typeof h.stack == "string") {
            for (var e = h.stack.split("\n"), l = r.stack.split("\n"), i10 = e.length - 1, o = l.length - 1; 1 <= i10 && 0 <= o && e[i10] !== l[o]; ) o--;
            for (; 1 <= i10 && 0 <= o; i10--, o--) if (e[i10] !== l[o]) {
              if (i10 !== 1 || o !== 1) do
                if (i10--, o--, 0 > o || e[i10] !== l[o]) {
                  var n = "\n" + e[i10].replace(" at new ", " at ");
                  return t3.displayName && n.includes("<anonymous>") && (n = n.replace("<anonymous>", t3.displayName)), n;
                }
              while (1 <= i10 && 0 <= o);
              break;
            }
          }
        } finally {
          sg = false, Error.prepareStackTrace = c;
        }
        return (t3 = t3 ? t3.displayName || t3.name : "") ? ba(t3) : "";
      }
      function EX(t3) {
        switch (t3.tag) {
          case 5:
            return ba(t3.type);
          case 16:
            return ba("Lazy");
          case 13:
            return ba("Suspense");
          case 19:
            return ba("SuspenseList");
          case 0:
          case 2:
          case 15:
            return t3 = zg(t3.type, false), t3;
          case 11:
            return t3 = zg(t3.type.render, false), t3;
          case 1:
            return t3 = zg(t3.type, true), t3;
          default:
            return "";
        }
      }
      function Zg(t3) {
        if (t3 == null) return null;
        if (typeof t3 == "function") return t3.displayName || t3.name || null;
        if (typeof t3 == "string") return t3;
        switch (t3) {
          case Q7:
            return "Fragment";
          case $7:
            return "Portal";
          case Pg:
            return "Profiler";
          case kd:
            return "StrictMode";
          case Gg:
            return "Suspense";
          case Tg:
            return "SuspenseList";
        }
        if (typeof t3 == "object") switch (t3.$$typeof) {
          case OV:
            return (t3.displayName || "Context") + ".Consumer";
          case ZV:
            return (t3._context.displayName || "Context") + ".Provider";
          case Ad:
            var a = t3.render;
            return t3 = t3.displayName, t3 || (t3 = a.displayName || a.name || "", t3 = t3 !== "" ? "ForwardRef(" + t3 + ")" : "ForwardRef"), t3;
          case Rd:
            return a = t3.displayName || null, a !== null ? a : Zg(t3.type) || "Memo";
          case h6:
            a = t3._payload, t3 = t3._init;
            try {
              return Zg(t3(a));
            } catch (c) {
            }
        }
        return null;
      }
      function DX(t3) {
        var a = t3.type;
        switch (t3.tag) {
          case 24:
            return "Cache";
          case 9:
            return (a.displayName || "Context") + ".Consumer";
          case 10:
            return (a._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return t3 = a.render, t3 = t3.displayName || t3.name || "", a.displayName || (t3 !== "" ? "ForwardRef(" + t3 + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return a;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Zg(a);
          case 8:
            return a === kd ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if (typeof a == "function") return a.displayName || a.name || null;
            if (typeof a == "string") return a;
        }
        return null;
      }
      function H6(t3) {
        switch (typeof t3) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return t3;
          case "object":
            return t3;
          default:
            return "";
        }
      }
      function DV(t3) {
        var a = t3.type;
        return (t3 = t3.nodeName) && t3.toLowerCase() === "input" && (a === "checkbox" || a === "radio");
      }
      function WX(t3) {
        var a = DV(t3) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(t3.constructor.prototype, a), r = "" + t3[a];
        if (!t3.hasOwnProperty(a) && typeof c != "undefined" && typeof c.get == "function" && typeof c.set == "function") {
          var e = c.get, l = c.set;
          return Object.defineProperty(t3, a, { configurable: true, get: function() {
            return e.call(this);
          }, set: function(i10) {
            r = "" + i10, l.call(this, i10);
          } }), Object.defineProperty(t3, a, { enumerable: c.enumerable }), { getValue: function() {
            return r;
          }, setValue: function(i10) {
            r = "" + i10;
          }, stopTracking: function() {
            t3._valueTracker = null, delete t3[a];
          } };
        }
      }
      function ol(t3) {
        t3._valueTracker || (t3._valueTracker = WX(t3));
      }
      function WV(t3) {
        if (!t3) return false;
        var a = t3._valueTracker;
        if (!a) return true;
        var c = a.getValue(), r = "";
        return t3 && (r = DV(t3) ? t3.checked ? "true" : "false" : t3.value), t3 = r, t3 !== c ? (a.setValue(t3), true) : false;
      }
      function Pl(t3) {
        if (t3 = t3 || (typeof document != "undefined" ? document : void 0), typeof t3 == "undefined") return null;
        try {
          return t3.activeElement || t3.body;
        } catch (a) {
          return t3.body;
        }
      }
      function Og(t3, a) {
        var c = a.checked;
        return v2({}, a, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c != null ? c : t3._wrapperState.initialChecked });
      }
      function FH(t3, a) {
        var c = a.defaultValue == null ? "" : a.defaultValue, r = a.checked != null ? a.checked : a.defaultChecked;
        c = H6(a.value != null ? a.value : c), t3._wrapperState = { initialChecked: r, initialValue: c, controlled: a.type === "checkbox" || a.type === "radio" ? a.checked != null : a.value != null };
      }
      function _V(t3, a) {
        a = a.checked, a != null && Sd(t3, "checked", a, false);
      }
      function Eg(t3, a) {
        _V(t3, a);
        var c = H6(a.value), r = a.type;
        if (c != null) r === "number" ? (c === 0 && t3.value === "" || t3.value != c) && (t3.value = "" + c) : t3.value !== "" + c && (t3.value = "" + c);
        else if (r === "submit" || r === "reset") {
          t3.removeAttribute("value");
          return;
        }
        a.hasOwnProperty("value") ? Dg(t3, a.type, c) : a.hasOwnProperty("defaultValue") && Dg(t3, a.type, H6(a.defaultValue)), a.checked == null && a.defaultChecked != null && (t3.defaultChecked = !!a.defaultChecked);
      }
      function IH(t3, a, c) {
        if (a.hasOwnProperty("value") || a.hasOwnProperty("defaultValue")) {
          var r = a.type;
          if (!(r !== "submit" && r !== "reset" || a.value !== void 0 && a.value !== null)) return;
          a = "" + t3._wrapperState.initialValue, c || a === t3.value || (t3.value = a), t3.defaultValue = a;
        }
        c = t3.name, c !== "" && (t3.name = ""), t3.defaultChecked = !!t3._wrapperState.initialChecked, c !== "" && (t3.name = c);
      }
      function Dg(t3, a, c) {
        (a !== "number" || Pl(t3.ownerDocument) !== t3) && (c == null ? t3.defaultValue = "" + t3._wrapperState.initialValue : t3.defaultValue !== "" + c && (t3.defaultValue = "" + c));
      }
      var Fa = Array.isArray;
      function o9(t3, a, c, r) {
        if (t3 = t3.options, a) {
          a = {};
          for (var e = 0; e < c.length; e++) a["$" + c[e]] = true;
          for (c = 0; c < t3.length; c++) e = a.hasOwnProperty("$" + t3[c].value), t3[c].selected !== e && (t3[c].selected = e), e && r && (t3[c].defaultSelected = true);
        } else {
          for (c = "" + H6(c), a = null, e = 0; e < t3.length; e++) {
            if (t3[e].value === c) {
              t3[e].selected = true, r && (t3[e].defaultSelected = true);
              return;
            }
            a !== null || t3[e].disabled || (a = t3[e]);
          }
          a !== null && (a.selected = true);
        }
      }
      function Wg(t3, a) {
        if (a.dangerouslySetInnerHTML != null) throw Error(n1(91));
        return v2({}, a, { value: void 0, defaultValue: void 0, children: "" + t3._wrapperState.initialValue });
      }
      function PH(t3, a) {
        var c = a.value;
        if (c == null) {
          if (c = a.children, a = a.defaultValue, c != null) {
            if (a != null) throw Error(n1(92));
            if (Fa(c)) {
              if (1 < c.length) throw Error(n1(93));
              c = c[0];
            }
            a = c;
          }
          a == null && (a = ""), c = a;
        }
        t3._wrapperState = { initialValue: H6(c) };
      }
      function jV(t3, a) {
        var c = H6(a.value), r = H6(a.defaultValue);
        c != null && (c = "" + c, c !== t3.value && (t3.value = c), a.defaultValue == null && t3.defaultValue !== c && (t3.defaultValue = c)), r != null && (t3.defaultValue = "" + r);
      }
      function GH(t3) {
        var a = t3.textContent;
        a === t3._wrapperState.initialValue && a !== "" && a !== null && (t3.value = a);
      }
      function qV(t3) {
        switch (t3) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function _g(t3, a) {
        return t3 == null || t3 === "http://www.w3.org/1999/xhtml" ? qV(a) : t3 === "http://www.w3.org/2000/svg" && a === "foreignObject" ? "http://www.w3.org/1999/xhtml" : t3;
      }
      var nl, NV = function(t3) {
        return typeof MSApp != "undefined" && MSApp.execUnsafeLocalFunction ? function(a, c, r, e) {
          MSApp.execUnsafeLocalFunction(function() {
            return t3(a, c, r, e);
          });
        } : t3;
      }(function(t3, a) {
        if (t3.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in t3) t3.innerHTML = a;
        else {
          for (nl = nl || document.createElement("div"), nl.innerHTML = "<svg>" + a.valueOf().toString() + "</svg>", a = nl.firstChild; t3.firstChild; ) t3.removeChild(t3.firstChild);
          for (; a.firstChild; ) t3.appendChild(a.firstChild);
        }
      });
      function Na(t3, a) {
        if (a) {
          var c = t3.firstChild;
          if (c && c === t3.lastChild && c.nodeType === 3) {
            c.nodeValue = a;
            return;
          }
        }
        t3.textContent = a;
      }
      var Ga = { animationIterationCount: true, aspectRatio: true, borderImageOutset: true, borderImageSlice: true, borderImageWidth: true, boxFlex: true, boxFlexGroup: true, boxOrdinalGroup: true, columnCount: true, columns: true, flex: true, flexGrow: true, flexPositive: true, flexShrink: true, flexNegative: true, flexOrder: true, gridArea: true, gridRow: true, gridRowEnd: true, gridRowSpan: true, gridRowStart: true, gridColumn: true, gridColumnEnd: true, gridColumnSpan: true, gridColumnStart: true, fontWeight: true, lineClamp: true, lineHeight: true, opacity: true, order: true, orphans: true, tabSize: true, widows: true, zIndex: true, zoom: true, fillOpacity: true, floodOpacity: true, stopOpacity: true, strokeDasharray: true, strokeDashoffset: true, strokeMiterlimit: true, strokeOpacity: true, strokeWidth: true }, _X = ["Webkit", "ms", "Moz", "O"];
      Object.keys(Ga).forEach(function(t3) {
        _X.forEach(function(a) {
          a = a + t3.charAt(0).toUpperCase() + t3.substring(1), Ga[a] = Ga[t3];
        });
      });
      function UV(t3, a, c) {
        return a == null || typeof a == "boolean" || a === "" ? "" : c || typeof a != "number" || a === 0 || Ga.hasOwnProperty(t3) && Ga[t3] ? ("" + a).trim() : a + "px";
      }
      function KV(t3, a) {
        t3 = t3.style;
        for (var c in a) if (a.hasOwnProperty(c)) {
          var r = c.indexOf("--") === 0, e = UV(c, a[c], r);
          c === "float" && (c = "cssFloat"), r ? t3.setProperty(c, e) : t3[c] = e;
        }
      }
      var jX = v2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function jg(t3, a) {
        if (a) {
          if (jX[t3] && (a.children != null || a.dangerouslySetInnerHTML != null)) throw Error(n1(137, t3));
          if (a.dangerouslySetInnerHTML != null) {
            if (a.children != null) throw Error(n1(60));
            if (typeof a.dangerouslySetInnerHTML != "object" || !("__html" in a.dangerouslySetInnerHTML)) throw Error(n1(61));
          }
          if (a.style != null && typeof a.style != "object") throw Error(n1(62));
        }
      }
      function qg(t3, a) {
        if (t3.indexOf("-") === -1) return typeof a.is == "string";
        switch (t3) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var Ng = null;
      function bd(t3) {
        return t3 = t3.target || t3.srcElement || window, t3.correspondingUseElement && (t3 = t3.correspondingUseElement), t3.nodeType === 3 ? t3.parentNode : t3;
      }
      var Ug = null, n9 = null, h9 = null;
      function TH(t3) {
        if (t3 = vc(t3)) {
          if (typeof Ug != "function") throw Error(n1(280));
          var a = t3.stateNode;
          a && (a = hi(a), Ug(t3.stateNode, t3.type, a));
        }
      }
      function $V(t3) {
        n9 ? h9 ? h9.push(t3) : h9 = [t3] : n9 = t3;
      }
      function QV() {
        if (n9) {
          var t3 = n9, a = h9;
          if (h9 = n9 = null, TH(t3), a) for (t3 = 0; t3 < a.length; t3++) TH(a[t3]);
        }
      }
      function XV(t3, a) {
        return t3(a);
      }
      function YV() {
      }
      var ug = false;
      function JV(t3, a, c) {
        if (ug) return t3(a, c);
        ug = true;
        try {
          return XV(t3, a, c);
        } finally {
          ug = false, (n9 !== null || h9 !== null) && (YV(), QV());
        }
      }
      function Ua(t3, a) {
        var c = t3.stateNode;
        if (c === null) return null;
        var r = hi(c);
        if (r === null) return null;
        c = r[a];
        t: switch (a) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (r = !r.disabled) || (t3 = t3.type, r = !(t3 === "button" || t3 === "input" || t3 === "select" || t3 === "textarea")), t3 = !r;
            break t;
          default:
            t3 = false;
        }
        if (t3) return null;
        if (c && typeof c != "function") throw Error(n1(231, a, typeof c));
        return c;
      }
      var Kg = false;
      if (g5) try {
        U7 = {}, Object.defineProperty(U7, "passive", { get: function() {
          Kg = true;
        } }), window.addEventListener("test", U7, U7), window.removeEventListener("test", U7, U7);
      } catch (t3) {
        Kg = false;
      }
      var U7;
      function qX(t3, a, c, r, e, l, i10, o, n) {
        var h = Array.prototype.slice.call(arguments, 3);
        try {
          a.apply(c, h);
        } catch (v) {
          this.onError(v);
        }
      }
      var Ta = false, Gl = null, Tl = false, $g = null, NX = { onError: function(t3) {
        Ta = true, Gl = t3;
      } };
      function UX(t3, a, c, r, e, l, i10, o, n) {
        Ta = false, Gl = null, qX.apply(NX, arguments);
      }
      function KX(t3, a, c, r, e, l, i10, o, n) {
        if (UX.apply(this, arguments), Ta) {
          if (Ta) {
            var h = Gl;
            Ta = false, Gl = null;
          } else throw Error(n1(198));
          Tl || (Tl = true, $g = h);
        }
      }
      function P8(t3) {
        var a = t3, c = t3;
        if (t3.alternate) for (; a.return; ) a = a.return;
        else {
          t3 = a;
          do
            a = t3, a.flags & 4098 && (c = a.return), t3 = a.return;
          while (t3);
        }
        return a.tag === 3 ? c : null;
      }
      function tw(t3) {
        if (t3.tag === 13) {
          var a = t3.memoizedState;
          if (a === null && (t3 = t3.alternate, t3 !== null && (a = t3.memoizedState)), a !== null) return a.dehydrated;
        }
        return null;
      }
      function ZH(t3) {
        if (P8(t3) !== t3) throw Error(n1(188));
      }
      function $X(t3) {
        var a = t3.alternate;
        if (!a) {
          if (a = P8(t3), a === null) throw Error(n1(188));
          return a !== t3 ? null : t3;
        }
        for (var c = t3, r = a; ; ) {
          var e = c.return;
          if (e === null) break;
          var l = e.alternate;
          if (l === null) {
            if (r = e.return, r !== null) {
              c = r;
              continue;
            }
            break;
          }
          if (e.child === l.child) {
            for (l = e.child; l; ) {
              if (l === c) return ZH(e), t3;
              if (l === r) return ZH(e), a;
              l = l.sibling;
            }
            throw Error(n1(188));
          }
          if (c.return !== r.return) c = e, r = l;
          else {
            for (var i10 = false, o = e.child; o; ) {
              if (o === c) {
                i10 = true, c = e, r = l;
                break;
              }
              if (o === r) {
                i10 = true, r = e, c = l;
                break;
              }
              o = o.sibling;
            }
            if (!i10) {
              for (o = l.child; o; ) {
                if (o === c) {
                  i10 = true, c = l, r = e;
                  break;
                }
                if (o === r) {
                  i10 = true, r = l, c = e;
                  break;
                }
                o = o.sibling;
              }
              if (!i10) throw Error(n1(189));
            }
          }
          if (c.alternate !== r) throw Error(n1(190));
        }
        if (c.tag !== 3) throw Error(n1(188));
        return c.stateNode.current === c ? t3 : a;
      }
      function aw(t3) {
        return t3 = $X(t3), t3 !== null ? cw(t3) : null;
      }
      function cw(t3) {
        if (t3.tag === 5 || t3.tag === 6) return t3;
        for (t3 = t3.child; t3 !== null; ) {
          var a = cw(t3);
          if (a !== null) return a;
          t3 = t3.sibling;
        }
        return null;
      }
      var rw = X0.unstable_scheduleCallback, OH = X0.unstable_cancelCallback, QX = X0.unstable_shouldYield, XX = X0.unstable_requestPaint, m2 = X0.unstable_now, YX = X0.unstable_getCurrentPriorityLevel, Fd = X0.unstable_ImmediatePriority, ew = X0.unstable_UserBlockingPriority, Zl = X0.unstable_NormalPriority, JX = X0.unstable_LowPriority, lw = X0.unstable_IdlePriority, li = null, V4 = null;
      function tY(t3) {
        if (V4 && typeof V4.onCommitFiberRoot == "function") try {
          V4.onCommitFiberRoot(li, t3, void 0, (t3.current.flags & 128) === 128);
        } catch (a) {
        }
      }
      var U3 = Math.clz32 ? Math.clz32 : rY, aY = Math.log, cY = Math.LN2;
      function rY(t3) {
        return t3 >>>= 0, t3 === 0 ? 32 : 31 - (aY(t3) / cY | 0) | 0;
      }
      var hl = 64, vl = 4194304;
      function Ia(t3) {
        switch (t3 & -t3) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return t3 & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return t3 & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return t3;
        }
      }
      function Ol(t3, a) {
        var c = t3.pendingLanes;
        if (c === 0) return 0;
        var r = 0, e = t3.suspendedLanes, l = t3.pingedLanes, i10 = c & 268435455;
        if (i10 !== 0) {
          var o = i10 & ~e;
          o !== 0 ? r = Ia(o) : (l &= i10, l !== 0 && (r = Ia(l)));
        } else i10 = c & ~e, i10 !== 0 ? r = Ia(i10) : l !== 0 && (r = Ia(l));
        if (r === 0) return 0;
        if (a !== 0 && a !== r && !(a & e) && (e = r & -r, l = a & -a, e >= l || e === 16 && (l & 4194240) !== 0)) return a;
        if (r & 4 && (r |= c & 16), a = t3.entangledLanes, a !== 0) for (t3 = t3.entanglements, a &= r; 0 < a; ) c = 31 - U3(a), e = 1 << c, r |= t3[c], a &= ~e;
        return r;
      }
      function eY(t3, a) {
        switch (t3) {
          case 1:
          case 2:
          case 4:
            return a + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function lY(t3, a) {
        for (var c = t3.suspendedLanes, r = t3.pingedLanes, e = t3.expirationTimes, l = t3.pendingLanes; 0 < l; ) {
          var i10 = 31 - U3(l), o = 1 << i10, n = e[i10];
          n === -1 ? (!(o & c) || o & r) && (e[i10] = eY(o, a)) : n <= a && (t3.expiredLanes |= o), l &= ~o;
        }
      }
      function Qg(t3) {
        return t3 = t3.pendingLanes & -1073741825, t3 !== 0 ? t3 : t3 & 1073741824 ? 1073741824 : 0;
      }
      function iw() {
        var t3 = hl;
        return hl <<= 1, !(hl & 4194240) && (hl = 64), t3;
      }
      function pg(t3) {
        for (var a = [], c = 0; 31 > c; c++) a.push(t3);
        return a;
      }
      function nc(t3, a, c) {
        t3.pendingLanes |= a, a !== 536870912 && (t3.suspendedLanes = 0, t3.pingedLanes = 0), t3 = t3.eventTimes, a = 31 - U3(a), t3[a] = c;
      }
      function iY(t3, a) {
        var c = t3.pendingLanes & ~a;
        t3.pendingLanes = a, t3.suspendedLanes = 0, t3.pingedLanes = 0, t3.expiredLanes &= a, t3.mutableReadLanes &= a, t3.entangledLanes &= a, a = t3.entanglements;
        var r = t3.eventTimes;
        for (t3 = t3.expirationTimes; 0 < c; ) {
          var e = 31 - U3(c), l = 1 << e;
          a[e] = 0, r[e] = -1, t3[e] = -1, c &= ~l;
        }
      }
      function Id(t3, a) {
        var c = t3.entangledLanes |= a;
        for (t3 = t3.entanglements; c; ) {
          var r = 31 - U3(c), e = 1 << r;
          e & a | t3[r] & a && (t3[r] |= a), c &= ~e;
        }
      }
      var W1 = 0;
      function ow(t3) {
        return t3 &= -t3, 1 < t3 ? 4 < t3 ? t3 & 268435455 ? 16 : 536870912 : 4 : 1;
      }
      var nw, Pd, hw, vw, gw, Xg = false, gl = [], u6 = null, p6 = null, m6 = null, Ka = /* @__PURE__ */ new Map(), $a = /* @__PURE__ */ new Map(), g6 = [], oY = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function EH(t3, a) {
        switch (t3) {
          case "focusin":
          case "focusout":
            u6 = null;
            break;
          case "dragenter":
          case "dragleave":
            p6 = null;
            break;
          case "mouseover":
          case "mouseout":
            m6 = null;
            break;
          case "pointerover":
          case "pointerout":
            Ka.delete(a.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            $a.delete(a.pointerId);
        }
      }
      function wa(t3, a, c, r, e, l) {
        return t3 === null || t3.nativeEvent !== l ? (t3 = { blockedOn: a, domEventName: c, eventSystemFlags: r, nativeEvent: l, targetContainers: [e] }, a !== null && (a = vc(a), a !== null && Pd(a)), t3) : (t3.eventSystemFlags |= r, a = t3.targetContainers, e !== null && a.indexOf(e) === -1 && a.push(e), t3);
      }
      function nY(t3, a, c, r, e) {
        switch (a) {
          case "focusin":
            return u6 = wa(u6, t3, a, c, r, e), true;
          case "dragenter":
            return p6 = wa(p6, t3, a, c, r, e), true;
          case "mouseover":
            return m6 = wa(m6, t3, a, c, r, e), true;
          case "pointerover":
            var l = e.pointerId;
            return Ka.set(l, wa(Ka.get(l) || null, t3, a, c, r, e)), true;
          case "gotpointercapture":
            return l = e.pointerId, $a.set(l, wa($a.get(l) || null, t3, a, c, r, e)), true;
        }
        return false;
      }
      function dw(t3) {
        var a = V8(t3.target);
        if (a !== null) {
          var c = P8(a);
          if (c !== null) {
            if (a = c.tag, a === 13) {
              if (a = tw(c), a !== null) {
                t3.blockedOn = a, gw(t3.priority, function() {
                  hw(c);
                });
                return;
              }
            } else if (a === 3 && c.stateNode.current.memoizedState.isDehydrated) {
              t3.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null;
              return;
            }
          }
        }
        t3.blockedOn = null;
      }
      function wl(t3) {
        if (t3.blockedOn !== null) return false;
        for (var a = t3.targetContainers; 0 < a.length; ) {
          var c = Yg(t3.domEventName, t3.eventSystemFlags, a[0], t3.nativeEvent);
          if (c === null) {
            c = t3.nativeEvent;
            var r = new c.constructor(c.type, c);
            Ng = r, c.target.dispatchEvent(r), Ng = null;
          } else return a = vc(c), a !== null && Pd(a), t3.blockedOn = c, false;
          a.shift();
        }
        return true;
      }
      function DH(t3, a, c) {
        wl(t3) && c.delete(a);
      }
      function hY() {
        Xg = false, u6 !== null && wl(u6) && (u6 = null), p6 !== null && wl(p6) && (p6 = null), m6 !== null && wl(m6) && (m6 = null), Ka.forEach(DH), $a.forEach(DH);
      }
      function Ba(t3, a) {
        t3.blockedOn === a && (t3.blockedOn = null, Xg || (Xg = true, X0.unstable_scheduleCallback(X0.unstable_NormalPriority, hY)));
      }
      function Qa(t3) {
        function a(e) {
          return Ba(e, t3);
        }
        if (0 < gl.length) {
          Ba(gl[0], t3);
          for (var c = 1; c < gl.length; c++) {
            var r = gl[c];
            r.blockedOn === t3 && (r.blockedOn = null);
          }
        }
        for (u6 !== null && Ba(u6, t3), p6 !== null && Ba(p6, t3), m6 !== null && Ba(m6, t3), Ka.forEach(a), $a.forEach(a), c = 0; c < g6.length; c++) r = g6[c], r.blockedOn === t3 && (r.blockedOn = null);
        for (; 0 < g6.length && (c = g6[0], c.blockedOn === null); ) dw(c), c.blockedOn === null && g6.shift();
      }
      var v9 = u5.ReactCurrentBatchConfig, El = true;
      function vY(t3, a, c, r) {
        var e = W1, l = v9.transition;
        v9.transition = null;
        try {
          W1 = 1, Gd(t3, a, c, r);
        } finally {
          W1 = e, v9.transition = l;
        }
      }
      function gY(t3, a, c, r) {
        var e = W1, l = v9.transition;
        v9.transition = null;
        try {
          W1 = 4, Gd(t3, a, c, r);
        } finally {
          W1 = e, v9.transition = l;
        }
      }
      function Gd(t3, a, c, r) {
        if (El) {
          var e = Yg(t3, a, c, r);
          if (e === null) Hg(t3, a, r, Dl, c), EH(t3, r);
          else if (nY(e, t3, a, c, r)) r.stopPropagation();
          else if (EH(t3, r), a & 4 && -1 < oY.indexOf(t3)) {
            for (; e !== null; ) {
              var l = vc(e);
              if (l !== null && nw(l), l = Yg(t3, a, c, r), l === null && Hg(t3, a, r, Dl, c), l === e) break;
              e = l;
            }
            e !== null && r.stopPropagation();
          } else Hg(t3, a, r, null, c);
        }
      }
      var Dl = null;
      function Yg(t3, a, c, r) {
        if (Dl = null, t3 = bd(r), t3 = V8(t3), t3 !== null) if (a = P8(t3), a === null) t3 = null;
        else if (c = a.tag, c === 13) {
          if (t3 = tw(a), t3 !== null) return t3;
          t3 = null;
        } else if (c === 3) {
          if (a.stateNode.current.memoizedState.isDehydrated) return a.tag === 3 ? a.stateNode.containerInfo : null;
          t3 = null;
        } else a !== t3 && (t3 = null);
        return Dl = t3, null;
      }
      function sw(t3) {
        switch (t3) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (YX()) {
              case Fd:
                return 1;
              case ew:
                return 4;
              case Zl:
              case JX:
                return 16;
              case lw:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var s6 = null, Td = null, Bl = null;
      function zw() {
        if (Bl) return Bl;
        var t3, a = Td, c = a.length, r, e = "value" in s6 ? s6.value : s6.textContent, l = e.length;
        for (t3 = 0; t3 < c && a[t3] === e[t3]; t3++) ;
        var i10 = c - t3;
        for (r = 1; r <= i10 && a[c - r] === e[l - r]; r++) ;
        return Bl = e.slice(t3, 1 < r ? 1 - r : void 0);
      }
      function yl(t3) {
        var a = t3.keyCode;
        return "charCode" in t3 ? (t3 = t3.charCode, t3 === 0 && a === 13 && (t3 = 13)) : t3 = a, t3 === 10 && (t3 = 13), 32 <= t3 || t3 === 13 ? t3 : 0;
      }
      function dl() {
        return true;
      }
      function WH() {
        return false;
      }
      function Y0(t3) {
        function a(c, r, e, l, i10) {
          this._reactName = c, this._targetInst = e, this.type = r, this.nativeEvent = l, this.target = i10, this.currentTarget = null;
          for (var o in t3) t3.hasOwnProperty(o) && (c = t3[o], this[o] = c ? c(l) : l[o]);
          return this.isDefaultPrevented = (l.defaultPrevented != null ? l.defaultPrevented : l.returnValue === false) ? dl : WH, this.isPropagationStopped = WH, this;
        }
        return v2(a.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var c = this.nativeEvent;
          c && (c.preventDefault ? c.preventDefault() : typeof c.returnValue != "unknown" && (c.returnValue = false), this.isDefaultPrevented = dl);
        }, stopPropagation: function() {
          var c = this.nativeEvent;
          c && (c.stopPropagation ? c.stopPropagation() : typeof c.cancelBubble != "unknown" && (c.cancelBubble = true), this.isPropagationStopped = dl);
        }, persist: function() {
        }, isPersistent: dl }), a;
      }
      var x9 = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(t3) {
        return t3.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 }, Zd = Y0(x9), hc = v2({}, x9, { view: 0, detail: 0 }), dY = Y0(hc), mg, fg, ya, ii = v2({}, hc, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: Od, button: 0, buttons: 0, relatedTarget: function(t3) {
        return t3.relatedTarget === void 0 ? t3.fromElement === t3.srcElement ? t3.toElement : t3.fromElement : t3.relatedTarget;
      }, movementX: function(t3) {
        return "movementX" in t3 ? t3.movementX : (t3 !== ya && (ya && t3.type === "mousemove" ? (mg = t3.screenX - ya.screenX, fg = t3.screenY - ya.screenY) : fg = mg = 0, ya = t3), mg);
      }, movementY: function(t3) {
        return "movementY" in t3 ? t3.movementY : fg;
      } }), _H = Y0(ii), sY = v2({}, ii, { dataTransfer: 0 }), zY = Y0(sY), uY = v2({}, hc, { relatedTarget: 0 }), Mg = Y0(uY), pY = v2({}, x9, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), mY = Y0(pY), fY = v2({}, x9, { clipboardData: function(t3) {
        return "clipboardData" in t3 ? t3.clipboardData : window.clipboardData;
      } }), MY = Y0(fY), xY = v2({}, x9, { data: 0 }), jH = Y0(xY), CY = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, LY = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" }, HY = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function VY(t3) {
        var a = this.nativeEvent;
        return a.getModifierState ? a.getModifierState(t3) : (t3 = HY[t3]) ? !!a[t3] : false;
      }
      function Od() {
        return VY;
      }
      var wY = v2({}, hc, { key: function(t3) {
        if (t3.key) {
          var a = CY[t3.key] || t3.key;
          if (a !== "Unidentified") return a;
        }
        return t3.type === "keypress" ? (t3 = yl(t3), t3 === 13 ? "Enter" : String.fromCharCode(t3)) : t3.type === "keydown" || t3.type === "keyup" ? LY[t3.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: Od, charCode: function(t3) {
        return t3.type === "keypress" ? yl(t3) : 0;
      }, keyCode: function(t3) {
        return t3.type === "keydown" || t3.type === "keyup" ? t3.keyCode : 0;
      }, which: function(t3) {
        return t3.type === "keypress" ? yl(t3) : t3.type === "keydown" || t3.type === "keyup" ? t3.keyCode : 0;
      } }), BY = Y0(wY), yY = v2({}, ii, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), qH = Y0(yY), SY = v2({}, hc, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: Od }), kY = Y0(SY), AY = v2({}, x9, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), RY = Y0(AY), bY = v2({}, ii, { deltaX: function(t3) {
        return "deltaX" in t3 ? t3.deltaX : "wheelDeltaX" in t3 ? -t3.wheelDeltaX : 0;
      }, deltaY: function(t3) {
        return "deltaY" in t3 ? t3.deltaY : "wheelDeltaY" in t3 ? -t3.wheelDeltaY : "wheelDelta" in t3 ? -t3.wheelDelta : 0;
      }, deltaZ: 0, deltaMode: 0 }), FY = Y0(bY), IY = [9, 13, 27, 32], Ed = g5 && "CompositionEvent" in window, Za = null;
      g5 && "documentMode" in document && (Za = document.documentMode);
      var PY = g5 && "TextEvent" in window && !Za, uw = g5 && (!Ed || Za && 8 < Za && 11 >= Za), NH = String.fromCharCode(32), UH = false;
      function pw(t3, a) {
        switch (t3) {
          case "keyup":
            return IY.indexOf(a.keyCode) !== -1;
          case "keydown":
            return a.keyCode !== 229;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function mw(t3) {
        return t3 = t3.detail, typeof t3 == "object" && "data" in t3 ? t3.data : null;
      }
      var X7 = false;
      function GY(t3, a) {
        switch (t3) {
          case "compositionend":
            return mw(a);
          case "keypress":
            return a.which !== 32 ? null : (UH = true, NH);
          case "textInput":
            return t3 = a.data, t3 === NH && UH ? null : t3;
          default:
            return null;
        }
      }
      function TY(t3, a) {
        if (X7) return t3 === "compositionend" || !Ed && pw(t3, a) ? (t3 = zw(), Bl = Td = s6 = null, X7 = false, t3) : null;
        switch (t3) {
          case "paste":
            return null;
          case "keypress":
            if (!(a.ctrlKey || a.altKey || a.metaKey) || a.ctrlKey && a.altKey) {
              if (a.char && 1 < a.char.length) return a.char;
              if (a.which) return String.fromCharCode(a.which);
            }
            return null;
          case "compositionend":
            return uw && a.locale !== "ko" ? null : a.data;
          default:
            return null;
        }
      }
      var ZY = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function KH(t3) {
        var a = t3 && t3.nodeName && t3.nodeName.toLowerCase();
        return a === "input" ? !!ZY[t3.type] : a === "textarea";
      }
      function fw(t3, a, c, r) {
        $V(r), a = Wl(a, "onChange"), 0 < a.length && (c = new Zd("onChange", "change", null, c, r), t3.push({ event: c, listeners: a }));
      }
      var Oa = null, Xa = null;
      function OY(t3) {
        kw(t3, 0);
      }
      function oi(t3) {
        var a = t9(t3);
        if (WV(a)) return t3;
      }
      function EY(t3, a) {
        if (t3 === "change") return a;
      }
      var Mw = false;
      g5 && (g5 ? (zl = "oninput" in document, zl || (xg = document.createElement("div"), xg.setAttribute("oninput", "return;"), zl = typeof xg.oninput == "function"), sl = zl) : sl = false, Mw = sl && (!document.documentMode || 9 < document.documentMode));
      var sl, zl, xg;
      function $H() {
        Oa && (Oa.detachEvent("onpropertychange", xw), Xa = Oa = null);
      }
      function xw(t3) {
        if (t3.propertyName === "value" && oi(Xa)) {
          var a = [];
          fw(a, Xa, t3, bd(t3)), JV(OY, a);
        }
      }
      function DY(t3, a, c) {
        t3 === "focusin" ? ($H(), Oa = a, Xa = c, Oa.attachEvent("onpropertychange", xw)) : t3 === "focusout" && $H();
      }
      function WY(t3) {
        if (t3 === "selectionchange" || t3 === "keyup" || t3 === "keydown") return oi(Xa);
      }
      function _Y(t3, a) {
        if (t3 === "click") return oi(a);
      }
      function jY(t3, a) {
        if (t3 === "input" || t3 === "change") return oi(a);
      }
      function qY(t3, a) {
        return t3 === a && (t3 !== 0 || 1 / t3 === 1 / a) || t3 !== t3 && a !== a;
      }
      var $3 = typeof Object.is == "function" ? Object.is : qY;
      function Ya(t3, a) {
        if ($3(t3, a)) return true;
        if (typeof t3 != "object" || t3 === null || typeof a != "object" || a === null) return false;
        var c = Object.keys(t3), r = Object.keys(a);
        if (c.length !== r.length) return false;
        for (r = 0; r < c.length; r++) {
          var e = c[r];
          if (!Ig.call(a, e) || !$3(t3[e], a[e])) return false;
        }
        return true;
      }
      function QH(t3) {
        for (; t3 && t3.firstChild; ) t3 = t3.firstChild;
        return t3;
      }
      function XH(t3, a) {
        var c = QH(t3);
        t3 = 0;
        for (var r; c; ) {
          if (c.nodeType === 3) {
            if (r = t3 + c.textContent.length, t3 <= a && r >= a) return { node: c, offset: a - t3 };
            t3 = r;
          }
          t: {
            for (; c; ) {
              if (c.nextSibling) {
                c = c.nextSibling;
                break t;
              }
              c = c.parentNode;
            }
            c = void 0;
          }
          c = QH(c);
        }
      }
      function Cw(t3, a) {
        return t3 && a ? t3 === a ? true : t3 && t3.nodeType === 3 ? false : a && a.nodeType === 3 ? Cw(t3, a.parentNode) : "contains" in t3 ? t3.contains(a) : t3.compareDocumentPosition ? !!(t3.compareDocumentPosition(a) & 16) : false : false;
      }
      function Lw() {
        for (var t3 = window, a = Pl(); a instanceof t3.HTMLIFrameElement; ) {
          try {
            var c = typeof a.contentWindow.location.href == "string";
          } catch (r) {
            c = false;
          }
          if (c) t3 = a.contentWindow;
          else break;
          a = Pl(t3.document);
        }
        return a;
      }
      function Dd(t3) {
        var a = t3 && t3.nodeName && t3.nodeName.toLowerCase();
        return a && (a === "input" && (t3.type === "text" || t3.type === "search" || t3.type === "tel" || t3.type === "url" || t3.type === "password") || a === "textarea" || t3.contentEditable === "true");
      }
      function NY(t3) {
        var a = Lw(), c = t3.focusedElem, r = t3.selectionRange;
        if (a !== c && c && c.ownerDocument && Cw(c.ownerDocument.documentElement, c)) {
          if (r !== null && Dd(c)) {
            if (a = r.start, t3 = r.end, t3 === void 0 && (t3 = a), "selectionStart" in c) c.selectionStart = a, c.selectionEnd = Math.min(t3, c.value.length);
            else if (t3 = (a = c.ownerDocument || document) && a.defaultView || window, t3.getSelection) {
              t3 = t3.getSelection();
              var e = c.textContent.length, l = Math.min(r.start, e);
              r = r.end === void 0 ? l : Math.min(r.end, e), !t3.extend && l > r && (e = r, r = l, l = e), e = XH(c, l);
              var i10 = XH(c, r);
              e && i10 && (t3.rangeCount !== 1 || t3.anchorNode !== e.node || t3.anchorOffset !== e.offset || t3.focusNode !== i10.node || t3.focusOffset !== i10.offset) && (a = a.createRange(), a.setStart(e.node, e.offset), t3.removeAllRanges(), l > r ? (t3.addRange(a), t3.extend(i10.node, i10.offset)) : (a.setEnd(i10.node, i10.offset), t3.addRange(a)));
            }
          }
          for (a = [], t3 = c; t3 = t3.parentNode; ) t3.nodeType === 1 && a.push({ element: t3, left: t3.scrollLeft, top: t3.scrollTop });
          for (typeof c.focus == "function" && c.focus(), c = 0; c < a.length; c++) t3 = a[c], t3.element.scrollLeft = t3.left, t3.element.scrollTop = t3.top;
        }
      }
      var UY = g5 && "documentMode" in document && 11 >= document.documentMode, Y7 = null, Jg = null, Ea = null, td = false;
      function YH(t3, a, c) {
        var r = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument;
        td || Y7 == null || Y7 !== Pl(r) || (r = Y7, "selectionStart" in r && Dd(r) ? r = { start: r.selectionStart, end: r.selectionEnd } : (r = (r.ownerDocument && r.ownerDocument.defaultView || window).getSelection(), r = { anchorNode: r.anchorNode, anchorOffset: r.anchorOffset, focusNode: r.focusNode, focusOffset: r.focusOffset }), Ea && Ya(Ea, r) || (Ea = r, r = Wl(Jg, "onSelect"), 0 < r.length && (a = new Zd("onSelect", "select", null, a, c), t3.push({ event: a, listeners: r }), a.target = Y7)));
      }
      function ul(t3, a) {
        var c = {};
        return c[t3.toLowerCase()] = a.toLowerCase(), c["Webkit" + t3] = "webkit" + a, c["Moz" + t3] = "moz" + a, c;
      }
      var J7 = { animationend: ul("Animation", "AnimationEnd"), animationiteration: ul("Animation", "AnimationIteration"), animationstart: ul("Animation", "AnimationStart"), transitionend: ul("Transition", "TransitionEnd") }, Cg = {}, Hw = {};
      g5 && (Hw = document.createElement("div").style, "AnimationEvent" in window || (delete J7.animationend.animation, delete J7.animationiteration.animation, delete J7.animationstart.animation), "TransitionEvent" in window || delete J7.transitionend.transition);
      function ni(t3) {
        if (Cg[t3]) return Cg[t3];
        if (!J7[t3]) return t3;
        var a = J7[t3], c;
        for (c in a) if (a.hasOwnProperty(c) && c in Hw) return Cg[t3] = a[c];
        return t3;
      }
      var Vw = ni("animationend"), ww = ni("animationiteration"), Bw = ni("animationstart"), yw = ni("transitionend"), Sw = /* @__PURE__ */ new Map(), JH = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function w6(t3, a) {
        Sw.set(t3, a), I8(a, [t3]);
      }
      for (pl = 0; pl < JH.length; pl++) ml = JH[pl], tV = ml.toLowerCase(), aV = ml[0].toUpperCase() + ml.slice(1), w6(tV, "on" + aV);
      var ml, tV, aV, pl;
      w6(Vw, "onAnimationEnd");
      w6(ww, "onAnimationIteration");
      w6(Bw, "onAnimationStart");
      w6("dblclick", "onDoubleClick");
      w6("focusin", "onFocus");
      w6("focusout", "onBlur");
      w6(yw, "onTransitionEnd");
      s9("onMouseEnter", ["mouseout", "mouseover"]);
      s9("onMouseLeave", ["mouseout", "mouseover"]);
      s9("onPointerEnter", ["pointerout", "pointerover"]);
      s9("onPointerLeave", ["pointerout", "pointerover"]);
      I8("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      I8("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      I8("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      I8("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      I8("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      I8("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var Pa = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), KY = new Set("cancel close invalid load scroll toggle".split(" ").concat(Pa));
      function cV(t3, a, c) {
        var r = t3.type || "unknown-event";
        t3.currentTarget = c, KX(r, a, void 0, t3), t3.currentTarget = null;
      }
      function kw(t3, a) {
        a = (a & 4) !== 0;
        for (var c = 0; c < t3.length; c++) {
          var r = t3[c], e = r.event;
          r = r.listeners;
          t: {
            var l = void 0;
            if (a) for (var i10 = r.length - 1; 0 <= i10; i10--) {
              var o = r[i10], n = o.instance, h = o.currentTarget;
              if (o = o.listener, n !== l && e.isPropagationStopped()) break t;
              cV(e, o, h), l = n;
            }
            else for (i10 = 0; i10 < r.length; i10++) {
              if (o = r[i10], n = o.instance, h = o.currentTarget, o = o.listener, n !== l && e.isPropagationStopped()) break t;
              cV(e, o, h), l = n;
            }
          }
        }
        if (Tl) throw t3 = $g, Tl = false, $g = null, t3;
      }
      function t2(t3, a) {
        var c = a[ld];
        c === void 0 && (c = a[ld] = /* @__PURE__ */ new Set());
        var r = t3 + "__bubble";
        c.has(r) || (Aw(a, t3, 2, false), c.add(r));
      }
      function Lg(t3, a, c) {
        var r = 0;
        a && (r |= 4), Aw(c, t3, r, a);
      }
      var fl = "_reactListening" + Math.random().toString(36).slice(2);
      function Ja(t3) {
        if (!t3[fl]) {
          t3[fl] = true, TV.forEach(function(c) {
            c !== "selectionchange" && (KY.has(c) || Lg(c, false, t3), Lg(c, true, t3));
          });
          var a = t3.nodeType === 9 ? t3 : t3.ownerDocument;
          a === null || a[fl] || (a[fl] = true, Lg("selectionchange", false, a));
        }
      }
      function Aw(t3, a, c, r) {
        switch (sw(a)) {
          case 1:
            var e = vY;
            break;
          case 4:
            e = gY;
            break;
          default:
            e = Gd;
        }
        c = e.bind(null, a, c, t3), e = void 0, !Kg || a !== "touchstart" && a !== "touchmove" && a !== "wheel" || (e = true), r ? e !== void 0 ? t3.addEventListener(a, c, { capture: true, passive: e }) : t3.addEventListener(a, c, true) : e !== void 0 ? t3.addEventListener(a, c, { passive: e }) : t3.addEventListener(a, c, false);
      }
      function Hg(t3, a, c, r, e) {
        var l = r;
        if (!(a & 1) && !(a & 2) && r !== null) t: for (; ; ) {
          if (r === null) return;
          var i10 = r.tag;
          if (i10 === 3 || i10 === 4) {
            var o = r.stateNode.containerInfo;
            if (o === e || o.nodeType === 8 && o.parentNode === e) break;
            if (i10 === 4) for (i10 = r.return; i10 !== null; ) {
              var n = i10.tag;
              if ((n === 3 || n === 4) && (n = i10.stateNode.containerInfo, n === e || n.nodeType === 8 && n.parentNode === e)) return;
              i10 = i10.return;
            }
            for (; o !== null; ) {
              if (i10 = V8(o), i10 === null) return;
              if (n = i10.tag, n === 5 || n === 6) {
                r = l = i10;
                continue t;
              }
              o = o.parentNode;
            }
          }
          r = r.return;
        }
        JV(function() {
          var h = l, v = bd(c), g = [];
          t: {
            var s = Sw.get(t3);
            if (s !== void 0) {
              var d = Zd, z = t3;
              switch (t3) {
                case "keypress":
                  if (yl(c) === 0) break t;
                case "keydown":
                case "keyup":
                  d = BY;
                  break;
                case "focusin":
                  z = "focus", d = Mg;
                  break;
                case "focusout":
                  z = "blur", d = Mg;
                  break;
                case "beforeblur":
                case "afterblur":
                  d = Mg;
                  break;
                case "click":
                  if (c.button === 2) break t;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  d = _H;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  d = zY;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  d = kY;
                  break;
                case Vw:
                case ww:
                case Bw:
                  d = mY;
                  break;
                case yw:
                  d = RY;
                  break;
                case "scroll":
                  d = dY;
                  break;
                case "wheel":
                  d = FY;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  d = MY;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  d = qH;
              }
              var u = (a & 4) !== 0, f = !u && t3 === "scroll", p = u ? s !== null ? s + "Capture" : null : s;
              u = [];
              for (var m = h, M; m !== null; ) {
                M = m;
                var w = M.stateNode;
                if (M.tag === 5 && w !== null && (M = w, p !== null && (w = Ua(m, p), w != null && u.push(tc(m, w, M)))), f) break;
                m = m.return;
              }
              0 < u.length && (s = new d(s, z, null, c, v), g.push({ event: s, listeners: u }));
            }
          }
          if (!(a & 7)) {
            t: {
              if (s = t3 === "mouseover" || t3 === "pointerover", d = t3 === "mouseout" || t3 === "pointerout", s && c !== Ng && (z = c.relatedTarget || c.fromElement) && (V8(z) || z[d5])) break t;
              if ((d || s) && (s = v.window === v ? v : (s = v.ownerDocument) ? s.defaultView || s.parentWindow : window, d ? (z = c.relatedTarget || c.toElement, d = h, z = z ? V8(z) : null, z !== null && (f = P8(z), z !== f || z.tag !== 5 && z.tag !== 6) && (z = null)) : (d = null, z = h), d !== z)) {
                if (u = _H, w = "onMouseLeave", p = "onMouseEnter", m = "mouse", (t3 === "pointerout" || t3 === "pointerover") && (u = qH, w = "onPointerLeave", p = "onPointerEnter", m = "pointer"), f = d == null ? s : t9(d), M = z == null ? s : t9(z), s = new u(w, m + "leave", d, c, v), s.target = f, s.relatedTarget = M, w = null, V8(v) === h && (u = new u(p, m + "enter", z, c, v), u.target = M, u.relatedTarget = f, w = u), f = w, d && z) a: {
                  for (u = d, p = z, m = 0, M = u; M; M = K7(M)) m++;
                  for (M = 0, w = p; w; w = K7(w)) M++;
                  for (; 0 < m - M; ) u = K7(u), m--;
                  for (; 0 < M - m; ) p = K7(p), M--;
                  for (; m--; ) {
                    if (u === p || p !== null && u === p.alternate) break a;
                    u = K7(u), p = K7(p);
                  }
                  u = null;
                }
                else u = null;
                d !== null && rV(g, s, d, u, false), z !== null && f !== null && rV(g, f, z, u, true);
              }
            }
            t: {
              if (s = h ? t9(h) : window, d = s.nodeName && s.nodeName.toLowerCase(), d === "select" || d === "input" && s.type === "file") var H = EY;
              else if (KH(s)) if (Mw) H = jY;
              else {
                H = WY;
                var y = DY;
              }
              else (d = s.nodeName) && d.toLowerCase() === "input" && (s.type === "checkbox" || s.type === "radio") && (H = _Y);
              if (H && (H = H(t3, h))) {
                fw(g, H, c, v);
                break t;
              }
              y && y(t3, s, h), t3 === "focusout" && (y = s._wrapperState) && y.controlled && s.type === "number" && Dg(s, "number", s.value);
            }
            switch (y = h ? t9(h) : window, t3) {
              case "focusin":
                (KH(y) || y.contentEditable === "true") && (Y7 = y, Jg = h, Ea = null);
                break;
              case "focusout":
                Ea = Jg = Y7 = null;
                break;
              case "mousedown":
                td = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                td = false, YH(g, c, v);
                break;
              case "selectionchange":
                if (UY) break;
              case "keydown":
              case "keyup":
                YH(g, c, v);
            }
            var k;
            if (Ed) t: {
              switch (t3) {
                case "compositionstart":
                  var F = "onCompositionStart";
                  break t;
                case "compositionend":
                  F = "onCompositionEnd";
                  break t;
                case "compositionupdate":
                  F = "onCompositionUpdate";
                  break t;
              }
              F = void 0;
            }
            else X7 ? pw(t3, c) && (F = "onCompositionEnd") : t3 === "keydown" && c.keyCode === 229 && (F = "onCompositionStart");
            F && (uw && c.locale !== "ko" && (X7 || F !== "onCompositionStart" ? F === "onCompositionEnd" && X7 && (k = zw()) : (s6 = v, Td = "value" in s6 ? s6.value : s6.textContent, X7 = true)), y = Wl(h, F), 0 < y.length && (F = new jH(F, t3, null, c, v), g.push({ event: F, listeners: y }), k ? F.data = k : (k = mw(c), k !== null && (F.data = k)))), (k = PY ? GY(t3, c) : TY(t3, c)) && (h = Wl(h, "onBeforeInput"), 0 < h.length && (v = new jH("onBeforeInput", "beforeinput", null, c, v), g.push({ event: v, listeners: h }), v.data = k));
          }
          kw(g, a);
        });
      }
      function tc(t3, a, c) {
        return { instance: t3, listener: a, currentTarget: c };
      }
      function Wl(t3, a) {
        for (var c = a + "Capture", r = []; t3 !== null; ) {
          var e = t3, l = e.stateNode;
          e.tag === 5 && l !== null && (e = l, l = Ua(t3, c), l != null && r.unshift(tc(t3, l, e)), l = Ua(t3, a), l != null && r.push(tc(t3, l, e))), t3 = t3.return;
        }
        return r;
      }
      function K7(t3) {
        if (t3 === null) return null;
        do
          t3 = t3.return;
        while (t3 && t3.tag !== 5);
        return t3 || null;
      }
      function rV(t3, a, c, r, e) {
        for (var l = a._reactName, i10 = []; c !== null && c !== r; ) {
          var o = c, n = o.alternate, h = o.stateNode;
          if (n !== null && n === r) break;
          o.tag === 5 && h !== null && (o = h, e ? (n = Ua(c, l), n != null && i10.unshift(tc(c, n, o))) : e || (n = Ua(c, l), n != null && i10.push(tc(c, n, o)))), c = c.return;
        }
        i10.length !== 0 && t3.push({ event: a, listeners: i10 });
      }
      var $Y = /\r\n?/g, QY = /\u0000|\uFFFD/g;
      function eV(t3) {
        return (typeof t3 == "string" ? t3 : "" + t3).replace($Y, "\n").replace(QY, "");
      }
      function Ml(t3, a, c) {
        if (a = eV(a), eV(t3) !== a && c) throw Error(n1(425));
      }
      function _l() {
      }
      var ad = null, cd = null;
      function rd(t3, a) {
        return t3 === "textarea" || t3 === "noscript" || typeof a.children == "string" || typeof a.children == "number" || typeof a.dangerouslySetInnerHTML == "object" && a.dangerouslySetInnerHTML !== null && a.dangerouslySetInnerHTML.__html != null;
      }
      var ed = typeof setTimeout == "function" ? setTimeout : void 0, XY = typeof clearTimeout == "function" ? clearTimeout : void 0, lV = typeof Promise == "function" ? Promise : void 0, YY = typeof queueMicrotask == "function" ? queueMicrotask : typeof lV != "undefined" ? function(t3) {
        return lV.resolve(null).then(t3).catch(JY);
      } : ed;
      function JY(t3) {
        setTimeout(function() {
          throw t3;
        });
      }
      function Vg(t3, a) {
        var c = a, r = 0;
        do {
          var e = c.nextSibling;
          if (t3.removeChild(c), e && e.nodeType === 8) if (c = e.data, c === "/$") {
            if (r === 0) {
              t3.removeChild(e), Qa(a);
              return;
            }
            r--;
          } else c !== "$" && c !== "$?" && c !== "$!" || r++;
          c = e;
        } while (c);
        Qa(a);
      }
      function f6(t3) {
        for (; t3 != null; t3 = t3.nextSibling) {
          var a = t3.nodeType;
          if (a === 1 || a === 3) break;
          if (a === 8) {
            if (a = t3.data, a === "$" || a === "$!" || a === "$?") break;
            if (a === "/$") return null;
          }
        }
        return t3;
      }
      function iV(t3) {
        t3 = t3.previousSibling;
        for (var a = 0; t3; ) {
          if (t3.nodeType === 8) {
            var c = t3.data;
            if (c === "$" || c === "$!" || c === "$?") {
              if (a === 0) return t3;
              a--;
            } else c === "/$" && a++;
          }
          t3 = t3.previousSibling;
        }
        return null;
      }
      var C9 = Math.random().toString(36).slice(2), H4 = "__reactFiber$" + C9, ac = "__reactProps$" + C9, d5 = "__reactContainer$" + C9, ld = "__reactEvents$" + C9, tJ = "__reactListeners$" + C9, aJ = "__reactHandles$" + C9;
      function V8(t3) {
        var a = t3[H4];
        if (a) return a;
        for (var c = t3.parentNode; c; ) {
          if (a = c[d5] || c[H4]) {
            if (c = a.alternate, a.child !== null || c !== null && c.child !== null) for (t3 = iV(t3); t3 !== null; ) {
              if (c = t3[H4]) return c;
              t3 = iV(t3);
            }
            return a;
          }
          t3 = c, c = t3.parentNode;
        }
        return null;
      }
      function vc(t3) {
        return t3 = t3[H4] || t3[d5], !t3 || t3.tag !== 5 && t3.tag !== 6 && t3.tag !== 13 && t3.tag !== 3 ? null : t3;
      }
      function t9(t3) {
        if (t3.tag === 5 || t3.tag === 6) return t3.stateNode;
        throw Error(n1(33));
      }
      function hi(t3) {
        return t3[ac] || null;
      }
      var id = [], a9 = -1;
      function B6(t3) {
        return { current: t3 };
      }
      function a2(t3) {
        0 > a9 || (t3.current = id[a9], id[a9] = null, a9--);
      }
      function $1(t3, a) {
        a9++, id[a9] = t3.current, t3.current = a;
      }
      var V6 = {}, n0 = B6(V6), S0 = B6(false), k8 = V6;
      function z9(t3, a) {
        var c = t3.type.contextTypes;
        if (!c) return V6;
        var r = t3.stateNode;
        if (r && r.__reactInternalMemoizedUnmaskedChildContext === a) return r.__reactInternalMemoizedMaskedChildContext;
        var e = {}, l;
        for (l in c) e[l] = a[l];
        return r && (t3 = t3.stateNode, t3.__reactInternalMemoizedUnmaskedChildContext = a, t3.__reactInternalMemoizedMaskedChildContext = e), e;
      }
      function k0(t3) {
        return t3 = t3.childContextTypes, t3 != null;
      }
      function jl() {
        a2(S0), a2(n0);
      }
      function oV(t3, a, c) {
        if (n0.current !== V6) throw Error(n1(168));
        $1(n0, a), $1(S0, c);
      }
      function Rw(t3, a, c) {
        var r = t3.stateNode;
        if (a = a.childContextTypes, typeof r.getChildContext != "function") return c;
        r = r.getChildContext();
        for (var e in r) if (!(e in a)) throw Error(n1(108, DX(t3) || "Unknown", e));
        return v2({}, c, r);
      }
      function ql(t3) {
        return t3 = (t3 = t3.stateNode) && t3.__reactInternalMemoizedMergedChildContext || V6, k8 = n0.current, $1(n0, t3), $1(S0, S0.current), true;
      }
      function nV(t3, a, c) {
        var r = t3.stateNode;
        if (!r) throw Error(n1(169));
        c ? (t3 = Rw(t3, a, k8), r.__reactInternalMemoizedMergedChildContext = t3, a2(S0), a2(n0), $1(n0, t3)) : a2(S0), $1(S0, c);
      }
      var o5 = null, vi = false, wg = false;
      function bw(t3) {
        o5 === null ? o5 = [t3] : o5.push(t3);
      }
      function cJ(t3) {
        vi = true, bw(t3);
      }
      function y6() {
        if (!wg && o5 !== null) {
          wg = true;
          var t3 = 0, a = W1;
          try {
            var c = o5;
            for (W1 = 1; t3 < c.length; t3++) {
              var r = c[t3];
              do
                r = r(true);
              while (r !== null);
            }
            o5 = null, vi = false;
          } catch (e) {
            throw o5 !== null && (o5 = o5.slice(t3 + 1)), rw(Fd, y6), e;
          } finally {
            W1 = a, wg = false;
          }
        }
        return null;
      }
      var c9 = [], r9 = 0, Nl = null, Ul = 0, L3 = [], H3 = 0, A8 = null, n5 = 1, h5 = "";
      function L8(t3, a) {
        c9[r9++] = Ul, c9[r9++] = Nl, Nl = t3, Ul = a;
      }
      function Fw(t3, a, c) {
        L3[H3++] = n5, L3[H3++] = h5, L3[H3++] = A8, A8 = t3;
        var r = n5;
        t3 = h5;
        var e = 32 - U3(r) - 1;
        r &= ~(1 << e), c += 1;
        var l = 32 - U3(a) + e;
        if (30 < l) {
          var i10 = e - e % 5;
          l = (r & (1 << i10) - 1).toString(32), r >>= i10, e -= i10, n5 = 1 << 32 - U3(a) + e | c << e | r, h5 = l + t3;
        } else n5 = 1 << l | c << e | r, h5 = t3;
      }
      function Wd(t3) {
        t3.return !== null && (L8(t3, 1), Fw(t3, 1, 0));
      }
      function _d(t3) {
        for (; t3 === Nl; ) Nl = c9[--r9], c9[r9] = null, Ul = c9[--r9], c9[r9] = null;
        for (; t3 === A8; ) A8 = L3[--H3], L3[H3] = null, h5 = L3[--H3], L3[H3] = null, n5 = L3[--H3], L3[H3] = null;
      }
      var Q0 = null, $0 = null, l2 = false, N3 = null;
      function Iw(t3, a) {
        var c = V3(5, null, null, 0);
        c.elementType = "DELETED", c.stateNode = a, c.return = t3, a = t3.deletions, a === null ? (t3.deletions = [c], t3.flags |= 16) : a.push(c);
      }
      function hV(t3, a) {
        switch (t3.tag) {
          case 5:
            var c = t3.type;
            return a = a.nodeType !== 1 || c.toLowerCase() !== a.nodeName.toLowerCase() ? null : a, a !== null ? (t3.stateNode = a, Q0 = t3, $0 = f6(a.firstChild), true) : false;
          case 6:
            return a = t3.pendingProps === "" || a.nodeType !== 3 ? null : a, a !== null ? (t3.stateNode = a, Q0 = t3, $0 = null, true) : false;
          case 13:
            return a = a.nodeType !== 8 ? null : a, a !== null ? (c = A8 !== null ? { id: n5, overflow: h5 } : null, t3.memoizedState = { dehydrated: a, treeContext: c, retryLane: 1073741824 }, c = V3(18, null, null, 0), c.stateNode = a, c.return = t3, t3.child = c, Q0 = t3, $0 = null, true) : false;
          default:
            return false;
        }
      }
      function od(t3) {
        return (t3.mode & 1) !== 0 && (t3.flags & 128) === 0;
      }
      function nd(t3) {
        if (l2) {
          var a = $0;
          if (a) {
            var c = a;
            if (!hV(t3, a)) {
              if (od(t3)) throw Error(n1(418));
              a = f6(c.nextSibling);
              var r = Q0;
              a && hV(t3, a) ? Iw(r, c) : (t3.flags = t3.flags & -4097 | 2, l2 = false, Q0 = t3);
            }
          } else {
            if (od(t3)) throw Error(n1(418));
            t3.flags = t3.flags & -4097 | 2, l2 = false, Q0 = t3;
          }
        }
      }
      function vV(t3) {
        for (t3 = t3.return; t3 !== null && t3.tag !== 5 && t3.tag !== 3 && t3.tag !== 13; ) t3 = t3.return;
        Q0 = t3;
      }
      function xl(t3) {
        if (t3 !== Q0) return false;
        if (!l2) return vV(t3), l2 = true, false;
        var a;
        if ((a = t3.tag !== 3) && !(a = t3.tag !== 5) && (a = t3.type, a = a !== "head" && a !== "body" && !rd(t3.type, t3.memoizedProps)), a && (a = $0)) {
          if (od(t3)) throw Pw(), Error(n1(418));
          for (; a; ) Iw(t3, a), a = f6(a.nextSibling);
        }
        if (vV(t3), t3.tag === 13) {
          if (t3 = t3.memoizedState, t3 = t3 !== null ? t3.dehydrated : null, !t3) throw Error(n1(317));
          t: {
            for (t3 = t3.nextSibling, a = 0; t3; ) {
              if (t3.nodeType === 8) {
                var c = t3.data;
                if (c === "/$") {
                  if (a === 0) {
                    $0 = f6(t3.nextSibling);
                    break t;
                  }
                  a--;
                } else c !== "$" && c !== "$!" && c !== "$?" || a++;
              }
              t3 = t3.nextSibling;
            }
            $0 = null;
          }
        } else $0 = Q0 ? f6(t3.stateNode.nextSibling) : null;
        return true;
      }
      function Pw() {
        for (var t3 = $0; t3; ) t3 = f6(t3.nextSibling);
      }
      function u9() {
        $0 = Q0 = null, l2 = false;
      }
      function jd(t3) {
        N3 === null ? N3 = [t3] : N3.push(t3);
      }
      var rJ = u5.ReactCurrentBatchConfig;
      function j3(t3, a) {
        if (t3 && t3.defaultProps) {
          a = v2({}, a), t3 = t3.defaultProps;
          for (var c in t3) a[c] === void 0 && (a[c] = t3[c]);
          return a;
        }
        return a;
      }
      var Kl = B6(null), $l = null, e9 = null, qd = null;
      function Nd() {
        qd = e9 = $l = null;
      }
      function Ud(t3) {
        var a = Kl.current;
        a2(Kl), t3._currentValue = a;
      }
      function hd(t3, a, c) {
        for (; t3 !== null; ) {
          var r = t3.alternate;
          if ((t3.childLanes & a) !== a ? (t3.childLanes |= a, r !== null && (r.childLanes |= a)) : r !== null && (r.childLanes & a) !== a && (r.childLanes |= a), t3 === c) break;
          t3 = t3.return;
        }
      }
      function g9(t3, a) {
        $l = t3, qd = e9 = null, t3 = t3.dependencies, t3 !== null && t3.firstContext !== null && (t3.lanes & a && (y0 = true), t3.firstContext = null);
      }
      function B3(t3) {
        var a = t3._currentValue;
        if (qd !== t3) if (t3 = { context: t3, memoizedValue: a, next: null }, e9 === null) {
          if ($l === null) throw Error(n1(308));
          e9 = t3, $l.dependencies = { lanes: 0, firstContext: t3 };
        } else e9 = e9.next = t3;
        return a;
      }
      var w8 = null;
      function Kd(t3) {
        w8 === null ? w8 = [t3] : w8.push(t3);
      }
      function Gw(t3, a, c, r) {
        var e = a.interleaved;
        return e === null ? (c.next = c, Kd(a)) : (c.next = e.next, e.next = c), a.interleaved = c, s5(t3, r);
      }
      function s5(t3, a) {
        t3.lanes |= a;
        var c = t3.alternate;
        for (c !== null && (c.lanes |= a), c = t3, t3 = t3.return; t3 !== null; ) t3.childLanes |= a, c = t3.alternate, c !== null && (c.childLanes |= a), c = t3, t3 = t3.return;
        return c.tag === 3 ? c.stateNode : null;
      }
      var v6 = false;
      function $d(t3) {
        t3.updateQueue = { baseState: t3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function Tw(t3, a) {
        t3 = t3.updateQueue, a.updateQueue === t3 && (a.updateQueue = { baseState: t3.baseState, firstBaseUpdate: t3.firstBaseUpdate, lastBaseUpdate: t3.lastBaseUpdate, shared: t3.shared, effects: t3.effects });
      }
      function v5(t3, a) {
        return { eventTime: t3, lane: a, tag: 0, payload: null, callback: null, next: null };
      }
      function M6(t3, a, c) {
        var r = t3.updateQueue;
        if (r === null) return null;
        if (r = r.shared, T1 & 2) {
          var e = r.pending;
          return e === null ? a.next = a : (a.next = e.next, e.next = a), r.pending = a, s5(t3, c);
        }
        return e = r.interleaved, e === null ? (a.next = a, Kd(r)) : (a.next = e.next, e.next = a), r.interleaved = a, s5(t3, c);
      }
      function Sl(t3, a, c) {
        if (a = a.updateQueue, a !== null && (a = a.shared, (c & 4194240) !== 0)) {
          var r = a.lanes;
          r &= t3.pendingLanes, c |= r, a.lanes = c, Id(t3, c);
        }
      }
      function gV(t3, a) {
        var c = t3.updateQueue, r = t3.alternate;
        if (r !== null && (r = r.updateQueue, c === r)) {
          var e = null, l = null;
          if (c = c.firstBaseUpdate, c !== null) {
            do {
              var i10 = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
              l === null ? e = l = i10 : l = l.next = i10, c = c.next;
            } while (c !== null);
            l === null ? e = l = a : l = l.next = a;
          } else e = l = a;
          c = { baseState: r.baseState, firstBaseUpdate: e, lastBaseUpdate: l, shared: r.shared, effects: r.effects }, t3.updateQueue = c;
          return;
        }
        t3 = c.lastBaseUpdate, t3 === null ? c.firstBaseUpdate = a : t3.next = a, c.lastBaseUpdate = a;
      }
      function Ql(t3, a, c, r) {
        var e = t3.updateQueue;
        v6 = false;
        var l = e.firstBaseUpdate, i10 = e.lastBaseUpdate, o = e.shared.pending;
        if (o !== null) {
          e.shared.pending = null;
          var n = o, h = n.next;
          n.next = null, i10 === null ? l = h : i10.next = h, i10 = n;
          var v = t3.alternate;
          v !== null && (v = v.updateQueue, o = v.lastBaseUpdate, o !== i10 && (o === null ? v.firstBaseUpdate = h : o.next = h, v.lastBaseUpdate = n));
        }
        if (l !== null) {
          var g = e.baseState;
          i10 = 0, v = h = n = null, o = l;
          do {
            var s = o.lane, d = o.eventTime;
            if ((r & s) === s) {
              v !== null && (v = v.next = { eventTime: d, lane: 0, tag: o.tag, payload: o.payload, callback: o.callback, next: null });
              t: {
                var z = t3, u = o;
                switch (s = a, d = c, u.tag) {
                  case 1:
                    if (z = u.payload, typeof z == "function") {
                      g = z.call(d, g, s);
                      break t;
                    }
                    g = z;
                    break t;
                  case 3:
                    z.flags = z.flags & -65537 | 128;
                  case 0:
                    if (z = u.payload, s = typeof z == "function" ? z.call(d, g, s) : z, s == null) break t;
                    g = v2({}, g, s);
                    break t;
                  case 2:
                    v6 = true;
                }
              }
              o.callback !== null && o.lane !== 0 && (t3.flags |= 64, s = e.effects, s === null ? e.effects = [o] : s.push(o));
            } else d = { eventTime: d, lane: s, tag: o.tag, payload: o.payload, callback: o.callback, next: null }, v === null ? (h = v = d, n = g) : v = v.next = d, i10 |= s;
            if (o = o.next, o === null) {
              if (o = e.shared.pending, o === null) break;
              s = o, o = s.next, s.next = null, e.lastBaseUpdate = s, e.shared.pending = null;
            }
          } while (1);
          if (v === null && (n = g), e.baseState = n, e.firstBaseUpdate = h, e.lastBaseUpdate = v, a = e.shared.interleaved, a !== null) {
            e = a;
            do
              i10 |= e.lane, e = e.next;
            while (e !== a);
          } else l === null && (e.shared.lanes = 0);
          b8 |= i10, t3.lanes = i10, t3.memoizedState = g;
        }
      }
      function dV(t3, a, c) {
        if (t3 = a.effects, a.effects = null, t3 !== null) for (a = 0; a < t3.length; a++) {
          var r = t3[a], e = r.callback;
          if (e !== null) {
            if (r.callback = null, r = c, typeof e != "function") throw Error(n1(191, e));
            e.call(r);
          }
        }
      }
      var Zw = new GV.Component().refs;
      function vd(t3, a, c, r) {
        a = t3.memoizedState, c = c(r, a), c = c == null ? a : v2({}, a, c), t3.memoizedState = c, t3.lanes === 0 && (t3.updateQueue.baseState = c);
      }
      var gi = { isMounted: function(t3) {
        return (t3 = t3._reactInternals) ? P8(t3) === t3 : false;
      }, enqueueSetState: function(t3, a, c) {
        t3 = t3._reactInternals;
        var r = M0(), e = C6(t3), l = v5(r, e);
        l.payload = a, c != null && (l.callback = c), a = M6(t3, l, e), a !== null && (K3(a, t3, e, r), Sl(a, t3, e));
      }, enqueueReplaceState: function(t3, a, c) {
        t3 = t3._reactInternals;
        var r = M0(), e = C6(t3), l = v5(r, e);
        l.tag = 1, l.payload = a, c != null && (l.callback = c), a = M6(t3, l, e), a !== null && (K3(a, t3, e, r), Sl(a, t3, e));
      }, enqueueForceUpdate: function(t3, a) {
        t3 = t3._reactInternals;
        var c = M0(), r = C6(t3), e = v5(c, r);
        e.tag = 2, a != null && (e.callback = a), a = M6(t3, e, r), a !== null && (K3(a, t3, r, c), Sl(a, t3, r));
      } };
      function sV(t3, a, c, r, e, l, i10) {
        return t3 = t3.stateNode, typeof t3.shouldComponentUpdate == "function" ? t3.shouldComponentUpdate(r, l, i10) : a.prototype && a.prototype.isPureReactComponent ? !Ya(c, r) || !Ya(e, l) : true;
      }
      function Ow(t3, a, c) {
        var r = false, e = V6, l = a.contextType;
        return typeof l == "object" && l !== null ? l = B3(l) : (e = k0(a) ? k8 : n0.current, r = a.contextTypes, l = (r = r != null) ? z9(t3, e) : V6), a = new a(c, l), t3.memoizedState = a.state !== null && a.state !== void 0 ? a.state : null, a.updater = gi, t3.stateNode = a, a._reactInternals = t3, r && (t3 = t3.stateNode, t3.__reactInternalMemoizedUnmaskedChildContext = e, t3.__reactInternalMemoizedMaskedChildContext = l), a;
      }
      function zV(t3, a, c, r) {
        t3 = a.state, typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(c, r), typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(c, r), a.state !== t3 && gi.enqueueReplaceState(a, a.state, null);
      }
      function gd(t3, a, c, r) {
        var e = t3.stateNode;
        e.props = c, e.state = t3.memoizedState, e.refs = Zw, $d(t3);
        var l = a.contextType;
        typeof l == "object" && l !== null ? e.context = B3(l) : (l = k0(a) ? k8 : n0.current, e.context = z9(t3, l)), e.state = t3.memoizedState, l = a.getDerivedStateFromProps, typeof l == "function" && (vd(t3, a, l, c), e.state = t3.memoizedState), typeof a.getDerivedStateFromProps == "function" || typeof e.getSnapshotBeforeUpdate == "function" || typeof e.UNSAFE_componentWillMount != "function" && typeof e.componentWillMount != "function" || (a = e.state, typeof e.componentWillMount == "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount == "function" && e.UNSAFE_componentWillMount(), a !== e.state && gi.enqueueReplaceState(e, e.state, null), Ql(t3, c, e, r), e.state = t3.memoizedState), typeof e.componentDidMount == "function" && (t3.flags |= 4194308);
      }
      function Sa(t3, a, c) {
        if (t3 = c.ref, t3 !== null && typeof t3 != "function" && typeof t3 != "object") {
          if (c._owner) {
            if (c = c._owner, c) {
              if (c.tag !== 1) throw Error(n1(309));
              var r = c.stateNode;
            }
            if (!r) throw Error(n1(147, t3));
            var e = r, l = "" + t3;
            return a !== null && a.ref !== null && typeof a.ref == "function" && a.ref._stringRef === l ? a.ref : (a = function(i10) {
              var o = e.refs;
              o === Zw && (o = e.refs = {}), i10 === null ? delete o[l] : o[l] = i10;
            }, a._stringRef = l, a);
          }
          if (typeof t3 != "string") throw Error(n1(284));
          if (!c._owner) throw Error(n1(290, t3));
        }
        return t3;
      }
      function Cl(t3, a) {
        throw t3 = Object.prototype.toString.call(a), Error(n1(31, t3 === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : t3));
      }
      function uV(t3) {
        var a = t3._init;
        return a(t3._payload);
      }
      function Ew(t3) {
        function a(p, m) {
          if (t3) {
            var M = p.deletions;
            M === null ? (p.deletions = [m], p.flags |= 16) : M.push(m);
          }
        }
        function c(p, m) {
          if (!t3) return null;
          for (; m !== null; ) a(p, m), m = m.sibling;
          return null;
        }
        function r(p, m) {
          for (p = /* @__PURE__ */ new Map(); m !== null; ) m.key !== null ? p.set(m.key, m) : p.set(m.index, m), m = m.sibling;
          return p;
        }
        function e(p, m) {
          return p = L6(p, m), p.index = 0, p.sibling = null, p;
        }
        function l(p, m, M) {
          return p.index = M, t3 ? (M = p.alternate, M !== null ? (M = M.index, M < m ? (p.flags |= 2, m) : M) : (p.flags |= 2, m)) : (p.flags |= 1048576, m);
        }
        function i10(p) {
          return t3 && p.alternate === null && (p.flags |= 2), p;
        }
        function o(p, m, M, w) {
          return m === null || m.tag !== 6 ? (m = bg(M, p.mode, w), m.return = p, m) : (m = e(m, M), m.return = p, m);
        }
        function n(p, m, M, w) {
          var H = M.type;
          return H === Q7 ? v(p, m, M.props.children, w, M.key) : m !== null && (m.elementType === H || typeof H == "object" && H !== null && H.$$typeof === h6 && uV(H) === m.type) ? (w = e(m, M.props), w.ref = Sa(p, m, M), w.return = p, w) : (w = Il(M.type, M.key, M.props, null, p.mode, w), w.ref = Sa(p, m, M), w.return = p, w);
        }
        function h(p, m, M, w) {
          return m === null || m.tag !== 4 || m.stateNode.containerInfo !== M.containerInfo || m.stateNode.implementation !== M.implementation ? (m = Fg(M, p.mode, w), m.return = p, m) : (m = e(m, M.children || []), m.return = p, m);
        }
        function v(p, m, M, w, H) {
          return m === null || m.tag !== 7 ? (m = S8(M, p.mode, w, H), m.return = p, m) : (m = e(m, M), m.return = p, m);
        }
        function g(p, m, M) {
          if (typeof m == "string" && m !== "" || typeof m == "number") return m = bg("" + m, p.mode, M), m.return = p, m;
          if (typeof m == "object" && m !== null) {
            switch (m.$$typeof) {
              case il:
                return M = Il(m.type, m.key, m.props, null, p.mode, M), M.ref = Sa(p, null, m), M.return = p, M;
              case $7:
                return m = Fg(m, p.mode, M), m.return = p, m;
              case h6:
                var w = m._init;
                return g(p, w(m._payload), M);
            }
            if (Fa(m) || Va(m)) return m = S8(m, p.mode, M, null), m.return = p, m;
            Cl(p, m);
          }
          return null;
        }
        function s(p, m, M, w) {
          var H = m !== null ? m.key : null;
          if (typeof M == "string" && M !== "" || typeof M == "number") return H !== null ? null : o(p, m, "" + M, w);
          if (typeof M == "object" && M !== null) {
            switch (M.$$typeof) {
              case il:
                return M.key === H ? n(p, m, M, w) : null;
              case $7:
                return M.key === H ? h(p, m, M, w) : null;
              case h6:
                return H = M._init, s(p, m, H(M._payload), w);
            }
            if (Fa(M) || Va(M)) return H !== null ? null : v(p, m, M, w, null);
            Cl(p, M);
          }
          return null;
        }
        function d(p, m, M, w, H) {
          if (typeof w == "string" && w !== "" || typeof w == "number") return p = p.get(M) || null, o(m, p, "" + w, H);
          if (typeof w == "object" && w !== null) {
            switch (w.$$typeof) {
              case il:
                return p = p.get(w.key === null ? M : w.key) || null, n(m, p, w, H);
              case $7:
                return p = p.get(w.key === null ? M : w.key) || null, h(m, p, w, H);
              case h6:
                var y = w._init;
                return d(p, m, M, y(w._payload), H);
            }
            if (Fa(w) || Va(w)) return p = p.get(M) || null, v(m, p, w, H, null);
            Cl(m, w);
          }
          return null;
        }
        function z(p, m, M, w) {
          for (var H = null, y = null, k = m, F = m = 0, U = null; k !== null && F < M.length; F++) {
            k.index > F ? (U = k, k = null) : U = k.sibling;
            var A = s(p, k, M[F], w);
            if (A === null) {
              k === null && (k = U);
              break;
            }
            t3 && k && A.alternate === null && a(p, k), m = l(A, m, F), y === null ? H = A : y.sibling = A, y = A, k = U;
          }
          if (F === M.length) return c(p, k), l2 && L8(p, F), H;
          if (k === null) {
            for (; F < M.length; F++) k = g(p, M[F], w), k !== null && (m = l(k, m, F), y === null ? H = k : y.sibling = k, y = k);
            return l2 && L8(p, F), H;
          }
          for (k = r(p, k); F < M.length; F++) U = d(k, p, F, M[F], w), U !== null && (t3 && U.alternate !== null && k.delete(U.key === null ? F : U.key), m = l(U, m, F), y === null ? H = U : y.sibling = U, y = U);
          return t3 && k.forEach(function(P) {
            return a(p, P);
          }), l2 && L8(p, F), H;
        }
        function u(p, m, M, w) {
          var H = Va(M);
          if (typeof H != "function") throw Error(n1(150));
          if (M = H.call(M), M == null) throw Error(n1(151));
          for (var y = H = null, k = m, F = m = 0, U = null, A = M.next(); k !== null && !A.done; F++, A = M.next()) {
            k.index > F ? (U = k, k = null) : U = k.sibling;
            var P = s(p, k, A.value, w);
            if (P === null) {
              k === null && (k = U);
              break;
            }
            t3 && k && P.alternate === null && a(p, k), m = l(P, m, F), y === null ? H = P : y.sibling = P, y = P, k = U;
          }
          if (A.done) return c(p, k), l2 && L8(p, F), H;
          if (k === null) {
            for (; !A.done; F++, A = M.next()) A = g(p, A.value, w), A !== null && (m = l(A, m, F), y === null ? H = A : y.sibling = A, y = A);
            return l2 && L8(p, F), H;
          }
          for (k = r(p, k); !A.done; F++, A = M.next()) A = d(k, p, F, A.value, w), A !== null && (t3 && A.alternate !== null && k.delete(A.key === null ? F : A.key), m = l(A, m, F), y === null ? H = A : y.sibling = A, y = A);
          return t3 && k.forEach(function(C) {
            return a(p, C);
          }), l2 && L8(p, F), H;
        }
        function f(p, m, M, w) {
          if (typeof M == "object" && M !== null && M.type === Q7 && M.key === null && (M = M.props.children), typeof M == "object" && M !== null) {
            switch (M.$$typeof) {
              case il:
                t: {
                  for (var H = M.key, y = m; y !== null; ) {
                    if (y.key === H) {
                      if (H = M.type, H === Q7) {
                        if (y.tag === 7) {
                          c(p, y.sibling), m = e(y, M.props.children), m.return = p, p = m;
                          break t;
                        }
                      } else if (y.elementType === H || typeof H == "object" && H !== null && H.$$typeof === h6 && uV(H) === y.type) {
                        c(p, y.sibling), m = e(y, M.props), m.ref = Sa(p, y, M), m.return = p, p = m;
                        break t;
                      }
                      c(p, y);
                      break;
                    } else a(p, y);
                    y = y.sibling;
                  }
                  M.type === Q7 ? (m = S8(M.props.children, p.mode, w, M.key), m.return = p, p = m) : (w = Il(M.type, M.key, M.props, null, p.mode, w), w.ref = Sa(p, m, M), w.return = p, p = w);
                }
                return i10(p);
              case $7:
                t: {
                  for (y = M.key; m !== null; ) {
                    if (m.key === y) if (m.tag === 4 && m.stateNode.containerInfo === M.containerInfo && m.stateNode.implementation === M.implementation) {
                      c(p, m.sibling), m = e(m, M.children || []), m.return = p, p = m;
                      break t;
                    } else {
                      c(p, m);
                      break;
                    }
                    else a(p, m);
                    m = m.sibling;
                  }
                  m = Fg(M, p.mode, w), m.return = p, p = m;
                }
                return i10(p);
              case h6:
                return y = M._init, f(p, m, y(M._payload), w);
            }
            if (Fa(M)) return z(p, m, M, w);
            if (Va(M)) return u(p, m, M, w);
            Cl(p, M);
          }
          return typeof M == "string" && M !== "" || typeof M == "number" ? (M = "" + M, m !== null && m.tag === 6 ? (c(p, m.sibling), m = e(m, M), m.return = p, p = m) : (c(p, m), m = bg(M, p.mode, w), m.return = p, p = m), i10(p)) : c(p, m);
        }
        return f;
      }
      var p9 = Ew(true), Dw = Ew(false), gc = {}, w4 = B6(gc), cc = B6(gc), rc = B6(gc);
      function B8(t3) {
        if (t3 === gc) throw Error(n1(174));
        return t3;
      }
      function Qd(t3, a) {
        switch ($1(rc, a), $1(cc, t3), $1(w4, gc), t3 = a.nodeType, t3) {
          case 9:
          case 11:
            a = (a = a.documentElement) ? a.namespaceURI : _g(null, "");
            break;
          default:
            t3 = t3 === 8 ? a.parentNode : a, a = t3.namespaceURI || null, t3 = t3.tagName, a = _g(a, t3);
        }
        a2(w4), $1(w4, a);
      }
      function m9() {
        a2(w4), a2(cc), a2(rc);
      }
      function Ww(t3) {
        B8(rc.current);
        var a = B8(w4.current), c = _g(a, t3.type);
        a !== c && ($1(cc, t3), $1(w4, c));
      }
      function Xd(t3) {
        cc.current === t3 && (a2(w4), a2(cc));
      }
      var n2 = B6(0);
      function Xl(t3) {
        for (var a = t3; a !== null; ) {
          if (a.tag === 13) {
            var c = a.memoizedState;
            if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!")) return a;
          } else if (a.tag === 19 && a.memoizedProps.revealOrder !== void 0) {
            if (a.flags & 128) return a;
          } else if (a.child !== null) {
            a.child.return = a, a = a.child;
            continue;
          }
          if (a === t3) break;
          for (; a.sibling === null; ) {
            if (a.return === null || a.return === t3) return null;
            a = a.return;
          }
          a.sibling.return = a.return, a = a.sibling;
        }
        return null;
      }
      var Bg = [];
      function Yd() {
        for (var t3 = 0; t3 < Bg.length; t3++) Bg[t3]._workInProgressVersionPrimary = null;
        Bg.length = 0;
      }
      var kl = u5.ReactCurrentDispatcher, yg = u5.ReactCurrentBatchConfig, R8 = 0, h2 = null, S2 = null, b2 = null, Yl = false, Da = false, ec = 0, eJ = 0;
      function l0() {
        throw Error(n1(321));
      }
      function Jd(t3, a) {
        if (a === null) return false;
        for (var c = 0; c < a.length && c < t3.length; c++) if (!$3(t3[c], a[c])) return false;
        return true;
      }
      function ts(t3, a, c, r, e, l) {
        if (R8 = l, h2 = a, a.memoizedState = null, a.updateQueue = null, a.lanes = 0, kl.current = t3 === null || t3.memoizedState === null ? nJ : hJ, t3 = c(r, e), Da) {
          l = 0;
          do {
            if (Da = false, ec = 0, 25 <= l) throw Error(n1(301));
            l += 1, b2 = S2 = null, a.updateQueue = null, kl.current = vJ, t3 = c(r, e);
          } while (Da);
        }
        if (kl.current = Jl, a = S2 !== null && S2.next !== null, R8 = 0, b2 = S2 = h2 = null, Yl = false, a) throw Error(n1(300));
        return t3;
      }
      function as() {
        var t3 = ec !== 0;
        return ec = 0, t3;
      }
      function L4() {
        var t3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        return b2 === null ? h2.memoizedState = b2 = t3 : b2 = b2.next = t3, b2;
      }
      function y3() {
        if (S2 === null) {
          var t3 = h2.alternate;
          t3 = t3 !== null ? t3.memoizedState : null;
        } else t3 = S2.next;
        var a = b2 === null ? h2.memoizedState : b2.next;
        if (a !== null) b2 = a, S2 = t3;
        else {
          if (t3 === null) throw Error(n1(310));
          S2 = t3, t3 = { memoizedState: S2.memoizedState, baseState: S2.baseState, baseQueue: S2.baseQueue, queue: S2.queue, next: null }, b2 === null ? h2.memoizedState = b2 = t3 : b2 = b2.next = t3;
        }
        return b2;
      }
      function lc(t3, a) {
        return typeof a == "function" ? a(t3) : a;
      }
      function Sg(t3) {
        var a = y3(), c = a.queue;
        if (c === null) throw Error(n1(311));
        c.lastRenderedReducer = t3;
        var r = S2, e = r.baseQueue, l = c.pending;
        if (l !== null) {
          if (e !== null) {
            var i10 = e.next;
            e.next = l.next, l.next = i10;
          }
          r.baseQueue = e = l, c.pending = null;
        }
        if (e !== null) {
          l = e.next, r = r.baseState;
          var o = i10 = null, n = null, h = l;
          do {
            var v = h.lane;
            if ((R8 & v) === v) n !== null && (n = n.next = { lane: 0, action: h.action, hasEagerState: h.hasEagerState, eagerState: h.eagerState, next: null }), r = h.hasEagerState ? h.eagerState : t3(r, h.action);
            else {
              var g = { lane: v, action: h.action, hasEagerState: h.hasEagerState, eagerState: h.eagerState, next: null };
              n === null ? (o = n = g, i10 = r) : n = n.next = g, h2.lanes |= v, b8 |= v;
            }
            h = h.next;
          } while (h !== null && h !== l);
          n === null ? i10 = r : n.next = o, $3(r, a.memoizedState) || (y0 = true), a.memoizedState = r, a.baseState = i10, a.baseQueue = n, c.lastRenderedState = r;
        }
        if (t3 = c.interleaved, t3 !== null) {
          e = t3;
          do
            l = e.lane, h2.lanes |= l, b8 |= l, e = e.next;
          while (e !== t3);
        } else e === null && (c.lanes = 0);
        return [a.memoizedState, c.dispatch];
      }
      function kg(t3) {
        var a = y3(), c = a.queue;
        if (c === null) throw Error(n1(311));
        c.lastRenderedReducer = t3;
        var r = c.dispatch, e = c.pending, l = a.memoizedState;
        if (e !== null) {
          c.pending = null;
          var i10 = e = e.next;
          do
            l = t3(l, i10.action), i10 = i10.next;
          while (i10 !== e);
          $3(l, a.memoizedState) || (y0 = true), a.memoizedState = l, a.baseQueue === null && (a.baseState = l), c.lastRenderedState = l;
        }
        return [l, r];
      }
      function _w() {
      }
      function jw(t3, a) {
        var c = h2, r = y3(), e = a(), l = !$3(r.memoizedState, e);
        if (l && (r.memoizedState = e, y0 = true), r = r.queue, cs(Uw.bind(null, c, r, t3), [t3]), r.getSnapshot !== a || l || b2 !== null && b2.memoizedState.tag & 1) {
          if (c.flags |= 2048, ic(9, Nw.bind(null, c, r, e, a), void 0, null), F2 === null) throw Error(n1(349));
          R8 & 30 || qw(c, a, e);
        }
        return e;
      }
      function qw(t3, a, c) {
        t3.flags |= 16384, t3 = { getSnapshot: a, value: c }, a = h2.updateQueue, a === null ? (a = { lastEffect: null, stores: null }, h2.updateQueue = a, a.stores = [t3]) : (c = a.stores, c === null ? a.stores = [t3] : c.push(t3));
      }
      function Nw(t3, a, c, r) {
        a.value = c, a.getSnapshot = r, Kw(a) && $w(t3);
      }
      function Uw(t3, a, c) {
        return c(function() {
          Kw(a) && $w(t3);
        });
      }
      function Kw(t3) {
        var a = t3.getSnapshot;
        t3 = t3.value;
        try {
          var c = a();
          return !$3(t3, c);
        } catch (r) {
          return true;
        }
      }
      function $w(t3) {
        var a = s5(t3, 1);
        a !== null && K3(a, t3, 1, -1);
      }
      function pV(t3) {
        var a = L4();
        return typeof t3 == "function" && (t3 = t3()), a.memoizedState = a.baseState = t3, t3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: lc, lastRenderedState: t3 }, a.queue = t3, t3 = t3.dispatch = oJ.bind(null, h2, t3), [a.memoizedState, t3];
      }
      function ic(t3, a, c, r) {
        return t3 = { tag: t3, create: a, destroy: c, deps: r, next: null }, a = h2.updateQueue, a === null ? (a = { lastEffect: null, stores: null }, h2.updateQueue = a, a.lastEffect = t3.next = t3) : (c = a.lastEffect, c === null ? a.lastEffect = t3.next = t3 : (r = c.next, c.next = t3, t3.next = r, a.lastEffect = t3)), t3;
      }
      function Qw() {
        return y3().memoizedState;
      }
      function Al(t3, a, c, r) {
        var e = L4();
        h2.flags |= t3, e.memoizedState = ic(1 | a, c, void 0, r === void 0 ? null : r);
      }
      function di(t3, a, c, r) {
        var e = y3();
        r = r === void 0 ? null : r;
        var l = void 0;
        if (S2 !== null) {
          var i10 = S2.memoizedState;
          if (l = i10.destroy, r !== null && Jd(r, i10.deps)) {
            e.memoizedState = ic(a, c, l, r);
            return;
          }
        }
        h2.flags |= t3, e.memoizedState = ic(1 | a, c, l, r);
      }
      function mV(t3, a) {
        return Al(8390656, 8, t3, a);
      }
      function cs(t3, a) {
        return di(2048, 8, t3, a);
      }
      function Xw(t3, a) {
        return di(4, 2, t3, a);
      }
      function Yw(t3, a) {
        return di(4, 4, t3, a);
      }
      function Jw(t3, a) {
        if (typeof a == "function") return t3 = t3(), a(t3), function() {
          a(null);
        };
        if (a != null) return t3 = t3(), a.current = t3, function() {
          a.current = null;
        };
      }
      function tB(t3, a, c) {
        return c = c != null ? c.concat([t3]) : null, di(4, 4, Jw.bind(null, a, t3), c);
      }
      function rs() {
      }
      function aB(t3, a) {
        var c = y3();
        a = a === void 0 ? null : a;
        var r = c.memoizedState;
        return r !== null && a !== null && Jd(a, r[1]) ? r[0] : (c.memoizedState = [t3, a], t3);
      }
      function cB(t3, a) {
        var c = y3();
        a = a === void 0 ? null : a;
        var r = c.memoizedState;
        return r !== null && a !== null && Jd(a, r[1]) ? r[0] : (t3 = t3(), c.memoizedState = [t3, a], t3);
      }
      function rB(t3, a, c) {
        return R8 & 21 ? ($3(c, a) || (c = iw(), h2.lanes |= c, b8 |= c, t3.baseState = true), a) : (t3.baseState && (t3.baseState = false, y0 = true), t3.memoizedState = c);
      }
      function lJ(t3, a) {
        var c = W1;
        W1 = c !== 0 && 4 > c ? c : 4, t3(true);
        var r = yg.transition;
        yg.transition = {};
        try {
          t3(false), a();
        } finally {
          W1 = c, yg.transition = r;
        }
      }
      function eB() {
        return y3().memoizedState;
      }
      function iJ(t3, a, c) {
        var r = C6(t3);
        if (c = { lane: r, action: c, hasEagerState: false, eagerState: null, next: null }, lB(t3)) iB(a, c);
        else if (c = Gw(t3, a, c, r), c !== null) {
          var e = M0();
          K3(c, t3, r, e), oB(c, a, r);
        }
      }
      function oJ(t3, a, c) {
        var r = C6(t3), e = { lane: r, action: c, hasEagerState: false, eagerState: null, next: null };
        if (lB(t3)) iB(a, e);
        else {
          var l = t3.alternate;
          if (t3.lanes === 0 && (l === null || l.lanes === 0) && (l = a.lastRenderedReducer, l !== null)) try {
            var i10 = a.lastRenderedState, o = l(i10, c);
            if (e.hasEagerState = true, e.eagerState = o, $3(o, i10)) {
              var n = a.interleaved;
              n === null ? (e.next = e, Kd(a)) : (e.next = n.next, n.next = e), a.interleaved = e;
              return;
            }
          } catch (h) {
          } finally {
          }
          c = Gw(t3, a, e, r), c !== null && (e = M0(), K3(c, t3, r, e), oB(c, a, r));
        }
      }
      function lB(t3) {
        var a = t3.alternate;
        return t3 === h2 || a !== null && a === h2;
      }
      function iB(t3, a) {
        Da = Yl = true;
        var c = t3.pending;
        c === null ? a.next = a : (a.next = c.next, c.next = a), t3.pending = a;
      }
      function oB(t3, a, c) {
        if (c & 4194240) {
          var r = a.lanes;
          r &= t3.pendingLanes, c |= r, a.lanes = c, Id(t3, c);
        }
      }
      var Jl = { readContext: B3, useCallback: l0, useContext: l0, useEffect: l0, useImperativeHandle: l0, useInsertionEffect: l0, useLayoutEffect: l0, useMemo: l0, useReducer: l0, useRef: l0, useState: l0, useDebugValue: l0, useDeferredValue: l0, useTransition: l0, useMutableSource: l0, useSyncExternalStore: l0, useId: l0, unstable_isNewReconciler: false }, nJ = { readContext: B3, useCallback: function(t3, a) {
        return L4().memoizedState = [t3, a === void 0 ? null : a], t3;
      }, useContext: B3, useEffect: mV, useImperativeHandle: function(t3, a, c) {
        return c = c != null ? c.concat([t3]) : null, Al(4194308, 4, Jw.bind(null, a, t3), c);
      }, useLayoutEffect: function(t3, a) {
        return Al(4194308, 4, t3, a);
      }, useInsertionEffect: function(t3, a) {
        return Al(4, 2, t3, a);
      }, useMemo: function(t3, a) {
        var c = L4();
        return a = a === void 0 ? null : a, t3 = t3(), c.memoizedState = [t3, a], t3;
      }, useReducer: function(t3, a, c) {
        var r = L4();
        return a = c !== void 0 ? c(a) : a, r.memoizedState = r.baseState = a, t3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: t3, lastRenderedState: a }, r.queue = t3, t3 = t3.dispatch = iJ.bind(null, h2, t3), [r.memoizedState, t3];
      }, useRef: function(t3) {
        var a = L4();
        return t3 = { current: t3 }, a.memoizedState = t3;
      }, useState: pV, useDebugValue: rs, useDeferredValue: function(t3) {
        return L4().memoizedState = t3;
      }, useTransition: function() {
        var t3 = pV(false), a = t3[0];
        return t3 = lJ.bind(null, t3[1]), L4().memoizedState = t3, [a, t3];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(t3, a, c) {
        var r = h2, e = L4();
        if (l2) {
          if (c === void 0) throw Error(n1(407));
          c = c();
        } else {
          if (c = a(), F2 === null) throw Error(n1(349));
          R8 & 30 || qw(r, a, c);
        }
        e.memoizedState = c;
        var l = { value: c, getSnapshot: a };
        return e.queue = l, mV(Uw.bind(null, r, l, t3), [t3]), r.flags |= 2048, ic(9, Nw.bind(null, r, l, c, a), void 0, null), c;
      }, useId: function() {
        var t3 = L4(), a = F2.identifierPrefix;
        if (l2) {
          var c = h5, r = n5;
          c = (r & ~(1 << 32 - U3(r) - 1)).toString(32) + c, a = ":" + a + "R" + c, c = ec++, 0 < c && (a += "H" + c.toString(32)), a += ":";
        } else c = eJ++, a = ":" + a + "r" + c.toString(32) + ":";
        return t3.memoizedState = a;
      }, unstable_isNewReconciler: false }, hJ = { readContext: B3, useCallback: aB, useContext: B3, useEffect: cs, useImperativeHandle: tB, useInsertionEffect: Xw, useLayoutEffect: Yw, useMemo: cB, useReducer: Sg, useRef: Qw, useState: function() {
        return Sg(lc);
      }, useDebugValue: rs, useDeferredValue: function(t3) {
        var a = y3();
        return rB(a, S2.memoizedState, t3);
      }, useTransition: function() {
        var t3 = Sg(lc)[0], a = y3().memoizedState;
        return [t3, a];
      }, useMutableSource: _w, useSyncExternalStore: jw, useId: eB, unstable_isNewReconciler: false }, vJ = { readContext: B3, useCallback: aB, useContext: B3, useEffect: cs, useImperativeHandle: tB, useInsertionEffect: Xw, useLayoutEffect: Yw, useMemo: cB, useReducer: kg, useRef: Qw, useState: function() {
        return kg(lc);
      }, useDebugValue: rs, useDeferredValue: function(t3) {
        var a = y3();
        return S2 === null ? a.memoizedState = t3 : rB(a, S2.memoizedState, t3);
      }, useTransition: function() {
        var t3 = kg(lc)[0], a = y3().memoizedState;
        return [t3, a];
      }, useMutableSource: _w, useSyncExternalStore: jw, useId: eB, unstable_isNewReconciler: false };
      function f9(t3, a) {
        try {
          var c = "", r = a;
          do
            c += EX(r), r = r.return;
          while (r);
          var e = c;
        } catch (l) {
          e = "\nError generating stack: " + l.message + "\n" + l.stack;
        }
        return { value: t3, source: a, stack: e, digest: null };
      }
      function Ag(t3, a, c) {
        return { value: t3, source: null, stack: c != null ? c : null, digest: a != null ? a : null };
      }
      function dd(t3, a) {
        try {
          console.error(a.value);
        } catch (c) {
          setTimeout(function() {
            throw c;
          });
        }
      }
      var gJ = typeof WeakMap == "function" ? WeakMap : Map;
      function nB(t3, a, c) {
        c = v5(-1, c), c.tag = 3, c.payload = { element: null };
        var r = a.value;
        return c.callback = function() {
          ai || (ai = true, Ld = r), dd(t3, a);
        }, c;
      }
      function hB(t3, a, c) {
        c = v5(-1, c), c.tag = 3;
        var r = t3.type.getDerivedStateFromError;
        if (typeof r == "function") {
          var e = a.value;
          c.payload = function() {
            return r(e);
          }, c.callback = function() {
            dd(t3, a);
          };
        }
        var l = t3.stateNode;
        return l !== null && typeof l.componentDidCatch == "function" && (c.callback = function() {
          dd(t3, a), typeof r != "function" && (x6 === null ? x6 = /* @__PURE__ */ new Set([this]) : x6.add(this));
          var i10 = a.stack;
          this.componentDidCatch(a.value, { componentStack: i10 !== null ? i10 : "" });
        }), c;
      }
      function fV(t3, a, c) {
        var r = t3.pingCache;
        if (r === null) {
          r = t3.pingCache = new gJ();
          var e = /* @__PURE__ */ new Set();
          r.set(a, e);
        } else e = r.get(a), e === void 0 && (e = /* @__PURE__ */ new Set(), r.set(a, e));
        e.has(c) || (e.add(c), t3 = wJ.bind(null, t3, a, c), a.then(t3, t3));
      }
      function MV(t3) {
        do {
          var a;
          if ((a = t3.tag === 13) && (a = t3.memoizedState, a = a !== null ? a.dehydrated !== null : true), a) return t3;
          t3 = t3.return;
        } while (t3 !== null);
        return null;
      }
      function xV(t3, a, c, r, e) {
        return t3.mode & 1 ? (t3.flags |= 65536, t3.lanes = e, t3) : (t3 === a ? t3.flags |= 65536 : (t3.flags |= 128, c.flags |= 131072, c.flags &= -52805, c.tag === 1 && (c.alternate === null ? c.tag = 17 : (a = v5(-1, 1), a.tag = 2, M6(c, a, 1))), c.lanes |= 1), t3);
      }
      var dJ = u5.ReactCurrentOwner, y0 = false;
      function f0(t3, a, c, r) {
        a.child = t3 === null ? Dw(a, null, c, r) : p9(a, t3.child, c, r);
      }
      function CV(t3, a, c, r, e) {
        c = c.render;
        var l = a.ref;
        return g9(a, e), r = ts(t3, a, c, r, l, e), c = as(), t3 !== null && !y0 ? (a.updateQueue = t3.updateQueue, a.flags &= -2053, t3.lanes &= ~e, z5(t3, a, e)) : (l2 && c && Wd(a), a.flags |= 1, f0(t3, a, r, e), a.child);
      }
      function LV(t3, a, c, r, e) {
        if (t3 === null) {
          var l = c.type;
          return typeof l == "function" && !gs(l) && l.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0 ? (a.tag = 15, a.type = l, vB(t3, a, l, r, e)) : (t3 = Il(c.type, null, r, a, a.mode, e), t3.ref = a.ref, t3.return = a, a.child = t3);
        }
        if (l = t3.child, !(t3.lanes & e)) {
          var i10 = l.memoizedProps;
          if (c = c.compare, c = c !== null ? c : Ya, c(i10, r) && t3.ref === a.ref) return z5(t3, a, e);
        }
        return a.flags |= 1, t3 = L6(l, r), t3.ref = a.ref, t3.return = a, a.child = t3;
      }
      function vB(t3, a, c, r, e) {
        if (t3 !== null) {
          var l = t3.memoizedProps;
          if (Ya(l, r) && t3.ref === a.ref) if (y0 = false, a.pendingProps = r = l, (t3.lanes & e) !== 0) t3.flags & 131072 && (y0 = true);
          else return a.lanes = t3.lanes, z5(t3, a, e);
        }
        return sd(t3, a, c, r, e);
      }
      function gB(t3, a, c) {
        var r = a.pendingProps, e = r.children, l = t3 !== null ? t3.memoizedState : null;
        if (r.mode === "hidden") if (!(a.mode & 1)) a.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, $1(i9, K0), K0 |= c;
        else {
          if (!(c & 1073741824)) return t3 = l !== null ? l.baseLanes | c : c, a.lanes = a.childLanes = 1073741824, a.memoizedState = { baseLanes: t3, cachePool: null, transitions: null }, a.updateQueue = null, $1(i9, K0), K0 |= t3, null;
          a.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, r = l !== null ? l.baseLanes : c, $1(i9, K0), K0 |= r;
        }
        else l !== null ? (r = l.baseLanes | c, a.memoizedState = null) : r = c, $1(i9, K0), K0 |= r;
        return f0(t3, a, e, c), a.child;
      }
      function dB(t3, a) {
        var c = a.ref;
        (t3 === null && c !== null || t3 !== null && t3.ref !== c) && (a.flags |= 512, a.flags |= 2097152);
      }
      function sd(t3, a, c, r, e) {
        var l = k0(c) ? k8 : n0.current;
        return l = z9(a, l), g9(a, e), c = ts(t3, a, c, r, l, e), r = as(), t3 !== null && !y0 ? (a.updateQueue = t3.updateQueue, a.flags &= -2053, t3.lanes &= ~e, z5(t3, a, e)) : (l2 && r && Wd(a), a.flags |= 1, f0(t3, a, c, e), a.child);
      }
      function HV(t3, a, c, r, e) {
        if (k0(c)) {
          var l = true;
          ql(a);
        } else l = false;
        if (g9(a, e), a.stateNode === null) Rl(t3, a), Ow(a, c, r), gd(a, c, r, e), r = true;
        else if (t3 === null) {
          var i10 = a.stateNode, o = a.memoizedProps;
          i10.props = o;
          var n = i10.context, h = c.contextType;
          typeof h == "object" && h !== null ? h = B3(h) : (h = k0(c) ? k8 : n0.current, h = z9(a, h));
          var v = c.getDerivedStateFromProps, g = typeof v == "function" || typeof i10.getSnapshotBeforeUpdate == "function";
          g || typeof i10.UNSAFE_componentWillReceiveProps != "function" && typeof i10.componentWillReceiveProps != "function" || (o !== r || n !== h) && zV(a, i10, r, h), v6 = false;
          var s = a.memoizedState;
          i10.state = s, Ql(a, r, i10, e), n = a.memoizedState, o !== r || s !== n || S0.current || v6 ? (typeof v == "function" && (vd(a, c, v, r), n = a.memoizedState), (o = v6 || sV(a, c, o, r, s, n, h)) ? (g || typeof i10.UNSAFE_componentWillMount != "function" && typeof i10.componentWillMount != "function" || (typeof i10.componentWillMount == "function" && i10.componentWillMount(), typeof i10.UNSAFE_componentWillMount == "function" && i10.UNSAFE_componentWillMount()), typeof i10.componentDidMount == "function" && (a.flags |= 4194308)) : (typeof i10.componentDidMount == "function" && (a.flags |= 4194308), a.memoizedProps = r, a.memoizedState = n), i10.props = r, i10.state = n, i10.context = h, r = o) : (typeof i10.componentDidMount == "function" && (a.flags |= 4194308), r = false);
        } else {
          i10 = a.stateNode, Tw(t3, a), o = a.memoizedProps, h = a.type === a.elementType ? o : j3(a.type, o), i10.props = h, g = a.pendingProps, s = i10.context, n = c.contextType, typeof n == "object" && n !== null ? n = B3(n) : (n = k0(c) ? k8 : n0.current, n = z9(a, n));
          var d = c.getDerivedStateFromProps;
          (v = typeof d == "function" || typeof i10.getSnapshotBeforeUpdate == "function") || typeof i10.UNSAFE_componentWillReceiveProps != "function" && typeof i10.componentWillReceiveProps != "function" || (o !== g || s !== n) && zV(a, i10, r, n), v6 = false, s = a.memoizedState, i10.state = s, Ql(a, r, i10, e);
          var z = a.memoizedState;
          o !== g || s !== z || S0.current || v6 ? (typeof d == "function" && (vd(a, c, d, r), z = a.memoizedState), (h = v6 || sV(a, c, h, r, s, z, n) || false) ? (v || typeof i10.UNSAFE_componentWillUpdate != "function" && typeof i10.componentWillUpdate != "function" || (typeof i10.componentWillUpdate == "function" && i10.componentWillUpdate(r, z, n), typeof i10.UNSAFE_componentWillUpdate == "function" && i10.UNSAFE_componentWillUpdate(r, z, n)), typeof i10.componentDidUpdate == "function" && (a.flags |= 4), typeof i10.getSnapshotBeforeUpdate == "function" && (a.flags |= 1024)) : (typeof i10.componentDidUpdate != "function" || o === t3.memoizedProps && s === t3.memoizedState || (a.flags |= 4), typeof i10.getSnapshotBeforeUpdate != "function" || o === t3.memoizedProps && s === t3.memoizedState || (a.flags |= 1024), a.memoizedProps = r, a.memoizedState = z), i10.props = r, i10.state = z, i10.context = n, r = h) : (typeof i10.componentDidUpdate != "function" || o === t3.memoizedProps && s === t3.memoizedState || (a.flags |= 4), typeof i10.getSnapshotBeforeUpdate != "function" || o === t3.memoizedProps && s === t3.memoizedState || (a.flags |= 1024), r = false);
        }
        return zd(t3, a, c, r, l, e);
      }
      function zd(t3, a, c, r, e, l) {
        dB(t3, a);
        var i10 = (a.flags & 128) !== 0;
        if (!r && !i10) return e && nV(a, c, false), z5(t3, a, l);
        r = a.stateNode, dJ.current = a;
        var o = i10 && typeof c.getDerivedStateFromError != "function" ? null : r.render();
        return a.flags |= 1, t3 !== null && i10 ? (a.child = p9(a, t3.child, null, l), a.child = p9(a, null, o, l)) : f0(t3, a, o, l), a.memoizedState = r.state, e && nV(a, c, true), a.child;
      }
      function sB(t3) {
        var a = t3.stateNode;
        a.pendingContext ? oV(t3, a.pendingContext, a.pendingContext !== a.context) : a.context && oV(t3, a.context, false), Qd(t3, a.containerInfo);
      }
      function VV(t3, a, c, r, e) {
        return u9(), jd(e), a.flags |= 256, f0(t3, a, c, r), a.child;
      }
      var ud = { dehydrated: null, treeContext: null, retryLane: 0 };
      function pd(t3) {
        return { baseLanes: t3, cachePool: null, transitions: null };
      }
      function zB(t3, a, c) {
        var r = a.pendingProps, e = n2.current, l = false, i10 = (a.flags & 128) !== 0, o;
        if ((o = i10) || (o = t3 !== null && t3.memoizedState === null ? false : (e & 2) !== 0), o ? (l = true, a.flags &= -129) : (t3 === null || t3.memoizedState !== null) && (e |= 1), $1(n2, e & 1), t3 === null) return nd(a), t3 = a.memoizedState, t3 !== null && (t3 = t3.dehydrated, t3 !== null) ? (a.mode & 1 ? t3.data === "$!" ? a.lanes = 8 : a.lanes = 1073741824 : a.lanes = 1, null) : (i10 = r.children, t3 = r.fallback, l ? (r = a.mode, l = a.child, i10 = { mode: "hidden", children: i10 }, !(r & 1) && l !== null ? (l.childLanes = 0, l.pendingProps = i10) : l = ui(i10, r, 0, null), t3 = S8(t3, r, c, null), l.return = a, t3.return = a, l.sibling = t3, a.child = l, a.child.memoizedState = pd(c), a.memoizedState = ud, t3) : es(a, i10));
        if (e = t3.memoizedState, e !== null && (o = e.dehydrated, o !== null)) return sJ(t3, a, i10, r, o, e, c);
        if (l) {
          l = r.fallback, i10 = a.mode, e = t3.child, o = e.sibling;
          var n = { mode: "hidden", children: r.children };
          return !(i10 & 1) && a.child !== e ? (r = a.child, r.childLanes = 0, r.pendingProps = n, a.deletions = null) : (r = L6(e, n), r.subtreeFlags = e.subtreeFlags & 14680064), o !== null ? l = L6(o, l) : (l = S8(l, i10, c, null), l.flags |= 2), l.return = a, r.return = a, r.sibling = l, a.child = r, r = l, l = a.child, i10 = t3.child.memoizedState, i10 = i10 === null ? pd(c) : { baseLanes: i10.baseLanes | c, cachePool: null, transitions: i10.transitions }, l.memoizedState = i10, l.childLanes = t3.childLanes & ~c, a.memoizedState = ud, r;
        }
        return l = t3.child, t3 = l.sibling, r = L6(l, { mode: "visible", children: r.children }), !(a.mode & 1) && (r.lanes = c), r.return = a, r.sibling = null, t3 !== null && (c = a.deletions, c === null ? (a.deletions = [t3], a.flags |= 16) : c.push(t3)), a.child = r, a.memoizedState = null, r;
      }
      function es(t3, a) {
        return a = ui({ mode: "visible", children: a }, t3.mode, 0, null), a.return = t3, t3.child = a;
      }
      function Ll(t3, a, c, r) {
        return r !== null && jd(r), p9(a, t3.child, null, c), t3 = es(a, a.pendingProps.children), t3.flags |= 2, a.memoizedState = null, t3;
      }
      function sJ(t3, a, c, r, e, l, i10) {
        if (c) return a.flags & 256 ? (a.flags &= -257, r = Ag(Error(n1(422))), Ll(t3, a, i10, r)) : a.memoizedState !== null ? (a.child = t3.child, a.flags |= 128, null) : (l = r.fallback, e = a.mode, r = ui({ mode: "visible", children: r.children }, e, 0, null), l = S8(l, e, i10, null), l.flags |= 2, r.return = a, l.return = a, r.sibling = l, a.child = r, a.mode & 1 && p9(a, t3.child, null, i10), a.child.memoizedState = pd(i10), a.memoizedState = ud, l);
        if (!(a.mode & 1)) return Ll(t3, a, i10, null);
        if (e.data === "$!") {
          if (r = e.nextSibling && e.nextSibling.dataset, r) var o = r.dgst;
          return r = o, l = Error(n1(419)), r = Ag(l, r, void 0), Ll(t3, a, i10, r);
        }
        if (o = (i10 & t3.childLanes) !== 0, y0 || o) {
          if (r = F2, r !== null) {
            switch (i10 & -i10) {
              case 4:
                e = 2;
                break;
              case 16:
                e = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 32;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
            e = e & (r.suspendedLanes | i10) ? 0 : e, e !== 0 && e !== l.retryLane && (l.retryLane = e, s5(t3, e), K3(r, t3, e, -1));
          }
          return vs(), r = Ag(Error(n1(421))), Ll(t3, a, i10, r);
        }
        return e.data === "$?" ? (a.flags |= 128, a.child = t3.child, a = BJ.bind(null, t3), e._reactRetry = a, null) : (t3 = l.treeContext, $0 = f6(e.nextSibling), Q0 = a, l2 = true, N3 = null, t3 !== null && (L3[H3++] = n5, L3[H3++] = h5, L3[H3++] = A8, n5 = t3.id, h5 = t3.overflow, A8 = a), a = es(a, r.children), a.flags |= 4096, a);
      }
      function wV(t3, a, c) {
        t3.lanes |= a;
        var r = t3.alternate;
        r !== null && (r.lanes |= a), hd(t3.return, a, c);
      }
      function Rg(t3, a, c, r, e) {
        var l = t3.memoizedState;
        l === null ? t3.memoizedState = { isBackwards: a, rendering: null, renderingStartTime: 0, last: r, tail: c, tailMode: e } : (l.isBackwards = a, l.rendering = null, l.renderingStartTime = 0, l.last = r, l.tail = c, l.tailMode = e);
      }
      function uB(t3, a, c) {
        var r = a.pendingProps, e = r.revealOrder, l = r.tail;
        if (f0(t3, a, r.children, c), r = n2.current, r & 2) r = r & 1 | 2, a.flags |= 128;
        else {
          if (t3 !== null && t3.flags & 128) t: for (t3 = a.child; t3 !== null; ) {
            if (t3.tag === 13) t3.memoizedState !== null && wV(t3, c, a);
            else if (t3.tag === 19) wV(t3, c, a);
            else if (t3.child !== null) {
              t3.child.return = t3, t3 = t3.child;
              continue;
            }
            if (t3 === a) break t;
            for (; t3.sibling === null; ) {
              if (t3.return === null || t3.return === a) break t;
              t3 = t3.return;
            }
            t3.sibling.return = t3.return, t3 = t3.sibling;
          }
          r &= 1;
        }
        if ($1(n2, r), !(a.mode & 1)) a.memoizedState = null;
        else switch (e) {
          case "forwards":
            for (c = a.child, e = null; c !== null; ) t3 = c.alternate, t3 !== null && Xl(t3) === null && (e = c), c = c.sibling;
            c = e, c === null ? (e = a.child, a.child = null) : (e = c.sibling, c.sibling = null), Rg(a, false, e, c, l);
            break;
          case "backwards":
            for (c = null, e = a.child, a.child = null; e !== null; ) {
              if (t3 = e.alternate, t3 !== null && Xl(t3) === null) {
                a.child = e;
                break;
              }
              t3 = e.sibling, e.sibling = c, c = e, e = t3;
            }
            Rg(a, true, c, null, l);
            break;
          case "together":
            Rg(a, false, null, null, void 0);
            break;
          default:
            a.memoizedState = null;
        }
        return a.child;
      }
      function Rl(t3, a) {
        !(a.mode & 1) && t3 !== null && (t3.alternate = null, a.alternate = null, a.flags |= 2);
      }
      function z5(t3, a, c) {
        if (t3 !== null && (a.dependencies = t3.dependencies), b8 |= a.lanes, !(c & a.childLanes)) return null;
        if (t3 !== null && a.child !== t3.child) throw Error(n1(153));
        if (a.child !== null) {
          for (t3 = a.child, c = L6(t3, t3.pendingProps), a.child = c, c.return = a; t3.sibling !== null; ) t3 = t3.sibling, c = c.sibling = L6(t3, t3.pendingProps), c.return = a;
          c.sibling = null;
        }
        return a.child;
      }
      function zJ(t3, a, c) {
        switch (a.tag) {
          case 3:
            sB(a), u9();
            break;
          case 5:
            Ww(a);
            break;
          case 1:
            k0(a.type) && ql(a);
            break;
          case 4:
            Qd(a, a.stateNode.containerInfo);
            break;
          case 10:
            var r = a.type._context, e = a.memoizedProps.value;
            $1(Kl, r._currentValue), r._currentValue = e;
            break;
          case 13:
            if (r = a.memoizedState, r !== null) return r.dehydrated !== null ? ($1(n2, n2.current & 1), a.flags |= 128, null) : c & a.child.childLanes ? zB(t3, a, c) : ($1(n2, n2.current & 1), t3 = z5(t3, a, c), t3 !== null ? t3.sibling : null);
            $1(n2, n2.current & 1);
            break;
          case 19:
            if (r = (c & a.childLanes) !== 0, t3.flags & 128) {
              if (r) return uB(t3, a, c);
              a.flags |= 128;
            }
            if (e = a.memoizedState, e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null), $1(n2, n2.current), r) break;
            return null;
          case 22:
          case 23:
            return a.lanes = 0, gB(t3, a, c);
        }
        return z5(t3, a, c);
      }
      var pB, md, mB, fB;
      pB = function(t3, a) {
        for (var c = a.child; c !== null; ) {
          if (c.tag === 5 || c.tag === 6) t3.appendChild(c.stateNode);
          else if (c.tag !== 4 && c.child !== null) {
            c.child.return = c, c = c.child;
            continue;
          }
          if (c === a) break;
          for (; c.sibling === null; ) {
            if (c.return === null || c.return === a) return;
            c = c.return;
          }
          c.sibling.return = c.return, c = c.sibling;
        }
      };
      md = function() {
      };
      mB = function(t3, a, c, r) {
        var e = t3.memoizedProps;
        if (e !== r) {
          t3 = a.stateNode, B8(w4.current);
          var l = null;
          switch (c) {
            case "input":
              e = Og(t3, e), r = Og(t3, r), l = [];
              break;
            case "select":
              e = v2({}, e, { value: void 0 }), r = v2({}, r, { value: void 0 }), l = [];
              break;
            case "textarea":
              e = Wg(t3, e), r = Wg(t3, r), l = [];
              break;
            default:
              typeof e.onClick != "function" && typeof r.onClick == "function" && (t3.onclick = _l);
          }
          jg(c, r);
          var i10;
          c = null;
          for (h in e) if (!r.hasOwnProperty(h) && e.hasOwnProperty(h) && e[h] != null) if (h === "style") {
            var o = e[h];
            for (i10 in o) o.hasOwnProperty(i10) && (c || (c = {}), c[i10] = "");
          } else h !== "dangerouslySetInnerHTML" && h !== "children" && h !== "suppressContentEditableWarning" && h !== "suppressHydrationWarning" && h !== "autoFocus" && (qa.hasOwnProperty(h) ? l || (l = []) : (l = l || []).push(h, null));
          for (h in r) {
            var n = r[h];
            if (o = e != null ? e[h] : void 0, r.hasOwnProperty(h) && n !== o && (n != null || o != null)) if (h === "style") if (o) {
              for (i10 in o) !o.hasOwnProperty(i10) || n && n.hasOwnProperty(i10) || (c || (c = {}), c[i10] = "");
              for (i10 in n) n.hasOwnProperty(i10) && o[i10] !== n[i10] && (c || (c = {}), c[i10] = n[i10]);
            } else c || (l || (l = []), l.push(h, c)), c = n;
            else h === "dangerouslySetInnerHTML" ? (n = n ? n.__html : void 0, o = o ? o.__html : void 0, n != null && o !== n && (l = l || []).push(h, n)) : h === "children" ? typeof n != "string" && typeof n != "number" || (l = l || []).push(h, "" + n) : h !== "suppressContentEditableWarning" && h !== "suppressHydrationWarning" && (qa.hasOwnProperty(h) ? (n != null && h === "onScroll" && t2("scroll", t3), l || o === n || (l = [])) : (l = l || []).push(h, n));
          }
          c && (l = l || []).push("style", c);
          var h = l;
          (a.updateQueue = h) && (a.flags |= 4);
        }
      };
      fB = function(t3, a, c, r) {
        c !== r && (a.flags |= 4);
      };
      function ka(t3, a) {
        if (!l2) switch (t3.tailMode) {
          case "hidden":
            a = t3.tail;
            for (var c = null; a !== null; ) a.alternate !== null && (c = a), a = a.sibling;
            c === null ? t3.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = t3.tail;
            for (var r = null; c !== null; ) c.alternate !== null && (r = c), c = c.sibling;
            r === null ? a || t3.tail === null ? t3.tail = null : t3.tail.sibling = null : r.sibling = null;
        }
      }
      function i0(t3) {
        var a = t3.alternate !== null && t3.alternate.child === t3.child, c = 0, r = 0;
        if (a) for (var e = t3.child; e !== null; ) c |= e.lanes | e.childLanes, r |= e.subtreeFlags & 14680064, r |= e.flags & 14680064, e.return = t3, e = e.sibling;
        else for (e = t3.child; e !== null; ) c |= e.lanes | e.childLanes, r |= e.subtreeFlags, r |= e.flags, e.return = t3, e = e.sibling;
        return t3.subtreeFlags |= r, t3.childLanes = c, a;
      }
      function uJ(t3, a, c) {
        var r = a.pendingProps;
        switch (_d(a), a.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return i0(a), null;
          case 1:
            return k0(a.type) && jl(), i0(a), null;
          case 3:
            return r = a.stateNode, m9(), a2(S0), a2(n0), Yd(), r.pendingContext && (r.context = r.pendingContext, r.pendingContext = null), (t3 === null || t3.child === null) && (xl(a) ? a.flags |= 4 : t3 === null || t3.memoizedState.isDehydrated && !(a.flags & 256) || (a.flags |= 1024, N3 !== null && (wd(N3), N3 = null))), md(t3, a), i0(a), null;
          case 5:
            Xd(a);
            var e = B8(rc.current);
            if (c = a.type, t3 !== null && a.stateNode != null) mB(t3, a, c, r, e), t3.ref !== a.ref && (a.flags |= 512, a.flags |= 2097152);
            else {
              if (!r) {
                if (a.stateNode === null) throw Error(n1(166));
                return i0(a), null;
              }
              if (t3 = B8(w4.current), xl(a)) {
                r = a.stateNode, c = a.type;
                var l = a.memoizedProps;
                switch (r[H4] = a, r[ac] = l, t3 = (a.mode & 1) !== 0, c) {
                  case "dialog":
                    t2("cancel", r), t2("close", r);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    t2("load", r);
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < Pa.length; e++) t2(Pa[e], r);
                    break;
                  case "source":
                    t2("error", r);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    t2("error", r), t2("load", r);
                    break;
                  case "details":
                    t2("toggle", r);
                    break;
                  case "input":
                    FH(r, l), t2("invalid", r);
                    break;
                  case "select":
                    r._wrapperState = { wasMultiple: !!l.multiple }, t2("invalid", r);
                    break;
                  case "textarea":
                    PH(r, l), t2("invalid", r);
                }
                jg(c, l), e = null;
                for (var i10 in l) if (l.hasOwnProperty(i10)) {
                  var o = l[i10];
                  i10 === "children" ? typeof o == "string" ? r.textContent !== o && (l.suppressHydrationWarning !== true && Ml(r.textContent, o, t3), e = ["children", o]) : typeof o == "number" && r.textContent !== "" + o && (l.suppressHydrationWarning !== true && Ml(r.textContent, o, t3), e = ["children", "" + o]) : qa.hasOwnProperty(i10) && o != null && i10 === "onScroll" && t2("scroll", r);
                }
                switch (c) {
                  case "input":
                    ol(r), IH(r, l, true);
                    break;
                  case "textarea":
                    ol(r), GH(r);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    typeof l.onClick == "function" && (r.onclick = _l);
                }
                r = e, a.updateQueue = r, r !== null && (a.flags |= 4);
              } else {
                i10 = e.nodeType === 9 ? e : e.ownerDocument, t3 === "http://www.w3.org/1999/xhtml" && (t3 = qV(c)), t3 === "http://www.w3.org/1999/xhtml" ? c === "script" ? (t3 = i10.createElement("div"), t3.innerHTML = "<script><\/script>", t3 = t3.removeChild(t3.firstChild)) : typeof r.is == "string" ? t3 = i10.createElement(c, { is: r.is }) : (t3 = i10.createElement(c), c === "select" && (i10 = t3, r.multiple ? i10.multiple = true : r.size && (i10.size = r.size))) : t3 = i10.createElementNS(t3, c), t3[H4] = a, t3[ac] = r, pB(t3, a, false, false), a.stateNode = t3;
                t: {
                  switch (i10 = qg(c, r), c) {
                    case "dialog":
                      t2("cancel", t3), t2("close", t3), e = r;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      t2("load", t3), e = r;
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < Pa.length; e++) t2(Pa[e], t3);
                      e = r;
                      break;
                    case "source":
                      t2("error", t3), e = r;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      t2("error", t3), t2("load", t3), e = r;
                      break;
                    case "details":
                      t2("toggle", t3), e = r;
                      break;
                    case "input":
                      FH(t3, r), e = Og(t3, r), t2("invalid", t3);
                      break;
                    case "option":
                      e = r;
                      break;
                    case "select":
                      t3._wrapperState = { wasMultiple: !!r.multiple }, e = v2({}, r, { value: void 0 }), t2("invalid", t3);
                      break;
                    case "textarea":
                      PH(t3, r), e = Wg(t3, r), t2("invalid", t3);
                      break;
                    default:
                      e = r;
                  }
                  jg(c, e), o = e;
                  for (l in o) if (o.hasOwnProperty(l)) {
                    var n = o[l];
                    l === "style" ? KV(t3, n) : l === "dangerouslySetInnerHTML" ? (n = n ? n.__html : void 0, n != null && NV(t3, n)) : l === "children" ? typeof n == "string" ? (c !== "textarea" || n !== "") && Na(t3, n) : typeof n == "number" && Na(t3, "" + n) : l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && l !== "autoFocus" && (qa.hasOwnProperty(l) ? n != null && l === "onScroll" && t2("scroll", t3) : n != null && Sd(t3, l, n, i10));
                  }
                  switch (c) {
                    case "input":
                      ol(t3), IH(t3, r, false);
                      break;
                    case "textarea":
                      ol(t3), GH(t3);
                      break;
                    case "option":
                      r.value != null && t3.setAttribute("value", "" + H6(r.value));
                      break;
                    case "select":
                      t3.multiple = !!r.multiple, l = r.value, l != null ? o9(t3, !!r.multiple, l, false) : r.defaultValue != null && o9(t3, !!r.multiple, r.defaultValue, true);
                      break;
                    default:
                      typeof e.onClick == "function" && (t3.onclick = _l);
                  }
                  switch (c) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      r = !!r.autoFocus;
                      break t;
                    case "img":
                      r = true;
                      break t;
                    default:
                      r = false;
                  }
                }
                r && (a.flags |= 4);
              }
              a.ref !== null && (a.flags |= 512, a.flags |= 2097152);
            }
            return i0(a), null;
          case 6:
            if (t3 && a.stateNode != null) fB(t3, a, t3.memoizedProps, r);
            else {
              if (typeof r != "string" && a.stateNode === null) throw Error(n1(166));
              if (c = B8(rc.current), B8(w4.current), xl(a)) {
                if (r = a.stateNode, c = a.memoizedProps, r[H4] = a, (l = r.nodeValue !== c) && (t3 = Q0, t3 !== null)) switch (t3.tag) {
                  case 3:
                    Ml(r.nodeValue, c, (t3.mode & 1) !== 0);
                    break;
                  case 5:
                    t3.memoizedProps.suppressHydrationWarning !== true && Ml(r.nodeValue, c, (t3.mode & 1) !== 0);
                }
                l && (a.flags |= 4);
              } else r = (c.nodeType === 9 ? c : c.ownerDocument).createTextNode(r), r[H4] = a, a.stateNode = r;
            }
            return i0(a), null;
          case 13:
            if (a2(n2), r = a.memoizedState, t3 === null || t3.memoizedState !== null && t3.memoizedState.dehydrated !== null) {
              if (l2 && $0 !== null && a.mode & 1 && !(a.flags & 128)) Pw(), u9(), a.flags |= 98560, l = false;
              else if (l = xl(a), r !== null && r.dehydrated !== null) {
                if (t3 === null) {
                  if (!l) throw Error(n1(318));
                  if (l = a.memoizedState, l = l !== null ? l.dehydrated : null, !l) throw Error(n1(317));
                  l[H4] = a;
                } else u9(), !(a.flags & 128) && (a.memoizedState = null), a.flags |= 4;
                i0(a), l = false;
              } else N3 !== null && (wd(N3), N3 = null), l = true;
              if (!l) return a.flags & 65536 ? a : null;
            }
            return a.flags & 128 ? (a.lanes = c, a) : (r = r !== null, r !== (t3 !== null && t3.memoizedState !== null) && r && (a.child.flags |= 8192, a.mode & 1 && (t3 === null || n2.current & 1 ? k2 === 0 && (k2 = 3) : vs())), a.updateQueue !== null && (a.flags |= 4), i0(a), null);
          case 4:
            return m9(), md(t3, a), t3 === null && Ja(a.stateNode.containerInfo), i0(a), null;
          case 10:
            return Ud(a.type._context), i0(a), null;
          case 17:
            return k0(a.type) && jl(), i0(a), null;
          case 19:
            if (a2(n2), l = a.memoizedState, l === null) return i0(a), null;
            if (r = (a.flags & 128) !== 0, i10 = l.rendering, i10 === null) if (r) ka(l, false);
            else {
              if (k2 !== 0 || t3 !== null && t3.flags & 128) for (t3 = a.child; t3 !== null; ) {
                if (i10 = Xl(t3), i10 !== null) {
                  for (a.flags |= 128, ka(l, false), r = i10.updateQueue, r !== null && (a.updateQueue = r, a.flags |= 4), a.subtreeFlags = 0, r = c, c = a.child; c !== null; ) l = c, t3 = r, l.flags &= 14680066, i10 = l.alternate, i10 === null ? (l.childLanes = 0, l.lanes = t3, l.child = null, l.subtreeFlags = 0, l.memoizedProps = null, l.memoizedState = null, l.updateQueue = null, l.dependencies = null, l.stateNode = null) : (l.childLanes = i10.childLanes, l.lanes = i10.lanes, l.child = i10.child, l.subtreeFlags = 0, l.deletions = null, l.memoizedProps = i10.memoizedProps, l.memoizedState = i10.memoizedState, l.updateQueue = i10.updateQueue, l.type = i10.type, t3 = i10.dependencies, l.dependencies = t3 === null ? null : { lanes: t3.lanes, firstContext: t3.firstContext }), c = c.sibling;
                  return $1(n2, n2.current & 1 | 2), a.child;
                }
                t3 = t3.sibling;
              }
              l.tail !== null && m2() > M9 && (a.flags |= 128, r = true, ka(l, false), a.lanes = 4194304);
            }
            else {
              if (!r) if (t3 = Xl(i10), t3 !== null) {
                if (a.flags |= 128, r = true, c = t3.updateQueue, c !== null && (a.updateQueue = c, a.flags |= 4), ka(l, true), l.tail === null && l.tailMode === "hidden" && !i10.alternate && !l2) return i0(a), null;
              } else 2 * m2() - l.renderingStartTime > M9 && c !== 1073741824 && (a.flags |= 128, r = true, ka(l, false), a.lanes = 4194304);
              l.isBackwards ? (i10.sibling = a.child, a.child = i10) : (c = l.last, c !== null ? c.sibling = i10 : a.child = i10, l.last = i10);
            }
            return l.tail !== null ? (a = l.tail, l.rendering = a, l.tail = a.sibling, l.renderingStartTime = m2(), a.sibling = null, c = n2.current, $1(n2, r ? c & 1 | 2 : c & 1), a) : (i0(a), null);
          case 22:
          case 23:
            return hs(), r = a.memoizedState !== null, t3 !== null && t3.memoizedState !== null !== r && (a.flags |= 8192), r && a.mode & 1 ? K0 & 1073741824 && (i0(a), a.subtreeFlags & 6 && (a.flags |= 8192)) : i0(a), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(n1(156, a.tag));
      }
      function pJ(t3, a) {
        switch (_d(a), a.tag) {
          case 1:
            return k0(a.type) && jl(), t3 = a.flags, t3 & 65536 ? (a.flags = t3 & -65537 | 128, a) : null;
          case 3:
            return m9(), a2(S0), a2(n0), Yd(), t3 = a.flags, t3 & 65536 && !(t3 & 128) ? (a.flags = t3 & -65537 | 128, a) : null;
          case 5:
            return Xd(a), null;
          case 13:
            if (a2(n2), t3 = a.memoizedState, t3 !== null && t3.dehydrated !== null) {
              if (a.alternate === null) throw Error(n1(340));
              u9();
            }
            return t3 = a.flags, t3 & 65536 ? (a.flags = t3 & -65537 | 128, a) : null;
          case 19:
            return a2(n2), null;
          case 4:
            return m9(), null;
          case 10:
            return Ud(a.type._context), null;
          case 22:
          case 23:
            return hs(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Hl = false, o0 = false, mJ = typeof WeakSet == "function" ? WeakSet : Set, p1 = null;
      function l9(t3, a) {
        var c = t3.ref;
        if (c !== null) if (typeof c == "function") try {
          c(null);
        } catch (r) {
          d2(t3, a, r);
        }
        else c.current = null;
      }
      function fd(t3, a, c) {
        try {
          c();
        } catch (r) {
          d2(t3, a, r);
        }
      }
      var BV = false;
      function fJ(t3, a) {
        if (ad = El, t3 = Lw(), Dd(t3)) {
          if ("selectionStart" in t3) var c = { start: t3.selectionStart, end: t3.selectionEnd };
          else t: {
            c = (c = t3.ownerDocument) && c.defaultView || window;
            var r = c.getSelection && c.getSelection();
            if (r && r.rangeCount !== 0) {
              c = r.anchorNode;
              var e = r.anchorOffset, l = r.focusNode;
              r = r.focusOffset;
              try {
                c.nodeType, l.nodeType;
              } catch (w) {
                c = null;
                break t;
              }
              var i10 = 0, o = -1, n = -1, h = 0, v = 0, g = t3, s = null;
              a: for (; ; ) {
                for (var d; g !== c || e !== 0 && g.nodeType !== 3 || (o = i10 + e), g !== l || r !== 0 && g.nodeType !== 3 || (n = i10 + r), g.nodeType === 3 && (i10 += g.nodeValue.length), (d = g.firstChild) !== null; ) s = g, g = d;
                for (; ; ) {
                  if (g === t3) break a;
                  if (s === c && ++h === e && (o = i10), s === l && ++v === r && (n = i10), (d = g.nextSibling) !== null) break;
                  g = s, s = g.parentNode;
                }
                g = d;
              }
              c = o === -1 || n === -1 ? null : { start: o, end: n };
            } else c = null;
          }
          c = c || { start: 0, end: 0 };
        } else c = null;
        for (cd = { focusedElem: t3, selectionRange: c }, El = false, p1 = a; p1 !== null; ) if (a = p1, t3 = a.child, (a.subtreeFlags & 1028) !== 0 && t3 !== null) t3.return = a, p1 = t3;
        else for (; p1 !== null; ) {
          a = p1;
          try {
            var z = a.alternate;
            if (a.flags & 1024) switch (a.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (z !== null) {
                  var u = z.memoizedProps, f = z.memoizedState, p = a.stateNode, m = p.getSnapshotBeforeUpdate(a.elementType === a.type ? u : j3(a.type, u), f);
                  p.__reactInternalSnapshotBeforeUpdate = m;
                }
                break;
              case 3:
                var M = a.stateNode.containerInfo;
                M.nodeType === 1 ? M.textContent = "" : M.nodeType === 9 && M.documentElement && M.removeChild(M.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(n1(163));
            }
          } catch (w) {
            d2(a, a.return, w);
          }
          if (t3 = a.sibling, t3 !== null) {
            t3.return = a.return, p1 = t3;
            break;
          }
          p1 = a.return;
        }
        return z = BV, BV = false, z;
      }
      function Wa(t3, a, c) {
        var r = a.updateQueue;
        if (r = r !== null ? r.lastEffect : null, r !== null) {
          var e = r = r.next;
          do {
            if ((e.tag & t3) === t3) {
              var l = e.destroy;
              e.destroy = void 0, l !== void 0 && fd(a, c, l);
            }
            e = e.next;
          } while (e !== r);
        }
      }
      function si(t3, a) {
        if (a = a.updateQueue, a = a !== null ? a.lastEffect : null, a !== null) {
          var c = a = a.next;
          do {
            if ((c.tag & t3) === t3) {
              var r = c.create;
              c.destroy = r();
            }
            c = c.next;
          } while (c !== a);
        }
      }
      function Md(t3) {
        var a = t3.ref;
        if (a !== null) {
          var c = t3.stateNode;
          switch (t3.tag) {
            case 5:
              t3 = c;
              break;
            default:
              t3 = c;
          }
          typeof a == "function" ? a(t3) : a.current = t3;
        }
      }
      function MB(t3) {
        var a = t3.alternate;
        a !== null && (t3.alternate = null, MB(a)), t3.child = null, t3.deletions = null, t3.sibling = null, t3.tag === 5 && (a = t3.stateNode, a !== null && (delete a[H4], delete a[ac], delete a[ld], delete a[tJ], delete a[aJ])), t3.stateNode = null, t3.return = null, t3.dependencies = null, t3.memoizedProps = null, t3.memoizedState = null, t3.pendingProps = null, t3.stateNode = null, t3.updateQueue = null;
      }
      function xB(t3) {
        return t3.tag === 5 || t3.tag === 3 || t3.tag === 4;
      }
      function yV(t3) {
        t: for (; ; ) {
          for (; t3.sibling === null; ) {
            if (t3.return === null || xB(t3.return)) return null;
            t3 = t3.return;
          }
          for (t3.sibling.return = t3.return, t3 = t3.sibling; t3.tag !== 5 && t3.tag !== 6 && t3.tag !== 18; ) {
            if (t3.flags & 2 || t3.child === null || t3.tag === 4) continue t;
            t3.child.return = t3, t3 = t3.child;
          }
          if (!(t3.flags & 2)) return t3.stateNode;
        }
      }
      function xd(t3, a, c) {
        var r = t3.tag;
        if (r === 5 || r === 6) t3 = t3.stateNode, a ? c.nodeType === 8 ? c.parentNode.insertBefore(t3, a) : c.insertBefore(t3, a) : (c.nodeType === 8 ? (a = c.parentNode, a.insertBefore(t3, c)) : (a = c, a.appendChild(t3)), c = c._reactRootContainer, c != null || a.onclick !== null || (a.onclick = _l));
        else if (r !== 4 && (t3 = t3.child, t3 !== null)) for (xd(t3, a, c), t3 = t3.sibling; t3 !== null; ) xd(t3, a, c), t3 = t3.sibling;
      }
      function Cd(t3, a, c) {
        var r = t3.tag;
        if (r === 5 || r === 6) t3 = t3.stateNode, a ? c.insertBefore(t3, a) : c.appendChild(t3);
        else if (r !== 4 && (t3 = t3.child, t3 !== null)) for (Cd(t3, a, c), t3 = t3.sibling; t3 !== null; ) Cd(t3, a, c), t3 = t3.sibling;
      }
      var _2 = null, q3 = false;
      function n6(t3, a, c) {
        for (c = c.child; c !== null; ) CB(t3, a, c), c = c.sibling;
      }
      function CB(t3, a, c) {
        if (V4 && typeof V4.onCommitFiberUnmount == "function") try {
          V4.onCommitFiberUnmount(li, c);
        } catch (o) {
        }
        switch (c.tag) {
          case 5:
            o0 || l9(c, a);
          case 6:
            var r = _2, e = q3;
            _2 = null, n6(t3, a, c), _2 = r, q3 = e, _2 !== null && (q3 ? (t3 = _2, c = c.stateNode, t3.nodeType === 8 ? t3.parentNode.removeChild(c) : t3.removeChild(c)) : _2.removeChild(c.stateNode));
            break;
          case 18:
            _2 !== null && (q3 ? (t3 = _2, c = c.stateNode, t3.nodeType === 8 ? Vg(t3.parentNode, c) : t3.nodeType === 1 && Vg(t3, c), Qa(t3)) : Vg(_2, c.stateNode));
            break;
          case 4:
            r = _2, e = q3, _2 = c.stateNode.containerInfo, q3 = true, n6(t3, a, c), _2 = r, q3 = e;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!o0 && (r = c.updateQueue, r !== null && (r = r.lastEffect, r !== null))) {
              e = r = r.next;
              do {
                var l = e, i10 = l.destroy;
                l = l.tag, i10 !== void 0 && (l & 2 || l & 4) && fd(c, a, i10), e = e.next;
              } while (e !== r);
            }
            n6(t3, a, c);
            break;
          case 1:
            if (!o0 && (l9(c, a), r = c.stateNode, typeof r.componentWillUnmount == "function")) try {
              r.props = c.memoizedProps, r.state = c.memoizedState, r.componentWillUnmount();
            } catch (o) {
              d2(c, a, o);
            }
            n6(t3, a, c);
            break;
          case 21:
            n6(t3, a, c);
            break;
          case 22:
            c.mode & 1 ? (o0 = (r = o0) || c.memoizedState !== null, n6(t3, a, c), o0 = r) : n6(t3, a, c);
            break;
          default:
            n6(t3, a, c);
        }
      }
      function SV(t3) {
        var a = t3.updateQueue;
        if (a !== null) {
          t3.updateQueue = null;
          var c = t3.stateNode;
          c === null && (c = t3.stateNode = new mJ()), a.forEach(function(r) {
            var e = yJ.bind(null, t3, r);
            c.has(r) || (c.add(r), r.then(e, e));
          });
        }
      }
      function _3(t3, a) {
        var c = a.deletions;
        if (c !== null) for (var r = 0; r < c.length; r++) {
          var e = c[r];
          try {
            var l = t3, i10 = a, o = i10;
            t: for (; o !== null; ) {
              switch (o.tag) {
                case 5:
                  _2 = o.stateNode, q3 = false;
                  break t;
                case 3:
                  _2 = o.stateNode.containerInfo, q3 = true;
                  break t;
                case 4:
                  _2 = o.stateNode.containerInfo, q3 = true;
                  break t;
              }
              o = o.return;
            }
            if (_2 === null) throw Error(n1(160));
            CB(l, i10, e), _2 = null, q3 = false;
            var n = e.alternate;
            n !== null && (n.return = null), e.return = null;
          } catch (h) {
            d2(e, a, h);
          }
        }
        if (a.subtreeFlags & 12854) for (a = a.child; a !== null; ) LB(a, t3), a = a.sibling;
      }
      function LB(t3, a) {
        var c = t3.alternate, r = t3.flags;
        switch (t3.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            if (_3(a, t3), C4(t3), r & 4) {
              try {
                Wa(3, t3, t3.return), si(3, t3);
              } catch (u) {
                d2(t3, t3.return, u);
              }
              try {
                Wa(5, t3, t3.return);
              } catch (u) {
                d2(t3, t3.return, u);
              }
            }
            break;
          case 1:
            _3(a, t3), C4(t3), r & 512 && c !== null && l9(c, c.return);
            break;
          case 5:
            if (_3(a, t3), C4(t3), r & 512 && c !== null && l9(c, c.return), t3.flags & 32) {
              var e = t3.stateNode;
              try {
                Na(e, "");
              } catch (u) {
                d2(t3, t3.return, u);
              }
            }
            if (r & 4 && (e = t3.stateNode, e != null)) {
              var l = t3.memoizedProps, i10 = c !== null ? c.memoizedProps : l, o = t3.type, n = t3.updateQueue;
              if (t3.updateQueue = null, n !== null) try {
                o === "input" && l.type === "radio" && l.name != null && _V(e, l), qg(o, i10);
                var h = qg(o, l);
                for (i10 = 0; i10 < n.length; i10 += 2) {
                  var v = n[i10], g = n[i10 + 1];
                  v === "style" ? KV(e, g) : v === "dangerouslySetInnerHTML" ? NV(e, g) : v === "children" ? Na(e, g) : Sd(e, v, g, h);
                }
                switch (o) {
                  case "input":
                    Eg(e, l);
                    break;
                  case "textarea":
                    jV(e, l);
                    break;
                  case "select":
                    var s = e._wrapperState.wasMultiple;
                    e._wrapperState.wasMultiple = !!l.multiple;
                    var d = l.value;
                    d != null ? o9(e, !!l.multiple, d, false) : s !== !!l.multiple && (l.defaultValue != null ? o9(e, !!l.multiple, l.defaultValue, true) : o9(e, !!l.multiple, l.multiple ? [] : "", false));
                }
                e[ac] = l;
              } catch (u) {
                d2(t3, t3.return, u);
              }
            }
            break;
          case 6:
            if (_3(a, t3), C4(t3), r & 4) {
              if (t3.stateNode === null) throw Error(n1(162));
              e = t3.stateNode, l = t3.memoizedProps;
              try {
                e.nodeValue = l;
              } catch (u) {
                d2(t3, t3.return, u);
              }
            }
            break;
          case 3:
            if (_3(a, t3), C4(t3), r & 4 && c !== null && c.memoizedState.isDehydrated) try {
              Qa(a.containerInfo);
            } catch (u) {
              d2(t3, t3.return, u);
            }
            break;
          case 4:
            _3(a, t3), C4(t3);
            break;
          case 13:
            _3(a, t3), C4(t3), e = t3.child, e.flags & 8192 && (l = e.memoizedState !== null, e.stateNode.isHidden = l, !l || e.alternate !== null && e.alternate.memoizedState !== null || (os = m2())), r & 4 && SV(t3);
            break;
          case 22:
            if (v = c !== null && c.memoizedState !== null, t3.mode & 1 ? (o0 = (h = o0) || v, _3(a, t3), o0 = h) : _3(a, t3), C4(t3), r & 8192) {
              if (h = t3.memoizedState !== null, (t3.stateNode.isHidden = h) && !v && t3.mode & 1) for (p1 = t3, v = t3.child; v !== null; ) {
                for (g = p1 = v; p1 !== null; ) {
                  switch (s = p1, d = s.child, s.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Wa(4, s, s.return);
                      break;
                    case 1:
                      l9(s, s.return);
                      var z = s.stateNode;
                      if (typeof z.componentWillUnmount == "function") {
                        r = s, c = s.return;
                        try {
                          a = r, z.props = a.memoizedProps, z.state = a.memoizedState, z.componentWillUnmount();
                        } catch (u) {
                          d2(r, c, u);
                        }
                      }
                      break;
                    case 5:
                      l9(s, s.return);
                      break;
                    case 22:
                      if (s.memoizedState !== null) {
                        AV(g);
                        continue;
                      }
                  }
                  d !== null ? (d.return = s, p1 = d) : AV(g);
                }
                v = v.sibling;
              }
              t: for (v = null, g = t3; ; ) {
                if (g.tag === 5) {
                  if (v === null) {
                    v = g;
                    try {
                      e = g.stateNode, h ? (l = e.style, typeof l.setProperty == "function" ? l.setProperty("display", "none", "important") : l.display = "none") : (o = g.stateNode, n = g.memoizedProps.style, i10 = n != null && n.hasOwnProperty("display") ? n.display : null, o.style.display = UV("display", i10));
                    } catch (u) {
                      d2(t3, t3.return, u);
                    }
                  }
                } else if (g.tag === 6) {
                  if (v === null) try {
                    g.stateNode.nodeValue = h ? "" : g.memoizedProps;
                  } catch (u) {
                    d2(t3, t3.return, u);
                  }
                } else if ((g.tag !== 22 && g.tag !== 23 || g.memoizedState === null || g === t3) && g.child !== null) {
                  g.child.return = g, g = g.child;
                  continue;
                }
                if (g === t3) break t;
                for (; g.sibling === null; ) {
                  if (g.return === null || g.return === t3) break t;
                  v === g && (v = null), g = g.return;
                }
                v === g && (v = null), g.sibling.return = g.return, g = g.sibling;
              }
            }
            break;
          case 19:
            _3(a, t3), C4(t3), r & 4 && SV(t3);
            break;
          case 21:
            break;
          default:
            _3(a, t3), C4(t3);
        }
      }
      function C4(t3) {
        var a = t3.flags;
        if (a & 2) {
          try {
            t: {
              for (var c = t3.return; c !== null; ) {
                if (xB(c)) {
                  var r = c;
                  break t;
                }
                c = c.return;
              }
              throw Error(n1(160));
            }
            switch (r.tag) {
              case 5:
                var e = r.stateNode;
                r.flags & 32 && (Na(e, ""), r.flags &= -33);
                var l = yV(t3);
                Cd(t3, l, e);
                break;
              case 3:
              case 4:
                var i10 = r.stateNode.containerInfo, o = yV(t3);
                xd(t3, o, i10);
                break;
              default:
                throw Error(n1(161));
            }
          } catch (n) {
            d2(t3, t3.return, n);
          }
          t3.flags &= -3;
        }
        a & 4096 && (t3.flags &= -4097);
      }
      function MJ(t3, a, c) {
        p1 = t3, HB(t3);
      }
      function HB(t3, a, c) {
        for (var r = (t3.mode & 1) !== 0; p1 !== null; ) {
          var e = p1, l = e.child;
          if (e.tag === 22 && r) {
            var i10 = e.memoizedState !== null || Hl;
            if (!i10) {
              var o = e.alternate, n = o !== null && o.memoizedState !== null || o0;
              o = Hl;
              var h = o0;
              if (Hl = i10, (o0 = n) && !h) for (p1 = e; p1 !== null; ) i10 = p1, n = i10.child, i10.tag === 22 && i10.memoizedState !== null ? RV(e) : n !== null ? (n.return = i10, p1 = n) : RV(e);
              for (; l !== null; ) p1 = l, HB(l), l = l.sibling;
              p1 = e, Hl = o, o0 = h;
            }
            kV(t3);
          } else e.subtreeFlags & 8772 && l !== null ? (l.return = e, p1 = l) : kV(t3);
        }
      }
      function kV(t3) {
        for (; p1 !== null; ) {
          var a = p1;
          if (a.flags & 8772) {
            var c = a.alternate;
            try {
              if (a.flags & 8772) switch (a.tag) {
                case 0:
                case 11:
                case 15:
                  o0 || si(5, a);
                  break;
                case 1:
                  var r = a.stateNode;
                  if (a.flags & 4 && !o0) if (c === null) r.componentDidMount();
                  else {
                    var e = a.elementType === a.type ? c.memoizedProps : j3(a.type, c.memoizedProps);
                    r.componentDidUpdate(e, c.memoizedState, r.__reactInternalSnapshotBeforeUpdate);
                  }
                  var l = a.updateQueue;
                  l !== null && dV(a, l, r);
                  break;
                case 3:
                  var i10 = a.updateQueue;
                  if (i10 !== null) {
                    if (c = null, a.child !== null) switch (a.child.tag) {
                      case 5:
                        c = a.child.stateNode;
                        break;
                      case 1:
                        c = a.child.stateNode;
                    }
                    dV(a, i10, c);
                  }
                  break;
                case 5:
                  var o = a.stateNode;
                  if (c === null && a.flags & 4) {
                    c = o;
                    var n = a.memoizedProps;
                    switch (a.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        n.autoFocus && c.focus();
                        break;
                      case "img":
                        n.src && (c.src = n.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (a.memoizedState === null) {
                    var h = a.alternate;
                    if (h !== null) {
                      var v = h.memoizedState;
                      if (v !== null) {
                        var g = v.dehydrated;
                        g !== null && Qa(g);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(n1(163));
              }
              o0 || a.flags & 512 && Md(a);
            } catch (s) {
              d2(a, a.return, s);
            }
          }
          if (a === t3) {
            p1 = null;
            break;
          }
          if (c = a.sibling, c !== null) {
            c.return = a.return, p1 = c;
            break;
          }
          p1 = a.return;
        }
      }
      function AV(t3) {
        for (; p1 !== null; ) {
          var a = p1;
          if (a === t3) {
            p1 = null;
            break;
          }
          var c = a.sibling;
          if (c !== null) {
            c.return = a.return, p1 = c;
            break;
          }
          p1 = a.return;
        }
      }
      function RV(t3) {
        for (; p1 !== null; ) {
          var a = p1;
          try {
            switch (a.tag) {
              case 0:
              case 11:
              case 15:
                var c = a.return;
                try {
                  si(4, a);
                } catch (n) {
                  d2(a, c, n);
                }
                break;
              case 1:
                var r = a.stateNode;
                if (typeof r.componentDidMount == "function") {
                  var e = a.return;
                  try {
                    r.componentDidMount();
                  } catch (n) {
                    d2(a, e, n);
                  }
                }
                var l = a.return;
                try {
                  Md(a);
                } catch (n) {
                  d2(a, l, n);
                }
                break;
              case 5:
                var i10 = a.return;
                try {
                  Md(a);
                } catch (n) {
                  d2(a, i10, n);
                }
            }
          } catch (n) {
            d2(a, a.return, n);
          }
          if (a === t3) {
            p1 = null;
            break;
          }
          var o = a.sibling;
          if (o !== null) {
            o.return = a.return, p1 = o;
            break;
          }
          p1 = a.return;
        }
      }
      var xJ = Math.ceil, ti = u5.ReactCurrentDispatcher, ls = u5.ReactCurrentOwner, w3 = u5.ReactCurrentBatchConfig, T1 = 0, F2 = null, V2 = null, j2 = 0, K0 = 0, i9 = B6(0), k2 = 0, oc = null, b8 = 0, zi = 0, is = 0, _a = null, B0 = null, os = 0, M9 = 1 / 0, i5 = null, ai = false, Ld = null, x6 = null, Vl = false, z6 = null, ci = 0, ja = 0, Hd = null, bl = -1, Fl = 0;
      function M0() {
        return T1 & 6 ? m2() : bl !== -1 ? bl : bl = m2();
      }
      function C6(t3) {
        return t3.mode & 1 ? T1 & 2 && j2 !== 0 ? j2 & -j2 : rJ.transition !== null ? (Fl === 0 && (Fl = iw()), Fl) : (t3 = W1, t3 !== 0 || (t3 = window.event, t3 = t3 === void 0 ? 16 : sw(t3.type)), t3) : 1;
      }
      function K3(t3, a, c, r) {
        if (50 < ja) throw ja = 0, Hd = null, Error(n1(185));
        nc(t3, c, r), (!(T1 & 2) || t3 !== F2) && (t3 === F2 && (!(T1 & 2) && (zi |= c), k2 === 4 && d6(t3, j2)), A0(t3, r), c === 1 && T1 === 0 && !(a.mode & 1) && (M9 = m2() + 500, vi && y6()));
      }
      function A0(t3, a) {
        var c = t3.callbackNode;
        lY(t3, a);
        var r = Ol(t3, t3 === F2 ? j2 : 0);
        if (r === 0) c !== null && OH(c), t3.callbackNode = null, t3.callbackPriority = 0;
        else if (a = r & -r, t3.callbackPriority !== a) {
          if (c != null && OH(c), a === 1) t3.tag === 0 ? cJ(bV.bind(null, t3)) : bw(bV.bind(null, t3)), YY(function() {
            !(T1 & 6) && y6();
          }), c = null;
          else {
            switch (ow(r)) {
              case 1:
                c = Fd;
                break;
              case 4:
                c = ew;
                break;
              case 16:
                c = Zl;
                break;
              case 536870912:
                c = lw;
                break;
              default:
                c = Zl;
            }
            c = RB(c, VB.bind(null, t3));
          }
          t3.callbackPriority = a, t3.callbackNode = c;
        }
      }
      function VB(t3, a) {
        if (bl = -1, Fl = 0, T1 & 6) throw Error(n1(327));
        var c = t3.callbackNode;
        if (d9() && t3.callbackNode !== c) return null;
        var r = Ol(t3, t3 === F2 ? j2 : 0);
        if (r === 0) return null;
        if (r & 30 || r & t3.expiredLanes || a) a = ri(t3, r);
        else {
          a = r;
          var e = T1;
          T1 |= 2;
          var l = BB();
          (F2 !== t3 || j2 !== a) && (i5 = null, M9 = m2() + 500, y8(t3, a));
          do
            try {
              HJ();
              break;
            } catch (o) {
              wB(t3, o);
            }
          while (1);
          Nd(), ti.current = l, T1 = e, V2 !== null ? a = 0 : (F2 = null, j2 = 0, a = k2);
        }
        if (a !== 0) {
          if (a === 2 && (e = Qg(t3), e !== 0 && (r = e, a = Vd(t3, e))), a === 1) throw c = oc, y8(t3, 0), d6(t3, r), A0(t3, m2()), c;
          if (a === 6) d6(t3, r);
          else {
            if (e = t3.current.alternate, !(r & 30) && !CJ(e) && (a = ri(t3, r), a === 2 && (l = Qg(t3), l !== 0 && (r = l, a = Vd(t3, l))), a === 1)) throw c = oc, y8(t3, 0), d6(t3, r), A0(t3, m2()), c;
            switch (t3.finishedWork = e, t3.finishedLanes = r, a) {
              case 0:
              case 1:
                throw Error(n1(345));
              case 2:
                H8(t3, B0, i5);
                break;
              case 3:
                if (d6(t3, r), (r & 130023424) === r && (a = os + 500 - m2(), 10 < a)) {
                  if (Ol(t3, 0) !== 0) break;
                  if (e = t3.suspendedLanes, (e & r) !== r) {
                    M0(), t3.pingedLanes |= t3.suspendedLanes & e;
                    break;
                  }
                  t3.timeoutHandle = ed(H8.bind(null, t3, B0, i5), a);
                  break;
                }
                H8(t3, B0, i5);
                break;
              case 4:
                if (d6(t3, r), (r & 4194240) === r) break;
                for (a = t3.eventTimes, e = -1; 0 < r; ) {
                  var i10 = 31 - U3(r);
                  l = 1 << i10, i10 = a[i10], i10 > e && (e = i10), r &= ~l;
                }
                if (r = e, r = m2() - r, r = (120 > r ? 120 : 480 > r ? 480 : 1080 > r ? 1080 : 1920 > r ? 1920 : 3e3 > r ? 3e3 : 4320 > r ? 4320 : 1960 * xJ(r / 1960)) - r, 10 < r) {
                  t3.timeoutHandle = ed(H8.bind(null, t3, B0, i5), r);
                  break;
                }
                H8(t3, B0, i5);
                break;
              case 5:
                H8(t3, B0, i5);
                break;
              default:
                throw Error(n1(329));
            }
          }
        }
        return A0(t3, m2()), t3.callbackNode === c ? VB.bind(null, t3) : null;
      }
      function Vd(t3, a) {
        var c = _a;
        return t3.current.memoizedState.isDehydrated && (y8(t3, a).flags |= 256), t3 = ri(t3, a), t3 !== 2 && (a = B0, B0 = c, a !== null && wd(a)), t3;
      }
      function wd(t3) {
        B0 === null ? B0 = t3 : B0.push.apply(B0, t3);
      }
      function CJ(t3) {
        for (var a = t3; ; ) {
          if (a.flags & 16384) {
            var c = a.updateQueue;
            if (c !== null && (c = c.stores, c !== null)) for (var r = 0; r < c.length; r++) {
              var e = c[r], l = e.getSnapshot;
              e = e.value;
              try {
                if (!$3(l(), e)) return false;
              } catch (i10) {
                return false;
              }
            }
          }
          if (c = a.child, a.subtreeFlags & 16384 && c !== null) c.return = a, a = c;
          else {
            if (a === t3) break;
            for (; a.sibling === null; ) {
              if (a.return === null || a.return === t3) return true;
              a = a.return;
            }
            a.sibling.return = a.return, a = a.sibling;
          }
        }
        return true;
      }
      function d6(t3, a) {
        for (a &= ~is, a &= ~zi, t3.suspendedLanes |= a, t3.pingedLanes &= ~a, t3 = t3.expirationTimes; 0 < a; ) {
          var c = 31 - U3(a), r = 1 << c;
          t3[c] = -1, a &= ~r;
        }
      }
      function bV(t3) {
        if (T1 & 6) throw Error(n1(327));
        d9();
        var a = Ol(t3, 0);
        if (!(a & 1)) return A0(t3, m2()), null;
        var c = ri(t3, a);
        if (t3.tag !== 0 && c === 2) {
          var r = Qg(t3);
          r !== 0 && (a = r, c = Vd(t3, r));
        }
        if (c === 1) throw c = oc, y8(t3, 0), d6(t3, a), A0(t3, m2()), c;
        if (c === 6) throw Error(n1(345));
        return t3.finishedWork = t3.current.alternate, t3.finishedLanes = a, H8(t3, B0, i5), A0(t3, m2()), null;
      }
      function ns(t3, a) {
        var c = T1;
        T1 |= 1;
        try {
          return t3(a);
        } finally {
          T1 = c, T1 === 0 && (M9 = m2() + 500, vi && y6());
        }
      }
      function F8(t3) {
        z6 !== null && z6.tag === 0 && !(T1 & 6) && d9();
        var a = T1;
        T1 |= 1;
        var c = w3.transition, r = W1;
        try {
          if (w3.transition = null, W1 = 1, t3) return t3();
        } finally {
          W1 = r, w3.transition = c, T1 = a, !(T1 & 6) && y6();
        }
      }
      function hs() {
        K0 = i9.current, a2(i9);
      }
      function y8(t3, a) {
        t3.finishedWork = null, t3.finishedLanes = 0;
        var c = t3.timeoutHandle;
        if (c !== -1 && (t3.timeoutHandle = -1, XY(c)), V2 !== null) for (c = V2.return; c !== null; ) {
          var r = c;
          switch (_d(r), r.tag) {
            case 1:
              r = r.type.childContextTypes, r != null && jl();
              break;
            case 3:
              m9(), a2(S0), a2(n0), Yd();
              break;
            case 5:
              Xd(r);
              break;
            case 4:
              m9();
              break;
            case 13:
              a2(n2);
              break;
            case 19:
              a2(n2);
              break;
            case 10:
              Ud(r.type._context);
              break;
            case 22:
            case 23:
              hs();
          }
          c = c.return;
        }
        if (F2 = t3, V2 = t3 = L6(t3.current, null), j2 = K0 = a, k2 = 0, oc = null, is = zi = b8 = 0, B0 = _a = null, w8 !== null) {
          for (a = 0; a < w8.length; a++) if (c = w8[a], r = c.interleaved, r !== null) {
            c.interleaved = null;
            var e = r.next, l = c.pending;
            if (l !== null) {
              var i10 = l.next;
              l.next = e, r.next = i10;
            }
            c.pending = r;
          }
          w8 = null;
        }
        return t3;
      }
      function wB(t3, a) {
        do {
          var c = V2;
          try {
            if (Nd(), kl.current = Jl, Yl) {
              for (var r = h2.memoizedState; r !== null; ) {
                var e = r.queue;
                e !== null && (e.pending = null), r = r.next;
              }
              Yl = false;
            }
            if (R8 = 0, b2 = S2 = h2 = null, Da = false, ec = 0, ls.current = null, c === null || c.return === null) {
              k2 = 1, oc = a, V2 = null;
              break;
            }
            t: {
              var l = t3, i10 = c.return, o = c, n = a;
              if (a = j2, o.flags |= 32768, n !== null && typeof n == "object" && typeof n.then == "function") {
                var h = n, v = o, g = v.tag;
                if (!(v.mode & 1) && (g === 0 || g === 11 || g === 15)) {
                  var s = v.alternate;
                  s ? (v.updateQueue = s.updateQueue, v.memoizedState = s.memoizedState, v.lanes = s.lanes) : (v.updateQueue = null, v.memoizedState = null);
                }
                var d = MV(i10);
                if (d !== null) {
                  d.flags &= -257, xV(d, i10, o, l, a), d.mode & 1 && fV(l, h, a), a = d, n = h;
                  var z = a.updateQueue;
                  if (z === null) {
                    var u = /* @__PURE__ */ new Set();
                    u.add(n), a.updateQueue = u;
                  } else z.add(n);
                  break t;
                } else {
                  if (!(a & 1)) {
                    fV(l, h, a), vs();
                    break t;
                  }
                  n = Error(n1(426));
                }
              } else if (l2 && o.mode & 1) {
                var f = MV(i10);
                if (f !== null) {
                  !(f.flags & 65536) && (f.flags |= 256), xV(f, i10, o, l, a), jd(f9(n, o));
                  break t;
                }
              }
              l = n = f9(n, o), k2 !== 4 && (k2 = 2), _a === null ? _a = [l] : _a.push(l), l = i10;
              do {
                switch (l.tag) {
                  case 3:
                    l.flags |= 65536, a &= -a, l.lanes |= a;
                    var p = nB(l, n, a);
                    gV(l, p);
                    break t;
                  case 1:
                    o = n;
                    var m = l.type, M = l.stateNode;
                    if (!(l.flags & 128) && (typeof m.getDerivedStateFromError == "function" || M !== null && typeof M.componentDidCatch == "function" && (x6 === null || !x6.has(M)))) {
                      l.flags |= 65536, a &= -a, l.lanes |= a;
                      var w = hB(l, o, a);
                      gV(l, w);
                      break t;
                    }
                }
                l = l.return;
              } while (l !== null);
            }
            SB(c);
          } catch (H) {
            a = H, V2 === c && c !== null && (V2 = c = c.return);
            continue;
          }
          break;
        } while (1);
      }
      function BB() {
        var t3 = ti.current;
        return ti.current = Jl, t3 === null ? Jl : t3;
      }
      function vs() {
        (k2 === 0 || k2 === 3 || k2 === 2) && (k2 = 4), F2 === null || !(b8 & 268435455) && !(zi & 268435455) || d6(F2, j2);
      }
      function ri(t3, a) {
        var c = T1;
        T1 |= 2;
        var r = BB();
        (F2 !== t3 || j2 !== a) && (i5 = null, y8(t3, a));
        do
          try {
            LJ();
            break;
          } catch (e) {
            wB(t3, e);
          }
        while (1);
        if (Nd(), T1 = c, ti.current = r, V2 !== null) throw Error(n1(261));
        return F2 = null, j2 = 0, k2;
      }
      function LJ() {
        for (; V2 !== null; ) yB(V2);
      }
      function HJ() {
        for (; V2 !== null && !QX(); ) yB(V2);
      }
      function yB(t3) {
        var a = AB(t3.alternate, t3, K0);
        t3.memoizedProps = t3.pendingProps, a === null ? SB(t3) : V2 = a, ls.current = null;
      }
      function SB(t3) {
        var a = t3;
        do {
          var c = a.alternate;
          if (t3 = a.return, a.flags & 32768) {
            if (c = pJ(c, a), c !== null) {
              c.flags &= 32767, V2 = c;
              return;
            }
            if (t3 !== null) t3.flags |= 32768, t3.subtreeFlags = 0, t3.deletions = null;
            else {
              k2 = 6, V2 = null;
              return;
            }
          } else if (c = uJ(c, a, K0), c !== null) {
            V2 = c;
            return;
          }
          if (a = a.sibling, a !== null) {
            V2 = a;
            return;
          }
          V2 = a = t3;
        } while (a !== null);
        k2 === 0 && (k2 = 5);
      }
      function H8(t3, a, c) {
        var r = W1, e = w3.transition;
        try {
          w3.transition = null, W1 = 1, VJ(t3, a, c, r);
        } finally {
          w3.transition = e, W1 = r;
        }
        return null;
      }
      function VJ(t3, a, c, r) {
        do
          d9();
        while (z6 !== null);
        if (T1 & 6) throw Error(n1(327));
        c = t3.finishedWork;
        var e = t3.finishedLanes;
        if (c === null) return null;
        if (t3.finishedWork = null, t3.finishedLanes = 0, c === t3.current) throw Error(n1(177));
        t3.callbackNode = null, t3.callbackPriority = 0;
        var l = c.lanes | c.childLanes;
        if (iY(t3, l), t3 === F2 && (V2 = F2 = null, j2 = 0), !(c.subtreeFlags & 2064) && !(c.flags & 2064) || Vl || (Vl = true, RB(Zl, function() {
          return d9(), null;
        })), l = (c.flags & 15990) !== 0, c.subtreeFlags & 15990 || l) {
          l = w3.transition, w3.transition = null;
          var i10 = W1;
          W1 = 1;
          var o = T1;
          T1 |= 4, ls.current = null, fJ(t3, c), LB(c, t3), NY(cd), El = !!ad, cd = ad = null, t3.current = c, MJ(c), XX(), T1 = o, W1 = i10, w3.transition = l;
        } else t3.current = c;
        if (Vl && (Vl = false, z6 = t3, ci = e), l = t3.pendingLanes, l === 0 && (x6 = null), tY(c.stateNode), A0(t3, m2()), a !== null) for (r = t3.onRecoverableError, c = 0; c < a.length; c++) e = a[c], r(e.value, { componentStack: e.stack, digest: e.digest });
        if (ai) throw ai = false, t3 = Ld, Ld = null, t3;
        return ci & 1 && t3.tag !== 0 && d9(), l = t3.pendingLanes, l & 1 ? t3 === Hd ? ja++ : (ja = 0, Hd = t3) : ja = 0, y6(), null;
      }
      function d9() {
        if (z6 !== null) {
          var t3 = ow(ci), a = w3.transition, c = W1;
          try {
            if (w3.transition = null, W1 = 16 > t3 ? 16 : t3, z6 === null) var r = false;
            else {
              if (t3 = z6, z6 = null, ci = 0, T1 & 6) throw Error(n1(331));
              var e = T1;
              for (T1 |= 4, p1 = t3.current; p1 !== null; ) {
                var l = p1, i10 = l.child;
                if (p1.flags & 16) {
                  var o = l.deletions;
                  if (o !== null) {
                    for (var n = 0; n < o.length; n++) {
                      var h = o[n];
                      for (p1 = h; p1 !== null; ) {
                        var v = p1;
                        switch (v.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Wa(8, v, l);
                        }
                        var g = v.child;
                        if (g !== null) g.return = v, p1 = g;
                        else for (; p1 !== null; ) {
                          v = p1;
                          var s = v.sibling, d = v.return;
                          if (MB(v), v === h) {
                            p1 = null;
                            break;
                          }
                          if (s !== null) {
                            s.return = d, p1 = s;
                            break;
                          }
                          p1 = d;
                        }
                      }
                    }
                    var z = l.alternate;
                    if (z !== null) {
                      var u = z.child;
                      if (u !== null) {
                        z.child = null;
                        do {
                          var f = u.sibling;
                          u.sibling = null, u = f;
                        } while (u !== null);
                      }
                    }
                    p1 = l;
                  }
                }
                if (l.subtreeFlags & 2064 && i10 !== null) i10.return = l, p1 = i10;
                else t: for (; p1 !== null; ) {
                  if (l = p1, l.flags & 2048) switch (l.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Wa(9, l, l.return);
                  }
                  var p = l.sibling;
                  if (p !== null) {
                    p.return = l.return, p1 = p;
                    break t;
                  }
                  p1 = l.return;
                }
              }
              var m = t3.current;
              for (p1 = m; p1 !== null; ) {
                i10 = p1;
                var M = i10.child;
                if (i10.subtreeFlags & 2064 && M !== null) M.return = i10, p1 = M;
                else t: for (i10 = m; p1 !== null; ) {
                  if (o = p1, o.flags & 2048) try {
                    switch (o.tag) {
                      case 0:
                      case 11:
                      case 15:
                        si(9, o);
                    }
                  } catch (H) {
                    d2(o, o.return, H);
                  }
                  if (o === i10) {
                    p1 = null;
                    break t;
                  }
                  var w = o.sibling;
                  if (w !== null) {
                    w.return = o.return, p1 = w;
                    break t;
                  }
                  p1 = o.return;
                }
              }
              if (T1 = e, y6(), V4 && typeof V4.onPostCommitFiberRoot == "function") try {
                V4.onPostCommitFiberRoot(li, t3);
              } catch (H) {
              }
              r = true;
            }
            return r;
          } finally {
            W1 = c, w3.transition = a;
          }
        }
        return false;
      }
      function FV(t3, a, c) {
        a = f9(c, a), a = nB(t3, a, 1), t3 = M6(t3, a, 1), a = M0(), t3 !== null && (nc(t3, 1, a), A0(t3, a));
      }
      function d2(t3, a, c) {
        if (t3.tag === 3) FV(t3, t3, c);
        else for (; a !== null; ) {
          if (a.tag === 3) {
            FV(a, t3, c);
            break;
          } else if (a.tag === 1) {
            var r = a.stateNode;
            if (typeof a.type.getDerivedStateFromError == "function" || typeof r.componentDidCatch == "function" && (x6 === null || !x6.has(r))) {
              t3 = f9(c, t3), t3 = hB(a, t3, 1), a = M6(a, t3, 1), t3 = M0(), a !== null && (nc(a, 1, t3), A0(a, t3));
              break;
            }
          }
          a = a.return;
        }
      }
      function wJ(t3, a, c) {
        var r = t3.pingCache;
        r !== null && r.delete(a), a = M0(), t3.pingedLanes |= t3.suspendedLanes & c, F2 === t3 && (j2 & c) === c && (k2 === 4 || k2 === 3 && (j2 & 130023424) === j2 && 500 > m2() - os ? y8(t3, 0) : is |= c), A0(t3, a);
      }
      function kB(t3, a) {
        a === 0 && (t3.mode & 1 ? (a = vl, vl <<= 1, !(vl & 130023424) && (vl = 4194304)) : a = 1);
        var c = M0();
        t3 = s5(t3, a), t3 !== null && (nc(t3, a, c), A0(t3, c));
      }
      function BJ(t3) {
        var a = t3.memoizedState, c = 0;
        a !== null && (c = a.retryLane), kB(t3, c);
      }
      function yJ(t3, a) {
        var c = 0;
        switch (t3.tag) {
          case 13:
            var r = t3.stateNode, e = t3.memoizedState;
            e !== null && (c = e.retryLane);
            break;
          case 19:
            r = t3.stateNode;
            break;
          default:
            throw Error(n1(314));
        }
        r !== null && r.delete(a), kB(t3, c);
      }
      var AB;
      AB = function(t3, a, c) {
        if (t3 !== null) if (t3.memoizedProps !== a.pendingProps || S0.current) y0 = true;
        else {
          if (!(t3.lanes & c) && !(a.flags & 128)) return y0 = false, zJ(t3, a, c);
          y0 = !!(t3.flags & 131072);
        }
        else y0 = false, l2 && a.flags & 1048576 && Fw(a, Ul, a.index);
        switch (a.lanes = 0, a.tag) {
          case 2:
            var r = a.type;
            Rl(t3, a), t3 = a.pendingProps;
            var e = z9(a, n0.current);
            g9(a, c), e = ts(null, a, r, t3, e, c);
            var l = as();
            return a.flags |= 1, typeof e == "object" && e !== null && typeof e.render == "function" && e.$$typeof === void 0 ? (a.tag = 1, a.memoizedState = null, a.updateQueue = null, k0(r) ? (l = true, ql(a)) : l = false, a.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null, $d(a), e.updater = gi, a.stateNode = e, e._reactInternals = a, gd(a, r, t3, c), a = zd(null, a, r, true, l, c)) : (a.tag = 0, l2 && l && Wd(a), f0(null, a, e, c), a = a.child), a;
          case 16:
            r = a.elementType;
            t: {
              switch (Rl(t3, a), t3 = a.pendingProps, e = r._init, r = e(r._payload), a.type = r, e = a.tag = kJ(r), t3 = j3(r, t3), e) {
                case 0:
                  a = sd(null, a, r, t3, c);
                  break t;
                case 1:
                  a = HV(null, a, r, t3, c);
                  break t;
                case 11:
                  a = CV(null, a, r, t3, c);
                  break t;
                case 14:
                  a = LV(null, a, r, j3(r.type, t3), c);
                  break t;
              }
              throw Error(n1(306, r, ""));
            }
            return a;
          case 0:
            return r = a.type, e = a.pendingProps, e = a.elementType === r ? e : j3(r, e), sd(t3, a, r, e, c);
          case 1:
            return r = a.type, e = a.pendingProps, e = a.elementType === r ? e : j3(r, e), HV(t3, a, r, e, c);
          case 3:
            t: {
              if (sB(a), t3 === null) throw Error(n1(387));
              r = a.pendingProps, l = a.memoizedState, e = l.element, Tw(t3, a), Ql(a, r, null, c);
              var i10 = a.memoizedState;
              if (r = i10.element, l.isDehydrated) if (l = { element: r, isDehydrated: false, cache: i10.cache, pendingSuspenseBoundaries: i10.pendingSuspenseBoundaries, transitions: i10.transitions }, a.updateQueue.baseState = l, a.memoizedState = l, a.flags & 256) {
                e = f9(Error(n1(423)), a), a = VV(t3, a, r, c, e);
                break t;
              } else if (r !== e) {
                e = f9(Error(n1(424)), a), a = VV(t3, a, r, c, e);
                break t;
              } else for ($0 = f6(a.stateNode.containerInfo.firstChild), Q0 = a, l2 = true, N3 = null, c = Dw(a, null, r, c), a.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
              else {
                if (u9(), r === e) {
                  a = z5(t3, a, c);
                  break t;
                }
                f0(t3, a, r, c);
              }
              a = a.child;
            }
            return a;
          case 5:
            return Ww(a), t3 === null && nd(a), r = a.type, e = a.pendingProps, l = t3 !== null ? t3.memoizedProps : null, i10 = e.children, rd(r, e) ? i10 = null : l !== null && rd(r, l) && (a.flags |= 32), dB(t3, a), f0(t3, a, i10, c), a.child;
          case 6:
            return t3 === null && nd(a), null;
          case 13:
            return zB(t3, a, c);
          case 4:
            return Qd(a, a.stateNode.containerInfo), r = a.pendingProps, t3 === null ? a.child = p9(a, null, r, c) : f0(t3, a, r, c), a.child;
          case 11:
            return r = a.type, e = a.pendingProps, e = a.elementType === r ? e : j3(r, e), CV(t3, a, r, e, c);
          case 7:
            return f0(t3, a, a.pendingProps, c), a.child;
          case 8:
            return f0(t3, a, a.pendingProps.children, c), a.child;
          case 12:
            return f0(t3, a, a.pendingProps.children, c), a.child;
          case 10:
            t: {
              if (r = a.type._context, e = a.pendingProps, l = a.memoizedProps, i10 = e.value, $1(Kl, r._currentValue), r._currentValue = i10, l !== null) if ($3(l.value, i10)) {
                if (l.children === e.children && !S0.current) {
                  a = z5(t3, a, c);
                  break t;
                }
              } else for (l = a.child, l !== null && (l.return = a); l !== null; ) {
                var o = l.dependencies;
                if (o !== null) {
                  i10 = l.child;
                  for (var n = o.firstContext; n !== null; ) {
                    if (n.context === r) {
                      if (l.tag === 1) {
                        n = v5(-1, c & -c), n.tag = 2;
                        var h = l.updateQueue;
                        if (h !== null) {
                          h = h.shared;
                          var v = h.pending;
                          v === null ? n.next = n : (n.next = v.next, v.next = n), h.pending = n;
                        }
                      }
                      l.lanes |= c, n = l.alternate, n !== null && (n.lanes |= c), hd(l.return, c, a), o.lanes |= c;
                      break;
                    }
                    n = n.next;
                  }
                } else if (l.tag === 10) i10 = l.type === a.type ? null : l.child;
                else if (l.tag === 18) {
                  if (i10 = l.return, i10 === null) throw Error(n1(341));
                  i10.lanes |= c, o = i10.alternate, o !== null && (o.lanes |= c), hd(i10, c, a), i10 = l.sibling;
                } else i10 = l.child;
                if (i10 !== null) i10.return = l;
                else for (i10 = l; i10 !== null; ) {
                  if (i10 === a) {
                    i10 = null;
                    break;
                  }
                  if (l = i10.sibling, l !== null) {
                    l.return = i10.return, i10 = l;
                    break;
                  }
                  i10 = i10.return;
                }
                l = i10;
              }
              f0(t3, a, e.children, c), a = a.child;
            }
            return a;
          case 9:
            return e = a.type, r = a.pendingProps.children, g9(a, c), e = B3(e), r = r(e), a.flags |= 1, f0(t3, a, r, c), a.child;
          case 14:
            return r = a.type, e = j3(r, a.pendingProps), e = j3(r.type, e), LV(t3, a, r, e, c);
          case 15:
            return vB(t3, a, a.type, a.pendingProps, c);
          case 17:
            return r = a.type, e = a.pendingProps, e = a.elementType === r ? e : j3(r, e), Rl(t3, a), a.tag = 1, k0(r) ? (t3 = true, ql(a)) : t3 = false, g9(a, c), Ow(a, r, e), gd(a, r, e, c), zd(null, a, r, true, t3, c);
          case 19:
            return uB(t3, a, c);
          case 22:
            return gB(t3, a, c);
        }
        throw Error(n1(156, a.tag));
      };
      function RB(t3, a) {
        return rw(t3, a);
      }
      function SJ(t3, a, c, r) {
        this.tag = t3, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = a, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
      }
      function V3(t3, a, c, r) {
        return new SJ(t3, a, c, r);
      }
      function gs(t3) {
        return t3 = t3.prototype, !(!t3 || !t3.isReactComponent);
      }
      function kJ(t3) {
        if (typeof t3 == "function") return gs(t3) ? 1 : 0;
        if (t3 != null) {
          if (t3 = t3.$$typeof, t3 === Ad) return 11;
          if (t3 === Rd) return 14;
        }
        return 2;
      }
      function L6(t3, a) {
        var c = t3.alternate;
        return c === null ? (c = V3(t3.tag, a, t3.key, t3.mode), c.elementType = t3.elementType, c.type = t3.type, c.stateNode = t3.stateNode, c.alternate = t3, t3.alternate = c) : (c.pendingProps = a, c.type = t3.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null), c.flags = t3.flags & 14680064, c.childLanes = t3.childLanes, c.lanes = t3.lanes, c.child = t3.child, c.memoizedProps = t3.memoizedProps, c.memoizedState = t3.memoizedState, c.updateQueue = t3.updateQueue, a = t3.dependencies, c.dependencies = a === null ? null : { lanes: a.lanes, firstContext: a.firstContext }, c.sibling = t3.sibling, c.index = t3.index, c.ref = t3.ref, c;
      }
      function Il(t3, a, c, r, e, l) {
        var i10 = 2;
        if (r = t3, typeof t3 == "function") gs(t3) && (i10 = 1);
        else if (typeof t3 == "string") i10 = 5;
        else t: switch (t3) {
          case Q7:
            return S8(c.children, e, l, a);
          case kd:
            i10 = 8, e |= 8;
            break;
          case Pg:
            return t3 = V3(12, c, a, e | 2), t3.elementType = Pg, t3.lanes = l, t3;
          case Gg:
            return t3 = V3(13, c, a, e), t3.elementType = Gg, t3.lanes = l, t3;
          case Tg:
            return t3 = V3(19, c, a, e), t3.elementType = Tg, t3.lanes = l, t3;
          case EV:
            return ui(c, e, l, a);
          default:
            if (typeof t3 == "object" && t3 !== null) switch (t3.$$typeof) {
              case ZV:
                i10 = 10;
                break t;
              case OV:
                i10 = 9;
                break t;
              case Ad:
                i10 = 11;
                break t;
              case Rd:
                i10 = 14;
                break t;
              case h6:
                i10 = 16, r = null;
                break t;
            }
            throw Error(n1(130, t3 == null ? t3 : typeof t3, ""));
        }
        return a = V3(i10, c, a, e), a.elementType = t3, a.type = r, a.lanes = l, a;
      }
      function S8(t3, a, c, r) {
        return t3 = V3(7, t3, r, a), t3.lanes = c, t3;
      }
      function ui(t3, a, c, r) {
        return t3 = V3(22, t3, r, a), t3.elementType = EV, t3.lanes = c, t3.stateNode = { isHidden: false }, t3;
      }
      function bg(t3, a, c) {
        return t3 = V3(6, t3, null, a), t3.lanes = c, t3;
      }
      function Fg(t3, a, c) {
        return a = V3(4, t3.children !== null ? t3.children : [], t3.key, a), a.lanes = c, a.stateNode = { containerInfo: t3.containerInfo, pendingChildren: null, implementation: t3.implementation }, a;
      }
      function AJ(t3, a, c, r, e) {
        this.tag = a, this.containerInfo = t3, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = pg(0), this.expirationTimes = pg(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = pg(0), this.identifierPrefix = r, this.onRecoverableError = e, this.mutableSourceEagerHydrationData = null;
      }
      function ds(t3, a, c, r, e, l, i10, o, n) {
        return t3 = new AJ(t3, a, c, o, n), a === 1 ? (a = 1, l === true && (a |= 8)) : a = 0, l = V3(3, null, null, a), t3.current = l, l.stateNode = t3, l.memoizedState = { element: r, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null }, $d(l), t3;
      }
      function RJ(t3, a, c) {
        var r = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return { $$typeof: $7, key: r == null ? null : "" + r, children: t3, containerInfo: a, implementation: c };
      }
      function bB(t3) {
        if (!t3) return V6;
        t3 = t3._reactInternals;
        t: {
          if (P8(t3) !== t3 || t3.tag !== 1) throw Error(n1(170));
          var a = t3;
          do {
            switch (a.tag) {
              case 3:
                a = a.stateNode.context;
                break t;
              case 1:
                if (k0(a.type)) {
                  a = a.stateNode.__reactInternalMemoizedMergedChildContext;
                  break t;
                }
            }
            a = a.return;
          } while (a !== null);
          throw Error(n1(171));
        }
        if (t3.tag === 1) {
          var c = t3.type;
          if (k0(c)) return Rw(t3, c, a);
        }
        return a;
      }
      function FB(t3, a, c, r, e, l, i10, o, n) {
        return t3 = ds(c, r, true, t3, e, l, i10, o, n), t3.context = bB(null), c = t3.current, r = M0(), e = C6(c), l = v5(r, e), l.callback = a != null ? a : null, M6(c, l, e), t3.current.lanes = e, nc(t3, e, r), A0(t3, r), t3;
      }
      function pi(t3, a, c, r) {
        var e = a.current, l = M0(), i10 = C6(e);
        return c = bB(c), a.context === null ? a.context = c : a.pendingContext = c, a = v5(l, i10), a.payload = { element: t3 }, r = r === void 0 ? null : r, r !== null && (a.callback = r), t3 = M6(e, a, i10), t3 !== null && (K3(t3, e, i10, l), Sl(t3, e, i10)), i10;
      }
      function ei(t3) {
        if (t3 = t3.current, !t3.child) return null;
        switch (t3.child.tag) {
          case 5:
            return t3.child.stateNode;
          default:
            return t3.child.stateNode;
        }
      }
      function IV(t3, a) {
        if (t3 = t3.memoizedState, t3 !== null && t3.dehydrated !== null) {
          var c = t3.retryLane;
          t3.retryLane = c !== 0 && c < a ? c : a;
        }
      }
      function ss(t3, a) {
        IV(t3, a), (t3 = t3.alternate) && IV(t3, a);
      }
      function bJ() {
        return null;
      }
      var IB = typeof reportError == "function" ? reportError : function(t3) {
        console.error(t3);
      };
      function zs(t3) {
        this._internalRoot = t3;
      }
      mi.prototype.render = zs.prototype.render = function(t3) {
        var a = this._internalRoot;
        if (a === null) throw Error(n1(409));
        pi(t3, a, null, null);
      };
      mi.prototype.unmount = zs.prototype.unmount = function() {
        var t3 = this._internalRoot;
        if (t3 !== null) {
          this._internalRoot = null;
          var a = t3.containerInfo;
          F8(function() {
            pi(null, t3, null, null);
          }), a[d5] = null;
        }
      };
      function mi(t3) {
        this._internalRoot = t3;
      }
      mi.prototype.unstable_scheduleHydration = function(t3) {
        if (t3) {
          var a = vw();
          t3 = { blockedOn: null, target: t3, priority: a };
          for (var c = 0; c < g6.length && a !== 0 && a < g6[c].priority; c++) ;
          g6.splice(c, 0, t3), c === 0 && dw(t3);
        }
      };
      function us(t3) {
        return !(!t3 || t3.nodeType !== 1 && t3.nodeType !== 9 && t3.nodeType !== 11);
      }
      function fi(t3) {
        return !(!t3 || t3.nodeType !== 1 && t3.nodeType !== 9 && t3.nodeType !== 11 && (t3.nodeType !== 8 || t3.nodeValue !== " react-mount-point-unstable "));
      }
      function PV() {
      }
      function FJ(t3, a, c, r, e) {
        if (e) {
          if (typeof r == "function") {
            var l = r;
            r = function() {
              var h = ei(i10);
              l.call(h);
            };
          }
          var i10 = FB(a, r, t3, 0, null, false, false, "", PV);
          return t3._reactRootContainer = i10, t3[d5] = i10.current, Ja(t3.nodeType === 8 ? t3.parentNode : t3), F8(), i10;
        }
        for (; e = t3.lastChild; ) t3.removeChild(e);
        if (typeof r == "function") {
          var o = r;
          r = function() {
            var h = ei(n);
            o.call(h);
          };
        }
        var n = ds(t3, 0, false, null, null, false, false, "", PV);
        return t3._reactRootContainer = n, t3[d5] = n.current, Ja(t3.nodeType === 8 ? t3.parentNode : t3), F8(function() {
          pi(a, n, c, r);
        }), n;
      }
      function Mi(t3, a, c, r, e) {
        var l = c._reactRootContainer;
        if (l) {
          var i10 = l;
          if (typeof e == "function") {
            var o = e;
            e = function() {
              var n = ei(i10);
              o.call(n);
            };
          }
          pi(a, i10, t3, e);
        } else i10 = FJ(c, a, t3, e, r);
        return ei(i10);
      }
      nw = function(t3) {
        switch (t3.tag) {
          case 3:
            var a = t3.stateNode;
            if (a.current.memoizedState.isDehydrated) {
              var c = Ia(a.pendingLanes);
              c !== 0 && (Id(a, c | 1), A0(a, m2()), !(T1 & 6) && (M9 = m2() + 500, y6()));
            }
            break;
          case 13:
            F8(function() {
              var r = s5(t3, 1);
              if (r !== null) {
                var e = M0();
                K3(r, t3, 1, e);
              }
            }), ss(t3, 1);
        }
      };
      Pd = function(t3) {
        if (t3.tag === 13) {
          var a = s5(t3, 134217728);
          if (a !== null) {
            var c = M0();
            K3(a, t3, 134217728, c);
          }
          ss(t3, 134217728);
        }
      };
      hw = function(t3) {
        if (t3.tag === 13) {
          var a = C6(t3), c = s5(t3, a);
          if (c !== null) {
            var r = M0();
            K3(c, t3, a, r);
          }
          ss(t3, a);
        }
      };
      vw = function() {
        return W1;
      };
      gw = function(t3, a) {
        var c = W1;
        try {
          return W1 = t3, a();
        } finally {
          W1 = c;
        }
      };
      Ug = function(t3, a, c) {
        switch (a) {
          case "input":
            if (Eg(t3, c), a = c.name, c.type === "radio" && a != null) {
              for (c = t3; c.parentNode; ) c = c.parentNode;
              for (c = c.querySelectorAll("input[name=" + JSON.stringify("" + a) + '][type="radio"]'), a = 0; a < c.length; a++) {
                var r = c[a];
                if (r !== t3 && r.form === t3.form) {
                  var e = hi(r);
                  if (!e) throw Error(n1(90));
                  WV(r), Eg(r, e);
                }
              }
            }
            break;
          case "textarea":
            jV(t3, c);
            break;
          case "select":
            a = c.value, a != null && o9(t3, !!c.multiple, a, false);
        }
      };
      XV = ns;
      YV = F8;
      var IJ = { usingClientEntryPoint: false, Events: [vc, t9, hi, $V, QV, ns] }, Aa = { findFiberByHostInstance: V8, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" }, PJ = { bundleType: Aa.bundleType, version: Aa.version, rendererPackageName: Aa.rendererPackageName, rendererConfig: Aa.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: u5.ReactCurrentDispatcher, findHostInstanceByFiber: function(t3) {
        return t3 = aw(t3), t3 === null ? null : t3.stateNode;
      }, findFiberByHostInstance: Aa.findFiberByHostInstance || bJ, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ != "undefined" && (Ra = __REACT_DEVTOOLS_GLOBAL_HOOK__, !Ra.isDisabled && Ra.supportsFiber)) try {
        li = Ra.inject(PJ), V4 = Ra;
      } catch (t3) {
      }
      var Ra;
      J0.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = IJ;
      J0.createPortal = function(t3, a) {
        var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
        if (!us(a)) throw Error(n1(200));
        return RJ(t3, a, null, c);
      };
      J0.createRoot = function(t3, a) {
        if (!us(t3)) throw Error(n1(299));
        var c = false, r = "", e = IB;
        return a != null && (a.unstable_strictMode === true && (c = true), a.identifierPrefix !== void 0 && (r = a.identifierPrefix), a.onRecoverableError !== void 0 && (e = a.onRecoverableError)), a = ds(t3, 1, false, null, null, c, false, r, e), t3[d5] = a.current, Ja(t3.nodeType === 8 ? t3.parentNode : t3), new zs(a);
      };
      J0.findDOMNode = function(t3) {
        if (t3 == null) return null;
        if (t3.nodeType === 1) return t3;
        var a = t3._reactInternals;
        if (a === void 0) throw typeof t3.render == "function" ? Error(n1(188)) : (t3 = Object.keys(t3).join(","), Error(n1(268, t3)));
        return t3 = aw(a), t3 = t3 === null ? null : t3.stateNode, t3;
      };
      J0.flushSync = function(t3) {
        return F8(t3);
      };
      J0.hydrate = function(t3, a, c) {
        if (!fi(a)) throw Error(n1(200));
        return Mi(null, t3, a, true, c);
      };
      J0.hydrateRoot = function(t3, a, c) {
        if (!us(t3)) throw Error(n1(405));
        var r = c != null && c.hydratedSources || null, e = false, l = "", i10 = IB;
        if (c != null && (c.unstable_strictMode === true && (e = true), c.identifierPrefix !== void 0 && (l = c.identifierPrefix), c.onRecoverableError !== void 0 && (i10 = c.onRecoverableError)), a = FB(a, null, t3, 1, c != null ? c : null, e, false, l, i10), t3[d5] = a.current, Ja(t3), r) for (t3 = 0; t3 < r.length; t3++) c = r[t3], e = c._getVersion, e = e(c._source), a.mutableSourceEagerHydrationData == null ? a.mutableSourceEagerHydrationData = [c, e] : a.mutableSourceEagerHydrationData.push(c, e);
        return new mi(a);
      };
      J0.render = function(t3, a, c) {
        if (!fi(a)) throw Error(n1(200));
        return Mi(null, t3, a, false, c);
      };
      J0.unmountComponentAtNode = function(t3) {
        if (!fi(t3)) throw Error(n1(40));
        return t3._reactRootContainer ? (F8(function() {
          Mi(null, null, t3, false, function() {
            t3._reactRootContainer = null, t3[d5] = null;
          });
        }), true) : false;
      };
      J0.unstable_batchedUpdates = ns;
      J0.unstable_renderSubtreeIntoContainer = function(t3, a, c, r) {
        if (!fi(c)) throw Error(n1(200));
        if (t3 == null || t3._reactInternals === void 0) throw Error(n1(38));
        return Mi(t3, a, c, false, r);
      };
      J0.version = "18.2.0-next-9e3b772b8-20220608";
    });
    var B4 = L1((Fz1, TB) => {
      function GB() {
        if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ == "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(GB);
        } catch (t2) {
          console.error(t2);
        }
      }
      GB(), TB.exports = PB();
    });
    function GJ(t2) {
      let [, a] = (0, Q3.useState)(0);
      return (0, Q3.useCallback)(() => {
        a((r) => r + 1);
      }, []);
    }
    function v1(t2, a, c) {
      let r = (0, Q3.useCallback)(t2, a), e = (0, Q3.useRef)(null);
      e.current ? e.current.set(r) : e.current = new H9.Atom(r);
      let l = (0, Q3.useRef)(null);
      return l.current || (l.current = (0, H9.prism)(() => e.current.prism.getValue()())), G8(l.current, c);
    }
    function OJ() {
      ps || (ps = true, (0, EB.default)(() => {
        (0, DB.unstable_batchedUpdates)(function() {
          var a, c;
          for (; y4.length > 0; ) {
            let r = y4.shift();
            dc.delete(r);
            let e;
            L9 && ((a = r.debug) == null || a.history.push("queue reached"));
            try {
              e = r.der.getValue();
            } catch (l) {
              L9 && ((c = r.debug) == null || c.history.push("queue: der.getValue() errored")), console.error("A `der.getValue()` in `usePrismInstance(der)` threw an error. This may be a zombie child issue, so we're gonna try to get its value again in a normal react render phase.If you see the same error again, then you either have an error in your prism code, or the deps array in `usePrism(fn, deps)` is missing a dependency and causing the prism to read stale values."), console.error(l), r.runUpdate();
              continue;
            }
            e !== r.lastValue && (r.lastValue = e, r.runUpdate());
          }
          ps = false;
        }, 1);
      }));
    }
    function G8(t2, a) {
      var l;
      let c = GJ(), r = (0, Q3.useRef)(void 0);
      r.current || (ZB++, r.current = { order: ZB, runUpdate: () => {
        r.current.unmounted || c();
      }, der: t2, lastValue: void 0, unmounted: false, queueUpdate: () => {
        var i5;
        L9 && ((i5 = r.current.debug) == null || i5.history.push("queueUpdate()")), TJ(r.current);
      }, untap: t2.onStale(() => {
        L9 && r.current.debug.history.push("onStale(cb)"), r.current.queueUpdate();
      }) }, L9 && (r.current.debug = { label: a, traceOfFirstTimeRender: new Error(), history: [] })), (0, Q3.useLayoutEffect)(() => function() {
        r.current.unmounted = true, r.current.untap(), OB(r.current);
      }, []), OB(r.current);
      let e = r.current.der.getValue();
      return r.current.lastValue = e, L9 && ((l = r.current.debug) == null || l.history.push("rendered")), e;
    }
    var H9, EB, Q3, DB, L9, s1, ZB, y4, dc, ps, TJ, ZJ, OB, M1 = x(() => {
      H9 = requireDist$2();
      H2();
      EB = I(lH()), Q3 = I(G()), DB = I(B4()), L9 = false;
      s1 = (t2, a) => v1(() => (0, H9.val)(t2), [t2], a), ZB = 0, y4 = [], dc = /* @__PURE__ */ new Set(), ps = false, TJ = (t2) => {
        ZJ(t2), OJ();
      }, ZJ = (t2) => {
        if (!dc.has(t2)) if (dc.add(t2), y4.length === 0) y4.push(t2);
        else {
          let a = $e(y4, (c) => c.order >= t2.order);
          a === -1 ? y4.push(t2) : y4[a].order > t2.order && y4.splice(a, 0, t2);
        }
      }, OB = (t2) => {
        if (!dc.has(t2)) return;
        dc.delete(t2);
        let a = $e(y4, (c) => c === t2);
        y4.splice(a, 1);
      };
    });
    var UB = L1((q1) => {
      var xi = 60103, Ci = 60106, sc = 60107, zc = 60108, uc = 60114, pc = 60109, mc = 60110, fc = 60112, Mc = 60113, ms = 60120, xc = 60115, Cc = 60116, WB = 60121, _B = 60122, jB = 60117, qB = 60129, NB = 60131;
      typeof Symbol == "function" && Symbol.for && (I2 = Symbol.for, xi = I2("react.element"), Ci = I2("react.portal"), sc = I2("react.fragment"), zc = I2("react.strict_mode"), uc = I2("react.profiler"), pc = I2("react.provider"), mc = I2("react.context"), fc = I2("react.forward_ref"), Mc = I2("react.suspense"), ms = I2("react.suspense_list"), xc = I2("react.memo"), Cc = I2("react.lazy"), WB = I2("react.block"), _B = I2("react.server.block"), jB = I2("react.fundamental"), qB = I2("react.debug_trace_mode"), NB = I2("react.legacy_hidden"));
      var I2;
      function X3(t2) {
        if (typeof t2 == "object" && t2 !== null) {
          var a = t2.$$typeof;
          switch (a) {
            case xi:
              switch (t2 = t2.type, t2) {
                case sc:
                case uc:
                case zc:
                case Mc:
                case ms:
                  return t2;
                default:
                  switch (t2 = t2 && t2.$$typeof, t2) {
                    case mc:
                    case fc:
                    case Cc:
                    case xc:
                    case pc:
                      return t2;
                    default:
                      return a;
                  }
              }
            case Ci:
              return a;
          }
        }
      }
      var EJ = pc, DJ = xi, WJ = fc, _J = sc, jJ = Cc, qJ = xc, NJ = Ci, UJ = uc, KJ = zc, $J = Mc;
      q1.ContextConsumer = mc;
      q1.ContextProvider = EJ;
      q1.Element = DJ;
      q1.ForwardRef = WJ;
      q1.Fragment = _J;
      q1.Lazy = jJ;
      q1.Memo = qJ;
      q1.Portal = NJ;
      q1.Profiler = UJ;
      q1.StrictMode = KJ;
      q1.Suspense = $J;
      q1.isAsyncMode = function() {
        return false;
      };
      q1.isConcurrentMode = function() {
        return false;
      };
      q1.isContextConsumer = function(t2) {
        return X3(t2) === mc;
      };
      q1.isContextProvider = function(t2) {
        return X3(t2) === pc;
      };
      q1.isElement = function(t2) {
        return typeof t2 == "object" && t2 !== null && t2.$$typeof === xi;
      };
      q1.isForwardRef = function(t2) {
        return X3(t2) === fc;
      };
      q1.isFragment = function(t2) {
        return X3(t2) === sc;
      };
      q1.isLazy = function(t2) {
        return X3(t2) === Cc;
      };
      q1.isMemo = function(t2) {
        return X3(t2) === xc;
      };
      q1.isPortal = function(t2) {
        return X3(t2) === Ci;
      };
      q1.isProfiler = function(t2) {
        return X3(t2) === uc;
      };
      q1.isStrictMode = function(t2) {
        return X3(t2) === zc;
      };
      q1.isSuspense = function(t2) {
        return X3(t2) === Mc;
      };
      q1.isValidElementType = function(t2) {
        return typeof t2 == "string" || typeof t2 == "function" || t2 === sc || t2 === uc || t2 === qB || t2 === zc || t2 === Mc || t2 === ms || t2 === NB || typeof t2 == "object" && t2 !== null && (t2.$$typeof === Cc || t2.$$typeof === xc || t2.$$typeof === pc || t2.$$typeof === mc || t2.$$typeof === fc || t2.$$typeof === jB || t2.$$typeof === WB || t2[0] === _B);
      };
      q1.typeOf = X3;
    });
    var $B = L1((Tz1, KB) => {
      KB.exports = UB();
    });
    var fs = L1((Zz1, QB) => {
      QB.exports = function(a, c, r, e) {
        var l = r ? r.call(e, a, c) : void 0;
        if (l !== void 0) return !!l;
        if (a === c) return true;
        if (typeof a != "object" || !a || typeof c != "object" || !c) return false;
        var i5 = Object.keys(a), o = Object.keys(c);
        if (i5.length !== o.length) return false;
        for (var n = Object.prototype.hasOwnProperty.bind(c), h = 0; h < i5.length; h++) {
          var v = i5[h];
          if (!n(v)) return false;
          var g = a[v], s = c[v];
          if (l = r ? r.call(e, g, s, v) : void 0, l === false || l === void 0 && g !== s) return false;
        }
        return true;
      };
    });
    function QJ(t2) {
      function a(X, $, o1, u1, N) {
        for (var x1 = 0, i1 = 0, B1 = 0, k1 = 0, A1, L, Y = 0, Q = 0, b, R = b = A1 = 0, O = 0, t1 = 0, r1 = 0, q = 0, h1 = o1.length, d1 = h1 - 1, l1, e1 = "", w1 = "", R1 = "", a0 = "", V0; O < h1; ) {
          if (L = o1.charCodeAt(O), O === d1 && i1 + k1 + B1 + x1 !== 0 && (i1 !== 0 && (L = i1 === 47 ? 10 : 47), k1 = B1 = x1 = 0, h1++, d1++), i1 + k1 + B1 + x1 === 0) {
            if (O === d1 && (0 < t1 && (e1 = e1.replace(s, "")), 0 < e1.trim().length)) {
              switch (L) {
                case 32:
                case 9:
                case 59:
                case 13:
                case 10:
                  break;
                default:
                  e1 += o1.charAt(O);
              }
              L = 59;
            }
            switch (L) {
              case 123:
                for (e1 = e1.trim(), A1 = e1.charCodeAt(0), b = 1, q = ++O; O < h1; ) {
                  switch (L = o1.charCodeAt(O)) {
                    case 123:
                      b++;
                      break;
                    case 125:
                      b--;
                      break;
                    case 47:
                      switch (L = o1.charCodeAt(O + 1)) {
                        case 42:
                        case 47:
                          t: {
                            for (R = O + 1; R < d1; ++R) switch (o1.charCodeAt(R)) {
                              case 47:
                                if (L === 42 && o1.charCodeAt(R - 1) === 42 && O + 2 !== R) {
                                  O = R + 1;
                                  break t;
                                }
                                break;
                              case 10:
                                if (L === 47) {
                                  O = R + 1;
                                  break t;
                                }
                            }
                            O = R;
                          }
                      }
                      break;
                    case 91:
                      L++;
                    case 40:
                      L++;
                    case 34:
                    case 39:
                      for (; O++ < d1 && o1.charCodeAt(O) !== L; ) ;
                  }
                  if (b === 0) break;
                  O++;
                }
                switch (b = o1.substring(q, O), A1 === 0 && (A1 = (e1 = e1.replace(g, "").trim()).charCodeAt(0)), A1) {
                  case 64:
                    switch (0 < t1 && (e1 = e1.replace(s, "")), L = e1.charCodeAt(1), L) {
                      case 100:
                      case 109:
                      case 115:
                      case 45:
                        t1 = $;
                        break;
                      default:
                        t1 = K;
                    }
                    if (b = a($, t1, b, L, N + 1), q = b.length, 0 < J && (t1 = c(K, e1, r1), V0 = o(3, b, t1, $, E, C, q, L, N, u1), e1 = t1.join(""), V0 !== void 0 && (q = (b = V0.trim()).length) === 0 && (L = 0, b = "")), 0 < q) switch (L) {
                      case 115:
                        e1 = e1.replace(y, i5);
                      case 100:
                      case 109:
                      case 45:
                        b = e1 + "{" + b + "}";
                        break;
                      case 107:
                        e1 = e1.replace(m, "$1 $2"), b = e1 + "{" + b + "}", b = j === 1 || j === 2 && l("@" + b, 3) ? "@-webkit-" + b + "@" + b : "@" + b;
                        break;
                      default:
                        b = e1 + b, u1 === 112 && (b = (w1 += b, ""));
                    }
                    else b = "";
                    break;
                  default:
                    b = a($, c($, e1, r1), b, u1, N + 1);
                }
                R1 += b, b = r1 = t1 = R = A1 = 0, e1 = "", L = o1.charCodeAt(++O);
                break;
              case 125:
              case 59:
                if (e1 = (0 < t1 ? e1.replace(s, "") : e1).trim(), 1 < (q = e1.length)) switch (R === 0 && (A1 = e1.charCodeAt(0), A1 === 45 || 96 < A1 && 123 > A1) && (q = (e1 = e1.replace(" ", ":")).length), 0 < J && (V0 = o(1, e1, $, X, E, C, w1.length, u1, N, u1)) !== void 0 && (q = (e1 = V0.trim()).length) === 0 && (e1 = "\0\0"), A1 = e1.charCodeAt(0), L = e1.charCodeAt(1), A1) {
                  case 0:
                    break;
                  case 64:
                    if (L === 105 || L === 99) {
                      a0 += e1 + o1.charAt(O);
                      break;
                    }
                  default:
                    e1.charCodeAt(q - 1) !== 58 && (w1 += e(e1, A1, L, e1.charCodeAt(2)));
                }
                r1 = t1 = R = A1 = 0, e1 = "", L = o1.charCodeAt(++O);
            }
          }
          switch (L) {
            case 13:
            case 10:
              i1 === 47 ? i1 = 0 : 1 + A1 === 0 && u1 !== 107 && 0 < e1.length && (t1 = 1, e1 += "\0"), 0 < J * _ && o(0, e1, $, X, E, C, w1.length, u1, N, u1), C = 1, E++;
              break;
            case 59:
            case 125:
              if (i1 + k1 + B1 + x1 === 0) {
                C++;
                break;
              }
            default:
              switch (C++, l1 = o1.charAt(O), L) {
                case 9:
                case 32:
                  if (k1 + x1 + i1 === 0) switch (Y) {
                    case 44:
                    case 58:
                    case 9:
                    case 32:
                      l1 = "";
                      break;
                    default:
                      L !== 32 && (l1 = " ");
                  }
                  break;
                case 0:
                  l1 = "\\0";
                  break;
                case 12:
                  l1 = "\\f";
                  break;
                case 11:
                  l1 = "\\v";
                  break;
                case 38:
                  k1 + i1 + x1 === 0 && (t1 = r1 = 1, l1 = "\f" + l1);
                  break;
                case 108:
                  if (k1 + i1 + x1 + a1 === 0 && 0 < R) switch (O - R) {
                    case 2:
                      Y === 112 && o1.charCodeAt(O - 3) === 58 && (a1 = Y);
                    case 8:
                      Q === 111 && (a1 = Q);
                  }
                  break;
                case 58:
                  k1 + i1 + x1 === 0 && (R = O);
                  break;
                case 44:
                  i1 + B1 + k1 + x1 === 0 && (t1 = 1, l1 += "\r");
                  break;
                case 34:
                case 39:
                  i1 === 0 && (k1 = k1 === L ? 0 : k1 === 0 ? L : k1);
                  break;
                case 91:
                  k1 + i1 + B1 === 0 && x1++;
                  break;
                case 93:
                  k1 + i1 + B1 === 0 && x1--;
                  break;
                case 41:
                  k1 + i1 + x1 === 0 && B1--;
                  break;
                case 40:
                  if (k1 + i1 + x1 === 0) {
                    if (A1 === 0) switch (2 * Y + 3 * Q) {
                      case 533:
                        break;
                      default:
                        A1 = 1;
                    }
                    B1++;
                  }
                  break;
                case 64:
                  i1 + B1 + k1 + x1 + R + b === 0 && (b = 1);
                  break;
                case 42:
                case 47:
                  if (!(0 < k1 + x1 + B1)) switch (i1) {
                    case 0:
                      switch (2 * L + 3 * o1.charCodeAt(O + 1)) {
                        case 235:
                          i1 = 47;
                          break;
                        case 220:
                          q = O, i1 = 42;
                      }
                      break;
                    case 42:
                      L === 47 && Y === 42 && q + 2 !== O && (o1.charCodeAt(q + 2) === 33 && (w1 += o1.substring(q, O + 1)), l1 = "", i1 = 0);
                  }
              }
              i1 === 0 && (e1 += l1);
          }
          Q = Y, Y = L, O++;
        }
        if (q = w1.length, 0 < q) {
          if (t1 = $, 0 < J && (V0 = o(2, w1, t1, X, E, C, q, u1, N, u1), V0 !== void 0 && (w1 = V0).length === 0)) return a0 + w1 + R1;
          if (w1 = t1.join(",") + "{" + w1 + "}", j * a1 !== 0) {
            switch (j !== 2 || l(w1, 2) || (a1 = 0), a1) {
              case 111:
                w1 = w1.replace(w, ":-moz-$1") + w1;
                break;
              case 112:
                w1 = w1.replace(M, "::-webkit-input-$1") + w1.replace(M, "::-moz-$1") + w1.replace(M, ":-ms-input-$1") + w1;
            }
            a1 = 0;
          }
        }
        return a0 + w1 + R1;
      }
      function c(X, $, o1) {
        var u1 = $.trim().split(f);
        $ = u1;
        var N = u1.length, x1 = X.length;
        switch (x1) {
          case 0:
          case 1:
            var i1 = 0;
            for (X = x1 === 0 ? "" : X[0] + " "; i1 < N; ++i1) $[i1] = r(X, $[i1], o1).trim();
            break;
          default:
            var B1 = i1 = 0;
            for ($ = []; i1 < N; ++i1) for (var k1 = 0; k1 < x1; ++k1) $[B1++] = r(X[k1] + " ", u1[i1], o1).trim();
        }
        return $;
      }
      function r(X, $, o1) {
        var u1 = $.charCodeAt(0);
        switch (33 > u1 && (u1 = ($ = $.trim()).charCodeAt(0)), u1) {
          case 38:
            return $.replace(p, "$1" + X.trim());
          case 58:
            return X.trim() + $.replace(p, "$1" + X.trim());
          default:
            if (0 < 1 * o1 && 0 < $.indexOf("\f")) return $.replace(p, (X.charCodeAt(0) === 58 ? "" : "$1") + X.trim());
        }
        return X + $;
      }
      function e(X, $, o1, u1) {
        var N = X + ";", x1 = 2 * $ + 3 * o1 + 4 * u1;
        if (x1 === 944) {
          X = N.indexOf(":", 9) + 1;
          var i1 = N.substring(X, N.length - 1).trim();
          return i1 = N.substring(0, X).trim() + i1 + ";", j === 1 || j === 2 && l(i1, 1) ? "-webkit-" + i1 + i1 : i1;
        }
        if (j === 0 || j === 2 && !l(N, 1)) return N;
        switch (x1) {
          case 1015:
            return N.charCodeAt(10) === 97 ? "-webkit-" + N + N : N;
          case 951:
            return N.charCodeAt(3) === 116 ? "-webkit-" + N + N : N;
          case 963:
            return N.charCodeAt(5) === 110 ? "-webkit-" + N + N : N;
          case 1009:
            if (N.charCodeAt(4) !== 100) break;
          case 969:
          case 942:
            return "-webkit-" + N + N;
          case 978:
            return "-webkit-" + N + "-moz-" + N + N;
          case 1019:
          case 983:
            return "-webkit-" + N + "-moz-" + N + "-ms-" + N + N;
          case 883:
            if (N.charCodeAt(8) === 45) return "-webkit-" + N + N;
            if (0 < N.indexOf("image-set(", 11)) return N.replace(P, "$1-webkit-$2") + N;
            break;
          case 932:
            if (N.charCodeAt(4) === 45) switch (N.charCodeAt(5)) {
              case 103:
                return "-webkit-box-" + N.replace("-grow", "") + "-webkit-" + N + "-ms-" + N.replace("grow", "positive") + N;
              case 115:
                return "-webkit-" + N + "-ms-" + N.replace("shrink", "negative") + N;
              case 98:
                return "-webkit-" + N + "-ms-" + N.replace("basis", "preferred-size") + N;
            }
            return "-webkit-" + N + "-ms-" + N + N;
          case 964:
            return "-webkit-" + N + "-ms-flex-" + N + N;
          case 1023:
            if (N.charCodeAt(8) !== 99) break;
            return i1 = N.substring(N.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify"), "-webkit-box-pack" + i1 + "-webkit-" + N + "-ms-flex-pack" + i1 + N;
          case 1005:
            return z.test(N) ? N.replace(d, ":-webkit-") + N.replace(d, ":-moz-") + N : N;
          case 1e3:
            switch (i1 = N.substring(13).trim(), $ = i1.indexOf("-") + 1, i1.charCodeAt(0) + i1.charCodeAt($)) {
              case 226:
                i1 = N.replace(H, "tb");
                break;
              case 232:
                i1 = N.replace(H, "tb-rl");
                break;
              case 220:
                i1 = N.replace(H, "lr");
                break;
              default:
                return N;
            }
            return "-webkit-" + N + "-ms-" + i1 + N;
          case 1017:
            if (N.indexOf("sticky", 9) === -1) break;
          case 975:
            switch ($ = (N = X).length - 10, i1 = (N.charCodeAt($) === 33 ? N.substring(0, $) : N).substring(X.indexOf(":", 7) + 1).trim(), x1 = i1.charCodeAt(0) + (i1.charCodeAt(7) | 0)) {
              case 203:
                if (111 > i1.charCodeAt(8)) break;
              case 115:
                N = N.replace(i1, "-webkit-" + i1) + ";" + N;
                break;
              case 207:
              case 102:
                N = N.replace(i1, "-webkit-" + (102 < x1 ? "inline-" : "") + "box") + ";" + N.replace(i1, "-webkit-" + i1) + ";" + N.replace(i1, "-ms-" + i1 + "box") + ";" + N;
            }
            return N + ";";
          case 938:
            if (N.charCodeAt(5) === 45) switch (N.charCodeAt(6)) {
              case 105:
                return i1 = N.replace("-items", ""), "-webkit-" + N + "-webkit-box-" + i1 + "-ms-flex-" + i1 + N;
              case 115:
                return "-webkit-" + N + "-ms-flex-item-" + N.replace(F, "") + N;
              default:
                return "-webkit-" + N + "-ms-flex-line-pack" + N.replace("align-content", "").replace(F, "") + N;
            }
            break;
          case 973:
          case 989:
            if (N.charCodeAt(3) !== 45 || N.charCodeAt(4) === 122) break;
          case 931:
          case 953:
            if (A.test(X) === true) return (i1 = X.substring(X.indexOf(":") + 1)).charCodeAt(0) === 115 ? e(X.replace("stretch", "fill-available"), $, o1, u1).replace(":fill-available", ":stretch") : N.replace(i1, "-webkit-" + i1) + N.replace(i1, "-moz-" + i1.replace("fill-", "")) + N;
            break;
          case 962:
            if (N = "-webkit-" + N + (N.charCodeAt(5) === 102 ? "-ms-" + N : "") + N, o1 + u1 === 211 && N.charCodeAt(13) === 105 && 0 < N.indexOf("transform", 10)) return N.substring(0, N.indexOf(";", 27) + 1).replace(u, "$1-webkit-$2") + N;
        }
        return N;
      }
      function l(X, $) {
        var o1 = X.indexOf($ === 1 ? ":" : "{"), u1 = X.substring(0, $ !== 3 ? o1 : 10);
        return o1 = X.substring(o1 + 1, X.length - 1), W($ !== 2 ? u1 : u1.replace(U, "$1"), o1, $);
      }
      function i5(X, $) {
        var o1 = e($, $.charCodeAt(0), $.charCodeAt(1), $.charCodeAt(2));
        return o1 !== $ + ";" ? o1.replace(k, " or ($1)").substring(4) : "(" + $ + ")";
      }
      function o(X, $, o1, u1, N, x1, i1, B1, k1, A1) {
        for (var L = 0, Y = $, Q; L < J; ++L) switch (Q = Z[L].call(v, X, Y, o1, u1, N, x1, i1, B1, k1, A1)) {
          case void 0:
          case false:
          case true:
          case null:
            break;
          default:
            Y = Q;
        }
        if (Y !== $) return Y;
      }
      function n(X) {
        switch (X) {
          case void 0:
          case null:
            J = Z.length = 0;
            break;
          default:
            if (typeof X == "function") Z[J++] = X;
            else if (typeof X == "object") for (var $ = 0, o1 = X.length; $ < o1; ++$) n(X[$]);
            else _ = !!X | 0;
        }
        return n;
      }
      function h(X) {
        return X = X.prefix, X !== void 0 && (W = null, X ? typeof X != "function" ? j = 1 : (j = 2, W = X) : j = 0), h;
      }
      function v(X, $) {
        var o1 = X;
        if (33 > o1.charCodeAt(0) && (o1 = o1.trim()), g1 = o1, o1 = [g1], 0 < J) {
          var u1 = o(-1, $, o1, o1, E, C, 0, 0, 0, 0);
          u1 !== void 0 && typeof u1 == "string" && ($ = u1);
        }
        var N = a(K, o1, $, 0, 0);
        return 0 < J && (u1 = o(-2, N, o1, o1, E, C, N.length, 0, 0, 0), u1 !== void 0 && (N = u1)), g1 = "", a1 = 0, C = E = 1, N;
      }
      var g = /^\0+/g, s = /[\0\r\f]/g, d = /: */g, z = /zoo|gra/, u = /([,: ])(transform)/g, f = /,\r+?/g, p = /([\t\r\n ])*\f?&/g, m = /@(k\w+)\s*(\S*)\s*/, M = /::(place)/g, w = /:(read-only)/g, H = /[svh]\w+-[tblr]{2}/, y = /\(\s*(.*)\s*\)/g, k = /([\s\S]*?);/g, F = /-self|flex-/g, U = /[^]*?(:[rp][el]a[\w-]+)[^]*/, A = /stretch|:\s*\w+\-(?:conte|avail)/, P = /([^-])(image-set\()/, C = 1, E = 1, a1 = 0, j = 1, K = [], Z = [], J = 0, W = null, _ = 0, g1 = "";
      return v.use = n, v.set = h, t2 !== void 0 && h(t2), v;
    }
    var XB, YB = x(() => {
      XB = QJ;
    });
    var XJ, JB, ty = x(() => {
      XJ = { animationIterationCount: 1, borderImageOutset: 1, borderImageSlice: 1, borderImageWidth: 1, boxFlex: 1, boxFlexGroup: 1, boxOrdinalGroup: 1, columnCount: 1, columns: 1, flex: 1, flexGrow: 1, flexPositive: 1, flexShrink: 1, flexNegative: 1, flexOrder: 1, gridRow: 1, gridRowEnd: 1, gridRowSpan: 1, gridRowStart: 1, gridColumn: 1, gridColumnEnd: 1, gridColumnSpan: 1, gridColumnStart: 1, msGridRow: 1, msGridRowSpan: 1, msGridColumn: 1, msGridColumnSpan: 1, fontWeight: 1, lineHeight: 1, opacity: 1, order: 1, orphans: 1, tabSize: 1, widows: 1, zIndex: 1, zoom: 1, WebkitLineClamp: 1, fillOpacity: 1, floodOpacity: 1, stopOpacity: 1, strokeDasharray: 1, strokeDashoffset: 1, strokeMiterlimit: 1, strokeOpacity: 1, strokeWidth: 1 }, JB = XJ;
    });
    function YJ(t2) {
      var a = /* @__PURE__ */ Object.create(null);
      return function(c) {
        return a[c] === void 0 && (a[c] = t2(c)), a[c];
      };
    }
    var ay, cy = x(() => {
      ay = YJ;
    });
    var JJ, t11, Ms, ry = x(() => {
      cy();
      JJ = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/, t11 = ay(function(t2) {
        return JJ.test(t2) || t2.charCodeAt(0) === 111 && t2.charCodeAt(1) === 110 && t2.charCodeAt(2) < 91;
      }), Ms = t11;
    });
    var ly = L1((_1) => {
      var P2 = typeof Symbol == "function" && Symbol.for, xs = P2 ? Symbol.for("react.element") : 60103, Cs = P2 ? Symbol.for("react.portal") : 60106, Li = P2 ? Symbol.for("react.fragment") : 60107, Hi = P2 ? Symbol.for("react.strict_mode") : 60108, Vi = P2 ? Symbol.for("react.profiler") : 60114, wi = P2 ? Symbol.for("react.provider") : 60109, Bi = P2 ? Symbol.for("react.context") : 60110, Ls = P2 ? Symbol.for("react.async_mode") : 60111, yi = P2 ? Symbol.for("react.concurrent_mode") : 60111, Si = P2 ? Symbol.for("react.forward_ref") : 60112, ki = P2 ? Symbol.for("react.suspense") : 60113, a11 = P2 ? Symbol.for("react.suspense_list") : 60120, Ai = P2 ? Symbol.for("react.memo") : 60115, Ri = P2 ? Symbol.for("react.lazy") : 60116, c11 = P2 ? Symbol.for("react.block") : 60121, r11 = P2 ? Symbol.for("react.fundamental") : 60117, e11 = P2 ? Symbol.for("react.responder") : 60118, l11 = P2 ? Symbol.for("react.scope") : 60119;
      function t3(t2) {
        if (typeof t2 == "object" && t2 !== null) {
          var a = t2.$$typeof;
          switch (a) {
            case xs:
              switch (t2 = t2.type, t2) {
                case Ls:
                case yi:
                case Li:
                case Vi:
                case Hi:
                case ki:
                  return t2;
                default:
                  switch (t2 = t2 && t2.$$typeof, t2) {
                    case Bi:
                    case Si:
                    case Ri:
                    case Ai:
                    case wi:
                      return t2;
                    default:
                      return a;
                  }
              }
            case Cs:
              return a;
          }
        }
      }
      function ey(t2) {
        return t3(t2) === yi;
      }
      _1.AsyncMode = Ls;
      _1.ConcurrentMode = yi;
      _1.ContextConsumer = Bi;
      _1.ContextProvider = wi;
      _1.Element = xs;
      _1.ForwardRef = Si;
      _1.Fragment = Li;
      _1.Lazy = Ri;
      _1.Memo = Ai;
      _1.Portal = Cs;
      _1.Profiler = Vi;
      _1.StrictMode = Hi;
      _1.Suspense = ki;
      _1.isAsyncMode = function(t2) {
        return ey(t2) || t3(t2) === Ls;
      };
      _1.isConcurrentMode = ey;
      _1.isContextConsumer = function(t2) {
        return t3(t2) === Bi;
      };
      _1.isContextProvider = function(t2) {
        return t3(t2) === wi;
      };
      _1.isElement = function(t2) {
        return typeof t2 == "object" && t2 !== null && t2.$$typeof === xs;
      };
      _1.isForwardRef = function(t2) {
        return t3(t2) === Si;
      };
      _1.isFragment = function(t2) {
        return t3(t2) === Li;
      };
      _1.isLazy = function(t2) {
        return t3(t2) === Ri;
      };
      _1.isMemo = function(t2) {
        return t3(t2) === Ai;
      };
      _1.isPortal = function(t2) {
        return t3(t2) === Cs;
      };
      _1.isProfiler = function(t2) {
        return t3(t2) === Vi;
      };
      _1.isStrictMode = function(t2) {
        return t3(t2) === Hi;
      };
      _1.isSuspense = function(t2) {
        return t3(t2) === ki;
      };
      _1.isValidElementType = function(t2) {
        return typeof t2 == "string" || typeof t2 == "function" || t2 === Li || t2 === yi || t2 === Vi || t2 === Hi || t2 === ki || t2 === a11 || typeof t2 == "object" && t2 !== null && (t2.$$typeof === Ri || t2.$$typeof === Ai || t2.$$typeof === wi || t2.$$typeof === Bi || t2.$$typeof === Si || t2.$$typeof === r11 || t2.$$typeof === e11 || t2.$$typeof === l11 || t2.$$typeof === c11);
      };
      _1.typeOf = t3;
    });
    var oy = L1((qz1, iy) => {
      iy.exports = ly();
    });
    var zy = L1((Nz1, sy) => {
      var Hs = oy(), i11 = { childContextTypes: true, contextType: true, contextTypes: true, defaultProps: true, displayName: true, getDefaultProps: true, getDerivedStateFromError: true, getDerivedStateFromProps: true, mixins: true, propTypes: true, type: true }, o11 = { name: true, length: true, prototype: true, caller: true, callee: true, arguments: true, arity: true }, n11 = { $$typeof: true, render: true, defaultProps: true, displayName: true, propTypes: true }, gy = { $$typeof: true, compare: true, defaultProps: true, displayName: true, propTypes: true, type: true }, Vs = {};
      Vs[Hs.ForwardRef] = n11;
      Vs[Hs.Memo] = gy;
      function ny(t2) {
        return Hs.isMemo(t2) ? gy : Vs[t2.$$typeof] || i11;
      }
      var h11 = Object.defineProperty, v11 = Object.getOwnPropertyNames, hy = Object.getOwnPropertySymbols, g11 = Object.getOwnPropertyDescriptor, d11 = Object.getPrototypeOf, vy = Object.prototype;
      function dy(t2, a, c) {
        if (typeof a != "string") {
          if (vy) {
            var r = d11(a);
            r && r !== vy && dy(t2, r, c);
          }
          var e = v11(a);
          hy && (e = e.concat(hy(a)));
          for (var l = ny(t2), i5 = ny(a), o = 0; o < e.length; ++o) {
            var n = e[o];
            if (!o11[n] && !(c && c[n]) && !(i5 && i5[n]) && !(l && l[n])) {
              var h = g11(a, n);
              try {
                h11(t2, n, h);
              } catch (v) {
              }
            }
          }
        }
        return t2;
      }
      sy.exports = dy;
    });
    function Y3() {
      return (Y3 = Object.assign || function(t2) {
        for (var a = 1; a < arguments.length; a++) {
          var c = arguments[a];
          for (var r in c) Object.prototype.hasOwnProperty.call(c, r) && (t2[r] = c[r]);
        }
        return t2;
      }).apply(this, arguments);
    }
    function Hc(t2) {
      return typeof t2 == "function";
    }
    function py(t2) {
      return t2.displayName || t2.name || "Component";
    }
    function Fs(t2) {
      return t2 && typeof t2.styledComponentId == "string";
    }
    function p5(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      throw new Error("An error occurred. See https://git.io/JUIaE#" + t2 + " for more information." + (c.length > 0 ? " Args: " + c.join(", ") : ""));
    }
    function ks(t2) {
      var a, c = "";
      for (a = Math.abs(t2); a > 52; a = a / 52 | 0) c = fy(a % 52) + c;
      return (fy(a % 52) + c).replace(B11, "$1-$2");
    }
    function By(t2) {
      for (var a = 0; a < t2.length; a += 1) {
        var c = t2[a];
        if (Hc(c) && !Fs(c)) return false;
      }
      return true;
    }
    function yy(t2) {
      var a, c, r, e, l = t2 === void 0 ? S6 : t2, i5 = l.options, o = i5 === void 0 ? S6 : i5, n = l.plugins, h = n === void 0 ? Pi : n, v = new XB(o), g = [], s = /* @__PURE__ */ function(u) {
        function f(p) {
          if (p) try {
            u(p + "}");
          } catch (m) {
          }
        }
        return function(p, m, M, w, H, y, k, F, U, A) {
          switch (p) {
            case 1:
              if (U === 0 && m.charCodeAt(0) === 64) return u(m + ";"), "";
              break;
            case 2:
              if (F === 0) return m + "/*|*/";
              break;
            case 3:
              switch (F) {
                case 102:
                case 112:
                  return u(M[0] + m), "";
                default:
                  return m + (A === 0 ? "/*|*/" : "");
              }
            case -2:
              m.split("/*|*/}").forEach(f);
          }
        };
      }(function(u) {
        g.push(u);
      }), d = function(u, f, p) {
        return f === 0 && A11.indexOf(p[c.length]) !== -1 || p.match(e) ? u : "." + a;
      };
      function z(u, f, p, m) {
        m === void 0 && (m = "&");
        var M = u.replace(k11, ""), w = f && p ? p + " " + f + " { " + M + " }" : M;
        return a = m, c = f, r = new RegExp("\\" + c + "\\b", "g"), e = new RegExp("(\\" + c + "\\b){2,}"), v(p || !f ? "" : f, w);
      }
      return v.use([].concat(h, [function(u, f, p) {
        u === 2 && p.length && p[0].lastIndexOf(c) > 0 && (p[0] = p[0].replace(r, d));
      }, s, function(u) {
        if (u === -2) {
          var f = g;
          return g = [], f;
        }
      }])), z.hash = h.length ? h.reduce(function(u, f) {
        return f.name || p5(15), V9(u, f.name);
      }, 5381).toString() : "", z;
    }
    function Ts() {
      return (0, j1.useContext)(Ps) || R11;
    }
    function Sy() {
      return (0, j1.useContext)(Gs) || As;
    }
    function Zs(t2) {
      var a = (0, j1.useState)(t2.stylisPlugins), c = a[0], r = a[1], e = Ts(), l = (0, j1.useMemo)(function() {
        var o = e;
        return t2.sheet ? o = t2.sheet : t2.target && (o = o.reconstructWithOptions({ target: t2.target }, false)), t2.disableCSSOMInjection && (o = o.reconstructWithOptions({ useCSSOMInjection: false })), o;
      }, [t2.disableCSSOMInjection, t2.sheet, t2.target]), i5 = (0, j1.useMemo)(function() {
        return yy({ options: { prefix: !t2.disableVendorPrefixes }, plugins: c });
      }, [t2.disableVendorPrefixes, c]);
      return (0, j1.useEffect)(function() {
        (0, Ly.default)(c, t2.stylisPlugins) || r(t2.stylisPlugins);
      }, [t2.stylisPlugins]), j1.default.createElement(Ps.Provider, { value: l }, j1.default.createElement(Gs.Provider, { value: i5 }, t2.children));
    }
    function My(t2) {
      return F11.test(t2) ? t2.replace(I11, G11).replace(P11, "-ms-") : t2;
    }
    function T8(t2, a, c, r) {
      if (Array.isArray(t2)) {
        for (var e, l = [], i5 = 0, o = t2.length; i5 < o; i5 += 1) (e = T8(t2[i5], a, c, r)) !== "" && (Array.isArray(e) ? l.push.apply(l, e) : l.push(e));
        return l;
      }
      if (xy(t2)) return "";
      if (Fs(t2)) return "." + t2.styledComponentId;
      if (Hc(t2)) {
        if (typeof (h = t2) != "function" || h.prototype && h.prototype.isReactComponent || !a) return t2;
        var n = t2(a);
        return T8(n, a, c, r);
      }
      var h;
      return t2 instanceof b11 ? c ? (t2.inject(c, r), t2.getName(r)) : t2 : ys(t2) ? function v(g, s) {
        var d, z, u = [];
        for (var f in g) g.hasOwnProperty(f) && !xy(g[f]) && (Array.isArray(g[f]) && g[f].isCss || Hc(g[f]) ? u.push(My(f) + ":", g[f], ";") : ys(g[f]) ? u.push.apply(u, v(g[f], f)) : u.push(My(f) + ": " + (d = f, (z = g[f]) == null || typeof z == "boolean" || z === "" ? "" : typeof z != "number" || z === 0 || d in JB || d.startsWith("--") ? String(z).trim() : z + "px") + ";"));
        return s ? [s + " {"].concat(u, ["}"]) : u;
      }(t2) : t2.toString();
    }
    function f2(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      return Hc(t2) || ys(t2) ? Cy(T8(uy(Pi, [t2].concat(c)))) : c.length === 0 && t2.length === 1 && typeof t2[0] == "string" ? t2 : Cy(T8(uy(t2, c)));
    }
    function ws(t2) {
      return t2.replace(T11, "-").replace(Z11, "");
    }
    function Fi(t2) {
      return typeof t2 == "string" && true;
    }
    function E11(t2, a, c) {
      var r = t2[c];
      Rs(a) && Rs(r) ? Ry(r, a) : t2[c] = a;
    }
    function Ry(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      for (var e = 0, l = c; e < l.length; e++) {
        var i5 = l[e];
        if (Rs(i5)) for (var o in i5) O11(o) && E11(t2, i5[o], o);
      }
      return t2;
    }
    function by(t2, a, c) {
      var r = Fs(t2), e = !Fi(t2), l = a.attrs, i5 = l === void 0 ? Pi : l, o = a.componentId, n = o === void 0 ? function(m, M) {
        var w = typeof m != "string" ? "sc" : ws(m);
        Bs[w] = (Bs[w] || 0) + 1;
        var H = w + "-" + Ay("5.3.11" + w + Bs[w]);
        return M ? M + "-" + H : H;
      }(a.displayName, a.parentComponentId) : o, h = a.displayName, v = h === void 0 ? function(m) {
        return Fi(m) ? "styled." + m : "Styled(" + py(m) + ")";
      }(t2) : h, g = a.displayName && a.componentId ? ws(a.displayName) + "-" + a.componentId : a.componentId || n, s = r && t2.attrs ? Array.prototype.concat(t2.attrs, i5).filter(Boolean) : i5, d = a.shouldForwardProp;
      r && t2.shouldForwardProp && (d = a.shouldForwardProp ? function(m, M, w) {
        return t2.shouldForwardProp(m, M, w) && a.shouldForwardProp(m, M, w);
      } : t2.shouldForwardProp);
      var z, u = new S11(c, g, r ? t2.componentStyle : void 0), f = u.isStatic && i5.length === 0, p = function(m, M) {
        return function(w, H, y, k) {
          var F = w.attrs, U = w.componentStyle, A = w.defaultProps, P = w.foldedComponentIds, C = w.shouldForwardProp, E = w.styledComponentId, a1 = w.target, j = function(u1, N, x1) {
            u1 === void 0 && (u1 = S6);
            var i1 = Y3({}, N, { theme: u1 }), B1 = {};
            return x1.forEach(function(k1) {
              var A1, L, Y, Q = k1;
              for (A1 in Hc(Q) && (Q = Q(i1)), Q) i1[A1] = B1[A1] = A1 === "className" ? (L = B1[A1], Y = Q[A1], L && Y ? L + " " + Y : L || Y) : Q[A1];
            }), [i1, B1];
          }(ky(H, (0, j1.useContext)(Os), A) || S6, H, F), K = j[0], Z = j[1], J = function(u1, N, x1, i1) {
            var B1 = Ts(), k1 = Sy(), A1 = N ? u1.generateAndInjectStyles(S6, B1, k1) : u1.generateAndInjectStyles(x1, B1, k1);
            return A1;
          }(U, k, K), W = y, _ = Z.$as || H.$as || Z.as || H.as || a1, g1 = Fi(_), X = Z !== H ? Y3({}, H, {}, Z) : H, $ = {};
          for (var o1 in X) o1[0] !== "$" && o1 !== "as" && (o1 === "forwardedAs" ? $.as = X[o1] : (C ? C(o1, Ms, _) : !g1 || Ms(o1)) && ($[o1] = X[o1]));
          return H.style && Z.style !== H.style && ($.style = Y3({}, H.style, {}, Z.style)), $.className = Array.prototype.concat(P, E, J !== E ? J : null, H.className, Z.className).filter(Boolean).join(" "), $.ref = W, (0, j1.createElement)(_, $);
        }(z, m, M, f);
      };
      return p.displayName = v, (z = j1.default.forwardRef(p)).attrs = s, z.componentStyle = u, z.displayName = v, z.shouldForwardProp = d, z.foldedComponentIds = r ? Array.prototype.concat(t2.foldedComponentIds, t2.styledComponentId) : Pi, z.styledComponentId = g, z.target = r ? t2.target : t2, z.withComponent = function(m) {
        var M = a.componentId, w = function(y, k) {
          if (y == null) return {};
          var F, U, A = {}, P = Object.keys(y);
          for (U = 0; U < P.length; U++) F = P[U], k.indexOf(F) >= 0 || (A[F] = y[F]);
          return A;
        }(a, ["componentId"]), H = M && M + "-" + (Fi(m) ? m : ws(py(m)));
        return by(m, Y3({}, w, { attrs: s, componentId: H }), c);
      }, Object.defineProperty(z, "defaultProps", { get: function() {
        return this._foldedDefaultProps;
      }, set: function(m) {
        this._foldedDefaultProps = r ? Ry({}, t2.defaultProps, m) : m;
      } }), Object.defineProperty(z, "toString", { value: function() {
        return "." + z.styledComponentId;
      } }), e && (0, Hy.default)(z, t2, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), z;
    }
    function Zi(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      var e = f2.apply(void 0, [t2].concat(c)), l = "sc-global-" + Ay(JSON.stringify(e)), i5 = new D11(e, l);
      function o(h) {
        var v = Ts(), g = Sy(), s = (0, j1.useContext)(Os), d = (0, j1.useRef)(v.allocateGSInstance(l)).current;
        return v.server && n(d, h, v, s, g), (0, j1.useLayoutEffect)(function() {
          if (!v.server) return n(d, h, v, s, g), function() {
            return i5.removeStyles(d, v);
          };
        }, [d, h, v, s, g]), null;
      }
      function n(h, v, g, s, d) {
        if (i5.isStatic) i5.renderStyles(h, z11, g, d);
        else {
          var z = Y3({}, v, { theme: ky(v, s, o.defaultProps) });
          i5.renderStyles(h, z, g, d);
        }
      }
      return j1.default.memo(o);
    }
    var Ti, j1, Ly, Hy, uy, ys, Pi, S6, k6, Is, s11, z11, u11, Ii, Gi, Lc, bi, p11, m11, f11, M11, x11, C11, Ss, Vy, L11, H11, V11, my, w11, Vc, B11, fy, V9, wy, y11, S11, k11, A11, Ps, Gs, R11, As, b11, F11, I11, P11, G11, xy, Cy, ky, T11, Z11, Ay, Rs, O11, Os, Bs, bs, D11, B, c1 = x(() => {
      Ti = I($B()), j1 = I(G()), Ly = I(fs());
      YB();
      ty();
      ry();
      Hy = I(zy());
      uy = function(t2, a) {
        for (var c = [t2[0]], r = 0, e = a.length; r < e; r += 1) c.push(a[r], t2[r + 1]);
        return c;
      }, ys = function(t2) {
        return t2 !== null && typeof t2 == "object" && (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) === "[object Object]" && !(0, Ti.typeOf)(t2);
      }, Pi = Object.freeze([]), S6 = Object.freeze({});
      k6 = typeof process != "undefined" && define_process_env_default !== void 0 && (define_process_env_default.REACT_APP_SC_ATTR || define_process_env_default.SC_ATTR) || "data-styled", Is = typeof window != "undefined" && "HTMLElement" in window, s11 = !!(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && define_process_env_default !== void 0 && (define_process_env_default.REACT_APP_SC_DISABLE_SPEEDY !== void 0 && define_process_env_default.REACT_APP_SC_DISABLE_SPEEDY !== "" ? define_process_env_default.REACT_APP_SC_DISABLE_SPEEDY !== "false" && define_process_env_default.REACT_APP_SC_DISABLE_SPEEDY : define_process_env_default.SC_DISABLE_SPEEDY !== void 0 && define_process_env_default.SC_DISABLE_SPEEDY !== "" && define_process_env_default.SC_DISABLE_SPEEDY !== "false" && define_process_env_default.SC_DISABLE_SPEEDY)), z11 = {};
      u11 = function() {
        function t2(c) {
          this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = c;
        }
        var a = t2.prototype;
        return a.indexOfGroup = function(c) {
          for (var r = 0, e = 0; e < c; e++) r += this.groupSizes[e];
          return r;
        }, a.insertRules = function(c, r) {
          if (c >= this.groupSizes.length) {
            for (var e = this.groupSizes, l = e.length, i5 = l; c >= i5; ) (i5 <<= 1) < 0 && p5(16, "" + c);
            this.groupSizes = new Uint32Array(i5), this.groupSizes.set(e), this.length = i5;
            for (var o = l; o < i5; o++) this.groupSizes[o] = 0;
          }
          for (var n = this.indexOfGroup(c + 1), h = 0, v = r.length; h < v; h++) this.tag.insertRule(n, r[h]) && (this.groupSizes[c]++, n++);
        }, a.clearGroup = function(c) {
          if (c < this.length) {
            var r = this.groupSizes[c], e = this.indexOfGroup(c), l = e + r;
            this.groupSizes[c] = 0;
            for (var i5 = e; i5 < l; i5++) this.tag.deleteRule(e);
          }
        }, a.getGroup = function(c) {
          var r = "";
          if (c >= this.length || this.groupSizes[c] === 0) return r;
          for (var e = this.groupSizes[c], l = this.indexOfGroup(c), i5 = l + e, o = l; o < i5; o++) r += this.tag.getRule(o) + "/*!sc*/\n";
          return r;
        }, t2;
      }(), Ii = /* @__PURE__ */ new Map(), Gi = /* @__PURE__ */ new Map(), Lc = 1, bi = function(t2) {
        if (Ii.has(t2)) return Ii.get(t2);
        for (; Gi.has(Lc); ) Lc++;
        var a = Lc++;
        return Ii.set(t2, a), Gi.set(a, t2), a;
      }, p11 = function(t2) {
        return Gi.get(t2);
      }, m11 = function(t2, a) {
        a >= Lc && (Lc = a + 1), Ii.set(t2, a), Gi.set(a, t2);
      }, f11 = "style[" + k6 + '][data-styled-version="5.3.11"]', M11 = new RegExp("^" + k6 + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'), x11 = function(t2, a, c) {
        for (var r, e = c.split(","), l = 0, i5 = e.length; l < i5; l++) (r = e[l]) && t2.registerName(a, r);
      }, C11 = function(t2, a) {
        for (var c = (a.textContent || "").split("/*!sc*/\n"), r = [], e = 0, l = c.length; e < l; e++) {
          var i5 = c[e].trim();
          if (i5) {
            var o = i5.match(M11);
            if (o) {
              var n = 0 | parseInt(o[1], 10), h = o[2];
              n !== 0 && (m11(h, n), x11(t2, h, o[3]), t2.getTag().insertRules(n, r)), r.length = 0;
            } else r.push(i5);
          }
        }
      }, Ss = function() {
        return typeof __webpack_nonce__ != "undefined" ? __webpack_nonce__ : null;
      }, Vy = function(t2) {
        var a = document.head, c = t2 || a, r = document.createElement("style"), e = function(o) {
          for (var n = o.childNodes, h = n.length; h >= 0; h--) {
            var v = n[h];
            if (v && v.nodeType === 1 && v.hasAttribute(k6)) return v;
          }
        }(c), l = e !== void 0 ? e.nextSibling : null;
        r.setAttribute(k6, "active"), r.setAttribute("data-styled-version", "5.3.11");
        var i5 = Ss();
        return i5 && r.setAttribute("nonce", i5), c.insertBefore(r, l), r;
      }, L11 = function() {
        function t2(c) {
          var r = this.element = Vy(c);
          r.appendChild(document.createTextNode("")), this.sheet = function(e) {
            if (e.sheet) return e.sheet;
            for (var l = document.styleSheets, i5 = 0, o = l.length; i5 < o; i5++) {
              var n = l[i5];
              if (n.ownerNode === e) return n;
            }
            p5(17);
          }(r), this.length = 0;
        }
        var a = t2.prototype;
        return a.insertRule = function(c, r) {
          try {
            return this.sheet.insertRule(r, c), this.length++, true;
          } catch (e) {
            return false;
          }
        }, a.deleteRule = function(c) {
          this.sheet.deleteRule(c), this.length--;
        }, a.getRule = function(c) {
          var r = this.sheet.cssRules[c];
          return r !== void 0 && typeof r.cssText == "string" ? r.cssText : "";
        }, t2;
      }(), H11 = function() {
        function t2(c) {
          var r = this.element = Vy(c);
          this.nodes = r.childNodes, this.length = 0;
        }
        var a = t2.prototype;
        return a.insertRule = function(c, r) {
          if (c <= this.length && c >= 0) {
            var e = document.createTextNode(r), l = this.nodes[c];
            return this.element.insertBefore(e, l || null), this.length++, true;
          }
          return false;
        }, a.deleteRule = function(c) {
          this.element.removeChild(this.nodes[c]), this.length--;
        }, a.getRule = function(c) {
          return c < this.length ? this.nodes[c].textContent : "";
        }, t2;
      }(), V11 = function() {
        function t2(c) {
          this.rules = [], this.length = 0;
        }
        var a = t2.prototype;
        return a.insertRule = function(c, r) {
          return c <= this.length && (this.rules.splice(c, 0, r), this.length++, true);
        }, a.deleteRule = function(c) {
          this.rules.splice(c, 1), this.length--;
        }, a.getRule = function(c) {
          return c < this.length ? this.rules[c] : "";
        }, t2;
      }(), my = Is, w11 = { isServer: !Is, useCSSOMInjection: !s11 }, Vc = function() {
        function t2(c, r, e) {
          c === void 0 && (c = S6), r === void 0 && (r = {}), this.options = Y3({}, w11, {}, c), this.gs = r, this.names = new Map(e), this.server = !!c.isServer, !this.server && Is && my && (my = false, function(l) {
            for (var i5 = document.querySelectorAll(f11), o = 0, n = i5.length; o < n; o++) {
              var h = i5[o];
              h && h.getAttribute(k6) !== "active" && (C11(l, h), h.parentNode && h.parentNode.removeChild(h));
            }
          }(this));
        }
        t2.registerId = function(c) {
          return bi(c);
        };
        var a = t2.prototype;
        return a.reconstructWithOptions = function(c, r) {
          return r === void 0 && (r = true), new t2(Y3({}, this.options, {}, c), this.gs, r && this.names || void 0);
        }, a.allocateGSInstance = function(c) {
          return this.gs[c] = (this.gs[c] || 0) + 1;
        }, a.getTag = function() {
          return this.tag || (this.tag = (e = (r = this.options).isServer, l = r.useCSSOMInjection, i5 = r.target, c = e ? new V11(i5) : l ? new L11(i5) : new H11(i5), new u11(c)));
          var c, r, e, l, i5;
        }, a.hasNameForId = function(c, r) {
          return this.names.has(c) && this.names.get(c).has(r);
        }, a.registerName = function(c, r) {
          if (bi(c), this.names.has(c)) this.names.get(c).add(r);
          else {
            var e = /* @__PURE__ */ new Set();
            e.add(r), this.names.set(c, e);
          }
        }, a.insertRules = function(c, r, e) {
          this.registerName(c, r), this.getTag().insertRules(bi(c), e);
        }, a.clearNames = function(c) {
          this.names.has(c) && this.names.get(c).clear();
        }, a.clearRules = function(c) {
          this.getTag().clearGroup(bi(c)), this.clearNames(c);
        }, a.clearTag = function() {
          this.tag = void 0;
        }, a.toString = function() {
          return function(c) {
            for (var r = c.getTag(), e = r.length, l = "", i5 = 0; i5 < e; i5++) {
              var o = p11(i5);
              if (o !== void 0) {
                var n = c.names.get(o), h = r.getGroup(i5);
                if (n && h && n.size) {
                  var v = k6 + ".g" + i5 + '[id="' + o + '"]', g = "";
                  n !== void 0 && n.forEach(function(s) {
                    s.length > 0 && (g += s + ",");
                  }), l += "" + h + v + '{content:"' + g + '"}/*!sc*/\n';
                }
              }
            }
            return l;
          }(this);
        }, t2;
      }(), B11 = /(a)(d)/gi, fy = function(t2) {
        return String.fromCharCode(t2 + (t2 > 25 ? 39 : 97));
      };
      V9 = function(t2, a) {
        for (var c = a.length; c; ) t2 = 33 * t2 ^ a.charCodeAt(--c);
        return t2;
      }, wy = function(t2) {
        return V9(5381, t2);
      };
      y11 = wy("5.3.11"), S11 = function() {
        function t2(a, c, r) {
          this.rules = a, this.staticRulesId = "", this.isStatic = (r === void 0 || r.isStatic) && By(a), this.componentId = c, this.baseHash = V9(y11, c), this.baseStyle = r, Vc.registerId(c);
        }
        return t2.prototype.generateAndInjectStyles = function(a, c, r) {
          var e = this.componentId, l = [];
          if (this.baseStyle && l.push(this.baseStyle.generateAndInjectStyles(a, c, r)), this.isStatic && !r.hash) if (this.staticRulesId && c.hasNameForId(e, this.staticRulesId)) l.push(this.staticRulesId);
          else {
            var i5 = T8(this.rules, a, c, r).join(""), o = ks(V9(this.baseHash, i5) >>> 0);
            if (!c.hasNameForId(e, o)) {
              var n = r(i5, "." + o, void 0, e);
              c.insertRules(e, o, n);
            }
            l.push(o), this.staticRulesId = o;
          }
          else {
            for (var h = this.rules.length, v = V9(this.baseHash, r.hash), g = "", s = 0; s < h; s++) {
              var d = this.rules[s];
              if (typeof d == "string") g += d;
              else if (d) {
                var z = T8(d, a, c, r), u = Array.isArray(z) ? z.join("") : z;
                v = V9(v, u + s), g += u;
              }
            }
            if (g) {
              var f = ks(v >>> 0);
              if (!c.hasNameForId(e, f)) {
                var p = r(g, "." + f, void 0, e);
                c.insertRules(e, f, p);
              }
              l.push(f);
            }
          }
          return l.join(" ");
        }, t2;
      }(), k11 = /^\s*\/\/.*$/gm, A11 = [":", "[", ".", "#"];
      Ps = j1.default.createContext(), Ps.Consumer, Gs = j1.default.createContext(), R11 = (Gs.Consumer, new Vc()), As = yy();
      b11 = function() {
        function t2(a, c) {
          var r = this;
          this.inject = function(e, l) {
            l === void 0 && (l = As);
            var i5 = r.name + l.hash;
            e.hasNameForId(r.id, i5) || e.insertRules(r.id, i5, l(r.rules, i5, "@keyframes"));
          }, this.toString = function() {
            return p5(12, String(r.name));
          }, this.name = a, this.id = "sc-keyframes-" + a, this.rules = c;
        }
        return t2.prototype.getName = function(a) {
          return a === void 0 && (a = As), this.name + a.hash;
        }, t2;
      }(), F11 = /([A-Z])/, I11 = /([A-Z])/g, P11 = /^ms-/, G11 = function(t2) {
        return "-" + t2.toLowerCase();
      };
      xy = function(t2) {
        return t2 == null || t2 === false || t2 === "";
      };
      Cy = function(t2) {
        return Array.isArray(t2) && (t2.isCss = true), t2;
      };
      ky = function(t2, a, c) {
        return c === void 0 && (c = S6), t2.theme !== c.theme && t2.theme || a || c.theme;
      }, T11 = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g, Z11 = /(^-|-$)/g;
      Ay = function(t2) {
        return ks(wy(t2) >>> 0);
      };
      Rs = function(t2) {
        return typeof t2 == "function" || typeof t2 == "object" && t2 !== null && !Array.isArray(t2);
      }, O11 = function(t2) {
        return t2 !== "__proto__" && t2 !== "constructor" && t2 !== "prototype";
      };
      Os = j1.default.createContext(), Os.Consumer, Bs = {};
      bs = function(t2) {
        return function a(c, r, e) {
          if (e === void 0 && (e = S6), !(0, Ti.isValidElementType)(r)) return p5(1, String(r));
          var l = function() {
            return c(r, e, f2.apply(void 0, arguments));
          };
          return l.withConfig = function(i5) {
            return a(c, r, Y3({}, e, {}, i5));
          }, l.attrs = function(i5) {
            return a(c, r, Y3({}, e, { attrs: Array.prototype.concat(e.attrs, i5).filter(Boolean) }));
          }, l;
        }(by, t2);
      };
      ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(t2) {
        bs[t2] = bs(t2);
      });
      D11 = function() {
        function t2(c, r) {
          this.rules = c, this.componentId = r, this.isStatic = By(c), Vc.registerId(this.componentId + 1);
        }
        var a = t2.prototype;
        return a.createStyles = function(c, r, e, l) {
          var i5 = l(T8(this.rules, r, e, l).join(""), ""), o = this.componentId + c;
          e.insertRules(o, o, i5);
        }, a.removeStyles = function(c, r) {
          r.clearRules(this.componentId + c);
        }, a.renderStyles = function(c, r, e, l) {
          c > 2 && Vc.registerId(this.componentId + c), this.removeStyles(c, e), this.createStyles(c, r, e, l);
        }, t2;
      }();
      (function() {
        function t2() {
          var c = this;
          this._emitSheetCSS = function() {
            var r = c.instance.toString();
            if (!r) return "";
            var e = Ss();
            return "<style " + [e && 'nonce="' + e + '"', k6 + '="true"', 'data-styled-version="5.3.11"'].filter(Boolean).join(" ") + ">" + r + "</style>";
          }, this.getStyleTags = function() {
            return c.sealed ? p5(2) : c._emitSheetCSS();
          }, this.getStyleElement = function() {
            var r;
            if (c.sealed) return p5(2);
            var e = ((r = {})[k6] = "", r["data-styled-version"] = "5.3.11", r.dangerouslySetInnerHTML = { __html: c.instance.toString() }, r), l = Ss();
            return l && (e.nonce = l), [j1.default.createElement("style", Y3({}, e, { key: "sc-0-0" }))];
          }, this.seal = function() {
            c.sealed = true;
          }, this.instance = new Vc({ isServer: true }), this.sealed = false;
        }
        var a = t2.prototype;
        return a.collectStyles = function(c) {
          return this.sealed ? p5(2) : j1.default.createElement(Zs, { sheet: this.instance }, c);
        }, a.interleaveWithNodeStream = function(c) {
          return p5(3);
        }, t2;
      })(), B = bs;
    });
    function m5() {
      return m5 = Object.assign || function(t2) {
        for (var a = 1; a < arguments.length; a++) {
          var c = arguments[a];
          for (var r in c) Object.prototype.hasOwnProperty.call(c, r) && (t2[r] = c[r]);
        }
        return t2;
      }, m5.apply(this, arguments);
    }
    var Fy = x(() => {
    });
    function Es(t2) {
      if (t2 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t2;
    }
    var Iy = x(() => {
    });
    function f5(t2, a) {
      return f5 = Object.setPrototypeOf || function(r, e) {
        return r.__proto__ = e, r;
      }, f5(t2, a);
    }
    var Oi = x(() => {
    });
    function Ds(t2, a) {
      t2.prototype = Object.create(a.prototype), t2.prototype.constructor = t2, f5(t2, a);
    }
    var Py = x(() => {
      Oi();
    });
    function wc(t2) {
      return wc = Object.setPrototypeOf ? Object.getPrototypeOf : function(c) {
        return c.__proto__ || Object.getPrototypeOf(c);
      }, wc(t2);
    }
    var Gy = x(() => {
    });
    function Ws(t2) {
      return Function.toString.call(t2).indexOf("[native code]") !== -1;
    }
    var Ty = x(() => {
    });
    function _s() {
      if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham) return false;
      if (typeof Proxy == "function") return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (t2) {
        return false;
      }
    }
    var Zy = x(() => {
    });
    function w9(t2, a, c) {
      return _s() ? w9 = Reflect.construct : w9 = function(e, l, i5) {
        var o = [null];
        o.push.apply(o, l);
        var n = Function.bind.apply(e, o), h = new n();
        return i5 && f5(h, i5.prototype), h;
      }, w9.apply(null, arguments);
    }
    var Oy = x(() => {
      Oi();
      Zy();
    });
    function Bc(t2) {
      var a = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
      return Bc = function(r) {
        if (r === null || !Ws(r)) return r;
        if (typeof r != "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof a != "undefined") {
          if (a.has(r)) return a.get(r);
          a.set(r, e);
        }
        function e() {
          return w9(r, arguments, wc(this).constructor);
        }
        return e.prototype = Object.create(r.prototype, { constructor: { value: e, enumerable: false, writable: true, configurable: true } }), f5(e, r);
      }, Bc(t2);
    }
    var Ey = x(() => {
      Gy();
      Oi();
      Ty();
      Oy();
    });
    var Dy = x(() => {
    });
    function W11(t2) {
      return t2.charAt(0).toUpperCase() + t2.slice(1);
    }
    function j11(t2, a) {
      if (!t2) return a.toLowerCase();
      var c = t2.split("-");
      if (c.length > 1) return c.splice(1, 0, a), c.reduce(function(e, l) {
        return "" + e + W11(l);
      });
      var r = t2.replace(/([a-z])([A-Z])/g, "$1" + a + "$2");
      return t2 === r ? "" + t2 + a : r;
    }
    function q11(t2, a) {
      for (var c = {}, r = 0; r < a.length; r += 1) (a[r] || a[r] === 0) && (c[j11(t2, _11[r])] = a[r]);
      return c;
    }
    function Wy(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      var e = c[0], l = c[1], i5 = l === void 0 ? e : l, o = c[2], n = o === void 0 ? e : o, h = c[3], v = h === void 0 ? i5 : h, g = [e, i5, n, v];
      return q11(t2, g);
    }
    function js(t2) {
      return Math.round(t2 * 255);
    }
    function N11(t2, a, c) {
      return js(t2) + "," + js(a) + "," + js(c);
    }
    function yc(t2, a, c, r) {
      if (r === void 0 && (r = N11), a === 0) return r(c, c, c);
      var e = (t2 % 360 + 360) % 360 / 60, l = (1 - Math.abs(2 * c - 1)) * a, i5 = l * (1 - Math.abs(e % 2 - 1)), o = 0, n = 0, h = 0;
      e >= 0 && e < 1 ? (o = l, n = i5) : e >= 1 && e < 2 ? (o = i5, n = l) : e >= 2 && e < 3 ? (n = l, h = i5) : e >= 3 && e < 4 ? (n = i5, h = l) : e >= 4 && e < 5 ? (o = i5, h = l) : e >= 5 && e < 6 && (o = l, h = i5);
      var v = c - l / 2, g = o + v, s = n + v, d = h + v;
      return r(g, s, d);
    }
    function U11(t2) {
      if (typeof t2 != "string") return t2;
      var a = t2.toLowerCase();
      return _y2[a] ? "#" + _y2[a] : t2;
    }
    function $s(t2) {
      if (typeof t2 != "string") throw new S4(3);
      var a = U11(t2);
      if (a.match(K11)) return { red: parseInt("" + a[1] + a[2], 16), green: parseInt("" + a[3] + a[4], 16), blue: parseInt("" + a[5] + a[6], 16) };
      if (a.match($11)) {
        var c = parseFloat((parseInt("" + a[7] + a[8], 16) / 255).toFixed(2));
        return { red: parseInt("" + a[1] + a[2], 16), green: parseInt("" + a[3] + a[4], 16), blue: parseInt("" + a[5] + a[6], 16), alpha: c };
      }
      if (a.match(Q11)) return { red: parseInt("" + a[1] + a[1], 16), green: parseInt("" + a[2] + a[2], 16), blue: parseInt("" + a[3] + a[3], 16) };
      if (a.match(X11)) {
        var r = parseFloat((parseInt("" + a[4] + a[4], 16) / 255).toFixed(2));
        return { red: parseInt("" + a[1] + a[1], 16), green: parseInt("" + a[2] + a[2], 16), blue: parseInt("" + a[3] + a[3], 16), alpha: r };
      }
      var e = qs.exec(a);
      if (e) return { red: parseInt("" + e[1], 10), green: parseInt("" + e[2], 10), blue: parseInt("" + e[3], 10) };
      var l = Y11.exec(a.substring(0, 50));
      if (l) return { red: parseInt("" + l[1], 10), green: parseInt("" + l[2], 10), blue: parseInt("" + l[3], 10), alpha: parseFloat("" + l[4]) };
      var i5 = J11.exec(a);
      if (i5) {
        var o = parseInt("" + i5[1], 10), n = parseInt("" + i5[2], 10) / 100, h = parseInt("" + i5[3], 10) / 100, v = "rgb(" + yc(o, n, h) + ")", g = qs.exec(v);
        if (!g) throw new S4(4, a, v);
        return { red: parseInt("" + g[1], 10), green: parseInt("" + g[2], 10), blue: parseInt("" + g[3], 10) };
      }
      var s = t21.exec(a.substring(0, 50));
      if (s) {
        var d = parseInt("" + s[1], 10), z = parseInt("" + s[2], 10) / 100, u = parseInt("" + s[3], 10) / 100, f = "rgb(" + yc(d, z, u) + ")", p = qs.exec(f);
        if (!p) throw new S4(4, a, f);
        return { red: parseInt("" + p[1], 10), green: parseInt("" + p[2], 10), blue: parseInt("" + p[3], 10), alpha: parseFloat("" + s[4]) };
      }
      throw new S4(5);
    }
    function a21(t2) {
      var a = t2.red / 255, c = t2.green / 255, r = t2.blue / 255, e = Math.max(a, c, r), l = Math.min(a, c, r), i5 = (e + l) / 2;
      if (e === l) return t2.alpha !== void 0 ? { hue: 0, saturation: 0, lightness: i5, alpha: t2.alpha } : { hue: 0, saturation: 0, lightness: i5 };
      var o, n = e - l, h = i5 > 0.5 ? n / (2 - e - l) : n / (e + l);
      switch (e) {
        case a:
          o = (c - r) / n + (c < r ? 6 : 0);
          break;
        case c:
          o = (r - a) / n + 2;
          break;
        default:
          o = (a - c) / n + 4;
          break;
      }
      return o *= 60, t2.alpha !== void 0 ? { hue: o, saturation: h, lightness: i5, alpha: t2.alpha } : { hue: o, saturation: h, lightness: i5 };
    }
    function Qs(t2) {
      return a21($s(t2));
    }
    function Z8(t2) {
      var a = t2.toString(16);
      return a.length === 1 ? "0" + a : a;
    }
    function Ns(t2) {
      return Z8(Math.round(t2 * 255));
    }
    function c21(t2, a, c) {
      return Us("#" + Ns(t2) + Ns(a) + Ns(c));
    }
    function Ei(t2, a, c) {
      return yc(t2, a, c, c21);
    }
    function r21(t2, a, c) {
      if (typeof t2 == "object" && a === void 0 && c === void 0) return Ei(t2.hue, t2.saturation, t2.lightness);
      throw new S4(1);
    }
    function e21(t2, a, c, r) {
      if (typeof t2 == "object" && a === void 0 && c === void 0 && r === void 0) return t2.alpha >= 1 ? Ei(t2.hue, t2.saturation, t2.lightness) : "rgba(" + yc(t2.hue, t2.saturation, t2.lightness) + "," + t2.alpha + ")";
      throw new S4(2);
    }
    function Ks(t2, a, c) {
      if (typeof t2 == "number" && typeof a == "number" && typeof c == "number") return Us("#" + Z8(t2) + Z8(a) + Z8(c));
      if (typeof t2 == "object" && a === void 0 && c === void 0) return Us("#" + Z8(t2.red) + Z8(t2.green) + Z8(t2.blue));
      throw new S4(6);
    }
    function jy(t2, a, c, r) {
      {
        if (typeof t2 == "object" && a === void 0 && c === void 0 && r === void 0) return t2.alpha >= 1 ? Ks(t2.red, t2.green, t2.blue) : "rgba(" + t2.red + "," + t2.green + "," + t2.blue + "," + t2.alpha + ")";
      }
      throw new S4(7);
    }
    function Xs(t2) {
      if (typeof t2 != "object") throw new S4(8);
      if (i21(t2)) return jy(t2);
      if (l21(t2)) return Ks(t2);
      if (n21(t2)) return e21(t2);
      if (o21(t2)) return r21(t2);
      throw new S4(8);
    }
    function qy(t2, a, c) {
      return function() {
        var e = c.concat(Array.prototype.slice.call(arguments));
        return e.length >= a ? t2.apply(this, e) : qy(t2, a, e);
      };
    }
    function Di(t2) {
      return qy(t2, t2.length, []);
    }
    function Wi(t2, a, c) {
      return Math.max(t2, Math.min(a, c));
    }
    function h21(t2, a) {
      if (a === "transparent") return a;
      var c = Qs(a);
      return Xs(m5({}, c, { lightness: Wi(0, 1, c.lightness - parseFloat(t2)) }));
    }
    function v21(t2, a) {
      if (a === "transparent") return a;
      var c = Qs(a);
      return Xs(m5({}, c, { lightness: Wi(0, 1, c.lightness + parseFloat(t2)) }));
    }
    function g21(t2, a) {
      if (a === "transparent") return a;
      var c = Qs(a);
      return Xs(m5({}, c, { saturation: Wi(0, 1, c.saturation + parseFloat(t2)) }));
    }
    function d21(t2, a) {
      if (a === "transparent") return a;
      var c = $s(a), r = typeof c.alpha == "number" ? c.alpha : 1, e = m5({}, c, { alpha: Wi(0, 1, +(r * 100 - parseFloat(t2) * 100).toFixed(2) / 100) });
      return jy(e);
    }
    function ji(t2) {
      for (var a = arguments.length, c = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      return s21.indexOf(t2) >= 0 && t2 ? m5({}, Wy.apply(void 0, [""].concat(c)), { position: t2 }) : Wy.apply(void 0, ["", t2].concat(c));
    }
    var S4, _11, _y2, K11, $11, Q11, X11, qs, Y11, J11, t21, Us, l21, i21, o21, n21, A6, R6, _i, N2, s21, R0 = x(() => {
      Fy();
      Iy();
      Py();
      Ey();
      Dy();
      S4 = function(t2) {
        Ds(a, t2);
        function a(c) {
          var r;
          r = t2.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + c + " for more information.") || this;
          return Es(r);
        }
        return a;
      }(Bc(Error));
      _11 = ["Top", "Right", "Bottom", "Left"];
      _y2 = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000", blanchedalmond: "ffebcd", blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkgrey: "a9a9a9", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", grey: "808080", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgreen: "90ee90", lightgrey: "d3d3d3", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslategray: "789", lightslategrey: "789", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "0f0", limegreen: "32cd32", linen: "faf0e6", magenta: "f0f", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370db", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "db7093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", rebeccapurple: "639", red: "f00", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", wheat: "f5deb3", white: "fff", whitesmoke: "f5f5f5", yellow: "ff0", yellowgreen: "9acd32" };
      K11 = /^#[a-fA-F0-9]{6}$/, $11 = /^#[a-fA-F0-9]{8}$/, Q11 = /^#[a-fA-F0-9]{3}$/, X11 = /^#[a-fA-F0-9]{4}$/, qs = /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i, Y11 = /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i, J11 = /^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i, t21 = /^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
      Us = function(a) {
        return a.length === 7 && a[1] === a[2] && a[3] === a[4] && a[5] === a[6] ? "#" + a[1] + a[3] + a[5] : a;
      };
      l21 = function(a) {
        return typeof a.red == "number" && typeof a.green == "number" && typeof a.blue == "number" && (typeof a.alpha != "number" || typeof a.alpha == "undefined");
      }, i21 = function(a) {
        return typeof a.red == "number" && typeof a.green == "number" && typeof a.blue == "number" && typeof a.alpha == "number";
      }, o21 = function(a) {
        return typeof a.hue == "number" && typeof a.saturation == "number" && typeof a.lightness == "number" && (typeof a.alpha != "number" || typeof a.alpha == "undefined");
      }, n21 = function(a) {
        return typeof a.hue == "number" && typeof a.saturation == "number" && typeof a.lightness == "number" && typeof a.alpha == "number";
      };
      A6 = Di(h21);
      R6 = Di(v21);
      _i = Di(g21);
      N2 = Di(d21), s21 = ["absolute", "fixed", "relative", "static", "sticky"];
    });
    function z21(t2, a, c) {
      return a in t2 ? Object.defineProperty(t2, a, { value: c, enumerable: true, configurable: true, writable: true }) : t2[a] = c, t2;
    }
    function Ny(t2, a) {
      var c = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(t2);
        a && (r = r.filter(function(e) {
          return Object.getOwnPropertyDescriptor(t2, e).enumerable;
        })), c.push.apply(c, r);
      }
      return c;
    }
    function J3(t2) {
      for (var a = 1; a < arguments.length; a++) {
        var c = arguments[a] != null ? arguments[a] : {};
        a % 2 ? Ny(Object(c), true).forEach(function(r) {
          z21(t2, r, c[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(c)) : Ny(Object(c)).forEach(function(r) {
          Object.defineProperty(t2, r, Object.getOwnPropertyDescriptor(c, r));
        });
      }
      return t2;
    }
    function k4(t2, a) {
      if (t2 == null) return {};
      var c = {}, r = Object.keys(t2), e, l;
      for (l = 0; l < r.length; l++) e = r[l], !(a.indexOf(e) >= 0) && (c[e] = t2[e]);
      return c;
    }
    var B9 = x(() => {
    });
    var Uy, qi, Ys = x(() => {
      Uy = I(G()), qi = (0, Uy.createContext)({});
    });
    function u21(t2, a, c) {
      return a in t2 ? Object.defineProperty(t2, a, { value: c, enumerable: true, configurable: true, writable: true }) : t2[a] = c, t2;
    }
    function Ky(t2, a) {
      var c = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(t2);
        a && (r = r.filter(function(e) {
          return Object.getOwnPropertyDescriptor(t2, e).enumerable;
        })), c.push.apply(c, r);
      }
      return c;
    }
    function b6(t2) {
      for (var a = 1; a < arguments.length; a++) {
        var c = arguments[a] != null ? arguments[a] : {};
        a % 2 ? Ky(Object(c), true).forEach(function(r) {
          u21(t2, r, c[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(c)) : Ky(Object(c)).forEach(function(r) {
          Object.defineProperty(t2, r, Object.getOwnPropertyDescriptor(c, r));
        });
      }
      return t2;
    }
    function Sc(t2, a) {
      if (t2 == null) return {};
      var c = {}, r = Object.keys(t2), e, l;
      for (l = 0; l < r.length; l++) e = r[l], !(a.indexOf(e) >= 0) && (c[e] = t2[e]);
      return c;
    }
    function p21(t2, a) {
      if (t2) {
        if (typeof t2 == "string") return $y(t2, a);
        var c = Object.prototype.toString.call(t2).slice(8, -1);
        if (c === "Object" && t2.constructor && (c = t2.constructor.name), c === "Map" || c === "Set") return Array.from(t2);
        if (c === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)) return $y(t2, a);
      }
    }
    function $y(t2, a) {
      (a == null || a > t2.length) && (a = t2.length);
      for (var c = 0, r = new Array(a); c < a; c++) r[c] = t2[c];
      return r;
    }
    function Js(t2, a) {
      var c;
      if (typeof Symbol == "undefined" || t2[Symbol.iterator] == null) {
        if (Array.isArray(t2) || (c = p21(t2)) || a) {
          c && (t2 = c);
          var r = 0;
          return function() {
            return r >= t2.length ? { done: true } : { done: false, value: t2[r++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      return c = t2[Symbol.iterator](), c.next.bind(c);
    }
    var kc = x(() => {
    });
    function m21(t2) {
      return typeof t2 == "function";
    }
    var Ni, Qy, Xy = x(() => {
      Ni = I(G());
      Ys();
      kc();
      Qy = function(a, c, r) {
        r === void 0 && (r = c.children);
        var e = (0, Ni.useContext)(qi);
        if (e.useCreateElement) return e.useCreateElement(a, c, r);
        if (typeof a == "string" && m21(r)) {
          c.children;
          var i5 = Sc(c, ["children"]);
          return r(i5);
        }
        return (0, Ni.createElement)(a, c, r);
      };
    });
    function f21(t2, a, c) {
      return a in t2 ? Object.defineProperty(t2, a, { value: c, enumerable: true, configurable: true, writable: true }) : t2[a] = c, t2;
    }
    function Yy(t2, a) {
      var c = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(t2);
        a && (r = r.filter(function(e) {
          return Object.getOwnPropertyDescriptor(t2, e).enumerable;
        })), c.push.apply(c, r);
      }
      return c;
    }
    function F6(t2) {
      for (var a = 1; a < arguments.length; a++) {
        var c = arguments[a] != null ? arguments[a] : {};
        a % 2 ? Yy(Object(c), true).forEach(function(r) {
          f21(t2, r, c[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(c)) : Yy(Object(c)).forEach(function(r) {
          Object.defineProperty(t2, r, Object.getOwnPropertyDescriptor(c, r));
        });
      }
      return t2;
    }
    function Jy(t2, a) {
      if (t2 == null) return {};
      var c = {}, r = Object.keys(t2), e, l;
      for (l = 0; l < r.length; l++) e = r[l], !(a.indexOf(e) >= 0) && (c[e] = t2[e]);
      return c;
    }
    var tz = x(() => {
    });
    function tS(t2) {
      return typeof t2 == "object" && t2 != null;
    }
    var aS = x(() => {
    });
    function Ac(t2) {
      var a;
      if (!tS(t2)) return false;
      var c = Object.getPrototypeOf(t2);
      return c == null ? true : ((a = c.constructor) === null || a === void 0 ? void 0 : a.toString()) === Object.toString();
    }
    var az = x(() => {
      aS();
    });
    function cS(t2, a) {
      for (var c = Object.keys(t2), r = {}, e = {}, l = 0, i5 = c; l < i5.length; l++) {
        var o = i5[l];
        a.indexOf(o) >= 0 ? r[o] = t2[o] : e[o] = t2[o];
      }
      return [r, e];
    }
    function cz(t2, a) {
      if (a === void 0 && (a = []), !Ac(t2.state)) return cS(t2, a);
      var c = cS(t2, [].concat(a, ["state"])), r = c[0], e = c[1], l = r.state, i5 = Jy(r, ["state"]);
      return [F6(F6({}, l), i5), e];
    }
    var rS = x(() => {
      tz();
      az();
    });
    function O8(t2, a) {
      if (t2 === a) return true;
      if (!t2 || !a || typeof t2 != "object" || typeof a != "object") return false;
      var c = Object.keys(t2), r = Object.keys(a), e = c.length;
      if (r.length !== e) return false;
      for (var l = 0, i5 = c; l < i5.length; l++) {
        var o = i5[l];
        if (t2[o] !== a[o]) return false;
      }
      return true;
    }
    var Ui = x(() => {
    });
    function rz(t2) {
      return t2.name === "normalizePropsAreEqualInner" ? t2 : function(c, r) {
        return !Ac(c.state) || !Ac(r.state) ? t2(c, r) : t2(F6(F6({}, c.state), c), F6(F6({}, r.state), r));
      };
    }
    var eS = x(() => {
      tz();
      az();
    });
    function M21(t2) {
      return (0, Ki.forwardRef)(t2);
    }
    function x21(t2, a) {
      return (0, Ki.memo)(t2, a);
    }
    function A4(t2) {
      var a = t2.as, c = t2.useHook, r = t2.memo, e = t2.propsAreEqual, l = e === void 0 ? c == null ? void 0 : c.unstable_propsAreEqual : e, i5 = t2.keys, o = i5 === void 0 ? (c == null ? void 0 : c.__keys) || [] : i5, n = t2.useCreateElement, h = n === void 0 ? Qy : n, v = function(s, d) {
        var z = s.as, u = z === void 0 ? a : z, f = Sc(s, ["as"]);
        if (c) {
          var p, m = cz(f, o), M = m[0], w = m[1], H = c(M, b6({ ref: d }, w)), y = H.wrapElement, k = Sc(H, ["wrapElement"]), F = ((p = u.render) === null || p === void 0 ? void 0 : p.__keys) || u.__keys, U = F && cz(f, F)[0], A = U ? b6(b6({}, k), U) : k, P = h(u, A);
          return y ? y(P) : P;
        }
        return h(u, b6({ ref: d }, f));
      };
      return v = M21(v), r && (v = x21(v, l && rz(l))), v.__keys = o, v.unstable_propsAreEqual = rz(l || O8), v;
    }
    var Ki, y9 = x(() => {
      Ki = I(G());
      kc();
      Xy();
      rS();
      Ui();
      eS();
    });
    function Qi(t2, a) {
      (0, $i.useDebugValue)(t2);
      var c = (0, $i.useContext)(qi);
      return c[t2] != null ? c[t2] : a;
    }
    var $i, ez = x(() => {
      $i = I(G());
      Ys();
    });
    function iS(t2, a, c) {
      a === void 0 && (a = {}), c === void 0 && (c = {});
      var r = "use" + t2 + "Props";
      (0, lS.useDebugValue)(r);
      var e = Qi(r);
      return e ? e(a, c) : c;
    }
    var lS, oS = x(() => {
      lS = I(G());
      ez();
    });
    function hS(t2, a, c) {
      a === void 0 && (a = {}), c === void 0 && (c = {});
      var r = "use" + t2 + "Options";
      (0, nS.useDebugValue)(r);
      var e = Qi(r);
      return e ? b6(b6({}, a), e(a, c)) : a;
    }
    var nS, vS = x(() => {
      nS = I(G());
      ez();
      kc();
    });
    function gS(t2) {
      return Array.isArray(t2) ? t2 : typeof t2 != "undefined" ? [t2] : [];
    }
    var dS = x(() => {
    });
    function R4(t2) {
      var a, c, r = gS(t2.compose), e = function(n, h) {
        if (t2.useOptions && (n = t2.useOptions(n, h)), t2.name && (n = hS(t2.name, n, h)), t2.compose) for (var v = Js(r), g; !(g = v()).done; ) {
          var s = g.value;
          n = s.__useOptions(n, h);
        }
        return n;
      }, l = function(n, h, v) {
        if (n === void 0 && (n = {}), h === void 0 && (h = {}), v === void 0 && (v = false), v || (n = e(n, h)), t2.useProps && (h = t2.useProps(n, h)), t2.name && (h = iS(t2.name, n, h)), t2.compose) if (t2.useComposeOptions && (n = t2.useComposeOptions(n, h)), t2.useComposeProps) h = t2.useComposeProps(n, h);
        else for (var g = Js(r), s; !(s = g()).done; ) {
          var d = s.value;
          h = d(n, h, true);
        }
        var z = {}, u = h || {};
        for (var f in u) u[f] !== void 0 && (z[f] = u[f]);
        return z;
      };
      l.__useOptions = e;
      var i5 = r.reduce(function(o, n) {
        return o.push.apply(o, n.__keys || []), o;
      }, []);
      return l.__keys = [].concat(i5, ((a = t2.useState) === null || a === void 0 ? void 0 : a.__keys) || [], t2.keys || []), l.unstable_propsAreEqual = t2.propsAreEqual || ((c = r[0]) === null || c === void 0 ? void 0 : c.unstable_propsAreEqual) || O8, l;
    }
    var S9 = x(() => {
      I(G());
      oS();
      kc();
      vS();
      Ui();
      dS();
    });
    function sS(t2, a) {
      a === void 0 && (a = null), t2 && (typeof t2 == "function" ? t2(a) : t2.current = a);
    }
    function Xi(t2, a) {
      return (0, zS.useMemo)(function() {
        return t2 == null && a == null ? null : function(c) {
          sS(t2, c), sS(a, c);
        };
      }, [t2, a]);
    }
    var zS, lz = x(() => {
      zS = I(G());
    });
    function k9(t2) {
      if (t2.tagName === "BUTTON") return true;
      if (t2.tagName === "INPUT") {
        var a = t2;
        return C21.indexOf(a.type) !== -1;
      }
      return false;
    }
    var C21, Yi = x(() => {
      C21 = ["button", "color", "file", "image", "reset", "submit"];
    });
    var Ji = x(() => {
    });
    var uS = x(() => {
      Ji();
      I(G());
    });
    var Rc = x(() => {
      Ji();
      I(G());
      uS();
    });
    function to(t2) {
      return t2 ? t2.ownerDocument || t2 : document;
    }
    var iz = x(() => {
    });
    function pS(t2) {
      return oz;
    }
    var oz, mS = x(() => {
      iz();
      try {
        oz = window;
      } catch (t2) {
      }
    });
    function L21() {
      var t2 = pS();
      return !!(typeof t2 != "undefined" && t2.document && t2.document.createElement);
    }
    var E8, ao = x(() => {
      mS();
      E8 = L21();
    });
    var co, A9, ro = x(() => {
      co = I(G());
      ao();
      A9 = E8 ? co.useLayoutEffect : co.useEffect;
    });
    function I6(t2) {
      var a = (0, fS.useRef)(t2);
      return A9(function() {
        a.current = t2;
      }), a;
    }
    var fS, nz = x(() => {
      fS = I(G());
      ro();
    });
    function MS(t2) {
      return t2.target === t2.currentTarget;
    }
    var xS = x(() => {
    });
    function CS(t2) {
      var a = to(t2), c = a.activeElement;
      return c != null && c.nodeName ? c : null;
    }
    var LS = x(() => {
      iz();
    });
    function eo(t2, a) {
      return t2 === a || t2.contains(a);
    }
    var hz = x(() => {
    });
    function HS(t2) {
      var a = CS(t2);
      if (!a) return false;
      if (eo(t2, a)) return true;
      var c = a.getAttribute("aria-activedescendant");
      return c ? c === t2.id ? true : !!t2.querySelector("#" + c) : false;
    }
    var VS = x(() => {
      LS();
      hz();
    });
    function wS(t2) {
      return !eo(t2.currentTarget, t2.target);
    }
    var BS = x(() => {
      hz();
    });
    function bc(t2) {
      return E8 ? window.navigator.userAgent.indexOf(t2) !== -1 : false;
    }
    var yS = x(() => {
      ao();
    });
    function SS(t2, a) {
      return "matches" in t2 ? t2.matches(a) : "msMatchesSelector" in t2 ? t2.msMatchesSelector(a) : t2.webkitMatchesSelector(a);
    }
    var kS = x(() => {
    });
    function V21(t2) {
      var a = t2;
      return a.offsetWidth > 0 || a.offsetHeight > 0 || t2.getClientRects().length > 0;
    }
    function AS(t2) {
      return SS(t2, H21) && V21(t2);
    }
    var H21, RS = x(() => {
      kS();
      H21 = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
    });
    var w21, Fc, vz = x(() => {
      B9();
      y9();
      S9();
      Ui();
      w21 = ["unstable_system"], Fc = R4({ name: "Role", keys: w21, propsAreEqual: function(a, c) {
        var r = a.unstable_system, e = k4(a, ["unstable_system"]), l = c.unstable_system, i5 = k4(c, ["unstable_system"]);
        return r !== l && !O8(r, l) ? false : O8(e, i5);
      } }), A4({ as: "div", useHook: Fc });
    });
    function bS(t2) {
      !HS(t2) && AS(t2) && t2.focus();
    }
    function S21(t2) {
      return t2.tagName === "BUTTON" || t2.tagName === "INPUT" || t2.tagName === "SELECT" || t2.tagName === "TEXTAREA" || t2.tagName === "A";
    }
    function k21(t2) {
      return t2.tagName === "BUTTON" || t2.tagName === "INPUT" || t2.tagName === "SELECT" || t2.tagName === "TEXTAREA";
    }
    function A21(t2, a, c, r) {
      return t2 ? a && !c ? -1 : void 0 : a ? r : r || 0;
    }
    function gz(t2, a) {
      return (0, P6.useCallback)(function(c) {
        var r;
        (r = t2.current) === null || r === void 0 || r.call(t2, c), !c.defaultPrevented && a && (c.stopPropagation(), c.preventDefault());
      }, [t2, a]);
    }
    var P6, B21, y21, dz, FS = x(() => {
      B9();
      y9();
      S9();
      P6 = I(G());
      lz();
      Yi();
      Rc();
      nz();
      ro();
      VS();
      BS();
      yS();
      RS();
      vz();
      B21 = ["disabled", "focusable"], y21 = bc("Mac") && !bc("Chrome") && (bc("Safari") || bc("Firefox"));
      dz = R4({ name: "Tabbable", compose: Fc, keys: B21, useOptions: function(a, c) {
        var r = c.disabled;
        return J3({ disabled: r }, a);
      }, useProps: function(a, c) {
        var r = c.ref, e = c.tabIndex, l = c.onClickCapture, i5 = c.onMouseDownCapture, o = c.onMouseDown, n = c.onKeyPressCapture, h = c.style, v = k4(c, ["ref", "tabIndex", "onClickCapture", "onMouseDownCapture", "onMouseDown", "onKeyPressCapture", "style"]), g = (0, P6.useRef)(null), s = I6(l), d = I6(i5), z = I6(o), u = I6(n), f = !!a.disabled && !a.focusable, p = (0, P6.useState)(true), m = p[0], M = p[1], w = (0, P6.useState)(true), H = w[0], y = w[1], k = a.disabled ? J3({ pointerEvents: "none" }, h) : h;
        A9(function() {
          var C = g.current;
          C && (S21(C) || M(false), k21(C) || y(false));
        }, []);
        var F = gz(s, a.disabled), U = gz(d, a.disabled), A = gz(u, a.disabled), P = (0, P6.useCallback)(function(C) {
          var E;
          (E = z.current) === null || E === void 0 || E.call(z, C);
          var a1 = C.currentTarget;
          if (!C.defaultPrevented && y21 && !wS(C) && k9(a1)) {
            var j = requestAnimationFrame(function() {
              a1.removeEventListener("mouseup", K, true), bS(a1);
            }), K = function() {
              cancelAnimationFrame(j), bS(a1);
            };
            a1.addEventListener("mouseup", K, { once: true, capture: true });
          }
        }, []);
        return J3({ ref: Xi(g, r), style: k, tabIndex: A21(f, m, H, e), disabled: f && H ? true : void 0, "aria-disabled": a.disabled ? true : void 0, onClickCapture: F, onMouseDownCapture: U, onMouseDown: P, onKeyPressCapture: A }, v);
      } }), A4({ as: "div", useHook: dz });
    });
    function b21(t2) {
      var a = t2.currentTarget;
      return t2.isTrusted ? k9(a) || a.tagName === "INPUT" || a.tagName === "TEXTAREA" || a.tagName === "A" || a.tagName === "SELECT" : false;
    }
    var Ic, R21, sz, IS = x(() => {
      B9();
      y9();
      S9();
      Ic = I(G());
      Yi();
      Rc();
      nz();
      xS();
      FS();
      R21 = ["unstable_clickOnEnter", "unstable_clickOnSpace"];
      sz = R4({ name: "Clickable", compose: dz, keys: R21, useOptions: function(a) {
        var c = a.unstable_clickOnEnter, r = c === void 0 ? true : c, e = a.unstable_clickOnSpace, l = e === void 0 ? true : e, i5 = k4(a, ["unstable_clickOnEnter", "unstable_clickOnSpace"]);
        return J3({ unstable_clickOnEnter: r, unstable_clickOnSpace: l }, i5);
      }, useProps: function(a, c) {
        var r = c.onKeyDown, e = c.onKeyUp, l = k4(c, ["onKeyDown", "onKeyUp"]), i5 = (0, Ic.useState)(false), o = i5[0], n = i5[1], h = I6(r), v = I6(e), g = (0, Ic.useCallback)(function(d) {
          var z;
          if ((z = h.current) === null || z === void 0 || z.call(h, d), !d.defaultPrevented && !a.disabled && !d.metaKey && MS(d)) {
            var u = a.unstable_clickOnEnter && d.key === "Enter", f = a.unstable_clickOnSpace && d.key === " ";
            if (u || f) {
              if (b21(d)) return;
              d.preventDefault(), u ? d.currentTarget.click() : f && n(true);
            }
          }
        }, [a.disabled, a.unstable_clickOnEnter, a.unstable_clickOnSpace]), s = (0, Ic.useCallback)(function(d) {
          var z;
          if ((z = v.current) === null || z === void 0 || z.call(v, d), !d.defaultPrevented && !a.disabled && !d.metaKey) {
            var u = a.unstable_clickOnSpace && d.key === " ";
            o && u && (n(false), d.currentTarget.click());
          }
        }, [a.disabled, a.unstable_clickOnSpace, o]);
        return J3({ "data-active": o || void 0, onKeyDown: g, onKeyUp: s }, l);
      } }), A4({ as: "button", memo: true, useHook: sz });
    });
    var D8, F21, PS, zz, GS = x(() => {
      B9();
      y9();
      S9();
      D8 = I(G());
      lz();
      Yi();
      Rc();
      IS();
      F21 = [], PS = R4({ name: "Button", compose: sz, keys: F21, useProps: function(a, c) {
        var r = c.ref, e = k4(c, ["ref"]), l = (0, D8.useRef)(null), i5 = (0, D8.useState)(void 0), o = i5[0], n = i5[1], h = (0, D8.useState)("button"), v = h[0], g = h[1];
        return (0, D8.useEffect)(function() {
          var s = l.current;
          s && (k9(s) || (s.tagName !== "A" && n("button"), g(void 0)));
        }, []), J3({ ref: Xi(l, r), role: o, type: v }, e);
      } }), zz = A4({ as: "button", memo: true, useHook: PS });
    });
    var I21, TS, uz, ZS = x(() => {
      B9();
      y9();
      S9();
      vz();
      I21 = [], TS = R4({ name: "Group", compose: Fc, keys: I21, useProps: function(a, c) {
        return J3({ role: "group" }, c);
      } }), uz = A4({ as: "div", useHook: TS });
    });
    function ES() {
      return E8 ? document.body : null;
    }
    var G6, a3, DS = x(() => {
      G6 = I(G());
      ro();
      ao();
      I(B4());
      a3 = (0, G6.createContext)(ES());
    });
    var pz, WS = x(() => {
      typeof window != "undefined" && (pz = { get passive() {
      } }, window.addEventListener("testPassive", null, pz), window.removeEventListener("testPassive", null, pz));
    });
    var T6 = x(() => {
      I(G());
      Rc();
      GS();
      ZS();
      I(B4());
      DS();
      WS();
      Ji();
    });
    function z1(t2) {
      let a = (0, lo.useMemo)(() => {
        let e = t2;
        return { get current() {
          return e;
        }, set current(l) {
          e = l, r(l);
        } };
      }, []), [c, r] = (0, lo.useState)(() => t2);
      return [a, c];
    }
    var lo, P1 = x(() => {
      lo = I(G());
    });
    function US(t2) {
      return (a) => G2.default.createElement(T21, null, G2.default.createElement(t2, S({}, a)));
    }
    var G2, NS, _S, C1, Z6, jS, G21, qS, mz, fz, T21, G1 = x(() => {
      R0();
      c1();
      c1();
      G2 = I(G()), NS = I(B4());
      T6();
      P1();
      C1 = f2(_S || (_S = V(["\n  #pointer-root & {\n    pointer-events: none;\n  }\n  #pointer-root.normal & {\n    pointer-events: auto;\n  }\n"]))), Z6 = { panel: { bg: "#282b2f", head: { title: { color: "#bbb" }, punctuation: { color: "#808080" } }, body: { compoudThing: { label: { get color() {
        return R6(0.6, Z6.panel.bg);
      } } } } } }, G21 = typeof window != "undefined" ? Zi(jS || (jS = V(["\n  :host {\n    all: initial;\n    color: white;\n    font: 11px -apple-system, BlinkMacSystemFont, Segoe WPC, Segoe Editor,\n      HelveticaNeue-Light, Ubuntu, Droid Sans, sans-serif;\n  }\n\n  * {\n    padding: 0;\n    margin: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n    list-style: none;\n  }\n"]))) : {}, mz = B.div(qS || (qS = V(["\n  z-index: 51;\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  pointer-events: none;\n"]))), fz = (t2) => G2.default.createElement(Zs, { disableVendorPrefixes: true, target: t2.target }, G2.default.createElement(G2.default.Fragment, null, G2.default.createElement(G21, null), t2.children));
      T21 = (t2) => {
        let [a, c] = (0, G2.useState)(null), [r, e] = (0, G2.useState)(null);
        (0, G2.useLayoutEffect)(() => {
          if (!a) return;
          let { parentNode: o } = a;
          if (!o) return;
          let h = !!o.shadowRoot ? parent.shadowRoot : o.attachShadow({ mode: "open" });
          e(h);
        }, [a]);
        let [l, i5] = z1(void 0);
        return r ? NS.default.createPortal(G2.default.createElement(fz, { target: r }, G2.default.createElement(G2.default.Fragment, null, G2.default.createElement(mz, { ref: l }), G2.default.createElement(a3.Provider, { value: i5 }, t2.children))), r) : G2.default.createElement("template", { ref: c, "shadow-root": "open" }, t2.children);
      };
    });
    var M5, Z21, KS, x5, $S, R9, QS, YS, io, XS, oo, S3, b4 = x(() => {
      G1();
      c1();
      M5 = { get outlinePanel() {
        return 1;
      }, get propsPanel() {
        return M5.outlinePanel;
      }, get sequenceEditorPanel() {
        return this.outlinePanel - 1;
      }, get toolbar() {
        return this.outlinePanel + 1;
      }, get pluginPanes() {
        return this.sequenceEditorPanel - 1;
      } }, Z21 = Z6.panel.bg, x5 = B.span(KS || (KS = V(["\n  white-space: nowrap;\n"]))), R9 = B.span($S || ($S = V(["\n  white-space: nowrap;\n  color: ", ";\n"])), Z6.panel.head.punctuation.color), YS = B.div(QS || (QS = V(["\n  background: ", ";\n  flex-grow: 1;\n  overflow-y: scroll;\n  padding: 0;\n"])), Z21), io = 18, oo = B.div(XS || (XS = V(["\n  height: ", "px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  padding: 0 10px;\n  position: relative;\n  color: #adadadb3;\n  border-bottom: 1px solid rgb(0 0 0 / 13%);\n  background-color: #25272b;\n  font-size: 10px;\n  font-weight: 500;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n"])), io), S3 = 100;
    });
    var O21, h0, W8 = x(() => {
      O21 = () => {
      }, h0 = O21;
    });
    function E21(t2) {
      return Mz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), Mz.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M1.775 2.781a.5.5 0 01.5.5v1.7H4.67c.108-.957.92-1.7 1.905-1.7h6.608a1.917 1.917 0 110 3.834H6.574c-.78 0-1.452-.466-1.751-1.135H2.275v5.03h2.39a2.032 2.032 0 012.023-1.854h6.38a2.031 2.031 0 110 4.063h-6.38c-.83 0-1.543-.497-1.858-1.21H1.775a.5.5 0 01-.5-.5V3.281a.5.5 0 01.5-.5zm4.799 1.5h6.608a.917.917 0 110 1.834H6.574a.917.917 0 110-1.834zm.114 5.875h6.38a1.031 1.031 0 110 2.063h-6.38a1.032 1.032 0 110-2.063z", fill: "currentColor" }));
    }
    var Mz, Gc, JS = x(() => {
      Mz = I(G());
      Gc = E21;
    });
    function D21(t2) {
      return xz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), xz.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8 10.5L4 6.654 5.2 5.5 8 8.385 10.8 5.5 12 6.654 8 10.5z", fill: "currentColor" }));
    }
    var xz, Cz, tk = x(() => {
      xz = I(G());
      Cz = D21;
    });
    function W21(t2) {
      return Lz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), Lz.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M3.5 3c-1.072 0-1.969.904-1.969 1.969 0 1 .929 1.968 1.969 1.968h9A1.969 1.969 0 1012.5 3h-9zm9 1H5.531v1.938H12.5A.969.969 0 0012.5 4zM3.5 9.14a1.969 1.969 0 000 3.938h9a1.969 1.969 0 100-3.937h-9zm9 1H8.406v1.938H12.5a.969.969 0 100-1.937z", fill: "currentColor" }));
    }
    var Lz, Hz, ak = x(() => {
      Lz = I(G());
      Hz = W21;
    });
    function _21(t2) {
      return Vz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), Vz.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M.166 7.994a2.26 2.26 0 114.518 0 2.26 2.26 0 01-4.518 0zM2.425 6.91a1.085 1.085 0 100 2.17 1.085 1.085 0 000-2.17zM5.74 7.994a2.26 2.26 0 114.519 0 2.26 2.26 0 01-4.519 0zM8 6.91a1.085 1.085 0 100 2.17 1.085 1.085 0 000-2.17zM13.575 5.735a2.26 2.26 0 100 4.519 2.26 2.26 0 000-4.52zm-1.086 2.26a1.085 1.085 0 112.171 0 1.085 1.085 0 01-2.17 0z", fill: "currentColor" }));
    }
    var Vz, wz, ck = x(() => {
      Vz = I(G());
      wz = _21;
    });
    function j21(t2) {
      return Bz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), Bz.createElement("path", { d: "M8.339 4.5l-2.055.644 4.451 1.393v2.748l-2.966.928-2.504-.783V6.738l2.42.758 2.055-.644-4.458-1.395L4 5.858v4.463L7.768 11.5 12 10.175V5.646L8.339 4.5z", fill: "currentColor" }));
    }
    var Bz, Tc, rk = x(() => {
      Bz = I(G());
      Tc = j21;
    });
    function q21(t2) {
      return yz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), yz.createElement("path", { d: "M8 1.57c-.416 0-.752.36-.752.804v.482c-1.715.372-3.006 1.994-3.006 3.938v.473c0 1.18-.407 2.32-1.14 3.205l-.173.208a.85.85 0 00-.125.864.75.75 0 00.686.475h9.019a.752.752 0 00.686-.475.845.845 0 00-.125-.864l-.174-.208a5.026 5.026 0 01-1.139-3.205v-.473c0-1.944-1.291-3.566-3.006-3.938v-.482c0-.445-.336-.804-.752-.804zm1.063 12.39c.282-.301.44-.71.44-1.138H6.496c0 .428.158.837.44 1.138.281.302.664.47 1.063.47.4 0 .783-.168 1.064-.47z", fill: "currentColor" }));
    }
    var yz, Zc, ek = x(() => {
      yz = I(G());
      Zc = q21;
    });
    function N21(t2) {
      return Sz.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), Sz.createElement("path", { d: "M6.8 11.6a.6.6 0 00.6-.6V7.4a.6.6 0 00-1.2 0V11a.6.6 0 00.6.6zm6-7.2h-2.4v-.6A1.8 1.8 0 008.6 2H7.4a1.8 1.8 0 00-1.8 1.8v.6H3.2a.6.6 0 100 1.2h.6v6.6A1.8 1.8 0 005.6 14h4.8a1.8 1.8 0 001.8-1.8V5.6h.6a.6.6 0 100-1.2zm-6-.6a.6.6 0 01.6-.6h1.2a.6.6 0 01.6.6v.6H6.8v-.6zm4.2 8.4a.6.6 0 01-.6.6H5.6a.6.6 0 01-.6-.6V5.6h6v6.6zm-1.8-.6a.6.6 0 00.6-.6V7.4a.6.6 0 00-1.2 0V11a.6.6 0 00.6.6z", fill: "currentColor" }));
    }
    var Sz, Oc, lk = x(() => {
      Sz = I(G());
      Oc = N21;
    });
    var b9 = x(() => {
      JS();
      tk();
      ak();
      ck();
      rk();
      ek();
      lk();
    });
    var F4, ik, kz, ok, U21, nk, K21, hk, $21, vk, Q21, gk, X21, dk, Y21, sk, J21, t01, O6, Ec = x(() => {
      F4 = I(G());
      c1();
      W8();
      G1();
      b9();
      kz = B.li(ik || (ik = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  align-items: flex-start;\n"]))), U21 = B.div(ok || (ok = V([""]))), K21 = B(U21)(nk || (nk = V(["\n  position: relative;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  margin-left: calc(4px + var(--depth) * 16px);\n  padding-left: 4px;\n  padding-right: 8px;\n  gap: 4px;\n  height: 21px;\n  line-height: 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  pointer-events: none;\n  white-space: nowrap;\n\n  border-radius: 2px;\n  box-shadow: 0 3px 4px -1px rgba(0, 0, 0, 0.48);\n\n  color: rgba(255, 255, 255, 0.9);\n  background: rgba(40, 43, 47, 0.65);\n  backdrop-filter: blur(14px);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n\n  &.descendant-is-selected {\n    background: rgba(29, 53, 59, 0.7);\n  }\n\n  ", ";\n  &:not(.not-selectable):not(.selected):hover {\n    background: rgba(59, 63, 69, 0.9);\n\n    border-bottom: 1px solid rgba(255, 255, 255, 0.24);\n  }\n\n  &:not(.not-selectable):not(.selected):active {\n    background: rgba(82, 88, 96, 0.9);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.24);\n  }\n\n  &.selected {\n    background: rgba(30, 88, 102, 0.7);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n  }\n\n  @supports not (backdrop-filter: blur()) {\n    background: rgba(40, 43, 47, 0.95);\n  }\n"])), C1), $21 = f2(hk || (hk = V(["\n  font-weight: 500;\n  font-size: 11px;\n  & {\n  }\n"]))), Q21 = B.span(vk || (vk = V(["\n  ", ";\n\n  ", ";\n  position: relative;\n  // Compensate for border bottom\n  top: 0.5px;\n  display: flex;\n  height: 20px;\n  align-items: center;\n  box-sizing: border-box;\n"])), $21, C1), X21 = B.div(gk || (gk = V(["\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  opacity: 0.99;\n"]))), Y21 = B.span(dk || (dk = V(["\n  font-size: 9px;\n  position: relative;\n  display: block;\n  transition: transform 0.1s ease-out;\n\n  &:hover {\n    transform: rotate(-20deg);\n  }\n\n  ", ".collapsed & {\n    transform: rotate(-90deg);\n\n    &:hover {\n      transform: rotate(-70deg);\n    }\n  }\n"])), kz), J21 = B.ul(sk || (sk = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  ", ".collapsed & {\n    display: none;\n  }\n"])), kz), t01 = ({ label: t2, children: a, depth: c, select: r, selectionStatus: e, labelDecoration: l, collapsed: i5 = false, setIsCollapsed: o }) => {
        let n = a !== void 0;
        return F4.default.createElement(kz, { style: { "--depth": c }, className: i5 ? "collapsed" : "" }, F4.default.createElement(K21, { className: e, onClick: r != null ? r : h0, "data-header": true }, F4.default.createElement(X21, null, n ? F4.default.createElement(Y21, { onClick: (h) => {
          h.stopPropagation(), h.preventDefault(), o == null || o(!i5);
        } }, F4.default.createElement(Cz, null)) : F4.default.createElement(Tc, null)), F4.default.createElement(Q21, null, F4.default.createElement("span", null, t2)), l), n && F4.default.createElement(J21, null, a));
      }, O6 = t01;
    });
    function c01(t2) {
      return Object.keys(t2);
    }
    function zk(t2) {
      return Object.keys((0, I4.val)(t2.sheetTemplatesP));
    }
    function uk() {
      let a = x3(c3().filter((c) => H7(c) || c0(c)).map((c) => c0(c) ? c.sheet : c))[0];
      if (a) return a.getSequence();
    }
    var I4, c3, a01, C5 = x(() => {
      I4 = requireDist$2();
      N5();
      H2();
      f1();
      c3 = () => {
        var c;
        let t2 = (0, I4.val)(T().projectsP), a = ((c = (0, I4.val)(T().atomP.historic.panels.outlinePanel.selection)) != null ? c : []).map((r) => {
          let e = t2[r.projectId];
          if (!e) return;
          if (r.type === "Project") return e;
          if (!(0, I4.val)(e.sheetTemplatesP[r.sheetId])) return;
          let i5 = a01(e, r.sheetId);
          if (!i5) return;
          if (r.type === "Sheet") return i5;
          let o = (0, I4.val)(i5.objectsP[r.objectKey]);
          if (o) return o;
        });
        return x3(a.filter((r) => typeof r != "undefined"));
      }, a01 = (t2, a) => {
        let c = T().atomP.historic.projects.stateByProjectId[t2.address.projectId], r = (0, I4.val)(c.stateBySheetId[a].selectedInstanceId), e = (0, I4.val)(t2.sheetTemplatesP[a]);
        if (e) {
          if (r) return (0, I4.val)(e.instancesP[r]);
          {
            let l = (0, I4.val)(e.instancesP);
            return l[c01(l)[0]];
          }
        }
      };
    });
    var pk, mk, fk = x(() => {
      f1();
      pk = I(G());
      Ec();
      M1();
      C5();
      mk = ({ sheetObject: t2, depth: a, overrideLabel: c }) => {
        let r = () => {
          T().transaction(({ stateEditors: l }) => {
            l.studio.historic.panels.outline.selection.set([t2]);
          });
        }, e = v1(() => c3(), []);
        return pk.default.createElement(O6, { select: r, label: c != null ? c : t2.address.objectKey, depth: a, selectionStatus: e.includes(t2) ? "selected" : "not-selected" });
      };
    });
    function F9(t2) {
      var l;
      let a = t2.type === "namespace" ? "namespace:".concat(t2.sheet.address.sheetId, ":").concat(t2.path.join("/")) : t2.type === "Theatre_Project" ? "project" : t2.type === "Theatre_Sheet" ? "sheetInstance:".concat(t2.address.sheetId, ":").concat(t2.address.sheetInstanceId) : "unknown", c = t2.type === "namespace" ? t2.sheet.address.projectId : t2.address.projectId, r = (l = s1(T().atomP.ahistoric.projects.stateByProjectId[c].collapsedItemsInOutline[a])) != null ? l : false, e = (0, Mk.useCallback)((i5) => {
        T().transaction(({ stateEditors: o }) => {
          o.studio.ahistoric.projects.stateByProjectId.collapsedItemsInOutline.set({ projectId: c, isCollapsed: i5, itemKey: a });
        });
      }, [a]);
      return { collapsed: r, setCollapsed: e };
    }
    var Mk, no = x(() => {
      Mk = I(G());
      f1();
      M1();
    });
    function Hk(t2) {
      return P4.default.createElement(P4.default.Fragment, null, [...t2.namespace.entries()].map(([a, { object: c, nested: r }]) => P4.default.createElement(e01, { key: a, label: a, object: c, nested: r, visualIndentation: t2.visualIndentation, path: t2.path, sheet: t2.sheet })));
    }
    function e01(t2) {
      let { nested: a, label: c, object: r, sheet: e } = t2, { collapsed: l, setCollapsed: i5 } = F9({ type: "namespace", sheet: e, path: [...t2.path, c] }), o = a && P4.default.createElement(Hk, { namespace: a, path: [...t2.path, c], key: "namespaceTree(" + c + ")", visualIndentation: t2.visualIndentation + 1, sheet: e }), n = r && P4.default.createElement(mk, { depth: t2.visualIndentation, key: "objectPath(" + r.address.objectKey + ")", sheetObject: r, overrideLabel: c });
      return P4.default.createElement(P4.default.Fragment, { key: "".concat(c, " - ").concat(t2.visualIndentation) }, n, o && P4.default.createElement(O6, { selectionStatus: "not-selectable", label: c, key: "baseItem(".concat(c, ")"), depth: t2.visualIndentation, children: o, collapsed: l, setIsCollapsed: i5 }));
    }
    function wk(t2, a, c = l01(a)) {
      let [r, ...e] = c, l = t2.get(r);
      l || (l = { nested: void 0, object: void 0, path: [...c] }, t2.set(r, l)), e.length === 0 ? (console.assert(!l.object, "expect not to have existing object with same name", { existing: l, object: a }), l.object = a) : (l.nested || (l.nested = /* @__PURE__ */ new Map()), wk(l.nested, a, e));
    }
    function l01(t2) {
      let a = xk.get(t2);
      return a || (a = t2.address.objectKey.split(i01), console.assert(a.length > 0, "expected not empty"), xk.set(t2, a)), a;
    }
    var Lk, P4, Ck, r01, Vk, i01, xk, Bk = x(() => {
      M1();
      Lk = requireDist$2(), P4 = I(G());
      c1();
      fk();
      Ec();
      no();
      B.li(Ck || (Ck = V(["\n  color: ", ";\n"])), (t2) => t2.isSelected ? "white" : "hsl(1, 1%, 80%)"), r01 = ({ sheet: t2, depth: a }) => v1(() => {
        let c = (0, Lk.val)(t2.objectsP), r = Object.values(c).filter((l) => l != null), e = /* @__PURE__ */ new Map();
        return r.forEach((l) => {
          wk(e, l);
        }), P4.default.createElement(Hk, { namespace: e, visualIndentation: a, path: [], sheet: t2 });
      }, [t2, a]);
      Vk = r01;
      i01 = /\s*\/\s*/g, xk = /* @__PURE__ */ new WeakMap();
    });
    var _8, yk, o01, Sk, kk, n01, Ak, Rk = x(() => {
      f1();
      C5();
      M1();
      _8 = I(G());
      c1();
      Bk();
      Ec();
      no();
      o01 = B.div(yk || (yk = V(["\n  display: flex;\n"]))), B.li(Sk || (Sk = V(["\n  color: ", ";\n"])), (t2) => t2.isSelected ? "white" : "hsl(1, 1%, 80%)"), n01 = B.div(kk || (kk = V([""]))), Ak = ({ sheet: t2, depth: a }) => {
        let { collapsed: c, setCollapsed: r } = F9(t2), e = (0, _8.useCallback)(() => {
          T().transaction(({ stateEditors: l }) => {
            l.studio.historic.panels.outline.selection.set([t2]);
          });
        }, [t2]);
        return v1(() => {
          let l = c3();
          return _8.default.createElement(O6, { depth: a, select: e, setIsCollapsed: r, collapsed: c, selectionStatus: l.some((i5) => i5 === t2) ? "selected" : l.some((i5) => i5.type === "Theatre_SheetObject" && i5.sheet === t2) ? "descendant-is-selected" : "not-selected", label: _8.default.createElement(o01, null, t2.address.sheetId, ": ", t2.address.sheetInstanceId) }, _8.default.createElement(n01, null, _8.default.createElement(Vk, { depth: a + 1, sheet: t2, key: "objectList" + t2.address.sheetInstanceId })));
        }, [a, c]);
      };
    });
    var Az, I9, bk, Fk, Ik, Pk, Gk = x(() => {
      M1();
      Az = requireDist$2(), I9 = I(G());
      c1();
      Rk();
      B.div(bk || (bk = V(["\n  display: flex;\n"]))), B.li(Fk || (Fk = V(["\n  color: ", ";\n"])), (t2) => t2.isSelected ? "white" : "hsl(1, 1%, 80%)"), B.div(Ik || (Ik = V([""]))), Pk = ({ sheetId: t2, depth: a, project: c }) => v1(() => {
        let r = (0, Az.val)(c.sheetTemplatesP[t2]);
        if (!r) return I9.default.createElement(I9.default.Fragment, null);
        let e = (0, Az.val)(r.instancesP);
        return I9.default.createElement(I9.default.Fragment, null, Object.entries(e).map(([l, i5]) => I9.default.createElement(Ak, { key: i5.address.sheetInstanceId, sheet: i5, depth: a })));
      }, [a, t2, c]);
    });
    var ho, h01, Tk, Zk = x(() => {
      C5();
      M1();
      ho = I(G());
      Gk();
      h01 = ({ project: t2, depth: a }) => v1(() => {
        if (!t2) return null;
        let c = zk(t2);
        return ho.default.createElement(ho.default.Fragment, null, c.map((r) => ho.default.createElement(Pk, { depth: a, sheetId: r, key: "sheet-".concat(r), project: t2 })));
      }, [t2, a]), Tk = h01;
    });
    var P9, Ek, Ok, v01, g01, Dk, Wk = x(() => {
      P9 = I(G());
      Ec();
      Zk();
      f1();
      M1();
      C5();
      Ek = requireDist$2();
      c1();
      no();
      v01 = B.div(Ok || (Ok = V(["\n  color: #ff6363;\n  margin-left: 11px;\n  background: #4c282d;\n  padding: 2px 8px;\n  border-radius: 2px;\n  font-size: 10px;\n  box-shadow: 0 2px 8px -4px black;\n"]))), g01 = ({ depth: t2, project: a }) => {
        let c = v1(() => c3(), []), r = v1(() => {
          let o = a.address.projectId, n = (0, Ek.val)(T().atomP.ephemeral.coreByProject[o].loadingState);
          return (n == null ? void 0 : n.type) === "browserStateIsNotBasedOnDiskState";
        }, [a]), e = (0, P9.useCallback)(() => {
          T().transaction(({ stateEditors: o }) => {
            o.studio.historic.panels.outline.selection.set([a]);
          });
        }, [a]), { collapsed: l, setCollapsed: i5 } = F9(a);
        return P9.default.createElement(O6, { depth: t2, label: a.address.projectId, setIsCollapsed: i5, collapsed: l, labelDecoration: r ? P9.default.createElement(v01, null, "Has Conflicts") : null, children: P9.default.createElement(Tk, { project: a, depth: t2 + 1 }), selectionStatus: c.includes(a) ? "selected" : c.some((o) => o.address.projectId === a.address.projectId) ? "descendant-is-selected" : "not-selected", select: e });
      }, Dk = g01;
    });
    var jk, Rz, _k, d01, s01, qk, Nk = x(() => {
      jk = requireDist$2();
      M1();
      f1();
      Rz = I(G());
      c1();
      Wk();
      d01 = B.ul(_k || (_k = V(["\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  padding-right: 4px;\n"]))), s01 = (t2) => v1(() => {
        let a = (0, jk.val)(T().projectsP);
        return Rz.default.createElement(d01, null, Object.keys(a).map((c) => {
          let r = a[c];
          return Rz.default.createElement(Dk, { depth: 0, project: r, key: "projectListItem-".concat(c) });
        }));
      }, []), qk = s01;
    });
    function Dc(t2) {
      let [a, c] = (0, vo.useState)(false);
      return (0, vo.useEffect)(() => {
        let r = (l) => {
          let i5 = a ? 200 : 50, o = 56, n = t2 === "left" ? l.x < i5 : l.x > window.innerWidth - i5;
          n && (n = l.y > o), c(!!n);
        };
        document.addEventListener("mousemove", r);
        let e = () => {
          c(false);
        };
        return document.addEventListener("mouseleave", e), () => {
          document.removeEventListener("mousemove", r), document.removeEventListener("mouseleave", e);
        };
      }, [a]), a;
    }
    var vo, bz = x(() => {
      vo = I(G());
    });
    var j8, E6, Uk, Kk, z01, u01, $k, Fz, go, p01, Qk = x(() => {
      j8 = I(G());
      c1();
      b4();
      Nk();
      M1();
      f1();
      bz();
      E6 = requireDist$2();
      G1();
      Uk = "44px", z01 = B.div(Kk || (Kk = V(["\n  ", ";\n  background-color: transparent;\n  position: absolute;\n  left: 8px;\n  z-index: ", ";\n\n  top: calc(", " + 8px);\n  height: fit-content;\n  max-height: calc(100% - ", ");\n  overflow-y: scroll;\n  overflow-x: hidden;\n  padding: 0;\n  user-select: none;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  scrollbar-width: none;\n\n  display: ", ";\n\n  &:hover {\n    display: block;\n  }\n\n  // Create a small buffer on the bottom to aid selecting the bottom item in a long, scrolling list\n  &::after {\n    content: '';\n    display: block;\n    height: 20px;\n  }\n"])), C1, M5.outlinePanel, Uk, Uk, ({ pin: t2 }) => t2 ? "block" : "none"), u01 = () => {
        var r;
        let t2 = (r = s1(T().atomP.ahistoric.pinOutline)) != null ? r : true, a = s1(p01), c = Dc("left");
        return (0, j8.useLayoutEffect)(() => {
          Fz.set(c);
        }, [c]), (0, j8.useEffect)(() => () => {
          go.set(false), Fz.set(false);
        }, []), j8.default.createElement(z01, { pin: t2 || a, onMouseEnter: () => {
          go.set(true);
        }, onMouseLeave: () => {
          go.set(false);
        } }, j8.default.createElement(qk, null));
      }, $k = u01, Fz = new E6.Atom(false), go = new E6.Atom(false), p01 = (0, E6.prism)(() => {
        let t2 = (0, E6.val)(go.prism), a = (0, E6.val)(Fz.prism);
        return t2 || a;
      });
    });
    var Xk, m01, Yk, Jk = x(() => {
      c1();
      m01 = B.input.attrs({ type: "checkbox" })(Xk || (Xk = V(["\n  outline: none;\n"]))), Yk = m01;
    });
    function M01({ propConfig: t2, editingTools: a, value: c, autoFocus: r }) {
      let e = (0, so.useCallback)((l) => {
        a.permanentlySetValue(!!l.target.checked);
      }, [t2, a]);
      return so.default.createElement(f01, { checked: c, onChange: e, autoFocus: r });
    }
    var so, tA, f01, aA, cA = x(() => {
      so = I(G());
      c1();
      Jk();
      f01 = B(Yk)(tA || (tA = V(["\n  margin-left: 6px;\n\n  :focus {\n    outline: 1px solid #555;\n  }\n"])));
      aA = M01;
    });
    function D6(t2) {
      return (a) => {
        t2.forEach((c) => {
          typeof c == "function" ? c(a) : c != null && (c.current = a);
        });
      };
    }
    var Wc = x(() => {
    });
    function q8(t2, a, c) {
      (0, rA.useEffect)(() => {
        if (!t2 || c === false) return;
        let r = Array.isArray(t2) ? t2.filter((l) => l) : [t2], e = (l) => {
          r.every((i5) => !l.composedPath().includes(i5)) && a(l);
        };
        return window.addEventListener("mousedown", e, { capture: true, passive: false }), () => {
          window.removeEventListener("mousedown", e, { capture: true, passive: false });
        };
      }, [t2, c]);
    }
    var rA, zo = x(() => {
      rA = I(G());
    });
    var b0, x01, F0, eA, C01, lA, L01, iA, H01, s2, oA, I0 = x(() => {
      b0 = I(G());
      c1();
      x01 = "pointer-root", F0 = "--lockedCursor", C01 = B.div(eA || (eA = V(["\n  pointer-events: auto;\n  &.normal {\n    pointer-events: none;\n  }\n"]))), L01 = B.div(lA || (lA = V(["\n  position: absolute;\n  inset: 0;\n  pointer-events: none;\n\n  #pointer-root:not(.normal) > & {\n    pointer-events: auto;\n  }\n"]))), iA = (0, b0.createContext)({}), H01 = (t2) => {
        var l, i5, o, n;
        let [a, c] = (0, b0.useState)([]), r = (0, b0.useMemo)(() => ({ getLock: (v, g) => {
          let s = { className: v, cursor: g };
          return c((z) => [...z, s]), () => {
            c((z) => z.filter((u) => u !== s));
          };
        } }), []), e = (i5 = (l = a[0]) == null ? void 0 : l.cursor) != null ? i5 : "";
        return b0.default.createElement(iA.Provider, { value: r }, b0.default.createElement(C01, { id: x01, className: ((n = (o = a[0]) == null ? void 0 : o.className) != null ? n : "normal") + " " + t2.className }, b0.default.createElement(L01, { style: { cursor: e, [F0]: e } }, t2.children)));
      }, s2 = (t2, a, c) => {
        let r = (0, b0.useContext)(iA);
        (0, b0.useLayoutEffect)(() => {
          if (t2) return r.getLock(a, c);
        }, [t2, a, c]);
      }, oA = H01;
    });
    function uo(t2) {
      return N8.default.createElement(nA.Provider, { value: t2.logger }, t2.children);
    }
    function C0(t2, a) {
      let c = (0, N8.useContext)(nA);
      return (0, N8.useMemo)(() => t2 ? c.named(t2, a) : c, [c, t2, a]);
    }
    var N8, nA, L5 = x(() => {
      N8 = I(G()), nA = N8.default.createContext(null);
    });
    function V01() {
      let t2 = C0("PointerCapturing"), a = P0.default.useRef(null), c = () => a.current != null;
      return (r) => {
        let e, l = (o) => (e = o, a.current = o, o);
        return { capturing: { capturePointer(o) {
          if (t2._debug("Capturing pointer", { forDebugName: r, reason: o }), a.current != null) throw new Error('"'.concat(r, '" attempted capturing pointer for "').concat(o, '" while already captured by "').concat(a.current.debugOwnerName, '" for "').concat(a.current.debugReason, '"'));
          let n = l({ debugOwnerName: r, debugReason: o });
          return { isCapturing() {
            return n === a.current;
          }, release() {
            return n === a.current ? (t2._debug("Releasing pointer", { forDebugName: r, reason: o }), l(null), true) : false;
          } };
        }, isPointerBeingCaptured: c }, forceRelease() {
          e && a.current === e && (t2._debug("Force releasing pointer", { localCapture: e }), l(null));
        } };
      };
    }
    function vA(t2) {
      let a = V01();
      return P0.default.createElement(hA.Provider, { value: a }, P0.default.createElement(w01, { children: t2.children }));
    }
    function po(t2) {
      let a = (0, P0.useContext)(hA), c = (0, P0.useMemo)(() => a(t2), [t2, a]);
      return (0, P0.useEffect)(() => () => {
        c.forceRelease();
      }, [c]), c.capturing;
    }
    var P0, hA, w01, mo = x(() => {
      P0 = I(G());
      L5();
      hA = P0.default.createContext(null), w01 = P0.default.memo(({ children: t2 }) => P0.default.createElement(P0.default.Fragment, null, t2));
    });
    var Iz, gA = x(() => {
      Iz = typeof window != "undefined" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    });
    function S1(t2, a) {
      let c = (0, U8.useRef)(a);
      c.current = a;
      let r = a.shouldPointerLock && !Iz, e = (0, U8.useRef)({ domDragStarted: false }), { capturePointer: l } = po("useDrag for ".concat(a.debugName)), i5 = (0, U8.useRef)({ onDrag: h0, onDragEnd: h0, onClick: h0 }), o = (0, U8.useRef)(), [n, h] = z1(false);
      return (0, U8.useLayoutEffect)(() => {
        if (!t2) return;
        let v = () => {
          let m = e.current.domDragStarted && e.current.detection.detected;
          n.current !== m && (n.current = m);
        }, g = (m) => {
          if (!e.current.domDragStarted) return;
          let M = e.current;
          if (!y01(m, M) && (M.detection.detected || (M.detection.totalDistanceMoved += Math.abs(m.movementY) + Math.abs(m.movementX), M.detection.totalDistanceMoved > B01 && (r && t2.requestPointerLock(), M.detection = { detected: true, dragMovement: { x: 0, y: 0 }, dragEventCount: 0 }, v())), M.detection.detected)) {
            M.detection.dragEventCount += 1;
            let { dragMovement: w } = M.detection;
            if (r) w.x += m.movementX, w.y += m.movementY;
            else {
              let { startPos: H } = M;
              w.x = m.screenX - H.x, w.y = m.screenY - H.y;
            }
            i5.current.onDrag(w.x, w.y, m, m.movementX, m.movementY);
          }
        }, s = (m) => {
          if (z(), !e.current.domDragStarted) return;
          let M = e.current.detection.detected;
          e.current = { domDragStarted: false }, a.shouldPointerLock && !Iz && document.exitPointerLock(), i5.current.onDragEnd(M), window.focus(), M || i5.current.onClick(m), v();
        }, d = () => {
          document.addEventListener("mousemove", g), document.addEventListener("mouseup", s);
        }, z = () => {
          var m;
          (m = o.current) == null || m.release(), document.removeEventListener("mousemove", g), document.removeEventListener("mouseup", s);
        }, u = (m) => {
          c.current.disabled || e.current.domDragStarted && e.current.detection.detected && (c.current.dontBlockMouseDown || (m.stopPropagation(), m.preventDefault()), e.current.detection = { detected: false, totalDistanceMoved: 0 }, v());
        }, f = (m) => {
          var y, k, F, U;
          (y = o.current) == null || y.release();
          let M = c.current;
          if (M.disabled === true || !((k = M.buttons) != null ? k : [0]).includes(m.button)) return;
          let H = M.onDragStart(m);
          H !== false && (i5.current.onDrag = H.onDrag, i5.current.onDragEnd = (F = H.onDragEnd) != null ? F : h0, i5.current.onClick = (U = H.onClick) != null ? U : h0, o.current = l("Drag start"), M.dontBlockMouseDown || (m.stopPropagation(), m.preventDefault()), e.current = { domDragStarted: true, startPos: { x: m.screenX, y: m.screenY }, detection: { detected: false, totalDistanceMoved: 0 } }, v(), d());
        }, p = (m) => {
          f(m);
        };
        return t2.addEventListener("mousedown", p), t2.addEventListener("click", u), () => {
          var m, M;
          z(), t2.removeEventListener("mousedown", p), t2.removeEventListener("click", u), e.current.domDragStarted && ((M = (m = i5.current).onDragEnd) == null || M.call(m, e.current.detection.detected)), e.current = { domDragStarted: false }, v();
        };
      }, [t2]), s2(h && !!a.lockCSSCursorTo, "dragging", a.lockCSSCursorTo), [h];
    }
    function y01(t2, a) {
      return (!a.detection.detected || a.detection.detected && a.detection.dragEventCount < 3) && (Math.abs(t2.movementX) > dA || Math.abs(t2.movementY) > dA);
    }
    var U8, B01, dA, M2 = x(() => {
      U8 = I(G());
      I0();
      mo();
      W8();
      gA();
      P1();
      B01 = 3, dA = 100;
    });
    function F01(t2) {
      return isNaN(t2) ? "NaN" : fa(t2) ? t2.toFixed(0) : Xv(t2, 3).toString();
    }
    var mA, fA, t4, sA, Pz, zA, S01, uA, k01, pA, A01, R01, b01, G9, fo = x(() => {
      H2();
      mA = I(G()), fA = I(G()), t4 = I(G());
      c1();
      Wc();
      P1();
      zo();
      M2();
      Pz = B.div(sA || (sA = V(["\n  height: 100%;\n  width: 100%;\n  position: relative;\n  z-index: 0;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n\n  &:after {\n    position: absolute;\n    inset: 1px 0 2px;\n    display: block;\n    content: ' ';\n    background-color: transparent;\n    border: 1px solid transparent;\n    z-index: -2;\n    box-sizing: border-box;\n    border-radius: 1px;\n  }\n\n  &:hover,\n  &.dragging,\n  &.editingViaKeyboard {\n    &:after {\n      background-color: #10101042;\n      border-color: #00000059;\n    }\n  }\n"]))), S01 = B.input(zA || (zA = V(["\n  background: transparent;\n  border: 1px solid transparent;\n  color: rgba(255, 255, 255, 0.9);\n  padding: 1px 6px;\n  font: inherit;\n  outline: none;\n  cursor: ew-resize;\n  text-align: left;\n  width: 100%;\n  height: calc(100% - 4px);\n  border-radius: 2px;\n\n  &:focus {\n    cursor: text;\n  }\n"]))), k01 = B.div(uA || (uA = V(["\n  position: absolute;\n  inset: 3px 2px 4px;\n  transform: scale(var(--percentage), 1);\n  transform-origin: top left;\n  background-color: #2d5561;\n  z-index: -1;\n  border-radius: 2px;\n  pointer-events: none;\n\n  ", ".dragging &, ", ".noFocus:hover & {\n    background-color: #338198;\n  }\n"])), Pz, Pz), A01 = B.div(pA || (pA = V(["\n  display: contents;\n"]))), R01 = (t2) => true, b01 = (t2) => {
        var u;
        let [a] = z1({ mode: "noFocus" }), c = (u = t2.isValid) != null ? u : R01, r = (0, t4.useRef)(t2);
        r.current = t2;
        let e = (0, t4.useRef)(null);
        q8(e.current, () => {
          e.current.blur();
        }, a.current.mode === "editingViaKeyboard");
        let l = (0, t4.useRef)(null), i5 = (0, t4.useMemo)(() => {
          let f = (U) => {
            let A = U.target, { value: P } = A, C = a.current;
            a.current = D(S({}, C), { currentEditedValueInString: P });
            let E = parseFloat(P);
            !isFinite(E) || !c(E) || r.current.temporarilySetValue(E);
          }, p = () => {
            a.current.mode === "editingViaKeyboard" && (m(), a.current = { mode: "noFocus" }), t2.onBlur && t2.onBlur();
          }, m = () => {
            let U = a.current, A = parseFloat(U.currentEditedValueInString);
            !isFinite(A) || !c(A) || U.valueBeforeEditing === A ? r.current.discardTemporaryValue() : r.current.permanentlySetValue(A);
          }, M = (U) => {
            U.key === "Escape" ? (r.current.discardTemporaryValue(), a.current = { mode: "noFocus" }, e.current.blur()) : (U.key === "Enter" || U.key === "Tab") && (m(), e.current.blur());
          }, w = (U) => {
            a.current.mode === "noFocus" && (e.current.focus(), U.preventDefault()), U.stopPropagation();
          }, H = () => {
            a.current.mode === "noFocus" ? y() : a.current.mode;
          }, y = () => {
            let U = r.current.value;
            a.current = { mode: "editingViaKeyboard", currentEditedValueInString: String(U), valueBeforeEditing: U }, setTimeout(() => {
              e.current.focus(), e.current.setSelectionRange(0, 100);
            });
          }, k;
          return { inputChange: f, onBlur: p, transitionToDraggingMode: () => {
            var C;
            let U = r.current.value;
            k = (C = e.current) == null ? void 0 : C.getBoundingClientRect().width, a.current = { mode: "dragging" };
            let A = U, P = U;
            return l.current = document.body.style.cursor, { onDrag(E, a1, j, K) {
              let Z = j.altKey ? K / 10 : K, J = P + t2.nudge({ deltaX: Z, deltaFraction: Z / k, magnitude: 1 });
              P = t2.range ? b1(J, t2.range[0], t2.range[1]) : J, r.current.temporarilySetValue(P);
            }, onDragEnd(E) {
              E ? (A === P ? r.current.discardTemporaryValue() : r.current.permanentlySetValue(P), a.current = { mode: "noFocus" }) : (r.current.discardTemporaryValue(), a.current = { mode: "noFocus" });
            }, onClick() {
              e.current.focus(), e.current.setSelectionRange(0, 100);
            } };
          }, onInputKeyDown: M, onClick: w, onFocus: H };
        }, []);
        (0, mA.useEffect)(() => () => {
          i5.onBlur();
        }, []);
        let o = a.current.mode !== "editingViaKeyboard" ? F01(t2.value) : a.current.currentEditedValueInString;
        typeof o == "number" && isNaN(o) && (o = "NaN");
        let n = [e];
        t2.inputRef && n.push(t2.inputRef);
        let h = t4.default.createElement(S01, { key: "input", type: "text", onChange: i5.inputChange, value: o, onBlur: i5.onBlur, onKeyDown: i5.onInputKeyDown, onClick: i5.onClick, onFocus: i5.onFocus, ref: D6(n), onMouseDown: (f) => {
          f.stopPropagation();
        }, onDoubleClick: (f) => {
          f.preventDefault(), f.stopPropagation();
        }, autoFocus: t2.autoFocus }), { range: v } = t2, g = parseFloat(o), s = v ? t4.default.createElement(k01, { style: { "--percentage": b1((g - v[0]) / (v[1] - v[0]), 0, 1) } }) : null, [d, z] = (0, fA.useState)(null);
        return S1(d, { debugName: "form/BasicNumberInput", onDragStart: i5.transitionToDraggingMode, lockCSSCursorTo: "ew-resize", shouldPointerLock: true, disabled: a.current.mode === "editingViaKeyboard" }), t4.default.createElement(Pz, { className: t2.className + " " + a.current.mode }, t4.default.createElement(A01, { ref: z }, h), s);
      };
      G9 = b01;
    });
    function I01({ propConfig: t2, editingTools: a, value: c, autoFocus: r }) {
      let e = (0, Mo.useCallback)((l) => t2.nudgeFn(D(S({}, l), { config: t2 })), [t2]);
      return Mo.default.createElement(G9, { value: c, temporarilySetValue: a.temporarilySetValue, discardTemporaryValue: a.discardTemporaryValue, permanentlySetValue: a.permanentlySetValue, range: t2.range, nudge: e, autoFocus: r });
    }
    var Mo, xo, Gz = x(() => {
      fo();
      Mo = I(G());
      xo = I01;
    });
    function T01({ value: t2, onChange: a, options: c, autoFocus: r }) {
      let e = (0, T9.useCallback)((l) => {
        a(String(l.target.value));
      }, [a]);
      return T9.default.createElement(LA, { role: "radiogroup" }, Object.keys(c).map((l, i5) => T9.default.createElement(P01, { key: "label-" + i5, "data-checked": t2 === l }, c[l], T9.default.createElement(G01, { type: "radio", checked: t2 === l, value: l, onChange: e, name: "switchbox", autoFocus: r }))));
    }
    var T9, MA, LA, xA, P01, CA, G01, HA, VA = x(() => {
      R0();
      T9 = I(G());
      c1();
      LA = B.form(MA || (MA = V(["\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  vertical-align: middle;\n  justify-content: stretch;\n  height: 24px;\n  width: 100%;\n"]))), P01 = B.label(xA || (xA = V(["\n  padding: 0 0.5em;\n  background: transparent;\n  /* background: #373748; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n  color: #a7a7a7;\n  border: 1px solid transparent;\n  box-sizing: border-box;\n  border-right-width: 0px;\n\n  & + &:last-child {\n    border-right-width: 1px;\n  }\n\n  ", ":hover > & {\n    border-color: #1c2123;\n    /* background-color: #373748; */\n    /* color: ", "; */\n  }\n\n  &&:hover {\n    background-color: #464654;\n  }\n\n  &&[data-checked='true'] {\n    color: white;\n    background: #3f3f4c;\n  }\n"])), LA, A6(0.1, "white")), G01 = B.input(CA || (CA = V(["\n  position: absolute;\n  opacity: 0;\n  pointer-events: none;\n  width: 0;\n  height: 0;\n"])));
      HA = T01;
    });
    var wA = x(() => {
    });
    var Tz, Zz, Oz, Ez = x(() => {
      Tz = I(G()), Zz = { color: void 0, size: void 0, className: void 0, style: void 0, attr: void 0 }, Oz = Tz.default.createContext && Tz.default.createContext(Zz);
    });
    function BA(t2) {
      return t2 && t2.map(function(a, c) {
        return Z9.default.createElement(a.tag, W6({ key: c }, a.attr), BA(a.child));
      });
    }
    function N1(t2) {
      return function(a) {
        return Z9.default.createElement(O01, W6({ attr: W6({}, t2.attr) }, a), BA(t2.child));
      };
    }
    function O01(t2) {
      var a = function(c) {
        var r = t2.attr, e = t2.size, l = t2.title, i5 = Z01(t2, ["attr", "size", "title"]), o = e || c.size || "1em", n;
        return c.className && (n = c.className), t2.className && (n = (n ? n + " " : "") + t2.className), Z9.default.createElement("svg", W6({ stroke: "currentColor", fill: "currentColor", strokeWidth: "0" }, c.attr, r, i5, { className: n, style: W6(W6({ color: t2.color || c.color }, c.style), t2.style), height: o, width: o, xmlns: "http://www.w3.org/2000/svg" }), l && Z9.default.createElement("title", null, l), t2.children);
      };
      return Oz !== void 0 ? Z9.default.createElement(Oz.Consumer, null, function(c) {
        return a(c);
      }) : a(Zz);
    }
    var Z9, W6, Z01, yA = x(() => {
      Z9 = I(G());
      Ez();
      W6 = function() {
        return W6 = Object.assign || function(t2) {
          for (var a, c = 1, r = arguments.length; c < r; c++) {
            a = arguments[c];
            for (var e in a) Object.prototype.hasOwnProperty.call(a, e) && (t2[e] = a[e]);
          }
          return t2;
        }, W6.apply(this, arguments);
      }, Z01 = function(t2, a) {
        var c = {};
        for (var r in t2) Object.prototype.hasOwnProperty.call(t2, r) && a.indexOf(r) < 0 && (c[r] = t2[r]);
        if (t2 != null && typeof Object.getOwnPropertySymbols == "function") for (var e = 0, r = Object.getOwnPropertySymbols(t2); e < r.length; e++) a.indexOf(r[e]) < 0 && Object.prototype.propertyIsEnumerable.call(t2, r[e]) && (c[r[e]] = t2[r[e]]);
        return c;
      };
    });
    var z2 = x(() => {
      wA();
      yA();
      Ez();
    });
    var SA = x(() => {
      z2();
    });
    var kA = x(() => {
      z2();
    });
    function AA(t2) {
      return N1({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z" } }] })(t2);
    }
    var RA = x(() => {
      z2();
    });
    var bA = x(() => {
      z2();
    });
    var FA = x(() => {
      z2();
    });
    function IA(t2) {
      return N1({ attr: { viewBox: "0 0 8 16" }, child: [{ tag: "path", attr: { fillRule: "evenodd", d: "M5.5 3L7 4.5 3.25 8 7 11.5 5.5 13l-5-5 5-5z" } }] })(t2);
    }
    function PA(t2) {
      return N1({ attr: { viewBox: "0 0 8 16" }, child: [{ tag: "path", attr: { fillRule: "evenodd", d: "M7.5 8l-5 5L1 11.5 4.75 8 1 4.5 2.5 3l5 5z" } }] })(t2);
    }
    var GA = x(() => {
      z2();
    });
    var TA = x(() => {
      z2();
    });
    var ZA = x(() => {
      z2();
    });
    var OA = x(() => {
      z2();
    });
    var EA = x(() => {
      z2();
    });
    var DA = x(() => {
      z2();
    });
    var WA = x(() => {
      z2();
    });
    var _A = x(() => {
      z2();
    });
    var jA = x(() => {
      z2();
    });
    var qA = x(() => {
      z2();
    });
    function Co(t2) {
      return N1({ attr: { fill: "none", viewBox: "0 0 24 24", stroke: "currentColor" }, child: [{ tag: "path", attr: { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M9 5l7 7-7 7" } }] })(t2);
    }
    var NA = x(() => {
      z2();
    });
    var UA = x(() => {
      z2();
    });
    var KA = x(() => {
      z2();
    });
    var $A = x(() => {
      z2();
    });
    function QA(t2) {
      return N1({ attr: { viewBox: "0 0 24 24", fill: "none" }, child: [{ tag: "path", attr: { d: "M6 9.65685L7.41421 11.0711L11.6569 6.82843L15.8995 11.0711L17.3137 9.65685L11.6569 4L6 9.65685Z", fill: "currentColor" } }, { tag: "path", attr: { d: "M6 14.4433L7.41421 13.0291L11.6569 17.2717L15.8995 13.0291L17.3137 14.4433L11.6569 20.1001L6 14.4433Z", fill: "currentColor" } }] })(t2);
    }
    var XA = x(() => {
      z2();
    });
    function YA(t2) {
      return N1({ attr: { viewBox: "0 0 16 16", fill: "currentColor" }, child: [{ tag: "path", attr: { d: "M14 10.44l-.413.56H2.393L2 10.46 7.627 5h.827L14 10.44z" } }] })(t2);
    }
    var JA = x(() => {
      z2();
    });
    var K8 = x(() => {
      SA();
      kA();
      RA();
      bA();
      FA();
      GA();
      TA();
      ZA();
      OA();
      EA();
      DA();
      WA();
      _A();
      jA();
      qA();
      NA();
      UA();
      KA();
      $A();
      XA();
      JA();
    });
    function _01({ value: t2, onChange: a, options: c, className: r, autoFocus: e }) {
      let l = (0, _6.useCallback)((i5) => {
        a(String(i5.target.value));
      }, [a]);
      return _6.default.createElement(E01, null, _6.default.createElement(W01, { className: r, value: t2, onChange: l, autoFocus: e }, Object.keys(c).map((i5, o) => _6.default.createElement("option", { key: "option-" + o, value: i5 }, c[i5]))), _6.default.createElement(D01, null, _6.default.createElement(QA, null)));
    }
    var _6, tR, E01, aR, D01, cR, W01, rR, eR = x(() => {
      _6 = I(G());
      c1();
      K8();
      E01 = B.div(tR || (tR = V(["\n  width: 100%;\n  position: relative;\n"]))), D01 = B.div(aR || (aR = V(["\n  position: absolute;\n  right: 0px;\n  top: 0;\n  bottom: 0;\n  width: 1.5em;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  color: #6b7280;\n  pointer-events: none;\n"]))), W01 = B.select(cR || (cR = V(["\n  appearance: none;\n  background-color: transparent;\n  box-sizing: border-box;\n  border: 1px solid transparent;\n  color: rgba(255, 255, 255, 0.85);\n  padding: 1px 6px;\n  font: inherit;\n  outline: none;\n  text-align: left;\n  width: 100%;\n  border-radius: 2px;\n  /*\n  looks like putting percentages in the height of a select box doesn't work in Firefox. Not sure why.\n  So we're hard-coding the height to 26px, unlike all other inputs that use a relative height.\n  */\n  height: 26px /* calc(100% - 4px); */;\n\n  @supports (-moz-appearance: none) {\n    /* Ugly hack to remove the extra left padding that shows up only in Firefox */\n    text-indent: -2px;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: #10101042;\n    border-color: #00000059;\n  }\n"])));
      rR = _01;
    });
    function j01({ propConfig: t2, editingTools: a, value: c, autoFocus: r }) {
      let e = (0, _c.useCallback)((l) => {
        a.permanentlySetValue(l);
      }, [t2, a]);
      return t2.as === "menu" ? _c.default.createElement(rR, { value: c, onChange: e, options: t2.valuesAndLabels, autoFocus: r }) : _c.default.createElement(HA, { value: c, onChange: e, options: t2.valuesAndLabels, autoFocus: r });
    }
    var _c, lR, iR = x(() => {
      _c = I(G());
      VA();
      eR();
      lR = j01;
    });
    var nR, $8, oR, q01, N01, U01, O9, Lo = x(() => {
      c1();
      nR = I(G()), $8 = I(G());
      Wc();
      P1();
      zo();
      q01 = B.input.attrs({ type: "text" })(oR || (oR = V(["\n  background: transparent;\n  border: 1px solid transparent;\n  color: rgba(255, 255, 255, 0.9);\n  padding: 1px 6px;\n  font: inherit;\n  outline: none;\n  cursor: text;\n  text-align: left;\n  width: 100%;\n  height: calc(100% - 4px);\n  border-radius: 2px;\n  border: 1px solid transparent;\n  box-sizing: border-box;\n\n  &:hover {\n    background-color: #10101042;\n    border-color: #00000059;\n  }\n\n  &:hover,\n  &:focus {\n    cursor: text;\n    background-color: #10101042;\n    border-color: #00000059;\n  }\n\n  &.invalid {\n    border-color: red;\n  }\n"]))), N01 = (t2) => true, U01 = (t2) => {
        var h, v;
        let [a] = z1({ mode: "noFocus" }), c = (h = t2.isValid) != null ? h : N01, r = (0, $8.useRef)(t2);
        r.current = t2;
        let e = (0, $8.useRef)(null);
        q8(e.current, () => {
          e.current.blur();
        }, a.current.mode === "editingViaKeyboard");
        let l = (0, $8.useMemo)(() => {
          let g = (m) => {
            let M = m.target, { value: w } = M, H = a.current;
            a.current = D(S({}, H), { currentEditedValueInString: w }), c(w) && r.current.temporarilySetValue(w);
          }, s = () => {
            var m, M;
            a.current.mode === "editingViaKeyboard" && (d(), a.current = { mode: "noFocus" }), (M = (m = r.current).onBlur) == null || M.call(m);
          }, d = () => {
            let m = a.current, M = m.currentEditedValueInString;
            c(M) ? m.valueBeforeEditing === M ? r.current.discardTemporaryValue() : r.current.permanentlySetValue(M) : r.current.discardTemporaryValue();
          }, z = (m) => {
            m.key === "Escape" ? (r.current.discardTemporaryValue(), a.current = { mode: "noFocus" }, e.current.blur()) : (m.key === "Enter" || m.key === "Tab") && (d(), e.current.blur());
          }, u = (m) => {
            a.current.mode === "noFocus" && (e.current.focus(), m.preventDefault()), m.stopPropagation();
          }, f = () => {
            a.current.mode === "noFocus" ? p() : a.current.mode;
          }, p = () => {
            let m = r.current.value;
            a.current = { mode: "editingViaKeyboard", currentEditedValueInString: String(m), valueBeforeEditing: m }, setTimeout(() => {
              e.current.focus();
            });
          };
          return { inputChange: g, onBlur: s, onInputKeyDown: z, onClick: u, onFocus: f };
        }, []);
        (0, nR.useEffect)(() => () => {
          l.onBlur();
        }, []);
        let i5 = a.current.mode !== "editingViaKeyboard" ? t2.value : a.current.currentEditedValueInString, o = [e];
        return t2.inputRef && o.push(t2.inputRef), $8.default.createElement(q01, { key: "input", type: "text", className: "".concat((v = t2.className) != null ? v : "", " ").concat(c(i5) ? "" : "invalid"), onChange: l.inputChange, value: i5, onBlur: l.onBlur, onKeyDown: l.onInputKeyDown, onClick: l.onClick, onFocus: l.onFocus, ref: D6(o), onMouseDown: (g) => {
          g.stopPropagation();
        }, onDoubleClick: (g) => {
          g.preventDefault(), g.stopPropagation();
        }, autoFocus: t2.autoFocus });
      }, O9 = U01;
    });
    function K01({ editingTools: t2, value: a, autoFocus: c }) {
      return hR.default.createElement(O9, { value: a, temporarilySetValue: t2.temporarilySetValue, discardTemporaryValue: t2.discardTemporaryValue, permanentlySetValue: t2.permanentlySetValue, autoFocus: c });
    }
    var hR, vR, gR = x(() => {
      hR = I(G());
      Lo();
      vR = K01;
    });
    function dR(t2) {
      t2 = t2.trim().toLowerCase();
      let a = t2.match(Dz);
      if (!a) return { r: 0, g: 0, b: 0, a: 1 };
      let c = $01(a[1]);
      return { r: parseInt(c.substr(0, 2), 16) / 255, g: parseInt(c.substr(2, 2), 16) / 255, b: parseInt(c.substr(4, 2), 16) / 255, a: parseInt(c.substr(6, 2), 16) / 255 };
    }
    function Ho(t2, { removeAlphaIfOpaque: a = false } = {}) {
      let c = (t2.a * 255 | 256).toString(16).slice(1), r = (t2.r * 255 | 256).toString(16).slice(1) + (t2.g * 255 | 256).toString(16).slice(1) + (t2.b * 255 | 256).toString(16).slice(1) + (a && c === "ff" ? "" : c);
      return "#".concat(r);
    }
    function Vo(t2) {
      return D(S({}, t2), { toString() {
        return Ho(this, { removeAlphaIfOpaque: true });
      } });
    }
    function $01(t2) {
      switch (t2.length) {
        case 3:
          return "".concat(t2.repeat(2), "ff");
        case 4:
          let a = t2.substr(0, 3), c = t2[3];
          return "".concat(a.repeat(2)).concat(c.repeat(2));
        case 6:
          return "".concat(t2, "ff");
      }
      return t2;
    }
    var Dz, Wz = x(() => {
      Dz = /^#*([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;
    });
    function E9(t2) {
      let a = (0, _z2.useRef)(t2), c = (0, _z2.useRef)((r) => {
        a.current && a.current(r);
      });
      return a.current = t2, c.current;
    }
    var _z2, jz = x(() => {
      _z2 = I(G());
    });
    var G4, jc = x(() => {
      G4 = (t2, a = 0, c = 1) => t2 > c ? c : t2 < a ? a : t2;
    });
    var j6, sR, zR, wo, Bo = x(() => {
      j6 = I(G()), sR = (0, j6.createContext)(void 0), zR = ({ children: t2 }) => {
        let [a, c] = (0, j6.useState)(false);
        return j6.default.createElement(sR.Provider, { value: { editing: a, setEditing: c } }, t2);
      }, wo = () => (0, j6.useContext)(sR);
    });
    var a4, qc, Q01, qz, uR, pR, X01, mR, Y01, J01, q6, Nc = x(() => {
      a4 = I(G());
      jz();
      jc();
      c1();
      Bo();
      qc = (t2) => "touches" in t2, Q01 = (t2, a) => {
        for (let c = 0; c < t2.length; c++) if (t2[c].identifier === a) return t2[c];
        return t2[0];
      }, qz = (t2) => t2 && t2.ownerDocument.defaultView || self, uR = (t2, a, c) => {
        let r = t2.getBoundingClientRect(), e = qc(a) ? Q01(a.touches, c) : a;
        return { left: G4((e.pageX - (r.left + qz(t2).pageXOffset)) / r.width), top: G4((e.pageY - (r.top + qz(t2).pageYOffset)) / r.height) };
      }, pR = (t2) => {
        !qc(t2) && t2.preventDefault();
      }, X01 = (t2, a) => a && !qc(t2), Y01 = B.div(mR || (mR = V(["\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: inherit;\n  outline: none;\n  /* Don't trigger the default scrolling behavior when the event is originating from this element */\n  touch-action: none;\n"]))), J01 = (r) => {
        var e = r, { onMove: t2, onKey: a } = e, c = m4(e, ["onMove", "onKey"]);
        let l = (0, a4.useRef)(null), i5 = E9(t2), o = E9(a), n = (0, a4.useRef)(null), h = (0, a4.useRef)(false), { setEditing: v } = wo(), [g, s, d] = (0, a4.useMemo)(() => {
          let z = ({ nativeEvent: M }) => {
            let w = l.current;
            if (w && (pR(M), !(X01(M, h.current) || !w))) {
              if (qc(M)) {
                h.current = true;
                let H = M.changedTouches || [];
                H.length && (n.current = H[0].identifier);
              }
              w.focus(), v(true), i5(uR(w, M, n.current)), m(true);
            }
          }, u = (M) => {
            pR(M), (qc(M) ? M.touches.length > 0 : M.buttons > 0) && l.current ? i5(uR(l.current, M, n.current)) : (v(false), m(false));
          }, f = (M) => {
            v(false), m(false);
          }, p = (M) => {
            let w = M.which || M.keyCode;
            w < 37 || w > 40 || (M.preventDefault(), o({ left: w === 39 ? 0.05 : w === 37 ? -0.05 : 0, top: w === 40 ? 0.05 : w === 38 ? -0.05 : 0 }));
          };
          function m(M) {
            let w = h.current, H = l.current, y = qz(H), k = M ? y.addEventListener : y.removeEventListener;
            k(w ? "touchmove" : "mousemove", u), k(w ? "touchend" : "mouseup", f);
          }
          return [z, p, m];
        }, [o, i5]);
        return (0, a4.useEffect)(() => d, [d]), a4.default.createElement(Y01, D(S({}, c), { onTouchStart: g, onMouseDown: g, ref: l, onKeyDown: s, tabIndex: 0, role: "slider" }));
      }, q6 = a4.default.memo(J01);
    });
    var Nz, fR, t31, MR, a31, xR, c31, D9, yo = x(() => {
      Nz = I(G());
      c1();
      Nc();
      t31 = B(q6)(fR || (fR = V([""]))), a31 = B.div(MR || (MR = V(["\n  position: absolute;\n  z-index: 1;\n  box-sizing: border-box;\n  width: 16px;\n  height: 16px;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  border: 1px solid #ffffff00;\n  border-radius: 2px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n\n  ", ":focus & {\n    transform: translate(-50%, -50%) scale(1.1);\n  }\n"])), t31), c31 = B.div(xR || (xR = V(["\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  border-radius: inherit;\n"]))), D9 = ({ className: t2, color: a, left: c, top: r = 0.5 }) => {
        let e = { top: "".concat(r * 100, "%"), left: "".concat(c * 100, "%") };
        return Nz.default.createElement(a31, { style: e, className: t2 }, Nz.default.createElement(c31, { style: { backgroundColor: a } }));
      };
    });
    var A2, Uc = x(() => {
      A2 = (t2, a = 0, c = Math.pow(10, a)) => Math.round(c * t2) / c;
    });
    var CR, Kc, So, LR, HR, $c = x(() => {
      Uc();
      CR = ({ h: t2, s: a, v: c, a: r }) => {
        let e = (200 - a) * c / 100;
        return { h: A2(t2), s: A2(e > 0 && e < 200 ? a * c / 100 / (e <= 100 ? e : 200 - e) * 100 : 0), l: A2(e / 2), a: A2(r, 2) };
      }, Kc = (t2) => {
        let { h: a, s: c, l: r } = CR(t2);
        return "hsl(".concat(a, ", ").concat(c, "%, ").concat(r, "%)");
      }, So = (t2) => {
        let { h: a, s: c, l: r, a: e } = CR(t2);
        return "hsla(".concat(a, ", ").concat(c, "%, ").concat(r, "%, ").concat(e, ")");
      }, LR = ({ h: t2, s: a, v: c, a: r }) => {
        t2 = t2 / 360 * 6, a = a / 100, c = c / 100;
        let e = Math.floor(t2), l = c * (1 - a), i5 = c * (1 - (t2 - e) * a), o = c * (1 - (1 - t2 + e) * a), n = e % 6;
        return { r: A2([c, i5, l, l, o, c][n] * 255), g: A2([o, c, c, i5, l, l][n] * 255), b: A2([l, l, o, c, c, i5][n] * 255), a: A2(r, 2) };
      }, HR = ({ r: t2, g: a, b: c, a: r }) => {
        let e = Math.max(t2, a, c), l = e - Math.min(t2, a, c), i5 = l ? e === t2 ? (a - c) / l : e === a ? 2 + (c - t2) / l : 4 + (t2 - a) / l : 0;
        return { h: A2(60 * (i5 < 0 ? i5 + 6 : i5)), s: A2(e ? l / e * 100 : 0), v: A2(e / 255 * 100), a: r };
      };
    });
    var Qc, VR, r31, wR, e31, l31, BR, yR = x(() => {
      Qc = I(G());
      Nc();
      yo();
      $c();
      jc();
      Uc();
      c1();
      r31 = B.div(VR || (VR = V(["\n  position: relative;\n  height: 16px;\n  border-radius: 2px;\n\n  background: linear-gradient(\n    to right,\n    #f00 0%,\n    #ff0 17%,\n    #0f0 33%,\n    #0ff 50%,\n    #00f 67%,\n    #f0f 83%,\n    #f00 100%\n  );\n"]))), e31 = B(D9)(wR || (wR = V(["\n  z-index: 2;\n"]))), l31 = ({ className: t2, hue: a, onChange: c }) => Qc.default.createElement(r31, { className: t2 }, Qc.default.createElement(q6, { onMove: (l) => {
        c({ h: 360 * l.left });
      }, onKey: (l) => {
        c({ h: G4(a + l.left * 360, 0, 360) });
      }, "aria-label": "Hue", "aria-valuetext": A2(a) }, Qc.default.createElement(e31, { left: a / 360, color: Kc({ h: a, s: 100, v: 100, a: 1 }) }))), BR = Qc.default.memo(l31);
    });
    var Xc, SR, i31, kR, o31, n31, AR, RR = x(() => {
      Xc = I(G());
      Nc();
      yo();
      $c();
      jc();
      Uc();
      c1();
      i31 = B.div(SR || (SR = V(["\n  position: relative;\n  flex-grow: 1;\n  border-color: transparent; /* Fixes https://github.com/omgovich/react-colorful/issues/139 */\n  border-bottom: 12px solid #000;\n  border-radius: 2px;\n  background-image: linear-gradient(to top, #000, rgba(0, 0, 0, 0)),\n    linear-gradient(to right, #fff, rgba(255, 255, 255, 0));\n\n  // Improve elements rendering on light backgrounds\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.05);\n"]))), o31 = B(D9)(kR || (kR = V(["\n  z-index: 3;\n"]))), n31 = ({ hsva: t2, onChange: a }) => {
        let c = (l) => {
          a({ s: l.left * 100, v: 100 - l.top * 100 });
        }, r = (l) => {
          a({ s: G4(t2.s + l.left * 100, 0, 100), v: G4(t2.v - l.top * 100, 0, 100) });
        }, e = { backgroundColor: Kc({ h: t2.h, s: 100, v: 100, a: 1 }) };
        return Xc.default.createElement(i31, { style: e }, Xc.default.createElement(q6, { onMove: c, onKey: r, "aria-label": "Color", "aria-valuetext": "Saturation ".concat(A2(t2.s), "%, Brightness ").concat(A2(t2.v), "%") }, Xc.default.createElement(o31, { top: 1 - t2.v / 100, left: t2.s / 100, color: Kc(t2) })));
      }, AR = Xc.default.memo(n31);
    });
    var Yc, bR, h31, FR, v31, IR, g31, PR, GR = x(() => {
      Yc = I(G());
      Nc();
      yo();
      $c();
      jc();
      Uc();
      c1();
      h31 = B.div(bR || (bR = V([`
  position: relative;
  height: 16px;
  border-radius: 2px;
  // Checkerboard
  background-color: #fff;
  background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><rect x="8" width="8" height="8"/><rect y="8" width="8" height="8"/></svg>');
`]))), v31 = B.div.attrs(({ colorFrom: t2, colorTo: a }) => ({ style: { backgroundImage: "linear-gradient(90deg, ".concat(t2, ", ").concat(a, ")") } }))(FR || (FR = V(["\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  border-radius: inherit;\n\n  // Improve rendering on light backgrounds\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.05);\n"]))), g31 = B(D9)(IR || (IR = V([`
  // Checkerboard
  background-color: #fff;
  background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><rect x="8" width="8" height="8"/><rect y="8" width="8" height="8"/></svg>');
`]))), PR = ({ className: t2, hsva: a, onChange: c }) => {
        let r = (o) => {
          c({ a: o.left });
        }, e = (o) => {
          c({ a: G4(a.a + o.left) });
        }, l = So(Object.assign({}, a, { a: 0 })), i5 = So(Object.assign({}, a, { a: 1 }));
        return Yc.default.createElement(h31, { className: t2 }, Yc.default.createElement(v31, { colorFrom: l, colorTo: i5 }), Yc.default.createElement(q6, { onMove: r, onKey: e, "aria-label": "Alpha", "aria-valuetext": "".concat(A2(a.a * 100), "%") }, Yc.default.createElement(g31, { left: a.a, color: So(a) })));
      };
    });
    var Jc, Uz = x(() => {
      Jc = (t2, a) => {
        if (t2 === a) return true;
        for (let c in t2) if (t2[c] !== a[c]) return false;
        return true;
      };
    });
    function TR(t2, a, c, r) {
      let { editing: e } = wo(), [l, i5] = (0, k3.useState)(a), o = E9(c), n = E9(r), h = e ? l : a, [v, g] = (0, k3.useState)(() => t2.toHsva(h)), s = (0, k3.useRef)({ color: h, hsva: v }), d = (0, k3.useRef)({ color: h, hsva: v });
      (0, k3.useEffect)(() => {
        e && i5(s.current.color);
      }, [e]), (0, k3.useEffect)(() => {
        let u = t2.fromHsva(v);
        e ? !Jc(v, s.current.hsva) && !t2.equal(u, s.current.color) && (s.current = { hsva: v, color: u }, i5(u), o(u)) : !Jc(v, d.current.hsva) && !t2.equal(u, d.current.color) && (d.current = { hsva: v, color: u }, s.current = { hsva: v, color: u }, n(u));
      }, [e, v, t2, o, n]), (0, k3.useEffect)(() => {
        if (!e && !t2.equal(h, d.current.color)) {
          let u = t2.toHsva(h);
          d.current = { hsva: u, color: h }, g(u);
        }
      }, [e, h, t2]);
      let z = (0, k3.useCallback)((u) => {
        g((f) => Object.assign({}, f, u));
      }, []);
      return [v, z];
    }
    var k3, ZR = x(() => {
      k3 = I(G());
      Uz();
      jz();
      Bo();
    });
    var Q8, OR, d31, ER, DR = x(() => {
      Q8 = I(G());
      yR();
      RR();
      GR();
      ZR();
      c1();
      d31 = B.div(OR || (OR = V(["\n  position: relative;\n  display: flex;\n  gap: 4px;\n  flex-direction: column;\n  width: 200px;\n  height: 200px;\n  user-select: none;\n  cursor: default;\n"]))), ER = (o) => {
        var n = o, { className: t2, colorModel: a, color: c = a.defaultColor, temporarilySetValue: r, permanentlySetValue: e, discardTemporaryValue: l } = n, i5 = m4(n, ["className", "colorModel", "color", "temporarilySetValue", "permanentlySetValue", "discardTemporaryValue"]);
        let [h, v] = TR(a, c, r, e);
        return (0, Q8.useEffect)(() => () => {
          l();
        }, []), Q8.default.createElement(d31, S({}, i5), Q8.default.createElement(AR, { hsva: h, onChange: v }), Q8.default.createElement(BR, { hue: h.h, onChange: v }), Q8.default.createElement(PR, { hsva: h, onChange: v }));
      };
    });
    var Kz, s31, z31, u31, $z, WR = x(() => {
      Kz = I(G());
      DR();
      Uz();
      $c();
      Bo();
      s31 = (t2) => ({ r: t2.r / 255, g: t2.g / 255, b: t2.b / 255, a: t2.a }), z31 = (t2) => ({ r: t2.r * 255, g: t2.g * 255, b: t2.b * 255, a: t2.a }), u31 = { defaultColor: { r: 0, g: 0, b: 0, a: 1 }, toHsva: (t2) => HR(z31(t2)), fromHsva: (t2) => s31(LR(t2)), equal: Jc }, $z = (t2) => Kz.default.createElement(zR, null, Kz.default.createElement(ER, D(S({}, t2), { permanentlySetValue: (a) => {
        t2.permanentlySetValue(a);
      }, colorModel: u31 })));
    });
    var _R = x(() => {
      WR();
    });
    var jR, p31, qR, NR = x(() => {
      jR = I(G()), p31 = function(t2) {
        (0, jR.useEffect)(t2, []);
      }, qR = p31;
    });
    var UR, m31, KR, $R = x(() => {
      UR = I(G());
      NR();
      m31 = function(t2) {
        var a = (0, UR.useRef)(t2);
        a.current = t2, qR(function() {
          return function() {
            return a.current();
          };
        });
      }, KR = m31;
    });
    var W9, f31, QR, XR = x(() => {
      W9 = I(G());
      $R();
      f31 = function(t2) {
        var a = (0, W9.useRef)(0), c = (0, W9.useState)(t2), r = c[0], e = c[1], l = (0, W9.useCallback)(function(i5) {
          cancelAnimationFrame(a.current), a.current = requestAnimationFrame(function() {
            e(i5);
          });
        }, []);
        return KR(function() {
          cancelAnimationFrame(a.current);
        }), [r, l];
      }, QR = f31;
    });
    function YR(t2) {
      for (var a = [], c = 1; c < arguments.length; c++) a[c - 1] = arguments[c];
      t2 && t2.addEventListener && t2.addEventListener.apply(t2, a);
    }
    function JR(t2) {
      for (var a = [], c = 1; c < arguments.length; c++) a[c - 1] = arguments[c];
      t2 && t2.removeEventListener && t2.removeEventListener.apply(t2, a);
    }
    var ko, tb = x(() => {
      ko = typeof window != "undefined";
    });
    var ab, M31, _9, Ao = x(() => {
      ab = I(G());
      XR();
      tb();
      M31 = function(t2, a) {
        t2 === void 0 && (t2 = 1 / 0), a === void 0 && (a = 1 / 0);
        var c = QR({ width: ko ? window.innerWidth : t2, height: ko ? window.innerHeight : a }), r = c[0], e = c[1];
        return (0, ab.useEffect)(function() {
          if (ko) {
            var l = function() {
              e({ width: window.innerWidth, height: window.innerHeight });
            };
            return YR(window, "resize", l), function() {
              JR(window, "resize", l);
            };
          }
        }, []), r;
      }, _9 = M31;
    });
    function j9(t2) {
      let [a, c] = (0, Ro.useState)(null);
      return (0, Ro.useLayoutEffect)(() => (t2 && c(t2.getBoundingClientRect()), () => {
        c(null);
      }), [t2]), a;
    }
    var Ro, Qz = x(() => {
      Ro = I(G());
    });
    var cb, x31, bo, Xz = x(() => {
      cb = I(G()), x31 = (0, cb.createContext)({}), bo = x31;
    });
    function Yz(t2, a, c) {
      let r = t2.getBoundingClientRect(), e = (l) => {
        (l.clientX < r.left - a || l.clientX > r.left + r.width + a || l.clientY < r.top - a || l.clientY > r.top + r.height + a) && c(l);
      };
      return window.addEventListener("mousemove", e), () => {
        window.removeEventListener("mousemove", e);
      };
    }
    var rb = x(() => {
    });
    var lb, q9, eb, C31, Fo, Jz = x(() => {
      lb = I(G()), q9 = I(G());
      Ao();
      Qz();
      Xz();
      P1();
      zo();
      rb();
      W8();
      H2();
      eb = 8, C31 = (t2) => {
        var v, g;
        let a = t2.children(), [c, r] = z1(null), e = a.props.style ? S({}, a.props.style) : {};
        e.position = "absolute";
        let l = j9(r), i5 = j9(t2.target), o = _9(), [n, h] = (0, q9.useState)({});
        return (0, q9.useLayoutEffect)(() => {
          var k, F, U;
          if (!l || !r || !i5) return;
          let s = (k = t2.verticalGap) != null ? k : 8, d = {}, z = (F = t2.verticalPlacement) != null ? F : "bottom", u = 0, f = 0;
          z === "bottom" ? i5.bottom + l.height + s < o.height ? (z = "bottom", u = i5.bottom + s, d.top = "0px") : i5.top > l.height + s ? (z = "top", u = i5.top - (l.height + s), d.bottom = "0px", d.transform = "rotateZ(180deg)") : z = "overlay" : z === "top" && (i5.top > l.height + s ? (z = "top", u = i5.top - (l.height + s), d.bottom = "0px", d.transform = "rotateZ(180deg)") : i5.bottom + l.height + s < o.height ? (z = "bottom", u = i5.bottom + s, d.top = "0px") : z = "overlay");
          let p = 0;
          if (z !== "overlay") {
            let A = i5.left + i5.width / 2;
            A < l.width / 2 ? (f = s, p = Math.max(A - s, eb)) : A + l.width / 2 > o.width ? (f = o.width - (s + l.width), p = Math.min(A - f, l.width - eb)) : (f = A - l.width / 2, p = l.width / 2), d.left = p + "px";
          }
          let { minX: m = -1 / 0, maxX: M = 1 / 0, minY: w = -1 / 0, maxY: H = 1 / 0 } = (U = t2.constraints) != null ? U : {}, y = { left: b1(f, m, M - l.width), top: b1(u, w, H + l.height) };
          if (r.style.left = y.left + "px", r.style.top = y.top + "px", h(d), t2.onPointerOutside) return Yz(r, t2.onPointerOutside.threshold, t2.onPointerOutside.callback);
        }, [l, r, t2.target, i5, o, t2.onPointerOutside]), q8([r, (v = t2.target) != null ? v : null], (g = t2.onClickOutside) != null ? g : h0), lb.default.createElement(bo.Provider, { value: n }, (0, q9.cloneElement)(a, { ref: c, style: e }));
      }, Fo = C31;
    });
    function x2(t2, a) {
      let { isPointerBeingCaptured: r } = po("usePopover"), [e, l] = z1({ isOpen: false }), i5 = (0, w2.useRef)(t2), o = (0, w2.useCallback)((z) => {
        e.current = { isOpen: false };
      }, []), n = (0, w2.useCallback)((z, u) => {
        var m;
        let f = typeof i5.current == "function" ? i5.current() : i5.current;
        function p() {
          v.childHasFocusRef.current || f.closeOnClickOutside !== false && o("clicked outside popover");
        }
        e.current = { isOpen: true, clickPoint: { clientX: z.clientX, clientY: z.clientY }, target: u, opts: f, onClickOutside: p, onPointerOutside: f.closeWhenPointerIsDistant === false ? void 0 : { threshold: (m = f.pointerDistanceThreshold) != null ? m : 100, callback: () => {
          v.childHasFocusRef.current || r() || o("pointer outside");
        } } };
      }, []), h = (0, w2.useCallback)((...z) => {
        e.current.isOpen ? o("toggled") : n(...z);
      }, []), v = L31({ state: l }), [, g] = (0, w2.useContext)(N9);
      (0, w2.useEffect)(() => {
        let z;
        return l.isOpen && (z = g()), () => z == null ? void 0 : z();
      }, [l.isOpen]);
      let s = (0, w2.useContext)(a3);
      return { node: l.isOpen ? (0, ib.createPortal)(w2.default.createElement(ob.Provider, { value: v.childPopoverLock }, w2.default.createElement(Fo, { children: a, target: l.target, onClickOutside: l.onClickOutside, onPointerOutside: l.onPointerOutside, constraints: l.opts.constraints, verticalGap: l.opts.verticalGap })), s) : w2.default.createElement(w2.default.Fragment, null), open: n, close: o, toggle: h, isOpen: l.isOpen };
    }
    function L31(t2) {
      let a = (0, w2.useContext)(ob);
      (0, w2.useEffect)(() => {
        if (t2.state.isOpen) {
          let r = a.takeFocus();
          return () => {
            r.releaseFocus();
          };
        }
      }, [t2.state.isOpen]);
      let c = (0, w2.useRef)(false);
      return { childHasFocusRef: c, childPopoverLock: { takeFocus() {
        return c.current = true, { releaseFocus() {
          c.current = false;
        } };
      } } };
    }
    var w2, ib, ob, c4 = x(() => {
      mo();
      P1();
      w2 = I(G()), ib = I(B4());
      T6();
      Jz();
      Io();
      ob = w2.default.createContext({ takeFocus() {
        return { releaseFocus() {
        } };
      } });
    });
    var r4, nb, H31, hb, V31, vb, w31, gb, B31, db, y31, S31, sb, zb = x(() => {
      r4 = I(G());
      c1();
      Xz();
      H31 = B.div(nb || (nb = V(["\n  position: absolute;\n  width: 0;\n  height: 0;\n  color: var(--popover-arrow-color);\n  pointer-events: none;\n"]))), V31 = B.div(hb || (hb = V(["\n  width: 12px;\n  height: 8px;\n  position: absolute;\n  left: -7px;\n  top: -8px;\n  text-align: center;\n  line-height: 0;\n"]))), w31 = B.path(vb || (vb = V(["\n  fill: var(--popover-bg);\n"]))), B31 = B.path(gb || (gb = V(["\n  fill: var(--popover-inner-stroke);\n"]))), y31 = B.path(db || (db = V(["\n  fill: var(--popover-outer-stroke);\n"]))), S31 = (0, r4.forwardRef)(({ className: t2 }, a) => {
        let c = (0, r4.useContext)(bo);
        return r4.default.createElement(H31, { className: t2, ref: a, style: S({}, c) }, r4.default.createElement(V31, null, r4.default.createElement("svg", { width: "12", height: "8", viewBox: "0 0 12 8", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, r4.default.createElement(y31, { d: "M6 0L0 6H12L6 0Z" }), r4.default.createElement(B31, { d: "M6 1.5L0 7.5H12L6 1.5Z" }), r4.default.createElement(w31, { d: "M6 3L0 9H12L6 3Z" }))));
      }), sb = S31;
    });
    var Po, tu, ub, k31, A31, T2, e4 = x(() => {
      G1();
      R0();
      Po = I(G());
      c1();
      zb();
      tu = N2(0.05, "#2a2a31"), k31 = B.div(ub || (ub = V(["\n  position: absolute;\n  --popover-bg: ", ";\n  --popover-inner-stroke: #505159;\n  --popover-outer-stroke: #111;\n\n  background: var(--popover-bg);\n\n  color: white;\n  padding: 0;\n  margin: 0;\n  cursor: default;\n  ", ";\n  border-radius: 3px;\n  z-index: 10000;\n  border: 1px solid var(--popover-inner-stroke);\n  box-shadow: 0 0 0 1px var(--popover-outer-stroke), 0 6px 8px -4px black;\n  backdrop-filter: blur(8px);\n\n  & a {\n    color: inherit;\n  }\n"])), tu, C1), A31 = Po.default.forwardRef(({ children: t2, className: a, showPopoverEdgeTriangle: c = true }, r) => Po.default.createElement(k31, { className: a, ref: r }, c ? Po.default.createElement(sb, null) : void 0, t2)), T2 = A31;
    });
    function P31({ editingTools: t2, value: a, autoFocus: c }) {
      let r = (0, A3.useRef)(null), e = (0, A3.useCallback)((i5) => {
        let o = Vo(dR(i5));
        t2.permanentlySetValue(o);
      }, [t2]), l = x2({ debugName: "RgbaPropEditor" }, () => A3.default.createElement(I31, null, A3.default.createElement($z, { color: { r: a.r, g: a.g, b: a.b, a: a.a }, temporarilySetValue: (i5) => {
        let o = Vo(i5);
        t2.temporarilySetValue(o);
      }, permanentlySetValue: (i5) => {
        let o = Vo(i5);
        t2.permanentlySetValue(o);
      }, discardTemporaryValue: t2.discardTemporaryValue })));
      return A3.default.createElement(A3.default.Fragment, null, A3.default.createElement(R31, null, A3.default.createElement(b31, { rgbaColor: a, ref: r, onClick: (i5) => {
        l.toggle(i5, r.current);
      } }), A3.default.createElement(F31, { value: Ho(a, { removeAlphaIfOpaque: true }), temporarilySetValue: pb, discardTemporaryValue: pb, permanentlySetValue: e, isValid: (i5) => !!i5.match(Dz), autoFocus: c })), l.node);
    }
    var A3, mb, R31, fb, b31, Mb, F31, pb, xb, I31, Cb, Lb = x(() => {
      Wz();
      Wz();
      A3 = I(G());
      _R();
      c1();
      c4();
      Lo();
      e4();
      R31 = B.div(mb || (mb = V(["\n  display: flex;\n  align-items: center;\n  height: 100%;\n  gap: 4px;\n"]))), b31 = B.div.attrs((t2) => ({ style: { background: Ho(t2.rgbaColor) } }))(fb || (fb = V(["\n  height: 18px;\n  aspect-ratio: 1;\n  border-radius: 99999px;\n"]))), F31 = B(O9)(Mb || (Mb = V(["\n  flex: 1;\n"]))), pb = () => {
      }, I31 = B.div(xb || (xb = V(["\n  position: absolute;\n  background-color: ", ";\n  color: white;\n  margin: 0;\n  cursor: default;\n  border-radius: 3px;\n  z-index: 10000;\n  backdrop-filter: blur(8px);\n\n  padding: 4px;\n  pointer-events: all;\n\n  border: none;\n  box-shadow: none;\n"])), tu);
      Cb = P31;
    });
    function D31({ propConfig: t2, editingTools: a, value: c, autoFocus: r }) {
      let [e, l] = r3.default.useState();
      (0, r3.useEffect)(() => {
        l(c ? a.getAssetUrl(c) : void 0);
      }, [c]);
      let i5 = (0, r3.useCallback)((n) => e2(this, null, function* () {
        let h = n.target.files[0];
        a.permanentlySetValue({ type: "image", id: void 0 });
        let v = yield a.createAsset(h);
        v ? a.permanentlySetValue({ type: "image", id: v }) : a.permanentlySetValue(c), n.target.value = null;
      }), [a, c]), o = !(c != null && c.id);
      return r3.default.createElement(Rb, { empty: o }, r3.default.createElement(T31, { empty: o, title: o ? "Upload image" : '"'.concat(c.id, '" (Click to upload new image)') }, r3.default.createElement(Z31, { type: "file", onChange: i5, accept: "image/*,.hdr", autoFocus: r }), e ? r3.default.createElement(O31, { src: e }) : r3.default.createElement(G31, null)), !o && r3.default.createElement(E31, { title: "Delete image", onClick: () => {
        a.permanentlySetValue({ type: "image", id: void 0 });
      } }, r3.default.createElement(Oc, null)));
    }
    var r3, Hb, Rb, Vb, G31, wb, Bb, yb, T31, Sb, Z31, kb, O31, Ab, E31, bb, Fb = x(() => {
      b9();
      r3 = I(G());
      c1();
      Rb = B.div(Hb || (Hb = V(["\n  display: flex;\n  align-items: center;\n  height: 100%;\n  gap: 4px;\n"]))), G31 = B.div(Vb || (Vb = V(["\n  position: absolute;\n  inset: -5px;\n  // rotate 45deg\n  transform: rotate(45deg);\n  --checker-color: #ededed36;\n  &:hover {\n    --checker-color: #ededed77;\n  }\n  // checkerboard background with 4px squares\n  background-image: linear-gradient(\n      45deg,\n      var(--checker-color) 25%,\n      transparent 25%\n    ),\n    linear-gradient(-45deg, var(--checker-color) 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, var(--checker-color) 75%),\n    linear-gradient(-45deg, transparent 75%, var(--checker-color) 75%);\n  background-size: 5px 5px;\n"]))), T31 = B.label(yb || (yb = V(["\n  position: relative;\n  cursor: default;\n  box-sizing: border-box;\n\n  height: 18px;\n  aspect-ratio: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n\n  overflow: hidden;\n  color: #ccc;\n  &:hover {\n    color: white;\n  }\n\n  border-radius: 99999px;\n  border: 1px solid hwb(220deg 40% 52%);\n  &:hover {\n    border-color: hwb(220deg 45% 52%);\n  }\n\n  ", "\n"])), (t2) => t2.empty ? f2(wb || (wb = V([""]))) : f2(Bb || (Bb = V([""])))), Z31 = B.input.attrs({ type: "file" })(Sb || (Sb = V(["\n  display: none;\n"]))), O31 = B.img(kb || (kb = V(["\n  position: absolute;\n  inset: 0;\n  height: 100%;\n  aspect-ratio: 1;\n\n  object-fit: cover;\n"]))), E31 = B.button(Ab || (Ab = V(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  background: transparent;\n  color: #a8a8a9;\n\n  border: none;\n  height: 100%;\n  aspect-ratio: 1/1;\n\n  opacity: 0;\n\n  ", ":hover & {\n    opacity: 0.8;\n  }\n\n  &:hover {\n    opacity: 1;\n    color: white;\n  }\n"])), Rb);
      bb = D31;
    });
    function N31({ propConfig: t2, editingTools: a, value: c, autoFocus: r }) {
      let [e, l] = e3.default.useState();
      (0, e3.useEffect)(() => {
        l(c ? a.getAssetUrl(c) : void 0);
      }, [c]);
      let i5 = (0, e3.useCallback)((n) => e2(this, null, function* () {
        let h = n.target.files[0];
        a.permanentlySetValue({ type: "file", id: void 0 });
        let v = yield a.createAsset(h);
        v ? a.permanentlySetValue({ type: "file", id: v }) : a.permanentlySetValue(c), n.target.value = null;
      }), [a, c]), o = !(c != null && c.id);
      return e3.default.createElement(Db, { empty: o }, e3.default.createElement(_31, { empty: o, title: o ? "Upload file" : '"'.concat(c.id, '" (Click to upload new file)') }, e3.default.createElement(j31, { type: "file", onChange: i5, autoFocus: r }), e ? e3.default.createElement(Tc, null) : e3.default.createElement(W31, null)), !o && e3.default.createElement(q31, { title: "Delete file", onClick: () => {
        a.permanentlySetValue({ type: "file", id: void 0 });
      } }, e3.default.createElement(Oc, null)));
    }
    var e3, Ib, Db, Pb, W31, Gb, Tb, Zb, _31, Ob, j31, Eb, q31, Wb, _b = x(() => {
      b9();
      e3 = I(G());
      c1();
      Db = B.div(Ib || (Ib = V(["\n  display: flex;\n  align-items: center;\n  height: 100%;\n  gap: 4px;\n"]))), W31 = B.div(Pb || (Pb = V(["\n  position: absolute;\n  inset: -5px;\n  // rotate 45deg\n  transform: rotate(45deg);\n  --checker-color: #ededed36;\n  &:hover {\n    --checker-color: #ededed77;\n  }\n  // checkerboard background with 4px squares\n  background-image: linear-gradient(\n      45deg,\n      var(--checker-color) 25%,\n      transparent 25%\n    ),\n    linear-gradient(-45deg, var(--checker-color) 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, var(--checker-color) 75%),\n    linear-gradient(-45deg, transparent 75%, var(--checker-color) 75%);\n  background-size: 5px 5px;\n"]))), _31 = B.label(Zb || (Zb = V(["\n  position: relative;\n  cursor: default;\n  box-sizing: border-box;\n\n  height: 18px;\n  aspect-ratio: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n\n  overflow: hidden;\n  color: #ccc;\n  &:hover {\n    color: white;\n  }\n\n  border-radius: 99999px;\n  border: 1px solid hwb(220deg 40% 52%);\n  &:hover {\n    border-color: hwb(220deg 45% 52%);\n  }\n\n  ", "\n"])), (t2) => t2.empty ? f2(Gb || (Gb = V([""]))) : f2(Tb || (Tb = V([""])))), j31 = B.input.attrs({ type: "file" })(Ob || (Ob = V(["\n  display: none;\n"]))), q31 = B.button(Eb || (Eb = V(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  background: transparent;\n  color: #a8a8a9;\n\n  border: none;\n  height: 100%;\n  aspect-ratio: 1/1;\n\n  opacity: 0;\n\n  ", ":hover & {\n    opacity: 0.8;\n  }\n\n  &:hover {\n    opacity: 1;\n    color: white;\n  }\n"])), Db);
      Wb = N31;
    });
    var Go, au = x(() => {
      cA();
      Gz();
      iR();
      gR();
      Lb();
      Fb();
      _b();
      Go = { number: xo, string: vR, boolean: aA, stringLiteral: lR, rgba: Cb, image: bb, file: Wb };
    });
    function T4(t2) {
      let a = /* @__PURE__ */ new WeakMap();
      return (c) => (a.has(c) || a.set(c, t2(c)), a.get(c));
    }
    var tr = x(() => {
    });
    function G0(t2) {
      return t2.type === "compound" || t2.type === "enum";
    }
    function U9(t2, a) {
      if (!t2) return;
      let [c, ...r] = a;
      if (c === void 0) return t2;
      if (!G0(t2)) return;
      let e = t2.type === "enum" ? t2.cases[c] : t2.props[c];
      return U9(e, r);
    }
    function X8(t2, a) {
      let c = a.deserializeAndSanitize(t2);
      return c === void 0 ? a.default : c;
    }
    function jb(t2) {
      return !G0(t2);
    }
    function* Y8(t2, a) {
      if (t2.type === "compound") for (let c in t2.props) yield* Vf(Y8(t2.props[c], [...a, c]));
      else {
        if (t2.type === "enum") throw new Error("Not implemented yet");
        return yield { path: a, conf: t2 };
      }
    }
    var cu, H5 = x(() => {
      tr();
      cu = T4((t2) => {
        if (t2.type === "enum") throw new Error("Not implemented yet for enums");
        for (let a in t2.props) {
          let c = t2.props[a];
          if (G0(c)) {
            if (cu(c)) return true;
          } else return true;
        }
        return false;
      });
    });
    var To, ru = x(() => {
      To = "calc(var(--left-pad) + var(--depth) * var(--step))";
    });
    var qb, T0, N6 = x(() => {
      c1();
      T0 = f2(qb || (qb = V(["\n  font-weight: 300;\n  font-size: 11px;\n  color: ", ";\n  text-shadow: 0.5px 0.5px 2px rgba(0, 0, 0, 0.3);\n"])), (t2) => t2.isHighlighted === "self" ? "#CCC" : "#919191");
    });
    var ar, Zo, Nb, U31, Ub, K31, $31, Kb, eu = x(() => {
      W8();
      ar = I(G());
      c1();
      Zo = 26, U31 = B.li(Nb || (Nb = V(["\n  height: ", "px;\n  padding: 0 12px;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  font-size: 11px;\n  font-weight: 400;\n  position: relative;\n  color: ", ";\n  cursor: ", ";\n\n  &:after {\n    position: absolute;\n    inset: 2px 1px;\n    display: block;\n    content: ' ';\n    pointer-events: none;\n    z-index: -1;\n    border-radius: 3px;\n  }\n\n  &:hover:after {\n    background-color: ", ";\n  }\n"])), Zo, (t2) => t2.enabled ? "white" : "#8f8f8f", (t2) => t2.enabled ? "normal" : "not-allowed", (t2) => t2.enabled ? "rgba(63, 174, 191, 0.75)" : "initial"), K31 = B.span(Ub || (Ub = V([""]))), $31 = (t2) => ar.default.createElement(U31, { onClick: t2.enabled ? t2.onClick : h0, enabled: t2.enabled, title: t2.enabled ? void 0 : "Disabled" }, ar.default.createElement(K31, null, ar.default.createElement(ar.default.Fragment, null, t2.label))), Kb = $31;
    });
    function lu(t2) {
      let a = (0, Oo.useRef)(t2);
      a.current = t2, (0, Oo.useEffect)(() => {
        let c = (r) => a.current(r);
        return window.addEventListener("keydown", c), () => {
          window.removeEventListener("keydown", c);
        };
      }, []);
    }
    var Oo, $b = x(() => {
      Oo = I(G());
    });
    var cr, Q31, X31, Qb, Y31, Xb, J31, t41, Eo, iu = x(() => {
      cr = I(G());
      eu();
      c1();
      R0();
      G1();
      Q31 = 190, X31 = true, Y31 = B.ul(Qb || (Qb = V(["\n  position: absolute;\n  min-width: ", "px;\n  z-index: 10000;\n  background: ", ";\n  backdrop-filter: blur(2px);\n  color: white;\n  list-style-type: none;\n  padding: 2px 0;\n  margin: 0;\n  border-radius: 1px;\n  cursor: default;\n  ", ";\n  border-radius: 3px;\n"])), Q31, N2(0.2, "#111"), C1), J31 = B.div(Xb || (Xb = V(["\n  padding: 4px 10px;\n  border-bottom: 1px solid #6262626d;\n  color: #adadadb3;\n  font-size: 11px;\n  font-weight: 500;\n"]))), t41 = cr.default.forwardRef((t2, a) => cr.default.createElement(Y31, { ref: a }, X31 && t2.displayName ? cr.default.createElement(J31, null, t2.displayName) : null, t2.items.map((c, r) => cr.default.createElement(Kb, { key: "item-".concat(r), label: c.label, enabled: c.enabled !== false, onClick: (e) => {
        c.callback && c.callback(e), t2.onRequestClose();
      } })))), Eo = t41;
    });
    var Yb, Jb, K9, tF, Do, a41, aF, cF = x(() => {
      Qz();
      Yb = I(G()), Jb = I(G()), K9 = I(G()), tF = I(B4());
      Ao();
      eu();
      T6();
      $b();
      iu();
      Do = 20, a41 = (t2) => {
        let [a, c] = (0, K9.useState)(null), r = j9(a), e = _9();
        (0, K9.useLayoutEffect)(() => {
          if (!r || !a) return;
          let o = { left: r.width / 2, top: Zo / 2 + (t2.displayName ? Zo : 0) }, n = { left: t2.clickPoint.clientX - o.left, top: t2.clickPoint.clientY - o.top };
          n.left < 0 ? n.left = 0 : n.left + r.width > e.width && (n.left = e.width - r.width), n.top < 0 ? n.top = 0 : n.top + r.height > e.height && (n.top = e.height - r.height), a.style.left = n.left + "px", a.style.top = n.top + "px";
          let h = (v) => {
            (v.clientX < n.left - Do || v.clientX > n.left + r.width + Do || v.clientY < n.top - Do || v.clientY > n.top + r.height + Do) && t2.onRequestClose();
          };
          return window.addEventListener("mousemove", h), () => {
            window.removeEventListener("mousemove", h);
          };
        }, [r, a, t2.clickPoint, e, t2.onRequestClose]);
        let l = (0, Jb.useContext)(a3);
        lu((o) => {
          o.key === "Escape" && t2.onRequestClose();
        });
        let i5 = (0, Yb.useMemo)(() => {
          let o = Array.isArray(t2.items) ? t2.items : t2.items();
          return o.length > 0 ? o : [{ label: t2.displayName ? "No actions for ".concat(t2.displayName) : "No actions found", enabled: false }];
        }, [t2.items]);
        return (0, tF.createPortal)(K9.default.createElement(Eo, { items: i5, onRequestClose: t2.onRequestClose, displayName: t2.displayName, ref: c }), l);
      }, aF = a41;
    });
    var $9, c41, rF, eF = x(() => {
      $9 = I(G()), c41 = (t2, a) => {
        let [c, r] = (0, $9.useState)({ isOpen: false }), e = (0, $9.useCallback)(() => r({ isOpen: false }), []);
        return (0, $9.useEffect)(() => {
          if (!t2 || a.disabled === true) {
            r({ isOpen: false });
            return;
          }
          let l = (i5) => {
            r({ isOpen: true, event: i5 }), i5.preventDefault(), i5.stopPropagation();
          };
          return t2.addEventListener("contextmenu", l), () => {
            t2.removeEventListener("contextmenu", l);
          };
        }, [t2, a.disabled]), [c, e];
      }, rF = c41;
    });
    function Z1(t2, a) {
      let [c, r] = rF(t2, a), [, e] = (0, U6.useContext)(N9);
      return (0, U6.useEffect)(() => {
        var o;
        let i5;
        return c.isOpen && ((o = a.onOpen) == null || o.call(a), i5 = e()), () => i5 == null ? void 0 : i5();
      }, [c.isOpen, a.onOpen]), [c.isOpen ? U6.default.createElement(aF, { items: a.menuItems, displayName: a.displayName, clickPoint: c.event, onRequestClose: r }) : r41, r, c.isOpen];
    }
    var U6, r41, v0 = x(() => {
      U6 = I(G());
      cF();
      eF();
      Io();
      r41 = U6.default.createElement(U6.default.Fragment, null);
    });
    function l3(t2, a) {
      return a.length === 0 ? t2 : D3(t2, a);
    }
    var rr = x(() => {
      D7();
    });
    function ou(t2, a) {
      return t2 == null ? null : t2 instanceof Element && t2.matches(a) ? t2 : ou(t2.parentElement, a);
    }
    var lF = x(() => {
    });
    function Z4(t2, a) {
      let c = t2;
      for (let r of a) c = c[r];
      return c;
    }
    var er = x(() => {
    });
    function e41(t2) {
      let a = new Wo.Atom(void 0), c = new Wo.Atom({}), r = new Wo.Atom({}), e = 0;
      return { addRelatedFlags(l, i5) {
        let o = String(++e), n = i5.map((h) => {
          let v = { flag: h.flag }, g = [h.affects, l, o];
          return r.setByPointer((s) => Z4(s, g), v), g;
        });
        return () => {
          for (let h of n) r.setByPointer((v) => Z4(v, h), void 0);
        };
      }, usePresenceFlag(l) {
        return;
      }, setUserHover(l) {
        let i5 = a.get();
        i5 !== l && (i5 && c.setByPointer((o) => o[i5], false), a.set(l), l && c.setByPointer((o) => o[l], true));
      } };
    }
    function i3(t2) {
      let a = X9.default.useContext(oF), c = a.usePresenceFlag(t2);
      return { attrs: { [nu]: t2 }, flag: c, useRelations(r, e) {
        (0, hu.useEffect)(() => t2 && a.addRelatedFlags(t2, r()), [t2, ...e]);
      } };
    }
    function _o(t2) {
      let a = X9.default.useContext(oF), c = C0("PresenceListeners");
      (0, hu.useEffect)(() => {
        let r;
        if (!t2) return;
        let e = (l) => {
          if (l.target instanceof Node) {
            let i5 = ou(l.target, "[".concat(nu, "]"));
            if (i5) {
              let o = i5.getAttribute(nu);
              r !== o && (r = o, a.setUserHover(o || void 0), c._debug("Updated current hover", { itemKey: o }));
              return;
            }
            r != null && (r = null, a.setUserHover(void 0), c._debug("Cleared current hover"));
          }
        };
        return t2.addEventListener("mouseover", e), () => {
          t2.removeEventListener("mouseover", e), r != null && (r = null, c._debug("Cleared current hover as part of cleanup"));
        };
      }, [t2, a]);
    }
    var X9, hu, Q9, Wo, iF, oF, nu, K6 = x(() => {
      X9 = I(G()), hu = I(G());
      L5();
      Q9 = requireDist$2(), Wo = requireDist$2();
      M1();
      lF();
      er();
      iF = (0, Q9.prism)(() => {
      });
      iF.keepHot();
      oF = X9.default.createContext(e41()), nu = "data-pi-key";
    });
    var U2, nF, jo, hF, mF, V5, vF, fF, gF, l41, dF, vu, sF, i41, zF, o41, uF, pF, lr, n41, qo, ir = x(() => {
      G1();
      R0();
      U2 = I(G());
      c1();
      K6();
      jo = B.div(nF || (nF = V(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 16px;\n  margin: 0 0px 0 2px;\n  position: relative;\n  z-index: 0;\n  opacity: 0.7;\n\n  &:after {\n    position: absolute;\n    left: -14px;\n    right: -14px;\n    top: -2px;\n    bottom: -2px;\n    content: ' ';\n    display: none;\n    z-index: -1;\n    background: ", ";\n  }\n\n  &:hover {\n    opacity: 1;\n    &:after {\n      display: block;\n    }\n  }\n"])), N2(0.2, "black")), mF = B.div(hF || (hF = V(["\n  background: none;\n  position: relative;\n  border: 0;\n  transition: transform 0.1s ease-out;\n  z-index: 0;\n  outline: none;\n  cursor: pointer;\n\n  &:after {\n    display: none;\n    ", ":hover & {\n      display: block;\n    }\n    position: absolute;\n    left: -4px;\n    right: -4px;\n    top: -4px;\n    bottom: -4px;\n    content: ' ';\n    z-index: -1;\n  }\n"])), jo), V5 = { offColor: "#555", onColor: "#e0c917" }, fF = B(mF)(vF || (vF = V(["\n  &:hover {\n    color: #e0c917;\n  }\n\n  color: ", ";\n"])), (t2) => t2.presence === 2 ? "white" : t2.isOn ? V5.onColor : V5.offColor), l41 = f2(gF || (gF = V(["\n  pointer-events: none !important;\n"]))), vu = B(mF)(dF || (dF = V(["\n  color: ", ";\n\n  ", ";\n"])), (t2) => t2.flag === 2 ? "white" : t2.available ? V5.onColor : V5.offColor, (t2) => t2.available ? C1 : l41), i41 = B(vu)(sF || (sF = V(["\n  transform: translateX(2px);\n  ", ":hover & {\n    transform: translateX(-7px);\n  }\n"])), jo), o41 = B(vu)(zF || (zF = V(["\n  transform: translateX(-2px);\n  ", ":hover & {\n    transform: translateX(7px);\n  }\n"])), jo);
      ((l) => {
        let t2 = B.g(uF || (uF = V(["\n    stroke-width: 1;\n    ", ":hover & path {\n      stroke-width: 3;\n    }\n  "])), vu);
        l.Prev = () => U2.default.createElement("svg", { width: "12", height: "12", viewBox: "0 0 12 12", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, U2.default.createElement(t2, { transform: "translate(6 3)" }, U2.default.createElement("path", { d: "M4 1L1 4L4 7", stroke: "currentColor" }))), l.Next = () => U2.default.createElement("svg", { width: "12", height: "12", viewBox: "0 0 12 12", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, U2.default.createElement(t2, { transform: "translate(1 3)" }, U2.default.createElement("path", { d: "M1 1L4 4L1 7", stroke: "currentColor" })));
        let r = B.g(pF || (pF = V(["\n    stroke-width: 0;\n    ", ":hover & path {\n      stroke: currentColor;\n      stroke-width: 2;\n    }\n  "])), fF);
        l.Cur = () => U2.default.createElement("svg", { width: "8", height: "12", viewBox: "0 0 8 12", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, U2.default.createElement(r, { transform: "translate(1 4)" }, U2.default.createElement("path", { d: "M3 0L6 3L3 6L0 3L3 0Z", fill: "currentColor" })));
      })(lr || (lr = {}));
      n41 = (t2) => {
        var e, l, i5, o, n;
        let a = i3((e = t2.prev) == null ? void 0 : e.itemKey), c = i3(((l = t2.cur) == null ? void 0 : l.type) === "on" ? t2.cur.itemKey : void 0), r = i3((i5 = t2.next) == null ? void 0 : i5.itemKey);
        return U2.default.createElement(jo, null, U2.default.createElement(i41, S({ available: !!t2.prev, onClick: (o = t2.prev) == null ? void 0 : o.jump, flag: a.flag }, a.attrs), U2.default.createElement(lr.Prev, null)), U2.default.createElement(fF, S({ isOn: t2.cur.type === "on", onClick: t2.cur.toggle, presence: c.flag }, c.attrs), U2.default.createElement(lr.Cur, null)), U2.default.createElement(o41, S({ available: !!t2.next, onClick: (n = t2.next) == null ? void 0 : n.jump, flag: r.flag }, r.attrs), U2.default.createElement(lr.Next, null)));
      }, qo = n41;
    });
    var Uo, No, MF, h41, xF, v41, CF, g41, d41, Y9, gu = x(() => {
      R0();
      Uo = I(G());
      c1();
      f1();
      ir();
      H5();
      No = { defaultState: { color: N2(0.95, "#C4C4C4"), hoverColor: N2(0.15, V5.onColor) }, withStaticOverride: { color: N2(0.85, "#C4C4C4"), hoverColor: N2(0.15, V5.onColor) } }, h41 = B.div(MF || (MF = V(["\n  width: 16px;\n  margin: 0 0px 0 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  color: ", ";\n\n  &:hover {\n    color: ", ";\n  }\n"])), (t2) => t2.hasStaticOverride ? No.withStaticOverride.color : No.defaultState.color, (t2) => t2.hasStaticOverride ? No.withStaticOverride.hoverColor : No.defaultState.hoverColor), v41 = B.div(xF || (xF = V(["\n  width: 5px;\n  height: 5px;\n  border-radius: 1px;\n  transform: rotate(45deg);\n  /* border: 1px solid currentColor; */\n  background-color: currentColor;\n"]))), g41 = B.div(CF || (CF = V(["\n  width: 5px;\n  height: 5px;\n  background-color: currentColor;\n  border-radius: 1px;\n  transform: rotate(45deg);\n"]))), d41 = (t2) => {
        let { hasStaticOverride: a, obj: c, propConfig: r, pathToProp: e } = t2;
        return Uo.default.createElement(h41, { hasStaticOverride: a, onClick: () => {
          T().transaction(({ stateEditors: i5 }) => {
            for (let { path: o, conf: n } of Y8(r, e)) {
              if (G0(n)) continue;
              let h = D(S({}, c.address), { pathToProp: o });
              i5.coreByProject.historic.sheetsById.sequence.setPrimitivePropAsSequenced(h, r);
            }
          });
        }, title: "Sequence this prop" }, a ? Uo.default.createElement(g41, { title: "The default value is overridden" }) : Uo.default.createElement(v41, { title: "This is the default value for this prop" }));
      }, Y9 = d41;
    });
    function J8(t2) {
      return JSON.stringify(du(t2));
    }
    function du(t2) {
      return M8(t2) ? Object.keys(t2).sort().reduce((a, c) => (a[c] = du(t2[c]), a), {}) : Array.isArray(t2) ? t2.map(du) : t2;
    }
    var LF = x(() => {
      H2();
    });
    var s41, J9, su = x(() => {
      s41 = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict", J9 = (t2 = 21) => {
        let a = "", c = t2;
        for (; c--; ) a += s41[Math.random() * 64 | 0];
        return a;
      };
    });
    function zu() {
      return J9(10);
    }
    function HF() {
      return J9(10);
    }
    function VF() {
      return J9(10);
    }
    var c2, O4 = x(() => {
      LF();
      su();
      c2 = { forSheet() {
        return "sheet";
      }, forSheetObject(t2) {
        return J8({ o: t2.address.objectKey });
      }, forSheetObjectProp(t2, a) {
        return J8({ o: t2.address.objectKey, p: a });
      }, forTrackKeyframe(t2, a, c) {
        return J8({ o: t2.address.objectKey, t: a, k: c });
      }, forSheetObjectAggregateKeyframe(t2, a) {
        return c2.forCompoundPropAggregateKeyframe(t2, [], a);
      }, forSheetAggregateKeyframe(t2, a) {
        return J8({ o: t2.address.sheetId, pos: a });
      }, forCompoundPropAggregateKeyframe(t2, a, c) {
        return J8({ o: t2.address.objectKey, p: a, pos: c });
      } };
    });
    function Ko(t2, a, c) {
      if (!a || a.data.keyframes.length === 0) return z41;
      let r = wF.get(a.data);
      if (r && r[0] === c) return r[1];
      function e(o) {
        if (!a) return;
        let n = a.data.keyframes[o];
        return n && { kf: n, track: a, itemKey: c2.forTrackKeyframe(t2, a.id, n.id) };
      }
      let i5 = (() => {
        let o = a.data.keyframes.findIndex((h) => h.position >= c);
        if (o === -1) return { prev: e(a.data.keyframes.length - 1) };
        let n = e(o);
        return n.kf.position === c ? { prev: e(o - 1), cur: n, next: e(o + 1) } : { next: n, prev: e(o - 1) };
      })();
      return wF.set(a.data, [c, i5]), i5;
    }
    var wF, z41, uu = x(() => {
      O4();
      wF = /* @__PURE__ */ new WeakMap(), z41 = {};
    });
    var $o, pu = x(() => {
      $o = {};
    });
    function BF(t2, a, c) {
      let r = (0, Z0.getPointerParts)(t2).path;
      return v1(() => {
        if (!cu(c)) return { type: "AllStatic", beingScrubbed: false, contextMenuItems: [], controlIndicators: t7.default.createElement(Y9, { hasStaticOverride: false, obj: a, pathToProp: r, propConfig: c }) };
        let e = !!(0, Z0.val)(D3(T().atomP.ephemeral.projects.stateByProjectId[a.address.projectId].stateBySheetId[a.address.sheetId].stateByObjectKey[a.address.objectKey].valuesBeingScrubbed, (0, Z0.getPointerParts)(t2).path)), l = [], i5 = { beingScrubbed: e, contextMenuItems: l, controlIndicators: t7.default.createElement(t7.default.Fragment, null) }, o = (0, Z0.val)(a.template.getMapOfValidSequenceTracks_forStudio()), n = l3(o, r), h = n !== void 0 && Object.keys(n).length !== 0, v = [], g = (0, Z0.val)(a.template.getStaticButNotSequencedOverrides()), d = l3(g != null ? g : $o, r) !== void 0;
        if (h) for (let z of Y8(c, [])) {
          if (G0(z.conf)) continue;
          let u = l3(n, z.path);
          typeof u != "string" ? d = true : v.push(u);
        }
        if ((d || h) && l.push({ label: "Reset all to default", callback: () => {
          T().transaction(({ unset: z }) => {
            z(t2);
          });
        } }), h && l.push({ label: "Make all static", callback: () => {
          T().transaction(({ stateEditors: z }) => {
            for (let { path: u, conf: f } of Y8(c, [])) {
              if (G0(f)) continue;
              let p = D(S({}, a.address), { pathToProp: [...r, ...u] }), m = Z4(t2, u);
              z.coreByProject.historic.sheetsById.sequence.setPrimitivePropAsStatic(D(S({}, p), { value: a.getValueByPointer(m) }));
            }
          });
        } }), (!h || h && d) && l.push({ label: "Sequence all", callback: () => {
          T().transaction(({ stateEditors: z }) => {
            for (let { path: u, conf: f } of Y8(c, r)) {
              if (G0(f)) continue;
              let p = D(S({}, a.address), { pathToProp: u });
              z.coreByProject.historic.sheetsById.sequence.setPrimitivePropAsSequenced(p, c);
            }
          });
        } }), h) {
          let z = Z0.prism.memo("controlIndicators", () => t7.default.createElement(u41, { pointerToProp: t2, obj: a, possibleSequenceTrackIds: n, listOfDescendantTrackIds: v }), [n, v]);
          return D(S({}, i5), { type: "HasSequences", controlIndicators: z });
        } else return D(S({}, i5), { type: "AllStatic", controlIndicators: t7.default.createElement(Y9, { hasStaticOverride: d, obj: a, pathToProp: r, propConfig: c }) });
      }, []);
    }
    function u41({ pointerToProp: t2, obj: a, possibleSequenceTrackIds: c, listOfDescendantTrackIds: r }) {
      return v1(() => {
        let e = (0, Z0.getPointerParts)(t2).path, l = (0, Z0.val)(a.sheet.getSequence().positionPrism), i5 = r.map((d) => ({ trackId: d, track: (0, Z0.val)(a.template.project.pointers.historic.sheetsById[a.address.sheetId].sequence.tracksByObject[a.address.objectKey].trackData[d]) })).filter(({ track: d }) => !!d).map((d) => D(S({}, d), { nearbies: Ko(a, { id: d.trackId, data: d.track, sheetObject: a }, l) })), o = i5.find(({ nearbies: d }) => !!d.cur), n = i5.every(({ nearbies: d }) => !!d.cur), h = i5.reduce((d, z) => z.nearbies.prev && (d === void 0 || z.nearbies.prev.kf.position > d.kf.position) ? z.nearbies.prev : d, void 0), v = i5.reduce((d, z) => z.nearbies.next && (d === void 0 || z.nearbies.next.kf.position < d.kf.position) ? z.nearbies.next : d, void 0), g = () => {
          n ? T().transaction((d) => {
            d.unset(t2);
          }) : o ? T().transaction((d) => {
            d.set(t2, (0, Z0.val)(t2));
          }) : T().transaction((d) => {
            d.set(t2, (0, Z0.val)(t2));
          });
        }, s = { cur: o ? { type: "on", itemKey: c2.forCompoundPropAggregateKeyframe(a, e, l), toggle: g } : { toggle: g, type: "off" }, prev: h !== void 0 ? { position: h.kf.position, itemKey: c2.forCompoundPropAggregateKeyframe(a, e, h.kf.position), jump: () => {
          a.sheet.getSequence().position = h.kf.position;
        } } : void 0, next: v !== void 0 ? { position: v.kf.position, itemKey: c2.forCompoundPropAggregateKeyframe(a, e, v.kf.position), jump: () => {
          a.sheet.getSequence().position = v.kf.position;
        } } : void 0 };
        return t7.default.createElement(qo, S({}, s));
      }, [t2, a, c, r]);
    }
    var Z0, t7, yF = x(() => {
      f1();
      rr();
      M1();
      Z0 = requireDist$2();
      D7();
      t7 = I(G());
      gu();
      H5();
      O4();
      er();
      ir();
      uu();
      pu();
    });
    function p41() {
      let t2 = 0, a = new AF.Atom({ hasLock: false });
      return { replaceLock(c, r) {
        let e = t2++, l = a.get();
        return l.hasLock && l.cleanup(), a.set({ hasLock: true, lockId: e, cleanup: r, deepPath: m41(SF(c)) }), function() {
          let o = a.get();
          o.hasLock && o.lockId === e && (o.cleanup(), a.set({ hasLock: false }));
        };
      }, getIsPropHighlightedD(c) {
        let r = Z4(a.pointer.deepPath, SF(c));
        return (0, RF.prism)(() => {
          let e = (0, kF.val)(r);
          return e === true ? "self" : e ? "descendent" : null;
        });
      } };
    }
    function SF(t2) {
      return [t2.projectId, t2.sheetId, t2.objectKey, ...t2.pathToProp];
    }
    function m41(t2) {
      let a = {};
      return i6(a, t2, true), a;
    }
    var kF, AF, RF, tt, Qo = x(() => {
      kF = requireDist$2(), AF = requireDist$2(), RF = requireDist$2();
      er();
      Xe();
      tt = p41();
    });
    function bF(t2, a) {
      return JSON.stringify(t2, a, 2).replace(/^([\{\[])\n (\s+)/, "$1$2").replace(/(\n[ ]+[\{\[])\n\s+/g, "$1 ").replace(/\n\s*([\]\}])/g, " $1");
    }
    var FF = x(() => {
    });
    function mu(t2, a = true) {
      try {
        return typeof t2 == "string" ? t2 : typeof t2 == "function" || t2 instanceof Error ? t2.toString() : a ? bF(t2) : JSON.stringify(t2);
      } catch (c) {
        return (t2 == null ? void 0 : t2.name) || String(t2);
      }
    }
    var IF = x(() => {
      FF();
    });
    function GF(t2, a, c) {
      t2 || (arguments.length > 2 ? PF(a, c) : PF(a));
    }
    function PF(t2, a) {
      let c = arguments.length > 1, r = mu(t2), e = c ? "\nInstead found: ".concat(mu(a)) : "";
      throw new fu("Invariant: ".concat(r).concat(e), a);
    }
    var f41, M41, x41, C41, fu, TF = x(() => {
      IF();
      f41 = /^\s*at.+node:internal.+/gm, M41 = /^\s*(at|[^@]+@) (?:Object\.)?invariant.+/gm, x41 = /^\s*(at|[^@]+@).+test\-helpers.+/gm, C41 = /^\s*(at|[^@]+@).+(debounce|invariant|iif)\.[tj]s.*/gm, fu = class extends Error {
        constructor(c, r) {
          var e;
          super(c);
          y1(this, "found");
          r !== void 0 && (this.found = r), this.stack = (e = this.stack) == null ? void 0 : e.replace(M41, "").replace(C41, "").replace(x41, "").replace(f41, "");
        }
      };
    });
    function L41(t2) {
      return (0, at.prism)(() => {
        if (Array.isArray(t2)) {
          let a = new Array(t2.length);
          for (let c = 0; c < t2.length; c++) a[c] = t2[c].getValue();
          return a;
        } else {
          let a = {};
          for (let c in t2) a[c] = (0, at.val)(t2[c]);
          return a;
        }
      });
    }
    function or(t2) {
      let a = $6.default.memo($6.default.forwardRef(function(r, e) {
        let l = [], i5 = {}, o = { ref: e };
        for (let g in r) {
          let s = r[g];
          (0, at.isPrism)(s) ? (l.push(s), i5[g] = s) : o[g] = s;
        }
        let n = (0, $6.useRef)(l.length);
        GF(n.current === l.length, "expect same number of observable props on every invocation of deriver wrapped component.", { initial: n.current, count: l.length });
        let h = (0, $6.useMemo)(() => L41(i5), l), v = G8(h);
        return v && $6.default.createElement(t2, S(S({}, o), v));
      }));
      return a.displayName = "deriver(".concat(t2.displayName, ")"), a;
    }
    var at, $6, Mu = x(() => {
      at = requireDist$2();
      M1();
      $6 = I(G());
      TF();
    });
    function H41(t2, a, c) {
      return (0, o3.prism)(() => {
        var z;
        let r = (0, o3.getPointerParts)(t2).path, e = a.getValueByPointer(t2), l = o3.prism.memo("editPropValue", () => {
          let u = null;
          return { temporarilySetValue(f) {
            u || (u = T().scrub()), u.capture((p) => {
              p.set(t2, f);
            });
          }, discardTemporaryValue() {
            u && (u.discard(), u = null);
          }, permanentlySetValue(f) {
            u ? (u.capture((p) => {
              p.set(t2, f);
            }), u.commit(), u = null) : T().transaction((p) => {
              p.set(t2, f);
            });
          } };
        }, []), i5 = { createAsset: (u) => a.sheet.project.assetStorage.createAsset(u), getAssetUrl: (u) => u.id ? a.sheet.project.assetStorage.getAssetUrl(u.id) : void 0 }, o = (0, o3.val)(D3(T().atomP.ephemeral.projects.stateByProjectId[a.address.projectId].stateBySheetId[a.address.sheetId].stateByObjectKey[a.address.objectKey].valuesBeingScrubbed, (0, o3.getPointerParts)(t2).path)) === true, n = [], h = D(S(S({}, l), i5), { value: e, beingScrubbed: o, contextMenuItems: n, controlIndicators: ct.default.createElement(ct.default.Fragment, null) }), v = jb(c);
        if (v) {
          let u = (0, o3.val)(a.template.getMapOfValidSequenceTracks_forStudio()), f = l3(u, r);
          if (typeof f == "string") {
            n.push({ label: "Make static", callback: () => {
              T().transaction(({ stateEditors: U }) => {
                let A = D(S({}, a.address), { pathToProp: r });
                U.coreByProject.historic.sheetsById.sequence.setPrimitivePropAsStatic(D(S({}, A), { value: a.getValueByPointer(t2) }));
              });
            } });
            let m = f, M = o3.prism.sub("lcr", () => {
              let U = (0, o3.val)(a.template.project.pointers.historic.sheetsById[a.address.sheetId].sequence.tracksByObject[a.address.objectKey].trackData[m]), A = (0, o3.val)(a.sheet.getSequence().positionPrism);
              return Ko(a, U && { data: U, id: m, sheetObject: a }, A);
            }, [m]), w;
            h.beingScrubbed ? w = "Sequenced_OnKeyframe_BeingScrubbed" : M.cur ? w = "Sequenced_OnKeyframe" : ((z = M.prev) == null ? void 0 : z.kf.connectedRight) === true ? w = "Sequenced_BeingInterpolated" : w = "Sequened_NotBeingInterpolated";
            let H = () => {
              M.cur ? T().transaction((U) => {
                U.unset(t2);
              }) : T().transaction((U) => {
                U.set(t2, h.value);
              });
            }, y = { cur: M.cur ? { type: "on", itemKey: M.cur.itemKey, toggle: H } : { type: "off", toggle: H }, prev: M.prev !== void 0 ? { itemKey: M.prev.itemKey, position: M.prev.kf.position, jump: () => {
              a.sheet.getSequence().position = M.prev.kf.position;
            } } : void 0, next: M.next !== void 0 ? { itemKey: M.next.itemKey, position: M.next.kf.position, jump: () => {
              a.sheet.getSequence().position = M.next.kf.position;
            } } : void 0 }, k = ct.default.createElement(qo, S({}, y));
            return D(S({}, h), { type: "Sequenced", shade: w, nearbyKeyframes: M, controlIndicators: k });
          }
        }
        let g = (0, o3.val)(a.template.getStaticValues()), s = l3(g, r);
        return typeof s != "undefined" && n.push({ label: "Reset to default", callback: () => {
          T().transaction(({ unset: u }) => {
            u(t2);
          });
        } }), v && n.push({ label: "Sequence", callback: () => {
          T().transaction(({ stateEditors: u }) => {
            let f = D(S({}, a.address), { pathToProp: r });
            u.coreByProject.historic.sheetsById.sequence.setPrimitivePropAsSequenced(f, c);
          });
        } }), typeof s != "undefined" ? D(S({}, h), { type: "Static", shade: h.beingScrubbed ? "Static_BeingScrubbed" : "Static", controlIndicators: ct.default.createElement(Y9, { hasStaticOverride: true, obj: a, pathToProp: r, propConfig: c }) }) : D(S({}, h), { type: "Default", shade: "Default", controlIndicators: ct.default.createElement(Y9, { hasStaticOverride: true, obj: a, pathToProp: r, propConfig: c }) });
      });
    }
    function V41(t2, a, c) {
      if (xu.has(t2)) return xu.get(t2);
      {
        let r = H41(t2, a, c);
        return xu.set(t2, r), r;
      }
    }
    function rt(t2, a, c) {
      let r = V41(t2, a, c);
      return G8(r);
    }
    var ct, o3, xu, Xo = x(() => {
      D7();
      ct = I(G()), o3 = requireDist$2();
      f1();
      rr();
      M1();
      H5();
      gu();
      uu();
      ir();
      xu = /* @__PURE__ */ new WeakMap();
    });
    function F41({ propConfig: t2, pointerToProp: a, obj: c, SimpleEditorComponent: r }) {
      let e = rt(a, c, t2);
      return R2.default.createElement(xo, { editingTools: e, propConfig: t2, value: e.value });
    }
    function P41({ pointerToProp: t2, obj: a, propConfig: c, visualIndentation: r }) {
      var m;
      let e = (m = c.label) != null ? m : M3((0, et.getPointerParts)(t2).path), l = Object.entries(c.props), i5 = l.filter(([M, w]) => G0(w)), o = l.filter(([M, w]) => !G0(w)), [n, h] = z1(null), v = BF(t2, a, c), [g] = Z1(h, { menuItems: v.contextMenuItems }), s = i5.length > 0, d = (0, R2.useMemo)(() => tt.getIsPropHighlightedD(D(S({}, a.address), { pathToProp: (0, et.getPointerParts)(t2).path })), [t2]), z = "".concat(a.address.projectId, ",").concat(a.address.sheetId, ",").concat(a.address.sheetInstanceId, ",").concat(a.address.objectKey, ",").concat((0, et.getPointerParts)(t2).path.join()), u = b41(c);
      (0, R2.useLayoutEffect)(() => {
        Cu.has(z) || Cu.set(z, new et.Atom(u));
      }, [z, c]);
      let f = Cu.get(z), p = v1(() => f ? (0, NF.val)(f.pointer) : u, [f]);
      return R2.default.createElement(w41, null, g, R2.default.createElement(UF, { style: { "--depth": r - 1 } }, R2.default.createElement(B41, { isVectorProp: u }, R2.default.createElement(y41, null, v.controlIndicators), R2.default.createElement(S41, { isHighlighted: d, ref: n }, R2.default.createElement("span", null, e || "Props")), R2.default.createElement(k41, { isCollapsed: p, isVector: u, onClick: () => {
        f == null || f.set(!f.get());
      } }, R2.default.createElement(Co, null))), u && p && R2.default.createElement(I41, null, [...l].map(([M, w]) => R2.default.createElement(F41, { key: "prop-" + M, propConfig: w, pointerToProp: t2[M], obj: a })))), !p && R2.default.createElement(R41, { style: { "--depth": r }, depth: r, lastSubIsComposite: s }, [...o, ...i5].map(([M, w]) => R2.default.createElement(Yo, { key: "prop-" + M, propConfig: w, pointerToProp: t2[M], obj: a, visualIndentation: r + 1 }))));
    }
    var et, R2, NF, ZF, w41, OF, UF, EF, B41, DF, y41, WF, S41, _F, k41, A41, jF, R41, b41, qF, I41, KF, Cu, $F = x(() => {
      H5();
      et = requireDist$2();
      ma();
      R0();
      R2 = I(G());
      c1();
      ru();
      N6();
      G1();
      P1();
      Lu();
      v0();
      yF();
      Qo();
      Mu();
      Gz();
      Xo();
      M1();
      NF = requireDist$2();
      K8();
      tr();
      w41 = B.div(ZF || (ZF = V(["\n  --step: 15px;\n  --left-pad: 15px;\n  ", ";\n  --right-width: 60%;\n"])), C1), UF = B.div(OF || (OF = V(["\n  height: 30px;\n  display: flex;\n  align-items: stretch;\n  position: relative;\n"]))), B41 = B.div(EF || (EF = V(["\n  padding-left: ", ";\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  ", ";\n"])), To, ({ isVectorProp: t2 }) => t2 ? "width: calc(100% - var(--right-width))" : ""), y41 = B.div(DF || (DF = V(["\n  flexshrink: 0;\n"]))), S41 = or(B.div(WF || (WF = V(["\n  margin-left: 4px;\n  cursor: default;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  user-select: none;\n  &:hover {\n    color: white;\n  }\n  overflow: hidden;\n\n  ", ";\n"])), () => T0)), k41 = B.span(_F || (_F = V(["\n  width: 28px;\n  height: 28px;\n  font-size: 9px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: transform 0.05s ease-out, color 0.1s ease-out;\n  transform: rotateZ(", "deg);\n  color: #66686a;\n\n  visibility: ", ";\n\n  ", ":hover & {\n    visibility: visible;\n  }\n\n  &:hover {\n    transform: rotateZ(", "deg);\n    color: #c0c4c9;\n  }\n"])), (t2) => t2.isCollapsed ? 0 : 90, (t2) => !t2.isVector && t2.isCollapsed || t2.isVector && !t2.isCollapsed ? "visible" : "hidden", UF, (t2) => t2.isCollapsed ? 15 : 75), A41 = N2(0.05, "#282b2f"), R41 = B.div(jF || (jF = V(["\n  /* background: ", "; */\n  /* padding: ", " 0; */\n"])), ({ depth: t2 }) => A6(t2 * 0.03, A41), (t2) => t2.lastSubIsComposite ? 0 : "4px"), b41 = T4((t2) => {
        let a = Object.entries(t2.props);
        return a.length <= 3 && a.every(([c, r]) => r.type === "number" && ["x", "y", "z"].includes(c));
      });
      I41 = B.div(qF || (qF = V(["\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  padding: 0 8px 0 2px;\n  box-sizing: border-box;\n  height: 100%;\n  width: var(--right-width);\n  flex-shrink: 0;\n  flex-grow: 0;\n"])));
      KF = R2.default.memo(P41), Cu = /* @__PURE__ */ new Map();
    });
    function QF({ isHighlighted: t2 }) {
      return t2 === "self" ? "#1857a4" : t2 === "descendent" ? "#0a2f5c" : "initial";
    }
    var XF = x(() => {
    });
    function rI({ propConfig: t2, pointerToProp: a, editingTools: c, children: r, isPropHighlightedD: e }) {
      var h;
      let l = (h = t2.label) != null ? h : M3((0, Hu.getPointerParts)(a).path), [i5, o] = z1(null), [n] = Z1(o, { menuItems: c.contextMenuItems });
      return lt.default.createElement(G41, { isHighlighted: e }, n, lt.default.createElement(T41, null, lt.default.createElement(O41, null, c.controlIndicators), lt.default.createElement(Z41, { isHighlighted: e, ref: i5, title: ["obj", "props", ...(0, Hu.getPointerParts)(a).path].join(".") }, l)), lt.default.createElement(E41, null, r));
    }
    var Hu, lt, YF, G41, JF, T41, tI, Z41, aI, O41, cI, E41, eI = x(() => {
      Hu = requireDist$2();
      v0();
      P1();
      H2();
      lt = I(G());
      c1();
      G1();
      N6();
      Mu();
      ru();
      XF();
      G41 = or(B.div(YF || (YF = V(["\n  display: flex;\n  height: 30px;\n  justify-content: flex-start;\n  align-items: stretch;\n  // We cannot calculate both the container (details panel) width and the descendant\n  // (this) width dynamically. This leads to the container width being calculated\n  // without this percentage being taken into consideration leads to horizontal\n  // clipping/scrolling--the same way as if we explicitly fixed either the container\n  // width, or the descendant width.\n  // The correct solution for tabulated UIs with dynamic container widths is to use\n  // CSS grid. For now I fixed this issue by just giving a great enough width\n  // to the details panel so most things don't break.\n  --right-width: 60%;\n  position: relative;\n  ", ";\n\n  /* background-color: ", "; */\n"])), C1, QF)), T41 = B.div(JF || (JF = V(["\n  box-sizing: border-box;\n  padding-left: ", ";\n  padding-right: 4px;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 4px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  width: calc(100% - var(--right-width));\n"])), To), Z41 = or(B.div(tI || (tI = V(["\n  text-align: left;\n  flex: 1 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: flex;\n  align-items: center;\n  user-select: none;\n  cursor: default;\n\n  ", ";\n  &:hover {\n    color: white;\n  }\n"])), T0)), O41 = B.div(aI || (aI = V(["\n  flex-basis: 8px;\n  flex: 0 0;\n  display: flex;\n  align-items: center;\n"]))), E41 = B.div(cI || (cI = V(["\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  padding: 0 8px 0 2px;\n  box-sizing: border-box;\n  height: 100%;\n  width: var(--right-width);\n  flex-shrink: 0;\n  flex-grow: 0;\n"])));
    });
    function D41({ propConfig: t2, pointerToProp: a, obj: c, SimpleEditorComponent: r }) {
      let e = rt(a, c, t2), l = (0, it.useMemo)(() => tt.getIsPropHighlightedD(D(S({}, c.address), { pathToProp: (0, lI.getPointerParts)(a).path })), [a]);
      return it.default.createElement(rI, { editingTools: e, propConfig: t2, pointerToProp: a, isPropHighlightedD: l }, it.default.createElement(r, { editingTools: e, propConfig: t2, value: e.value }));
    }
    var it, lI, iI, oI = x(() => {
      it = I(G());
      Xo();
      eI();
      lI = requireDist$2();
      Qo();
      iI = it.default.memo(D41);
    });
    var nr, W41, Yo, Lu = x(() => {
      nr = I(G());
      au();
      $F();
      oI();
      W41 = ({ propConfig: t2, visualIndentation: a, pointerToProp: c, obj: r }) => {
        if (t2.type === "compound") return nr.default.createElement(KF, { obj: r, visualIndentation: a, pointerToProp: c, propConfig: t2 });
        if (t2.type === "enum") return nr.default.createElement(nr.default.Fragment, null);
        {
          let e = Go[t2.type];
          return nr.default.createElement(iI, { SimpleEditorComponent: e, obj: r, visualIndentation: a, pointerToProp: c, propConfig: t2 });
        }
      }, Yo = W41;
    });
    function hr(t2) {
      return Vu.has(t2) || Vu.set(t2, (_41++).toString()), Vu.get(t2);
    }
    var Vu, _41, wu = x(() => {
      Vu = /* @__PURE__ */ new WeakMap(), _41 = 0;
    });
    var ot, nI, j41, hI, q41, N41, vI, gI = x(() => {
      ot = I(G());
      Lu();
      M1();
      wu();
      c1();
      j41 = B.div(nI || (nI = V(["\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  padding: 8px;\n"]))), q41 = B.button(hI || (hI = V(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  border-radius: 2px;\n\n  color: #a8a8a9;\n  background: rgba(255, 255, 255, 0.1);\n\n  border: none;\n  height: 28px;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.15);\n  }\n\n  &:active {\n    background: rgba(255, 255, 255, 0.2);\n  }\n"]))), N41 = ({ objects: t2 }) => {
        let a = t2[0], c = s1(a.template.configPointer), r = s1(a.template._temp_actionsPointer);
        return ot.default.createElement(ot.default.Fragment, null, ot.default.createElement(Yo, { key: hr(a), obj: a, pointerToProp: a.propsP, propConfig: c, visualIndentation: 1 }), ot.default.createElement(j41, null, r && Object.entries(r).map(([e, l]) => ot.default.createElement(q41, { key: e, onClick: () => {
          l(a.publicApi);
        } }, e))));
      }, vI = N41;
    });
    var dI, U41, vr, Bu = x(() => {
      c1();
      U41 = B.button(dI || (dI = V(["\n  text-align: center;\n  padding: 8px;\n  border-radius: 2px;\n  border: 1px solid #627b7b87;\n  background-color: #4b787d3d;\n  color: #eaeaea;\n  font-weight: 400;\n  display: block;\n  appearance: none;\n  flex-grow: 1;\n  cursor: ", ";\n  opacity: ", ";\n\n  &:hover {\n    background-color: #7dc1c878;\n    border-color: #9ebcbf;\n  }\n"])), (t2) => t2.disabled ? "none" : "pointer", (t2) => t2.disabled ? 0.4 : 1), vr = U41;
    });
    var sI = x(() => {
    });
    var zI, uI = x(() => {
      sI();
      zI = (t2 = 21) => {
        let a = "", c = crypto.getRandomValues(new Uint8Array(t2));
        for (; t2--; ) {
          let r = c[t2] & 63;
          r < 36 ? a += r.toString(36) : r < 62 ? a += (r - 26).toString(36).toUpperCase() : r < 63 ? a += "_" : a += "-";
        }
        return a;
      };
    });
    function Jo() {
      return zI(16);
    }
    var yu = x(() => {
      uI();
    });
    var pI, O0, mI, K41, fI, $41, MI, Su = x(() => {
      pI = requireDist$2();
      P1();
      O0 = I(G()), mI = (0, O0.createContext)(null), K41 = 0, fI = () => {
        let t2 = (0, O0.useMemo)(() => K41++, []), { cur: a, set: c } = (0, O0.useContext)(mI), [r, e] = z1(false), l = (0, O0.useCallback)((i5, o) => {
          c(i5 ? t2 : -1, o);
        }, []);
        return (0, O0.useEffect)(() => a.onStale(() => {
          let i5 = a.getValue() === t2;
          r.current !== i5 && (r.current = i5);
        }), [a, t2]), [e, l];
      }, $41 = ({ children: t2 }) => {
        let a = (0, O0.useMemo)(() => new pI.Atom(-1), []), c = a.prism, r = (0, O0.useMemo)(() => {
          let e;
          return (l, i5) => {
            let o = e !== void 0;
            e !== void 0 && (clearTimeout(e), e = void 0), i5 === 0 || o ? a.set(l) : e = setTimeout(() => {
              a.set(l), e = void 0;
            }, i5);
          };
        }, []);
        return O0.default.createElement(mI.Provider, { value: { cur: c, set: r } }, t2);
      }, MI = $41;
    });
    function R3(t2, a) {
      let c = t2.enabled !== false, [r, e] = fI(), [l, i5] = z1(null);
      (0, CI.useEffect)(() => {
        if (!c) return;
        let h = l.current;
        if (!h) return;
        let v = () => {
          var s;
          return e(true, (s = t2.enterDelay) != null ? s : 400);
        }, g = () => {
          var s;
          return e(false, (s = t2.exitDelay) != null ? s : 200);
        };
        return h.addEventListener("mouseenter", v), h.addEventListener("mouseleave", g), () => {
          h.removeEventListener("mouseenter", v), h.removeEventListener("mouseleave", g);
        };
      }, [l, c, t2.enterDelay, t2.exitDelay]);
      let o = (0, xI.useContext)(a3);
      return [c && r && i5 ? (0, LI.createPortal)(tn.default.createElement(Fo, { children: a, target: i5, onClickOutside: h0, verticalPlacement: t2.verticalPlacement, verticalGap: t2.verticalGap }), o) : tn.default.createElement(tn.default.Fragment, null), l, r];
    }
    var xI, CI, tn, LI, nt = x(() => {
      P1();
      xI = I(G()), CI = I(G()), tn = I(G());
      Jz();
      LI = I(B4());
      Su();
      T6();
      W8();
    });
    var HI, Q41, w5, gr = x(() => {
      c1();
      e4();
      Q41 = B(T2)(HI || (HI = V(["\n  padding: 1em;\n  max-width: 240px;\n  pointer-events: none !important;\n  --popover-outer-stroke: transparent;\n  --popover-inner-stroke: #45464d;\n"]))), w5 = Q41;
    });
    var E4, VI, X41, wI, Y41, BI, J41, t51, a51, yI, SI = x(() => {
      M1();
      f1();
      E4 = I(G());
      c1();
      yu();
      nt();
      gr();
      Bu();
      X41 = B.div(VI || (VI = V(["\n  padding: 8px 10px;\n  position: relative;\n  background-color: #6d232352;\n  &:before {\n    position: absolute;\n    content: ' ';\n    display: block;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background-color: #ff000070;\n  }\n"]))), Y41 = B.div(wI || (wI = V(["\n  margin-bottom: 1em;\n  & a {\n    color: inherit;\n  }\n"]))), J41 = B.div(BI || (BI = V(["\n  display: flex;\n  gap: 8px;\n"]))), t51 = ({ projectId: t2 }) => {
        let a = s1(T().atomP.ephemeral.coreByProject[t2].loadingState);
        return a && a.type === "browserStateIsNotBasedOnDiskState" ? E4.default.createElement(a51, { loadingState: a, projectId: t2 }) : null;
      }, a51 = ({ projectId: t2, loadingState: a }) => {
        let c = () => {
          T().transaction(({ drafts: n, stateEditors: h }) => {
            h.coreByProject.historic.revisionHistory.add({ projectId: t2, revision: a.onDiskState.revisionHistory[0] }), h.coreByProject.historic.revisionHistory.add({ projectId: t2, revision: Jo() }), n.ephemeral.coreByProject[t2].loadingState = { type: "loaded" };
          });
        }, r = () => {
          T().transaction(({ drafts: n }) => {
            n.historic.coreByProject[t2] = a.onDiskState, n.ephemeral.coreByProject[t2].loadingState = { type: "loaded" };
          });
        }, [e, l] = R3({}, () => E4.default.createElement(w5, null, "The browser's state will override the disk state.")), [i5, o] = R3({}, () => E4.default.createElement(w5, null, "The disk's state will override the browser's state."));
        return E4.default.createElement(X41, null, E4.default.createElement(Y41, null, "Browser state is not based on disk state.", " ", E4.default.createElement("a", { href: "https://www.theatrejs.com/docs/latest/manual/projects#state", target: "_blank" }, "Learn more.")), E4.default.createElement(J41, null, e, E4.default.createElement(vr, { onClick: c, ref: l }, "Use browser's state"), i5, E4.default.createElement(vr, { onClick: r, ref: o }, "Use disk state")));
      }, yI = t51;
    });
    var AI = L1((kI, ku) => {
      (function(t2) {
        typeof kI == "object" && typeof ku != "undefined" ? ku.exports = t2() : (typeof window != "undefined" ? window : typeof commonjsGlobal != "undefined" ? commonjsGlobal : typeof self != "undefined" ? self : this).JSZip = t2();
      })(function() {
        return function t2(a, c, r) {
          function e(o, n) {
            if (!c[o]) {
              if (!a[o]) {
                var h = typeof commonjsRequire == "function" && commonjsRequire;
                if (!n && h) return h(o, true);
                if (l) return l(o, true);
                var v = new Error("Cannot find module '" + o + "'");
                throw v.code = "MODULE_NOT_FOUND", v;
              }
              var g = c[o] = { exports: {} };
              a[o][0].call(g.exports, function(s) {
                var d = a[o][1][s];
                return e(d || s);
              }, g, g.exports, t2, a, c, r);
            }
            return c[o].exports;
          }
          for (var l = typeof commonjsRequire == "function" && commonjsRequire, i5 = 0; i5 < r.length; i5++) e(r[i5]);
          return e;
        }({ 1: [function(t2, a, c) {
          var r = t2("./utils"), e = t2("./support"), l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          c.encode = function(i5) {
            for (var o, n, h, v, g, s, d, z = [], u = 0, f = i5.length, p = f, m = r.getTypeOf(i5) !== "string"; u < i5.length; ) p = f - u, h = m ? (o = i5[u++], n = u < f ? i5[u++] : 0, u < f ? i5[u++] : 0) : (o = i5.charCodeAt(u++), n = u < f ? i5.charCodeAt(u++) : 0, u < f ? i5.charCodeAt(u++) : 0), v = o >> 2, g = (3 & o) << 4 | n >> 4, s = 1 < p ? (15 & n) << 2 | h >> 6 : 64, d = 2 < p ? 63 & h : 64, z.push(l.charAt(v) + l.charAt(g) + l.charAt(s) + l.charAt(d));
            return z.join("");
          }, c.decode = function(i5) {
            var o, n, h, v, g, s, d = 0, z = 0, u = "data:";
            if (i5.substr(0, u.length) === u) throw new Error("Invalid base64 input, it looks like a data url.");
            var f, p = 3 * (i5 = i5.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
            if (i5.charAt(i5.length - 1) === l.charAt(64) && p--, i5.charAt(i5.length - 2) === l.charAt(64) && p--, p % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
            for (f = e.uint8array ? new Uint8Array(0 | p) : new Array(0 | p); d < i5.length; ) o = l.indexOf(i5.charAt(d++)) << 2 | (v = l.indexOf(i5.charAt(d++))) >> 4, n = (15 & v) << 4 | (g = l.indexOf(i5.charAt(d++))) >> 2, h = (3 & g) << 6 | (s = l.indexOf(i5.charAt(d++))), f[z++] = o, g !== 64 && (f[z++] = n), s !== 64 && (f[z++] = h);
            return f;
          };
        }, { "./support": 30, "./utils": 32 }], 2: [function(t2, a, c) {
          var r = t2("./external"), e = t2("./stream/DataWorker"), l = t2("./stream/Crc32Probe"), i5 = t2("./stream/DataLengthProbe");
          function o(n, h, v, g, s) {
            this.compressedSize = n, this.uncompressedSize = h, this.crc32 = v, this.compression = g, this.compressedContent = s;
          }
          o.prototype = { getContentWorker: function() {
            var n = new e(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new i5("data_length")), h = this;
            return n.on("end", function() {
              if (this.streamInfo.data_length !== h.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
            }), n;
          }, getCompressedWorker: function() {
            return new e(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
          } }, o.createWorkerFrom = function(n, h, v) {
            return n.pipe(new l()).pipe(new i5("uncompressedSize")).pipe(h.compressWorker(v)).pipe(new i5("compressedSize")).withStreamInfo("compression", h);
          }, a.exports = o;
        }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(t2, a, c) {
          var r = t2("./stream/GenericWorker");
          c.STORE = { magic: "\0\0", compressWorker: function() {
            return new r("STORE compression");
          }, uncompressWorker: function() {
            return new r("STORE decompression");
          } }, c.DEFLATE = t2("./flate");
        }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(t2, a, c) {
          var r = t2("./utils"), e = function() {
            for (var l, i5 = [], o = 0; o < 256; o++) {
              l = o;
              for (var n = 0; n < 8; n++) l = 1 & l ? 3988292384 ^ l >>> 1 : l >>> 1;
              i5[o] = l;
            }
            return i5;
          }();
          a.exports = function(l, i5) {
            return l !== void 0 && l.length ? r.getTypeOf(l) !== "string" ? function(o, n, h, v) {
              var g = e, s = v + h;
              o ^= -1;
              for (var d = v; d < s; d++) o = o >>> 8 ^ g[255 & (o ^ n[d])];
              return -1 ^ o;
            }(0 | i5, l, l.length, 0) : function(o, n, h, v) {
              var g = e, s = v + h;
              o ^= -1;
              for (var d = v; d < s; d++) o = o >>> 8 ^ g[255 & (o ^ n.charCodeAt(d))];
              return -1 ^ o;
            }(0 | i5, l, l.length, 0) : 0;
          };
        }, { "./utils": 32 }], 5: [function(t2, a, c) {
          c.base64 = false, c.binary = false, c.dir = false, c.createFolders = true, c.date = null, c.compression = null, c.compressionOptions = null, c.comment = null, c.unixPermissions = null, c.dosPermissions = null;
        }, {}], 6: [function(t2, a, c) {
          var r = null;
          r = typeof Promise != "undefined" ? Promise : t2("lie"), a.exports = { Promise: r };
        }, { lie: 37 }], 7: [function(t2, a, c) {
          var r = typeof Uint8Array != "undefined" && typeof Uint16Array != "undefined" && typeof Uint32Array != "undefined", e = t2("pako"), l = t2("./utils"), i5 = t2("./stream/GenericWorker"), o = r ? "uint8array" : "array";
          function n(h, v) {
            i5.call(this, "FlateWorker/" + h), this._pako = null, this._pakoAction = h, this._pakoOptions = v, this.meta = {};
          }
          c.magic = "\b\0", l.inherits(n, i5), n.prototype.processChunk = function(h) {
            this.meta = h.meta, this._pako === null && this._createPako(), this._pako.push(l.transformTo(o, h.data), false);
          }, n.prototype.flush = function() {
            i5.prototype.flush.call(this), this._pako === null && this._createPako(), this._pako.push([], true);
          }, n.prototype.cleanUp = function() {
            i5.prototype.cleanUp.call(this), this._pako = null;
          }, n.prototype._createPako = function() {
            this._pako = new e[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
            var h = this;
            this._pako.onData = function(v) {
              h.push({ data: v, meta: h.meta });
            };
          }, c.compressWorker = function(h) {
            return new n("Deflate", h);
          }, c.uncompressWorker = function() {
            return new n("Inflate", {});
          };
        }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(t2, a, c) {
          function r(g, s) {
            var d, z = "";
            for (d = 0; d < s; d++) z += String.fromCharCode(255 & g), g >>>= 8;
            return z;
          }
          function e(g, s, d, z, u, f) {
            var p, m, M = g.file, w = g.compression, H = f !== o.utf8encode, y = l.transformTo("string", f(M.name)), k = l.transformTo("string", o.utf8encode(M.name)), F = M.comment, U = l.transformTo("string", f(F)), A = l.transformTo("string", o.utf8encode(F)), P = k.length !== M.name.length, C = A.length !== F.length, E = "", a1 = "", j = "", K = M.dir, Z = M.date, J = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
            s && !d || (J.crc32 = g.crc32, J.compressedSize = g.compressedSize, J.uncompressedSize = g.uncompressedSize);
            var W = 0;
            s && (W |= 8), H || !P && !C || (W |= 2048);
            var _ = 0, g1 = 0;
            K && (_ |= 16), u === "UNIX" ? (g1 = 798, _ |= function($, o1) {
              var u1 = $;
              return $ || (u1 = o1 ? 16893 : 33204), (65535 & u1) << 16;
            }(M.unixPermissions, K)) : (g1 = 20, _ |= function($) {
              return 63 & ($ || 0);
            }(M.dosPermissions)), p = Z.getUTCHours(), p <<= 6, p |= Z.getUTCMinutes(), p <<= 5, p |= Z.getUTCSeconds() / 2, m = Z.getUTCFullYear() - 1980, m <<= 4, m |= Z.getUTCMonth() + 1, m <<= 5, m |= Z.getUTCDate(), P && (a1 = r(1, 1) + r(n(y), 4) + k, E += "up" + r(a1.length, 2) + a1), C && (j = r(1, 1) + r(n(U), 4) + A, E += "uc" + r(j.length, 2) + j);
            var X = "";
            return X += "\n\0", X += r(W, 2), X += w.magic, X += r(p, 2), X += r(m, 2), X += r(J.crc32, 4), X += r(J.compressedSize, 4), X += r(J.uncompressedSize, 4), X += r(y.length, 2), X += r(E.length, 2), { fileRecord: h.LOCAL_FILE_HEADER + X + y + E, dirRecord: h.CENTRAL_FILE_HEADER + r(g1, 2) + X + r(U.length, 2) + "\0\0\0\0" + r(_, 4) + r(z, 4) + y + E + U };
          }
          var l = t2("../utils"), i5 = t2("../stream/GenericWorker"), o = t2("../utf8"), n = t2("../crc32"), h = t2("../signature");
          function v(g, s, d, z) {
            i5.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = s, this.zipPlatform = d, this.encodeFileName = z, this.streamFiles = g, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
          }
          l.inherits(v, i5), v.prototype.push = function(g) {
            var s = g.meta.percent || 0, d = this.entriesCount, z = this._sources.length;
            this.accumulate ? this.contentBuffer.push(g) : (this.bytesWritten += g.data.length, i5.prototype.push.call(this, { data: g.data, meta: { currentFile: this.currentFile, percent: d ? (s + 100 * (d - z - 1)) / d : 100 } }));
          }, v.prototype.openedSource = function(g) {
            this.currentSourceOffset = this.bytesWritten, this.currentFile = g.file.name;
            var s = this.streamFiles && !g.file.dir;
            if (s) {
              var d = e(g, s, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
              this.push({ data: d.fileRecord, meta: { percent: 0 } });
            } else this.accumulate = true;
          }, v.prototype.closedSource = function(g) {
            this.accumulate = false;
            var s = this.streamFiles && !g.file.dir, d = e(g, s, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            if (this.dirRecords.push(d.dirRecord), s) this.push({ data: function(z) {
              return h.DATA_DESCRIPTOR + r(z.crc32, 4) + r(z.compressedSize, 4) + r(z.uncompressedSize, 4);
            }(g), meta: { percent: 100 } });
            else for (this.push({ data: d.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());
            this.currentFile = null;
          }, v.prototype.flush = function() {
            for (var g = this.bytesWritten, s = 0; s < this.dirRecords.length; s++) this.push({ data: this.dirRecords[s], meta: { percent: 100 } });
            var d = this.bytesWritten - g, z = function(u, f, p, m, M) {
              var w = l.transformTo("string", M(m));
              return h.CENTRAL_DIRECTORY_END + "\0\0\0\0" + r(u, 2) + r(u, 2) + r(f, 4) + r(p, 4) + r(w.length, 2) + w;
            }(this.dirRecords.length, d, g, this.zipComment, this.encodeFileName);
            this.push({ data: z, meta: { percent: 100 } });
          }, v.prototype.prepareNextSource = function() {
            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
          }, v.prototype.registerPrevious = function(g) {
            this._sources.push(g);
            var s = this;
            return g.on("data", function(d) {
              s.processChunk(d);
            }), g.on("end", function() {
              s.closedSource(s.previous.streamInfo), s._sources.length ? s.prepareNextSource() : s.end();
            }), g.on("error", function(d) {
              s.error(d);
            }), this;
          }, v.prototype.resume = function() {
            return !!i5.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
          }, v.prototype.error = function(g) {
            var s = this._sources;
            if (!i5.prototype.error.call(this, g)) return false;
            for (var d = 0; d < s.length; d++) try {
              s[d].error(g);
            } catch (z) {
            }
            return true;
          }, v.prototype.lock = function() {
            i5.prototype.lock.call(this);
            for (var g = this._sources, s = 0; s < g.length; s++) g[s].lock();
          }, a.exports = v;
        }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(t2, a, c) {
          var r = t2("../compressions"), e = t2("./ZipFileWorker");
          c.generateWorker = function(l, i5, o) {
            var n = new e(i5.streamFiles, o, i5.platform, i5.encodeFileName), h = 0;
            try {
              l.forEach(function(v, g) {
                h++;
                var s = function(f, p) {
                  var m = f || p, M = r[m];
                  if (!M) throw new Error(m + " is not a valid compression method !");
                  return M;
                }(g.options.compression, i5.compression), d = g.options.compressionOptions || i5.compressionOptions || {}, z = g.dir, u = g.date;
                g._compressWorker(s, d).withStreamInfo("file", { name: v, dir: z, date: u, comment: g.comment || "", unixPermissions: g.unixPermissions, dosPermissions: g.dosPermissions }).pipe(n);
              }), n.entriesCount = h;
            } catch (v) {
              n.error(v);
            }
            return n;
          };
        }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(t2, a, c) {
          function r() {
            if (!(this instanceof r)) return new r();
            if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
              var e = new r();
              for (var l in this) typeof this[l] != "function" && (e[l] = this[l]);
              return e;
            };
          }
          (r.prototype = t2("./object")).loadAsync = t2("./load"), r.support = t2("./support"), r.defaults = t2("./defaults"), r.version = "3.10.1", r.loadAsync = function(e, l) {
            return new r().loadAsync(e, l);
          }, r.external = t2("./external"), a.exports = r;
        }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(t2, a, c) {
          var r = t2("./utils"), e = t2("./external"), l = t2("./utf8"), i5 = t2("./zipEntries"), o = t2("./stream/Crc32Probe"), n = t2("./nodejsUtils");
          function h(v) {
            return new e.Promise(function(g, s) {
              var d = v.decompressed.getContentWorker().pipe(new o());
              d.on("error", function(z) {
                s(z);
              }).on("end", function() {
                d.streamInfo.crc32 !== v.decompressed.crc32 ? s(new Error("Corrupted zip : CRC32 mismatch")) : g();
              }).resume();
            });
          }
          a.exports = function(v, g) {
            var s = this;
            return g = r.extend(g || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: l.utf8decode }), n.isNode && n.isStream(v) ? e.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : r.prepareContent("the loaded zip file", v, true, g.optimizedBinaryString, g.base64).then(function(d) {
              var z = new i5(g);
              return z.load(d), z;
            }).then(function(d) {
              var z = [e.Promise.resolve(d)], u = d.files;
              if (g.checkCRC32) for (var f = 0; f < u.length; f++) z.push(h(u[f]));
              return e.Promise.all(z);
            }).then(function(d) {
              for (var z = d.shift(), u = z.files, f = 0; f < u.length; f++) {
                var p = u[f], m = p.fileNameStr, M = r.resolve(p.fileNameStr);
                s.file(M, p.decompressed, { binary: true, optimizedBinaryString: true, date: p.date, dir: p.dir, comment: p.fileCommentStr.length ? p.fileCommentStr : null, unixPermissions: p.unixPermissions, dosPermissions: p.dosPermissions, createFolders: g.createFolders }), p.dir || (s.file(M).unsafeOriginalName = m);
              }
              return z.zipComment.length && (s.comment = z.zipComment), s;
            });
          };
        }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(t2, a, c) {
          var r = t2("../utils"), e = t2("../stream/GenericWorker");
          function l(i5, o) {
            e.call(this, "Nodejs stream input adapter for " + i5), this._upstreamEnded = false, this._bindStream(o);
          }
          r.inherits(l, e), l.prototype._bindStream = function(i5) {
            var o = this;
            (this._stream = i5).pause(), i5.on("data", function(n) {
              o.push({ data: n, meta: { percent: 0 } });
            }).on("error", function(n) {
              o.isPaused ? this.generatedError = n : o.error(n);
            }).on("end", function() {
              o.isPaused ? o._upstreamEnded = true : o.end();
            });
          }, l.prototype.pause = function() {
            return !!e.prototype.pause.call(this) && (this._stream.pause(), true);
          }, l.prototype.resume = function() {
            return !!e.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
          }, a.exports = l;
        }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(t2, a, c) {
          var r = t2("readable-stream").Readable;
          function e(l, i5, o) {
            r.call(this, i5), this._helper = l;
            var n = this;
            l.on("data", function(h, v) {
              n.push(h) || n._helper.pause(), o && o(v);
            }).on("error", function(h) {
              n.emit("error", h);
            }).on("end", function() {
              n.push(null);
            });
          }
          t2("../utils").inherits(e, r), e.prototype._read = function() {
            this._helper.resume();
          }, a.exports = e;
        }, { "../utils": 32, "readable-stream": 16 }], 14: [function(t2, a, c) {
          a.exports = { isNode: typeof Buffer != "undefined", newBufferFrom: function(r, e) {
            if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(r, e);
            if (typeof r == "number") throw new Error('The "data" argument must not be a number');
            return new Buffer(r, e);
          }, allocBuffer: function(r) {
            if (Buffer.alloc) return Buffer.alloc(r);
            var e = new Buffer(r);
            return e.fill(0), e;
          }, isBuffer: function(r) {
            return Buffer.isBuffer(r);
          }, isStream: function(r) {
            return r && typeof r.on == "function" && typeof r.pause == "function" && typeof r.resume == "function";
          } };
        }, {}], 15: [function(t2, a, c) {
          function r(M, w, H) {
            var y, k = l.getTypeOf(w), F = l.extend(H || {}, n);
            F.date = F.date || /* @__PURE__ */ new Date(), F.compression !== null && (F.compression = F.compression.toUpperCase()), typeof F.unixPermissions == "string" && (F.unixPermissions = parseInt(F.unixPermissions, 8)), F.unixPermissions && 16384 & F.unixPermissions && (F.dir = true), F.dosPermissions && 16 & F.dosPermissions && (F.dir = true), F.dir && (M = u(M)), F.createFolders && (y = z(M)) && f.call(this, y, true);
            var U = k === "string" && F.binary === false && F.base64 === false;
            H && H.binary !== void 0 || (F.binary = !U), (w instanceof h && w.uncompressedSize === 0 || F.dir || !w || w.length === 0) && (F.base64 = false, F.binary = true, w = "", F.compression = "STORE", k = "string");
            var A = null;
            A = w instanceof h || w instanceof i5 ? w : s.isNode && s.isStream(w) ? new d(M, w) : l.prepareContent(M, w, F.binary, F.optimizedBinaryString, F.base64);
            var P = new v(M, A, F);
            this.files[M] = P;
          }
          var e = t2("./utf8"), l = t2("./utils"), i5 = t2("./stream/GenericWorker"), o = t2("./stream/StreamHelper"), n = t2("./defaults"), h = t2("./compressedObject"), v = t2("./zipObject"), g = t2("./generate"), s = t2("./nodejsUtils"), d = t2("./nodejs/NodejsStreamInputAdapter"), z = function(M) {
            M.slice(-1) === "/" && (M = M.substring(0, M.length - 1));
            var w = M.lastIndexOf("/");
            return 0 < w ? M.substring(0, w) : "";
          }, u = function(M) {
            return M.slice(-1) !== "/" && (M += "/"), M;
          }, f = function(M, w) {
            return w = w !== void 0 ? w : n.createFolders, M = u(M), this.files[M] || r.call(this, M, null, { dir: true, createFolders: w }), this.files[M];
          };
          function p(M) {
            return Object.prototype.toString.call(M) === "[object RegExp]";
          }
          var m = { load: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, forEach: function(M) {
            var w, H, y;
            for (w in this.files) y = this.files[w], (H = w.slice(this.root.length, w.length)) && w.slice(0, this.root.length) === this.root && M(H, y);
          }, filter: function(M) {
            var w = [];
            return this.forEach(function(H, y) {
              M(H, y) && w.push(y);
            }), w;
          }, file: function(M, w, H) {
            if (arguments.length !== 1) return M = this.root + M, r.call(this, M, w, H), this;
            if (p(M)) {
              var y = M;
              return this.filter(function(F, U) {
                return !U.dir && y.test(F);
              });
            }
            var k = this.files[this.root + M];
            return k && !k.dir ? k : null;
          }, folder: function(M) {
            if (!M) return this;
            if (p(M)) return this.filter(function(k, F) {
              return F.dir && M.test(k);
            });
            var w = this.root + M, H = f.call(this, w), y = this.clone();
            return y.root = H.name, y;
          }, remove: function(M) {
            M = this.root + M;
            var w = this.files[M];
            if (w || (M.slice(-1) !== "/" && (M += "/"), w = this.files[M]), w && !w.dir) delete this.files[M];
            else for (var H = this.filter(function(k, F) {
              return F.name.slice(0, M.length) === M;
            }), y = 0; y < H.length; y++) delete this.files[H[y].name];
            return this;
          }, generate: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, generateInternalStream: function(M) {
            var w, H = {};
            try {
              if ((H = l.extend(M || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: e.utf8encode })).type = H.type.toLowerCase(), H.compression = H.compression.toUpperCase(), H.type === "binarystring" && (H.type = "string"), !H.type) throw new Error("No output type specified.");
              l.checkSupport(H.type), H.platform !== "darwin" && H.platform !== "freebsd" && H.platform !== "linux" && H.platform !== "sunos" || (H.platform = "UNIX"), H.platform === "win32" && (H.platform = "DOS");
              var y = H.comment || this.comment || "";
              w = g.generateWorker(this, H, y);
            } catch (k) {
              (w = new i5("error")).error(k);
            }
            return new o(w, H.type || "string", H.mimeType);
          }, generateAsync: function(M, w) {
            return this.generateInternalStream(M).accumulate(w);
          }, generateNodeStream: function(M, w) {
            return (M = M || {}).type || (M.type = "nodebuffer"), this.generateInternalStream(M).toNodejsStream(w);
          } };
          a.exports = m;
        }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(t2, a, c) {
          a.exports = t2("stream");
        }, { stream: void 0 }], 17: [function(t2, a, c) {
          var r = t2("./DataReader");
          function e(l) {
            r.call(this, l);
            for (var i5 = 0; i5 < this.data.length; i5++) l[i5] = 255 & l[i5];
          }
          t2("../utils").inherits(e, r), e.prototype.byteAt = function(l) {
            return this.data[this.zero + l];
          }, e.prototype.lastIndexOfSignature = function(l) {
            for (var i5 = l.charCodeAt(0), o = l.charCodeAt(1), n = l.charCodeAt(2), h = l.charCodeAt(3), v = this.length - 4; 0 <= v; --v) if (this.data[v] === i5 && this.data[v + 1] === o && this.data[v + 2] === n && this.data[v + 3] === h) return v - this.zero;
            return -1;
          }, e.prototype.readAndCheckSignature = function(l) {
            var i5 = l.charCodeAt(0), o = l.charCodeAt(1), n = l.charCodeAt(2), h = l.charCodeAt(3), v = this.readData(4);
            return i5 === v[0] && o === v[1] && n === v[2] && h === v[3];
          }, e.prototype.readData = function(l) {
            if (this.checkOffset(l), l === 0) return [];
            var i5 = this.data.slice(this.zero + this.index, this.zero + this.index + l);
            return this.index += l, i5;
          }, a.exports = e;
        }, { "../utils": 32, "./DataReader": 18 }], 18: [function(t2, a, c) {
          var r = t2("../utils");
          function e(l) {
            this.data = l, this.length = l.length, this.index = 0, this.zero = 0;
          }
          e.prototype = { checkOffset: function(l) {
            this.checkIndex(this.index + l);
          }, checkIndex: function(l) {
            if (this.length < this.zero + l || l < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + l + "). Corrupted zip ?");
          }, setIndex: function(l) {
            this.checkIndex(l), this.index = l;
          }, skip: function(l) {
            this.setIndex(this.index + l);
          }, byteAt: function() {
          }, readInt: function(l) {
            var i5, o = 0;
            for (this.checkOffset(l), i5 = this.index + l - 1; i5 >= this.index; i5--) o = (o << 8) + this.byteAt(i5);
            return this.index += l, o;
          }, readString: function(l) {
            return r.transformTo("string", this.readData(l));
          }, readData: function() {
          }, lastIndexOfSignature: function() {
          }, readAndCheckSignature: function() {
          }, readDate: function() {
            var l = this.readInt(4);
            return new Date(Date.UTC(1980 + (l >> 25 & 127), (l >> 21 & 15) - 1, l >> 16 & 31, l >> 11 & 31, l >> 5 & 63, (31 & l) << 1));
          } }, a.exports = e;
        }, { "../utils": 32 }], 19: [function(t2, a, c) {
          var r = t2("./Uint8ArrayReader");
          function e(l) {
            r.call(this, l);
          }
          t2("../utils").inherits(e, r), e.prototype.readData = function(l) {
            this.checkOffset(l);
            var i5 = this.data.slice(this.zero + this.index, this.zero + this.index + l);
            return this.index += l, i5;
          }, a.exports = e;
        }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(t2, a, c) {
          var r = t2("./DataReader");
          function e(l) {
            r.call(this, l);
          }
          t2("../utils").inherits(e, r), e.prototype.byteAt = function(l) {
            return this.data.charCodeAt(this.zero + l);
          }, e.prototype.lastIndexOfSignature = function(l) {
            return this.data.lastIndexOf(l) - this.zero;
          }, e.prototype.readAndCheckSignature = function(l) {
            return l === this.readData(4);
          }, e.prototype.readData = function(l) {
            this.checkOffset(l);
            var i5 = this.data.slice(this.zero + this.index, this.zero + this.index + l);
            return this.index += l, i5;
          }, a.exports = e;
        }, { "../utils": 32, "./DataReader": 18 }], 21: [function(t2, a, c) {
          var r = t2("./ArrayReader");
          function e(l) {
            r.call(this, l);
          }
          t2("../utils").inherits(e, r), e.prototype.readData = function(l) {
            if (this.checkOffset(l), l === 0) return new Uint8Array(0);
            var i5 = this.data.subarray(this.zero + this.index, this.zero + this.index + l);
            return this.index += l, i5;
          }, a.exports = e;
        }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(t2, a, c) {
          var r = t2("../utils"), e = t2("../support"), l = t2("./ArrayReader"), i5 = t2("./StringReader"), o = t2("./NodeBufferReader"), n = t2("./Uint8ArrayReader");
          a.exports = function(h) {
            var v = r.getTypeOf(h);
            return r.checkSupport(v), v !== "string" || e.uint8array ? v === "nodebuffer" ? new o(h) : e.uint8array ? new n(r.transformTo("uint8array", h)) : new l(r.transformTo("array", h)) : new i5(h);
          };
        }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(t2, a, c) {
          c.LOCAL_FILE_HEADER = "PK", c.CENTRAL_FILE_HEADER = "PK", c.CENTRAL_DIRECTORY_END = "PK", c.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", c.ZIP64_CENTRAL_DIRECTORY_END = "PK", c.DATA_DESCRIPTOR = "PK\x07\b";
        }, {}], 24: [function(t2, a, c) {
          var r = t2("./GenericWorker"), e = t2("../utils");
          function l(i5) {
            r.call(this, "ConvertWorker to " + i5), this.destType = i5;
          }
          e.inherits(l, r), l.prototype.processChunk = function(i5) {
            this.push({ data: e.transformTo(this.destType, i5.data), meta: i5.meta });
          }, a.exports = l;
        }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(t2, a, c) {
          var r = t2("./GenericWorker"), e = t2("../crc32");
          function l() {
            r.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
          }
          t2("../utils").inherits(l, r), l.prototype.processChunk = function(i5) {
            this.streamInfo.crc32 = e(i5.data, this.streamInfo.crc32 || 0), this.push(i5);
          }, a.exports = l;
        }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(t2, a, c) {
          var r = t2("../utils"), e = t2("./GenericWorker");
          function l(i5) {
            e.call(this, "DataLengthProbe for " + i5), this.propName = i5, this.withStreamInfo(i5, 0);
          }
          r.inherits(l, e), l.prototype.processChunk = function(i5) {
            if (i5) {
              var o = this.streamInfo[this.propName] || 0;
              this.streamInfo[this.propName] = o + i5.data.length;
            }
            e.prototype.processChunk.call(this, i5);
          }, a.exports = l;
        }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(t2, a, c) {
          var r = t2("../utils"), e = t2("./GenericWorker");
          function l(i5) {
            e.call(this, "DataWorker");
            var o = this;
            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, i5.then(function(n) {
              o.dataIsReady = true, o.data = n, o.max = n && n.length || 0, o.type = r.getTypeOf(n), o.isPaused || o._tickAndRepeat();
            }, function(n) {
              o.error(n);
            });
          }
          r.inherits(l, e), l.prototype.cleanUp = function() {
            e.prototype.cleanUp.call(this), this.data = null;
          }, l.prototype.resume = function() {
            return !!e.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, r.delay(this._tickAndRepeat, [], this)), true);
          }, l.prototype._tickAndRepeat = function() {
            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (r.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
          }, l.prototype._tick = function() {
            if (this.isPaused || this.isFinished) return false;
            var i5 = null, o = Math.min(this.max, this.index + 16384);
            if (this.index >= this.max) return this.end();
            switch (this.type) {
              case "string":
                i5 = this.data.substring(this.index, o);
                break;
              case "uint8array":
                i5 = this.data.subarray(this.index, o);
                break;
              case "array":
              case "nodebuffer":
                i5 = this.data.slice(this.index, o);
            }
            return this.index = o, this.push({ data: i5, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
          }, a.exports = l;
        }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(t2, a, c) {
          function r(e) {
            this.name = e || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
          }
          r.prototype = { push: function(e) {
            this.emit("data", e);
          }, end: function() {
            if (this.isFinished) return false;
            this.flush();
            try {
              this.emit("end"), this.cleanUp(), this.isFinished = true;
            } catch (e) {
              this.emit("error", e);
            }
            return true;
          }, error: function(e) {
            return !this.isFinished && (this.isPaused ? this.generatedError = e : (this.isFinished = true, this.emit("error", e), this.previous && this.previous.error(e), this.cleanUp()), true);
          }, on: function(e, l) {
            return this._listeners[e].push(l), this;
          }, cleanUp: function() {
            this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
          }, emit: function(e, l) {
            if (this._listeners[e]) for (var i5 = 0; i5 < this._listeners[e].length; i5++) this._listeners[e][i5].call(this, l);
          }, pipe: function(e) {
            return e.registerPrevious(this);
          }, registerPrevious: function(e) {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.streamInfo = e.streamInfo, this.mergeStreamInfo(), this.previous = e;
            var l = this;
            return e.on("data", function(i5) {
              l.processChunk(i5);
            }), e.on("end", function() {
              l.end();
            }), e.on("error", function(i5) {
              l.error(i5);
            }), this;
          }, pause: function() {
            return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
          }, resume: function() {
            if (!this.isPaused || this.isFinished) return false;
            var e = this.isPaused = false;
            return this.generatedError && (this.error(this.generatedError), e = true), this.previous && this.previous.resume(), !e;
          }, flush: function() {
          }, processChunk: function(e) {
            this.push(e);
          }, withStreamInfo: function(e, l) {
            return this.extraStreamInfo[e] = l, this.mergeStreamInfo(), this;
          }, mergeStreamInfo: function() {
            for (var e in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e) && (this.streamInfo[e] = this.extraStreamInfo[e]);
          }, lock: function() {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.isLocked = true, this.previous && this.previous.lock();
          }, toString: function() {
            var e = "Worker " + this.name;
            return this.previous ? this.previous + " -> " + e : e;
          } }, a.exports = r;
        }, {}], 29: [function(t2, a, c) {
          var r = t2("../utils"), e = t2("./ConvertWorker"), l = t2("./GenericWorker"), i5 = t2("../base64"), o = t2("../support"), n = t2("../external"), h = null;
          if (o.nodestream) try {
            h = t2("../nodejs/NodejsStreamOutputAdapter");
          } catch (s) {
          }
          function v(s, d) {
            return new n.Promise(function(z, u) {
              var f = [], p = s._internalType, m = s._outputType, M = s._mimeType;
              s.on("data", function(w, H) {
                f.push(w), d && d(H);
              }).on("error", function(w) {
                f = [], u(w);
              }).on("end", function() {
                try {
                  var w = function(H, y, k) {
                    switch (H) {
                      case "blob":
                        return r.newBlob(r.transformTo("arraybuffer", y), k);
                      case "base64":
                        return i5.encode(y);
                      default:
                        return r.transformTo(H, y);
                    }
                  }(m, function(H, y) {
                    var k, F = 0, U = null, A = 0;
                    for (k = 0; k < y.length; k++) A += y[k].length;
                    switch (H) {
                      case "string":
                        return y.join("");
                      case "array":
                        return Array.prototype.concat.apply([], y);
                      case "uint8array":
                        for (U = new Uint8Array(A), k = 0; k < y.length; k++) U.set(y[k], F), F += y[k].length;
                        return U;
                      case "nodebuffer":
                        return Buffer.concat(y);
                      default:
                        throw new Error("concat : unsupported type '" + H + "'");
                    }
                  }(p, f), M);
                  z(w);
                } catch (H) {
                  u(H);
                }
                f = [];
              }).resume();
            });
          }
          function g(s, d, z) {
            var u = d;
            switch (d) {
              case "blob":
              case "arraybuffer":
                u = "uint8array";
                break;
              case "base64":
                u = "string";
            }
            try {
              this._internalType = u, this._outputType = d, this._mimeType = z, r.checkSupport(u), this._worker = s.pipe(new e(u)), s.lock();
            } catch (f) {
              this._worker = new l("error"), this._worker.error(f);
            }
          }
          g.prototype = { accumulate: function(s) {
            return v(this, s);
          }, on: function(s, d) {
            var z = this;
            return s === "data" ? this._worker.on(s, function(u) {
              d.call(z, u.data, u.meta);
            }) : this._worker.on(s, function() {
              r.delay(d, arguments, z);
            }), this;
          }, resume: function() {
            return r.delay(this._worker.resume, [], this._worker), this;
          }, pause: function() {
            return this._worker.pause(), this;
          }, toNodejsStream: function(s) {
            if (r.checkSupport("nodestream"), this._outputType !== "nodebuffer") throw new Error(this._outputType + " is not supported by this method");
            return new h(this, { objectMode: this._outputType !== "nodebuffer" }, s);
          } }, a.exports = g;
        }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(t2, a, c) {
          if (c.base64 = true, c.array = true, c.string = true, c.arraybuffer = typeof ArrayBuffer != "undefined" && typeof Uint8Array != "undefined", c.nodebuffer = typeof Buffer != "undefined", c.uint8array = typeof Uint8Array != "undefined", typeof ArrayBuffer == "undefined") c.blob = false;
          else {
            var r = new ArrayBuffer(0);
            try {
              c.blob = new Blob([r], { type: "application/zip" }).size === 0;
            } catch (l) {
              try {
                var e = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                e.append(r), c.blob = e.getBlob("application/zip").size === 0;
              } catch (i5) {
                c.blob = false;
              }
            }
          }
          try {
            c.nodestream = !!t2("readable-stream").Readable;
          } catch (l) {
            c.nodestream = false;
          }
        }, { "readable-stream": 16 }], 31: [function(t2, a, c) {
          for (var r = t2("./utils"), e = t2("./support"), l = t2("./nodejsUtils"), i5 = t2("./stream/GenericWorker"), o = new Array(256), n = 0; n < 256; n++) o[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;
          o[254] = o[254] = 1;
          function h() {
            i5.call(this, "utf-8 decode"), this.leftOver = null;
          }
          function v() {
            i5.call(this, "utf-8 encode");
          }
          c.utf8encode = function(g) {
            return e.nodebuffer ? l.newBufferFrom(g, "utf-8") : function(s) {
              var d, z, u, f, p, m = s.length, M = 0;
              for (f = 0; f < m; f++) (64512 & (z = s.charCodeAt(f))) == 55296 && f + 1 < m && (64512 & (u = s.charCodeAt(f + 1))) == 56320 && (z = 65536 + (z - 55296 << 10) + (u - 56320), f++), M += z < 128 ? 1 : z < 2048 ? 2 : z < 65536 ? 3 : 4;
              for (d = e.uint8array ? new Uint8Array(M) : new Array(M), f = p = 0; p < M; f++) (64512 & (z = s.charCodeAt(f))) == 55296 && f + 1 < m && (64512 & (u = s.charCodeAt(f + 1))) == 56320 && (z = 65536 + (z - 55296 << 10) + (u - 56320), f++), z < 128 ? d[p++] = z : (z < 2048 ? d[p++] = 192 | z >>> 6 : (z < 65536 ? d[p++] = 224 | z >>> 12 : (d[p++] = 240 | z >>> 18, d[p++] = 128 | z >>> 12 & 63), d[p++] = 128 | z >>> 6 & 63), d[p++] = 128 | 63 & z);
              return d;
            }(g);
          }, c.utf8decode = function(g) {
            return e.nodebuffer ? r.transformTo("nodebuffer", g).toString("utf-8") : function(s) {
              var d, z, u, f, p = s.length, m = new Array(2 * p);
              for (d = z = 0; d < p; ) if ((u = s[d++]) < 128) m[z++] = u;
              else if (4 < (f = o[u])) m[z++] = 65533, d += f - 1;
              else {
                for (u &= f === 2 ? 31 : f === 3 ? 15 : 7; 1 < f && d < p; ) u = u << 6 | 63 & s[d++], f--;
                1 < f ? m[z++] = 65533 : u < 65536 ? m[z++] = u : (u -= 65536, m[z++] = 55296 | u >> 10 & 1023, m[z++] = 56320 | 1023 & u);
              }
              return m.length !== z && (m.subarray ? m = m.subarray(0, z) : m.length = z), r.applyFromCharCode(m);
            }(g = r.transformTo(e.uint8array ? "uint8array" : "array", g));
          }, r.inherits(h, i5), h.prototype.processChunk = function(g) {
            var s = r.transformTo(e.uint8array ? "uint8array" : "array", g.data);
            if (this.leftOver && this.leftOver.length) {
              if (e.uint8array) {
                var d = s;
                (s = new Uint8Array(d.length + this.leftOver.length)).set(this.leftOver, 0), s.set(d, this.leftOver.length);
              } else s = this.leftOver.concat(s);
              this.leftOver = null;
            }
            var z = function(f, p) {
              var m;
              for ((p = p || f.length) > f.length && (p = f.length), m = p - 1; 0 <= m && (192 & f[m]) == 128; ) m--;
              return m < 0 || m === 0 ? p : m + o[f[m]] > p ? m : p;
            }(s), u = s;
            z !== s.length && (e.uint8array ? (u = s.subarray(0, z), this.leftOver = s.subarray(z, s.length)) : (u = s.slice(0, z), this.leftOver = s.slice(z, s.length))), this.push({ data: c.utf8decode(u), meta: g.meta });
          }, h.prototype.flush = function() {
            this.leftOver && this.leftOver.length && (this.push({ data: c.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
          }, c.Utf8DecodeWorker = h, r.inherits(v, i5), v.prototype.processChunk = function(g) {
            this.push({ data: c.utf8encode(g.data), meta: g.meta });
          }, c.Utf8EncodeWorker = v;
        }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(t2, a, c) {
          var r = t2("./support"), e = t2("./base64"), l = t2("./nodejsUtils"), i5 = t2("./external");
          function o(d) {
            return d;
          }
          function n(d, z) {
            for (var u = 0; u < d.length; ++u) z[u] = 255 & d.charCodeAt(u);
            return z;
          }
          t2("setimmediate"), c.newBlob = function(d, z) {
            c.checkSupport("blob");
            try {
              return new Blob([d], { type: z });
            } catch (f) {
              try {
                var u = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                return u.append(d), u.getBlob(z);
              } catch (p) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          var h = { stringifyByChunk: function(d, z, u) {
            var f = [], p = 0, m = d.length;
            if (m <= u) return String.fromCharCode.apply(null, d);
            for (; p < m; ) z === "array" || z === "nodebuffer" ? f.push(String.fromCharCode.apply(null, d.slice(p, Math.min(p + u, m)))) : f.push(String.fromCharCode.apply(null, d.subarray(p, Math.min(p + u, m)))), p += u;
            return f.join("");
          }, stringifyByChar: function(d) {
            for (var z = "", u = 0; u < d.length; u++) z += String.fromCharCode(d[u]);
            return z;
          }, applyCanBeUsed: { uint8array: function() {
            try {
              return r.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;
            } catch (d) {
              return false;
            }
          }(), nodebuffer: function() {
            try {
              return r.nodebuffer && String.fromCharCode.apply(null, l.allocBuffer(1)).length === 1;
            } catch (d) {
              return false;
            }
          }() } };
          function v(d) {
            var z = 65536, u = c.getTypeOf(d), f = true;
            if (u === "uint8array" ? f = h.applyCanBeUsed.uint8array : u === "nodebuffer" && (f = h.applyCanBeUsed.nodebuffer), f) for (; 1 < z; ) try {
              return h.stringifyByChunk(d, u, z);
            } catch (p) {
              z = Math.floor(z / 2);
            }
            return h.stringifyByChar(d);
          }
          function g(d, z) {
            for (var u = 0; u < d.length; u++) z[u] = d[u];
            return z;
          }
          c.applyFromCharCode = v;
          var s = {};
          s.string = { string: o, array: function(d) {
            return n(d, new Array(d.length));
          }, arraybuffer: function(d) {
            return s.string.uint8array(d).buffer;
          }, uint8array: function(d) {
            return n(d, new Uint8Array(d.length));
          }, nodebuffer: function(d) {
            return n(d, l.allocBuffer(d.length));
          } }, s.array = { string: v, array: o, arraybuffer: function(d) {
            return new Uint8Array(d).buffer;
          }, uint8array: function(d) {
            return new Uint8Array(d);
          }, nodebuffer: function(d) {
            return l.newBufferFrom(d);
          } }, s.arraybuffer = { string: function(d) {
            return v(new Uint8Array(d));
          }, array: function(d) {
            return g(new Uint8Array(d), new Array(d.byteLength));
          }, arraybuffer: o, uint8array: function(d) {
            return new Uint8Array(d);
          }, nodebuffer: function(d) {
            return l.newBufferFrom(new Uint8Array(d));
          } }, s.uint8array = { string: v, array: function(d) {
            return g(d, new Array(d.length));
          }, arraybuffer: function(d) {
            return d.buffer;
          }, uint8array: o, nodebuffer: function(d) {
            return l.newBufferFrom(d);
          } }, s.nodebuffer = { string: v, array: function(d) {
            return g(d, new Array(d.length));
          }, arraybuffer: function(d) {
            return s.nodebuffer.uint8array(d).buffer;
          }, uint8array: function(d) {
            return g(d, new Uint8Array(d.length));
          }, nodebuffer: o }, c.transformTo = function(d, z) {
            if (z = z || "", !d) return z;
            c.checkSupport(d);
            var u = c.getTypeOf(z);
            return s[u][d](z);
          }, c.resolve = function(d) {
            for (var z = d.split("/"), u = [], f = 0; f < z.length; f++) {
              var p = z[f];
              p === "." || p === "" && f !== 0 && f !== z.length - 1 || (p === ".." ? u.pop() : u.push(p));
            }
            return u.join("/");
          }, c.getTypeOf = function(d) {
            return typeof d == "string" ? "string" : Object.prototype.toString.call(d) === "[object Array]" ? "array" : r.nodebuffer && l.isBuffer(d) ? "nodebuffer" : r.uint8array && d instanceof Uint8Array ? "uint8array" : r.arraybuffer && d instanceof ArrayBuffer ? "arraybuffer" : void 0;
          }, c.checkSupport = function(d) {
            if (!r[d.toLowerCase()]) throw new Error(d + " is not supported by this platform");
          }, c.MAX_VALUE_16BITS = 65535, c.MAX_VALUE_32BITS = -1, c.pretty = function(d) {
            var z, u, f = "";
            for (u = 0; u < (d || "").length; u++) f += "\\x" + ((z = d.charCodeAt(u)) < 16 ? "0" : "") + z.toString(16).toUpperCase();
            return f;
          }, c.delay = function(d, z, u) {
            setImmediate(function() {
              d.apply(u || null, z || []);
            });
          }, c.inherits = function(d, z) {
            function u() {
            }
            u.prototype = z.prototype, d.prototype = new u();
          }, c.extend = function() {
            var d, z, u = {};
            for (d = 0; d < arguments.length; d++) for (z in arguments[d]) Object.prototype.hasOwnProperty.call(arguments[d], z) && u[z] === void 0 && (u[z] = arguments[d][z]);
            return u;
          }, c.prepareContent = function(d, z, u, f, p) {
            return i5.Promise.resolve(z).then(function(m) {
              return r.blob && (m instanceof Blob || ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(m)) !== -1) && typeof FileReader != "undefined" ? new i5.Promise(function(M, w) {
                var H = new FileReader();
                H.onload = function(y) {
                  M(y.target.result);
                }, H.onerror = function(y) {
                  w(y.target.error);
                }, H.readAsArrayBuffer(m);
              }) : m;
            }).then(function(m) {
              var M = c.getTypeOf(m);
              return M ? (M === "arraybuffer" ? m = c.transformTo("uint8array", m) : M === "string" && (p ? m = e.decode(m) : u && f !== true && (m = function(w) {
                return n(w, r.uint8array ? new Uint8Array(w.length) : new Array(w.length));
              }(m))), m) : i5.Promise.reject(new Error("Can't read the data of '" + d + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
            });
          };
        }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(t2, a, c) {
          var r = t2("./reader/readerFor"), e = t2("./utils"), l = t2("./signature"), i5 = t2("./zipEntry"), o = t2("./support");
          function n(h) {
            this.files = [], this.loadOptions = h;
          }
          n.prototype = { checkSignature: function(h) {
            if (!this.reader.readAndCheckSignature(h)) {
              this.reader.index -= 4;
              var v = this.reader.readString(4);
              throw new Error("Corrupted zip or bug: unexpected signature (" + e.pretty(v) + ", expected " + e.pretty(h) + ")");
            }
          }, isSignature: function(h, v) {
            var g = this.reader.index;
            this.reader.setIndex(h);
            var s = this.reader.readString(4) === v;
            return this.reader.setIndex(g), s;
          }, readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
            var h = this.reader.readData(this.zipCommentLength), v = o.uint8array ? "uint8array" : "array", g = e.transformTo(v, h);
            this.zipComment = this.loadOptions.decodeFileName(g);
          }, readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
            for (var h, v, g, s = this.zip64EndOfCentralSize - 44; 0 < s; ) h = this.reader.readInt(2), v = this.reader.readInt(4), g = this.reader.readData(v), this.zip64ExtensibleData[h] = { id: h, length: v, value: g };
          }, readBlockZip64EndOfCentralLocator: function() {
            if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
          }, readLocalFiles: function() {
            var h, v;
            for (h = 0; h < this.files.length; h++) v = this.files[h], this.reader.setIndex(v.localHeaderOffset), this.checkSignature(l.LOCAL_FILE_HEADER), v.readLocalPart(this.reader), v.handleUTF8(), v.processAttributes();
          }, readCentralDir: function() {
            var h;
            for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(l.CENTRAL_FILE_HEADER); ) (h = new i5({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(h);
            if (this.centralDirRecords !== this.files.length && this.centralDirRecords !== 0 && this.files.length === 0) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
          }, readEndOfCentral: function() {
            var h = this.reader.lastIndexOfSignature(l.CENTRAL_DIRECTORY_END);
            if (h < 0) throw this.isSignature(0, l.LOCAL_FILE_HEADER) ? new Error("Corrupted zip: can't find end of central directory") : new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");
            this.reader.setIndex(h);
            var v = h;
            if (this.checkSignature(l.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === e.MAX_VALUE_16BITS || this.diskWithCentralDirStart === e.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === e.MAX_VALUE_16BITS || this.centralDirRecords === e.MAX_VALUE_16BITS || this.centralDirSize === e.MAX_VALUE_32BITS || this.centralDirOffset === e.MAX_VALUE_32BITS) {
              if (this.zip64 = true, (h = this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
              if (this.reader.setIndex(h), this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, l.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
            }
            var g = this.centralDirOffset + this.centralDirSize;
            this.zip64 && (g += 20, g += 12 + this.zip64EndOfCentralSize);
            var s = v - g;
            if (0 < s) this.isSignature(v, l.CENTRAL_FILE_HEADER) || (this.reader.zero = s);
            else if (s < 0) throw new Error("Corrupted zip: missing " + Math.abs(s) + " bytes.");
          }, prepareReader: function(h) {
            this.reader = r(h);
          }, load: function(h) {
            this.prepareReader(h), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
          } }, a.exports = n;
        }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(t2, a, c) {
          var r = t2("./reader/readerFor"), e = t2("./utils"), l = t2("./compressedObject"), i5 = t2("./crc32"), o = t2("./utf8"), n = t2("./compressions"), h = t2("./support");
          function v(g, s) {
            this.options = g, this.loadOptions = s;
          }
          v.prototype = { isEncrypted: function() {
            return (1 & this.bitFlag) == 1;
          }, useUTF8: function() {
            return (2048 & this.bitFlag) == 2048;
          }, readLocalPart: function(g) {
            var s, d;
            if (g.skip(22), this.fileNameLength = g.readInt(2), d = g.readInt(2), this.fileName = g.readData(this.fileNameLength), g.skip(d), this.compressedSize === -1 || this.uncompressedSize === -1) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
            if ((s = function(z) {
              for (var u in n) if (Object.prototype.hasOwnProperty.call(n, u) && n[u].magic === z) return n[u];
              return null;
            }(this.compressionMethod)) === null) throw new Error("Corrupted zip : compression " + e.pretty(this.compressionMethod) + " unknown (inner file : " + e.transformTo("string", this.fileName) + ")");
            this.decompressed = new l(this.compressedSize, this.uncompressedSize, this.crc32, s, g.readData(this.compressedSize));
          }, readCentralPart: function(g) {
            this.versionMadeBy = g.readInt(2), g.skip(2), this.bitFlag = g.readInt(2), this.compressionMethod = g.readString(2), this.date = g.readDate(), this.crc32 = g.readInt(4), this.compressedSize = g.readInt(4), this.uncompressedSize = g.readInt(4);
            var s = g.readInt(2);
            if (this.extraFieldsLength = g.readInt(2), this.fileCommentLength = g.readInt(2), this.diskNumberStart = g.readInt(2), this.internalFileAttributes = g.readInt(2), this.externalFileAttributes = g.readInt(4), this.localHeaderOffset = g.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
            g.skip(s), this.readExtraFields(g), this.parseZIP64ExtraField(g), this.fileComment = g.readData(this.fileCommentLength);
          }, processAttributes: function() {
            this.unixPermissions = null, this.dosPermissions = null;
            var g = this.versionMadeBy >> 8;
            this.dir = !!(16 & this.externalFileAttributes), g == 0 && (this.dosPermissions = 63 & this.externalFileAttributes), g == 3 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || this.fileNameStr.slice(-1) !== "/" || (this.dir = true);
          }, parseZIP64ExtraField: function() {
            if (this.extraFields[1]) {
              var g = r(this.extraFields[1].value);
              this.uncompressedSize === e.MAX_VALUE_32BITS && (this.uncompressedSize = g.readInt(8)), this.compressedSize === e.MAX_VALUE_32BITS && (this.compressedSize = g.readInt(8)), this.localHeaderOffset === e.MAX_VALUE_32BITS && (this.localHeaderOffset = g.readInt(8)), this.diskNumberStart === e.MAX_VALUE_32BITS && (this.diskNumberStart = g.readInt(4));
            }
          }, readExtraFields: function(g) {
            var s, d, z, u = g.index + this.extraFieldsLength;
            for (this.extraFields || (this.extraFields = {}); g.index + 4 < u; ) s = g.readInt(2), d = g.readInt(2), z = g.readData(d), this.extraFields[s] = { id: s, length: d, value: z };
            g.setIndex(u);
          }, handleUTF8: function() {
            var g = h.uint8array ? "uint8array" : "array";
            if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);
            else {
              var s = this.findExtraFieldUnicodePath();
              if (s !== null) this.fileNameStr = s;
              else {
                var d = e.transformTo(g, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(d);
              }
              var z = this.findExtraFieldUnicodeComment();
              if (z !== null) this.fileCommentStr = z;
              else {
                var u = e.transformTo(g, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(u);
              }
            }
          }, findExtraFieldUnicodePath: function() {
            var g = this.extraFields[28789];
            if (g) {
              var s = r(g.value);
              return s.readInt(1) !== 1 || i5(this.fileName) !== s.readInt(4) ? null : o.utf8decode(s.readData(g.length - 5));
            }
            return null;
          }, findExtraFieldUnicodeComment: function() {
            var g = this.extraFields[25461];
            if (g) {
              var s = r(g.value);
              return s.readInt(1) !== 1 || i5(this.fileComment) !== s.readInt(4) ? null : o.utf8decode(s.readData(g.length - 5));
            }
            return null;
          } }, a.exports = v;
        }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(t2, a, c) {
          function r(s, d, z) {
            this.name = s, this.dir = z.dir, this.date = z.date, this.comment = z.comment, this.unixPermissions = z.unixPermissions, this.dosPermissions = z.dosPermissions, this._data = d, this._dataBinary = z.binary, this.options = { compression: z.compression, compressionOptions: z.compressionOptions };
          }
          var e = t2("./stream/StreamHelper"), l = t2("./stream/DataWorker"), i5 = t2("./utf8"), o = t2("./compressedObject"), n = t2("./stream/GenericWorker");
          r.prototype = { internalStream: function(s) {
            var d = null, z = "string";
            try {
              if (!s) throw new Error("No output type specified.");
              var u = (z = s.toLowerCase()) === "string" || z === "text";
              z !== "binarystring" && z !== "text" || (z = "string"), d = this._decompressWorker();
              var f = !this._dataBinary;
              f && !u && (d = d.pipe(new i5.Utf8EncodeWorker())), !f && u && (d = d.pipe(new i5.Utf8DecodeWorker()));
            } catch (p) {
              (d = new n("error")).error(p);
            }
            return new e(d, z, "");
          }, async: function(s, d) {
            return this.internalStream(s).accumulate(d);
          }, nodeStream: function(s, d) {
            return this.internalStream(s || "nodebuffer").toNodejsStream(d);
          }, _compressWorker: function(s, d) {
            if (this._data instanceof o && this._data.compression.magic === s.magic) return this._data.getCompressedWorker();
            var z = this._decompressWorker();
            return this._dataBinary || (z = z.pipe(new i5.Utf8EncodeWorker())), o.createWorkerFrom(z, s, d);
          }, _decompressWorker: function() {
            return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof n ? this._data : new l(this._data);
          } };
          for (var h = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], v = function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, g = 0; g < h.length; g++) r.prototype[h[g]] = v;
          a.exports = r;
        }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(t2, a, c) {
          (function(r) {
            var e, l, i5 = r.MutationObserver || r.WebKitMutationObserver;
            if (i5) {
              var o = 0, n = new i5(s), h = r.document.createTextNode("");
              n.observe(h, { characterData: true }), e = function() {
                h.data = o = ++o % 2;
              };
            } else if (r.setImmediate || r.MessageChannel === void 0) e = "document" in r && "onreadystatechange" in r.document.createElement("script") ? function() {
              var d = r.document.createElement("script");
              d.onreadystatechange = function() {
                s(), d.onreadystatechange = null, d.parentNode.removeChild(d), d = null;
              }, r.document.documentElement.appendChild(d);
            } : function() {
              setTimeout(s, 0);
            };
            else {
              var v = new r.MessageChannel();
              v.port1.onmessage = s, e = function() {
                v.port2.postMessage(0);
              };
            }
            var g = [];
            function s() {
              var d, z;
              l = true;
              for (var u = g.length; u; ) {
                for (z = g, g = [], d = -1; ++d < u; ) z[d]();
                u = g.length;
              }
              l = false;
            }
            a.exports = function(d) {
              g.push(d) !== 1 || l || e();
            };
          }).call(this, typeof commonjsGlobal != "undefined" ? commonjsGlobal : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
        }, {}], 37: [function(t2, a, c) {
          var r = t2("immediate");
          function e() {
          }
          var l = {}, i5 = ["REJECTED"], o = ["FULFILLED"], n = ["PENDING"];
          function h(u) {
            if (typeof u != "function") throw new TypeError("resolver must be a function");
            this.state = n, this.queue = [], this.outcome = void 0, u !== e && d(this, u);
          }
          function v(u, f, p) {
            this.promise = u, typeof f == "function" && (this.onFulfilled = f, this.callFulfilled = this.otherCallFulfilled), typeof p == "function" && (this.onRejected = p, this.callRejected = this.otherCallRejected);
          }
          function g(u, f, p) {
            r(function() {
              var m;
              try {
                m = f(p);
              } catch (M) {
                return l.reject(u, M);
              }
              m === u ? l.reject(u, new TypeError("Cannot resolve promise with itself")) : l.resolve(u, m);
            });
          }
          function s(u) {
            var f = u && u.then;
            if (u && (typeof u == "object" || typeof u == "function") && typeof f == "function") return function() {
              f.apply(u, arguments);
            };
          }
          function d(u, f) {
            var p = false;
            function m(H) {
              p || (p = true, l.reject(u, H));
            }
            function M(H) {
              p || (p = true, l.resolve(u, H));
            }
            var w = z(function() {
              f(M, m);
            });
            w.status === "error" && m(w.value);
          }
          function z(u, f) {
            var p = {};
            try {
              p.value = u(f), p.status = "success";
            } catch (m) {
              p.status = "error", p.value = m;
            }
            return p;
          }
          (a.exports = h).prototype.finally = function(u) {
            if (typeof u != "function") return this;
            var f = this.constructor;
            return this.then(function(p) {
              return f.resolve(u()).then(function() {
                return p;
              });
            }, function(p) {
              return f.resolve(u()).then(function() {
                throw p;
              });
            });
          }, h.prototype.catch = function(u) {
            return this.then(null, u);
          }, h.prototype.then = function(u, f) {
            if (typeof u != "function" && this.state === o || typeof f != "function" && this.state === i5) return this;
            var p = new this.constructor(e);
            return this.state !== n ? g(p, this.state === o ? u : f, this.outcome) : this.queue.push(new v(p, u, f)), p;
          }, v.prototype.callFulfilled = function(u) {
            l.resolve(this.promise, u);
          }, v.prototype.otherCallFulfilled = function(u) {
            g(this.promise, this.onFulfilled, u);
          }, v.prototype.callRejected = function(u) {
            l.reject(this.promise, u);
          }, v.prototype.otherCallRejected = function(u) {
            g(this.promise, this.onRejected, u);
          }, l.resolve = function(u, f) {
            var p = z(s, f);
            if (p.status === "error") return l.reject(u, p.value);
            var m = p.value;
            if (m) d(u, m);
            else {
              u.state = o, u.outcome = f;
              for (var M = -1, w = u.queue.length; ++M < w; ) u.queue[M].callFulfilled(f);
            }
            return u;
          }, l.reject = function(u, f) {
            u.state = i5, u.outcome = f;
            for (var p = -1, m = u.queue.length; ++p < m; ) u.queue[p].callRejected(f);
            return u;
          }, h.resolve = function(u) {
            return u instanceof this ? u : l.resolve(new this(e), u);
          }, h.reject = function(u) {
            var f = new this(e);
            return l.reject(f, u);
          }, h.all = function(u) {
            var f = this;
            if (Object.prototype.toString.call(u) !== "[object Array]") return this.reject(new TypeError("must be an array"));
            var p = u.length, m = false;
            if (!p) return this.resolve([]);
            for (var M = new Array(p), w = 0, H = -1, y = new this(e); ++H < p; ) k(u[H], H);
            return y;
            function k(F, U) {
              f.resolve(F).then(function(A) {
                M[U] = A, ++w !== p || m || (m = true, l.resolve(y, M));
              }, function(A) {
                m || (m = true, l.reject(y, A));
              });
            }
          }, h.race = function(u) {
            var f = this;
            if (Object.prototype.toString.call(u) !== "[object Array]") return this.reject(new TypeError("must be an array"));
            var p = u.length, m = false;
            if (!p) return this.resolve([]);
            for (var M = -1, w = new this(e); ++M < p; ) H = u[M], f.resolve(H).then(function(y) {
              m || (m = true, l.resolve(w, y));
            }, function(y) {
              m || (m = true, l.reject(w, y));
            });
            var H;
            return w;
          };
        }, { immediate: 36 }], 38: [function(t2, a, c) {
          var r = {};
          (0, t2("./lib/utils/common").assign)(r, t2("./lib/deflate"), t2("./lib/inflate"), t2("./lib/zlib/constants")), a.exports = r;
        }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(t2, a, c) {
          var r = t2("./zlib/deflate"), e = t2("./utils/common"), l = t2("./utils/strings"), i5 = t2("./zlib/messages"), o = t2("./zlib/zstream"), n = Object.prototype.toString, h = 0, v = -1, g = 0, s = 8;
          function d(u) {
            if (!(this instanceof d)) return new d(u);
            this.options = e.assign({ level: v, method: s, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: g, to: "" }, u || {});
            var f = this.options;
            f.raw && 0 < f.windowBits ? f.windowBits = -f.windowBits : f.gzip && 0 < f.windowBits && f.windowBits < 16 && (f.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new o(), this.strm.avail_out = 0;
            var p = r.deflateInit2(this.strm, f.level, f.method, f.windowBits, f.memLevel, f.strategy);
            if (p !== h) throw new Error(i5[p]);
            if (f.header && r.deflateSetHeader(this.strm, f.header), f.dictionary) {
              var m;
              if (m = typeof f.dictionary == "string" ? l.string2buf(f.dictionary) : n.call(f.dictionary) === "[object ArrayBuffer]" ? new Uint8Array(f.dictionary) : f.dictionary, (p = r.deflateSetDictionary(this.strm, m)) !== h) throw new Error(i5[p]);
              this._dict_set = true;
            }
          }
          function z(u, f) {
            var p = new d(f);
            if (p.push(u, true), p.err) throw p.msg || i5[p.err];
            return p.result;
          }
          d.prototype.push = function(u, f) {
            var p, m, M = this.strm, w = this.options.chunkSize;
            if (this.ended) return false;
            m = f === ~~f ? f : f === true ? 4 : 0, typeof u == "string" ? M.input = l.string2buf(u) : n.call(u) === "[object ArrayBuffer]" ? M.input = new Uint8Array(u) : M.input = u, M.next_in = 0, M.avail_in = M.input.length;
            do {
              if (M.avail_out === 0 && (M.output = new e.Buf8(w), M.next_out = 0, M.avail_out = w), (p = r.deflate(M, m)) !== 1 && p !== h) return this.onEnd(p), !(this.ended = true);
              M.avail_out !== 0 && (M.avail_in !== 0 || m !== 4 && m !== 2) || (this.options.to === "string" ? this.onData(l.buf2binstring(e.shrinkBuf(M.output, M.next_out))) : this.onData(e.shrinkBuf(M.output, M.next_out)));
            } while ((0 < M.avail_in || M.avail_out === 0) && p !== 1);
            return m === 4 ? (p = r.deflateEnd(this.strm), this.onEnd(p), this.ended = true, p === h) : m !== 2 || (this.onEnd(h), !(M.avail_out = 0));
          }, d.prototype.onData = function(u) {
            this.chunks.push(u);
          }, d.prototype.onEnd = function(u) {
            u === h && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = e.flattenChunks(this.chunks)), this.chunks = [], this.err = u, this.msg = this.strm.msg;
          }, c.Deflate = d, c.deflate = z, c.deflateRaw = function(u, f) {
            return (f = f || {}).raw = true, z(u, f);
          }, c.gzip = function(u, f) {
            return (f = f || {}).gzip = true, z(u, f);
          };
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(t2, a, c) {
          var r = t2("./zlib/inflate"), e = t2("./utils/common"), l = t2("./utils/strings"), i5 = t2("./zlib/constants"), o = t2("./zlib/messages"), n = t2("./zlib/zstream"), h = t2("./zlib/gzheader"), v = Object.prototype.toString;
          function g(d) {
            if (!(this instanceof g)) return new g(d);
            this.options = e.assign({ chunkSize: 16384, windowBits: 0, to: "" }, d || {});
            var z = this.options;
            z.raw && 0 <= z.windowBits && z.windowBits < 16 && (z.windowBits = -z.windowBits, z.windowBits === 0 && (z.windowBits = -15)), !(0 <= z.windowBits && z.windowBits < 16) || d && d.windowBits || (z.windowBits += 32), 15 < z.windowBits && z.windowBits < 48 && !(15 & z.windowBits) && (z.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new n(), this.strm.avail_out = 0;
            var u = r.inflateInit2(this.strm, z.windowBits);
            if (u !== i5.Z_OK) throw new Error(o[u]);
            this.header = new h(), r.inflateGetHeader(this.strm, this.header);
          }
          function s(d, z) {
            var u = new g(z);
            if (u.push(d, true), u.err) throw u.msg || o[u.err];
            return u.result;
          }
          g.prototype.push = function(d, z) {
            var u, f, p, m, M, w, H = this.strm, y = this.options.chunkSize, k = this.options.dictionary, F = false;
            if (this.ended) return false;
            f = z === ~~z ? z : z === true ? i5.Z_FINISH : i5.Z_NO_FLUSH, typeof d == "string" ? H.input = l.binstring2buf(d) : v.call(d) === "[object ArrayBuffer]" ? H.input = new Uint8Array(d) : H.input = d, H.next_in = 0, H.avail_in = H.input.length;
            do {
              if (H.avail_out === 0 && (H.output = new e.Buf8(y), H.next_out = 0, H.avail_out = y), (u = r.inflate(H, i5.Z_NO_FLUSH)) === i5.Z_NEED_DICT && k && (w = typeof k == "string" ? l.string2buf(k) : v.call(k) === "[object ArrayBuffer]" ? new Uint8Array(k) : k, u = r.inflateSetDictionary(this.strm, w)), u === i5.Z_BUF_ERROR && F === true && (u = i5.Z_OK, F = false), u !== i5.Z_STREAM_END && u !== i5.Z_OK) return this.onEnd(u), !(this.ended = true);
              H.next_out && (H.avail_out !== 0 && u !== i5.Z_STREAM_END && (H.avail_in !== 0 || f !== i5.Z_FINISH && f !== i5.Z_SYNC_FLUSH) || (this.options.to === "string" ? (p = l.utf8border(H.output, H.next_out), m = H.next_out - p, M = l.buf2string(H.output, p), H.next_out = m, H.avail_out = y - m, m && e.arraySet(H.output, H.output, p, m, 0), this.onData(M)) : this.onData(e.shrinkBuf(H.output, H.next_out)))), H.avail_in === 0 && H.avail_out === 0 && (F = true);
            } while ((0 < H.avail_in || H.avail_out === 0) && u !== i5.Z_STREAM_END);
            return u === i5.Z_STREAM_END && (f = i5.Z_FINISH), f === i5.Z_FINISH ? (u = r.inflateEnd(this.strm), this.onEnd(u), this.ended = true, u === i5.Z_OK) : f !== i5.Z_SYNC_FLUSH || (this.onEnd(i5.Z_OK), !(H.avail_out = 0));
          }, g.prototype.onData = function(d) {
            this.chunks.push(d);
          }, g.prototype.onEnd = function(d) {
            d === i5.Z_OK && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = e.flattenChunks(this.chunks)), this.chunks = [], this.err = d, this.msg = this.strm.msg;
          }, c.Inflate = g, c.inflate = s, c.inflateRaw = function(d, z) {
            return (z = z || {}).raw = true, s(d, z);
          }, c.ungzip = s;
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(t2, a, c) {
          var r = typeof Uint8Array != "undefined" && typeof Uint16Array != "undefined" && typeof Int32Array != "undefined";
          c.assign = function(i5) {
            for (var o = Array.prototype.slice.call(arguments, 1); o.length; ) {
              var n = o.shift();
              if (n) {
                if (typeof n != "object") throw new TypeError(n + "must be non-object");
                for (var h in n) n.hasOwnProperty(h) && (i5[h] = n[h]);
              }
            }
            return i5;
          }, c.shrinkBuf = function(i5, o) {
            return i5.length === o ? i5 : i5.subarray ? i5.subarray(0, o) : (i5.length = o, i5);
          };
          var e = { arraySet: function(i5, o, n, h, v) {
            if (o.subarray && i5.subarray) i5.set(o.subarray(n, n + h), v);
            else for (var g = 0; g < h; g++) i5[v + g] = o[n + g];
          }, flattenChunks: function(i5) {
            var o, n, h, v, g, s;
            for (o = h = 0, n = i5.length; o < n; o++) h += i5[o].length;
            for (s = new Uint8Array(h), o = v = 0, n = i5.length; o < n; o++) g = i5[o], s.set(g, v), v += g.length;
            return s;
          } }, l = { arraySet: function(i5, o, n, h, v) {
            for (var g = 0; g < h; g++) i5[v + g] = o[n + g];
          }, flattenChunks: function(i5) {
            return [].concat.apply([], i5);
          } };
          c.setTyped = function(i5) {
            i5 ? (c.Buf8 = Uint8Array, c.Buf16 = Uint16Array, c.Buf32 = Int32Array, c.assign(c, e)) : (c.Buf8 = Array, c.Buf16 = Array, c.Buf32 = Array, c.assign(c, l));
          }, c.setTyped(r);
        }, {}], 42: [function(t2, a, c) {
          var r = t2("./common"), e = true, l = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (h) {
            e = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (h) {
            l = false;
          }
          for (var i5 = new r.Buf8(256), o = 0; o < 256; o++) i5[o] = 252 <= o ? 6 : 248 <= o ? 5 : 240 <= o ? 4 : 224 <= o ? 3 : 192 <= o ? 2 : 1;
          function n(h, v) {
            if (v < 65537 && (h.subarray && l || !h.subarray && e)) return String.fromCharCode.apply(null, r.shrinkBuf(h, v));
            for (var g = "", s = 0; s < v; s++) g += String.fromCharCode(h[s]);
            return g;
          }
          i5[254] = i5[254] = 1, c.string2buf = function(h) {
            var v, g, s, d, z, u = h.length, f = 0;
            for (d = 0; d < u; d++) (64512 & (g = h.charCodeAt(d))) == 55296 && d + 1 < u && (64512 & (s = h.charCodeAt(d + 1))) == 56320 && (g = 65536 + (g - 55296 << 10) + (s - 56320), d++), f += g < 128 ? 1 : g < 2048 ? 2 : g < 65536 ? 3 : 4;
            for (v = new r.Buf8(f), d = z = 0; z < f; d++) (64512 & (g = h.charCodeAt(d))) == 55296 && d + 1 < u && (64512 & (s = h.charCodeAt(d + 1))) == 56320 && (g = 65536 + (g - 55296 << 10) + (s - 56320), d++), g < 128 ? v[z++] = g : (g < 2048 ? v[z++] = 192 | g >>> 6 : (g < 65536 ? v[z++] = 224 | g >>> 12 : (v[z++] = 240 | g >>> 18, v[z++] = 128 | g >>> 12 & 63), v[z++] = 128 | g >>> 6 & 63), v[z++] = 128 | 63 & g);
            return v;
          }, c.buf2binstring = function(h) {
            return n(h, h.length);
          }, c.binstring2buf = function(h) {
            for (var v = new r.Buf8(h.length), g = 0, s = v.length; g < s; g++) v[g] = h.charCodeAt(g);
            return v;
          }, c.buf2string = function(h, v) {
            var g, s, d, z, u = v || h.length, f = new Array(2 * u);
            for (g = s = 0; g < u; ) if ((d = h[g++]) < 128) f[s++] = d;
            else if (4 < (z = i5[d])) f[s++] = 65533, g += z - 1;
            else {
              for (d &= z === 2 ? 31 : z === 3 ? 15 : 7; 1 < z && g < u; ) d = d << 6 | 63 & h[g++], z--;
              1 < z ? f[s++] = 65533 : d < 65536 ? f[s++] = d : (d -= 65536, f[s++] = 55296 | d >> 10 & 1023, f[s++] = 56320 | 1023 & d);
            }
            return n(f, s);
          }, c.utf8border = function(h, v) {
            var g;
            for ((v = v || h.length) > h.length && (v = h.length), g = v - 1; 0 <= g && (192 & h[g]) == 128; ) g--;
            return g < 0 || g === 0 ? v : g + i5[h[g]] > v ? g : v;
          };
        }, { "./common": 41 }], 43: [function(t2, a, c) {
          a.exports = function(r, e, l, i5) {
            for (var o = 65535 & r | 0, n = r >>> 16 & 65535 | 0, h = 0; l !== 0; ) {
              for (l -= h = 2e3 < l ? 2e3 : l; n = n + (o = o + e[i5++] | 0) | 0, --h; ) ;
              o %= 65521, n %= 65521;
            }
            return o | n << 16 | 0;
          };
        }, {}], 44: [function(t2, a, c) {
          a.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
        }, {}], 45: [function(t2, a, c) {
          var r = function() {
            for (var e, l = [], i5 = 0; i5 < 256; i5++) {
              e = i5;
              for (var o = 0; o < 8; o++) e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
              l[i5] = e;
            }
            return l;
          }();
          a.exports = function(e, l, i5, o) {
            var n = r, h = o + i5;
            e ^= -1;
            for (var v = o; v < h; v++) e = e >>> 8 ^ n[255 & (e ^ l[v])];
            return -1 ^ e;
          };
        }, {}], 46: [function(t2, a, c) {
          var r, e = t2("../utils/common"), l = t2("./trees"), i5 = t2("./adler32"), o = t2("./crc32"), n = t2("./messages"), h = 0, v = 4, g = 0, s = -2, d = -1, z = 4, u = 2, f = 8, p = 9, m = 286, M = 30, w = 19, H = 2 * m + 1, y = 15, k = 3, F = 258, U = F + k + 1, A = 42, P = 113, C = 1, E = 2, a1 = 3, j = 4;
          function K(L, Y) {
            return L.msg = n[Y], Y;
          }
          function Z(L) {
            return (L << 1) - (4 < L ? 9 : 0);
          }
          function J(L) {
            for (var Y = L.length; 0 <= --Y; ) L[Y] = 0;
          }
          function W(L) {
            var Y = L.state, Q = Y.pending;
            Q > L.avail_out && (Q = L.avail_out), Q !== 0 && (e.arraySet(L.output, Y.pending_buf, Y.pending_out, Q, L.next_out), L.next_out += Q, Y.pending_out += Q, L.total_out += Q, L.avail_out -= Q, Y.pending -= Q, Y.pending === 0 && (Y.pending_out = 0));
          }
          function _(L, Y) {
            l._tr_flush_block(L, 0 <= L.block_start ? L.block_start : -1, L.strstart - L.block_start, Y), L.block_start = L.strstart, W(L.strm);
          }
          function g1(L, Y) {
            L.pending_buf[L.pending++] = Y;
          }
          function X(L, Y) {
            L.pending_buf[L.pending++] = Y >>> 8 & 255, L.pending_buf[L.pending++] = 255 & Y;
          }
          function $(L, Y) {
            var Q, b, R = L.max_chain_length, O = L.strstart, t1 = L.prev_length, r1 = L.nice_match, q = L.strstart > L.w_size - U ? L.strstart - (L.w_size - U) : 0, h1 = L.window, d1 = L.w_mask, l1 = L.prev, e1 = L.strstart + F, w1 = h1[O + t1 - 1], R1 = h1[O + t1];
            L.prev_length >= L.good_match && (R >>= 2), r1 > L.lookahead && (r1 = L.lookahead);
            do
              if (h1[(Q = Y) + t1] === R1 && h1[Q + t1 - 1] === w1 && h1[Q] === h1[O] && h1[++Q] === h1[O + 1]) {
                O += 2, Q++;
                do
                  ;
                while (h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && h1[++O] === h1[++Q] && O < e1);
                if (b = F - (e1 - O), O = e1 - F, t1 < b) {
                  if (L.match_start = Y, r1 <= (t1 = b)) break;
                  w1 = h1[O + t1 - 1], R1 = h1[O + t1];
                }
              }
            while ((Y = l1[Y & d1]) > q && --R != 0);
            return t1 <= L.lookahead ? t1 : L.lookahead;
          }
          function o1(L) {
            var Y, Q, b, R, O, t1, r1, q, h1, d1, l1 = L.w_size;
            do {
              if (R = L.window_size - L.lookahead - L.strstart, L.strstart >= l1 + (l1 - U)) {
                for (e.arraySet(L.window, L.window, l1, l1, 0), L.match_start -= l1, L.strstart -= l1, L.block_start -= l1, Y = Q = L.hash_size; b = L.head[--Y], L.head[Y] = l1 <= b ? b - l1 : 0, --Q; ) ;
                for (Y = Q = l1; b = L.prev[--Y], L.prev[Y] = l1 <= b ? b - l1 : 0, --Q; ) ;
                R += l1;
              }
              if (L.strm.avail_in === 0) break;
              if (t1 = L.strm, r1 = L.window, q = L.strstart + L.lookahead, h1 = R, d1 = void 0, d1 = t1.avail_in, h1 < d1 && (d1 = h1), Q = d1 === 0 ? 0 : (t1.avail_in -= d1, e.arraySet(r1, t1.input, t1.next_in, d1, q), t1.state.wrap === 1 ? t1.adler = i5(t1.adler, r1, d1, q) : t1.state.wrap === 2 && (t1.adler = o(t1.adler, r1, d1, q)), t1.next_in += d1, t1.total_in += d1, d1), L.lookahead += Q, L.lookahead + L.insert >= k) for (O = L.strstart - L.insert, L.ins_h = L.window[O], L.ins_h = (L.ins_h << L.hash_shift ^ L.window[O + 1]) & L.hash_mask; L.insert && (L.ins_h = (L.ins_h << L.hash_shift ^ L.window[O + k - 1]) & L.hash_mask, L.prev[O & L.w_mask] = L.head[L.ins_h], L.head[L.ins_h] = O, O++, L.insert--, !(L.lookahead + L.insert < k)); ) ;
            } while (L.lookahead < U && L.strm.avail_in !== 0);
          }
          function u1(L, Y) {
            for (var Q, b; ; ) {
              if (L.lookahead < U) {
                if (o1(L), L.lookahead < U && Y === h) return C;
                if (L.lookahead === 0) break;
              }
              if (Q = 0, L.lookahead >= k && (L.ins_h = (L.ins_h << L.hash_shift ^ L.window[L.strstart + k - 1]) & L.hash_mask, Q = L.prev[L.strstart & L.w_mask] = L.head[L.ins_h], L.head[L.ins_h] = L.strstart), Q !== 0 && L.strstart - Q <= L.w_size - U && (L.match_length = $(L, Q)), L.match_length >= k) if (b = l._tr_tally(L, L.strstart - L.match_start, L.match_length - k), L.lookahead -= L.match_length, L.match_length <= L.max_lazy_match && L.lookahead >= k) {
                for (L.match_length--; L.strstart++, L.ins_h = (L.ins_h << L.hash_shift ^ L.window[L.strstart + k - 1]) & L.hash_mask, Q = L.prev[L.strstart & L.w_mask] = L.head[L.ins_h], L.head[L.ins_h] = L.strstart, --L.match_length != 0; ) ;
                L.strstart++;
              } else L.strstart += L.match_length, L.match_length = 0, L.ins_h = L.window[L.strstart], L.ins_h = (L.ins_h << L.hash_shift ^ L.window[L.strstart + 1]) & L.hash_mask;
              else b = l._tr_tally(L, 0, L.window[L.strstart]), L.lookahead--, L.strstart++;
              if (b && (_(L, false), L.strm.avail_out === 0)) return C;
            }
            return L.insert = L.strstart < k - 1 ? L.strstart : k - 1, Y === v ? (_(L, true), L.strm.avail_out === 0 ? a1 : j) : L.last_lit && (_(L, false), L.strm.avail_out === 0) ? C : E;
          }
          function N(L, Y) {
            for (var Q, b, R; ; ) {
              if (L.lookahead < U) {
                if (o1(L), L.lookahead < U && Y === h) return C;
                if (L.lookahead === 0) break;
              }
              if (Q = 0, L.lookahead >= k && (L.ins_h = (L.ins_h << L.hash_shift ^ L.window[L.strstart + k - 1]) & L.hash_mask, Q = L.prev[L.strstart & L.w_mask] = L.head[L.ins_h], L.head[L.ins_h] = L.strstart), L.prev_length = L.match_length, L.prev_match = L.match_start, L.match_length = k - 1, Q !== 0 && L.prev_length < L.max_lazy_match && L.strstart - Q <= L.w_size - U && (L.match_length = $(L, Q), L.match_length <= 5 && (L.strategy === 1 || L.match_length === k && 4096 < L.strstart - L.match_start) && (L.match_length = k - 1)), L.prev_length >= k && L.match_length <= L.prev_length) {
                for (R = L.strstart + L.lookahead - k, b = l._tr_tally(L, L.strstart - 1 - L.prev_match, L.prev_length - k), L.lookahead -= L.prev_length - 1, L.prev_length -= 2; ++L.strstart <= R && (L.ins_h = (L.ins_h << L.hash_shift ^ L.window[L.strstart + k - 1]) & L.hash_mask, Q = L.prev[L.strstart & L.w_mask] = L.head[L.ins_h], L.head[L.ins_h] = L.strstart), --L.prev_length != 0; ) ;
                if (L.match_available = 0, L.match_length = k - 1, L.strstart++, b && (_(L, false), L.strm.avail_out === 0)) return C;
              } else if (L.match_available) {
                if ((b = l._tr_tally(L, 0, L.window[L.strstart - 1])) && _(L, false), L.strstart++, L.lookahead--, L.strm.avail_out === 0) return C;
              } else L.match_available = 1, L.strstart++, L.lookahead--;
            }
            return L.match_available && (b = l._tr_tally(L, 0, L.window[L.strstart - 1]), L.match_available = 0), L.insert = L.strstart < k - 1 ? L.strstart : k - 1, Y === v ? (_(L, true), L.strm.avail_out === 0 ? a1 : j) : L.last_lit && (_(L, false), L.strm.avail_out === 0) ? C : E;
          }
          function x1(L, Y, Q, b, R) {
            this.good_length = L, this.max_lazy = Y, this.nice_length = Q, this.max_chain = b, this.func = R;
          }
          function i1() {
            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = f, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new e.Buf16(2 * H), this.dyn_dtree = new e.Buf16(2 * (2 * M + 1)), this.bl_tree = new e.Buf16(2 * (2 * w + 1)), J(this.dyn_ltree), J(this.dyn_dtree), J(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new e.Buf16(y + 1), this.heap = new e.Buf16(2 * m + 1), J(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new e.Buf16(2 * m + 1), J(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
          }
          function B1(L) {
            var Y;
            return L && L.state ? (L.total_in = L.total_out = 0, L.data_type = u, (Y = L.state).pending = 0, Y.pending_out = 0, Y.wrap < 0 && (Y.wrap = -Y.wrap), Y.status = Y.wrap ? A : P, L.adler = Y.wrap === 2 ? 0 : 1, Y.last_flush = h, l._tr_init(Y), g) : K(L, s);
          }
          function k1(L) {
            var Y = B1(L);
            return Y === g && function(Q) {
              Q.window_size = 2 * Q.w_size, J(Q.head), Q.max_lazy_match = r[Q.level].max_lazy, Q.good_match = r[Q.level].good_length, Q.nice_match = r[Q.level].nice_length, Q.max_chain_length = r[Q.level].max_chain, Q.strstart = 0, Q.block_start = 0, Q.lookahead = 0, Q.insert = 0, Q.match_length = Q.prev_length = k - 1, Q.match_available = 0, Q.ins_h = 0;
            }(L.state), Y;
          }
          function A1(L, Y, Q, b, R, O) {
            if (!L) return s;
            var t1 = 1;
            if (Y === d && (Y = 6), b < 0 ? (t1 = 0, b = -b) : 15 < b && (t1 = 2, b -= 16), R < 1 || p < R || Q !== f || b < 8 || 15 < b || Y < 0 || 9 < Y || O < 0 || z < O) return K(L, s);
            b === 8 && (b = 9);
            var r1 = new i1();
            return (L.state = r1).strm = L, r1.wrap = t1, r1.gzhead = null, r1.w_bits = b, r1.w_size = 1 << r1.w_bits, r1.w_mask = r1.w_size - 1, r1.hash_bits = R + 7, r1.hash_size = 1 << r1.hash_bits, r1.hash_mask = r1.hash_size - 1, r1.hash_shift = ~~((r1.hash_bits + k - 1) / k), r1.window = new e.Buf8(2 * r1.w_size), r1.head = new e.Buf16(r1.hash_size), r1.prev = new e.Buf16(r1.w_size), r1.lit_bufsize = 1 << R + 6, r1.pending_buf_size = 4 * r1.lit_bufsize, r1.pending_buf = new e.Buf8(r1.pending_buf_size), r1.d_buf = 1 * r1.lit_bufsize, r1.l_buf = 3 * r1.lit_bufsize, r1.level = Y, r1.strategy = O, r1.method = Q, k1(L);
          }
          r = [new x1(0, 0, 0, 0, function(L, Y) {
            var Q = 65535;
            for (Q > L.pending_buf_size - 5 && (Q = L.pending_buf_size - 5); ; ) {
              if (L.lookahead <= 1) {
                if (o1(L), L.lookahead === 0 && Y === h) return C;
                if (L.lookahead === 0) break;
              }
              L.strstart += L.lookahead, L.lookahead = 0;
              var b = L.block_start + Q;
              if ((L.strstart === 0 || L.strstart >= b) && (L.lookahead = L.strstart - b, L.strstart = b, _(L, false), L.strm.avail_out === 0) || L.strstart - L.block_start >= L.w_size - U && (_(L, false), L.strm.avail_out === 0)) return C;
            }
            return L.insert = 0, Y === v ? (_(L, true), L.strm.avail_out === 0 ? a1 : j) : (L.strstart > L.block_start && (_(L, false), L.strm.avail_out), C);
          }), new x1(4, 4, 8, 4, u1), new x1(4, 5, 16, 8, u1), new x1(4, 6, 32, 32, u1), new x1(4, 4, 16, 16, N), new x1(8, 16, 32, 32, N), new x1(8, 16, 128, 128, N), new x1(8, 32, 128, 256, N), new x1(32, 128, 258, 1024, N), new x1(32, 258, 258, 4096, N)], c.deflateInit = function(L, Y) {
            return A1(L, Y, f, 15, 8, 0);
          }, c.deflateInit2 = A1, c.deflateReset = k1, c.deflateResetKeep = B1, c.deflateSetHeader = function(L, Y) {
            return L && L.state ? L.state.wrap !== 2 ? s : (L.state.gzhead = Y, g) : s;
          }, c.deflate = function(L, Y) {
            var Q, b, R, O;
            if (!L || !L.state || 5 < Y || Y < 0) return L ? K(L, s) : s;
            if (b = L.state, !L.output || !L.input && L.avail_in !== 0 || b.status === 666 && Y !== v) return K(L, L.avail_out === 0 ? -5 : s);
            if (b.strm = L, Q = b.last_flush, b.last_flush = Y, b.status === A) if (b.wrap === 2) L.adler = 0, g1(b, 31), g1(b, 139), g1(b, 8), b.gzhead ? (g1(b, (b.gzhead.text ? 1 : 0) + (b.gzhead.hcrc ? 2 : 0) + (b.gzhead.extra ? 4 : 0) + (b.gzhead.name ? 8 : 0) + (b.gzhead.comment ? 16 : 0)), g1(b, 255 & b.gzhead.time), g1(b, b.gzhead.time >> 8 & 255), g1(b, b.gzhead.time >> 16 & 255), g1(b, b.gzhead.time >> 24 & 255), g1(b, b.level === 9 ? 2 : 2 <= b.strategy || b.level < 2 ? 4 : 0), g1(b, 255 & b.gzhead.os), b.gzhead.extra && b.gzhead.extra.length && (g1(b, 255 & b.gzhead.extra.length), g1(b, b.gzhead.extra.length >> 8 & 255)), b.gzhead.hcrc && (L.adler = o(L.adler, b.pending_buf, b.pending, 0)), b.gzindex = 0, b.status = 69) : (g1(b, 0), g1(b, 0), g1(b, 0), g1(b, 0), g1(b, 0), g1(b, b.level === 9 ? 2 : 2 <= b.strategy || b.level < 2 ? 4 : 0), g1(b, 3), b.status = P);
            else {
              var t1 = f + (b.w_bits - 8 << 4) << 8;
              t1 |= (2 <= b.strategy || b.level < 2 ? 0 : b.level < 6 ? 1 : b.level === 6 ? 2 : 3) << 6, b.strstart !== 0 && (t1 |= 32), t1 += 31 - t1 % 31, b.status = P, X(b, t1), b.strstart !== 0 && (X(b, L.adler >>> 16), X(b, 65535 & L.adler)), L.adler = 1;
            }
            if (b.status === 69) if (b.gzhead.extra) {
              for (R = b.pending; b.gzindex < (65535 & b.gzhead.extra.length) && (b.pending !== b.pending_buf_size || (b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), W(L), R = b.pending, b.pending !== b.pending_buf_size)); ) g1(b, 255 & b.gzhead.extra[b.gzindex]), b.gzindex++;
              b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), b.gzindex === b.gzhead.extra.length && (b.gzindex = 0, b.status = 73);
            } else b.status = 73;
            if (b.status === 73) if (b.gzhead.name) {
              R = b.pending;
              do {
                if (b.pending === b.pending_buf_size && (b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), W(L), R = b.pending, b.pending === b.pending_buf_size)) {
                  O = 1;
                  break;
                }
                O = b.gzindex < b.gzhead.name.length ? 255 & b.gzhead.name.charCodeAt(b.gzindex++) : 0, g1(b, O);
              } while (O !== 0);
              b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), O === 0 && (b.gzindex = 0, b.status = 91);
            } else b.status = 91;
            if (b.status === 91) if (b.gzhead.comment) {
              R = b.pending;
              do {
                if (b.pending === b.pending_buf_size && (b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), W(L), R = b.pending, b.pending === b.pending_buf_size)) {
                  O = 1;
                  break;
                }
                O = b.gzindex < b.gzhead.comment.length ? 255 & b.gzhead.comment.charCodeAt(b.gzindex++) : 0, g1(b, O);
              } while (O !== 0);
              b.gzhead.hcrc && b.pending > R && (L.adler = o(L.adler, b.pending_buf, b.pending - R, R)), O === 0 && (b.status = 103);
            } else b.status = 103;
            if (b.status === 103 && (b.gzhead.hcrc ? (b.pending + 2 > b.pending_buf_size && W(L), b.pending + 2 <= b.pending_buf_size && (g1(b, 255 & L.adler), g1(b, L.adler >> 8 & 255), L.adler = 0, b.status = P)) : b.status = P), b.pending !== 0) {
              if (W(L), L.avail_out === 0) return b.last_flush = -1, g;
            } else if (L.avail_in === 0 && Z(Y) <= Z(Q) && Y !== v) return K(L, -5);
            if (b.status === 666 && L.avail_in !== 0) return K(L, -5);
            if (L.avail_in !== 0 || b.lookahead !== 0 || Y !== h && b.status !== 666) {
              var r1 = b.strategy === 2 ? function(q, h1) {
                for (var d1; ; ) {
                  if (q.lookahead === 0 && (o1(q), q.lookahead === 0)) {
                    if (h1 === h) return C;
                    break;
                  }
                  if (q.match_length = 0, d1 = l._tr_tally(q, 0, q.window[q.strstart]), q.lookahead--, q.strstart++, d1 && (_(q, false), q.strm.avail_out === 0)) return C;
                }
                return q.insert = 0, h1 === v ? (_(q, true), q.strm.avail_out === 0 ? a1 : j) : q.last_lit && (_(q, false), q.strm.avail_out === 0) ? C : E;
              }(b, Y) : b.strategy === 3 ? function(q, h1) {
                for (var d1, l1, e1, w1, R1 = q.window; ; ) {
                  if (q.lookahead <= F) {
                    if (o1(q), q.lookahead <= F && h1 === h) return C;
                    if (q.lookahead === 0) break;
                  }
                  if (q.match_length = 0, q.lookahead >= k && 0 < q.strstart && (l1 = R1[e1 = q.strstart - 1]) === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1]) {
                    w1 = q.strstart + F;
                    do
                      ;
                    while (l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && l1 === R1[++e1] && e1 < w1);
                    q.match_length = F - (w1 - e1), q.match_length > q.lookahead && (q.match_length = q.lookahead);
                  }
                  if (q.match_length >= k ? (d1 = l._tr_tally(q, 1, q.match_length - k), q.lookahead -= q.match_length, q.strstart += q.match_length, q.match_length = 0) : (d1 = l._tr_tally(q, 0, q.window[q.strstart]), q.lookahead--, q.strstart++), d1 && (_(q, false), q.strm.avail_out === 0)) return C;
                }
                return q.insert = 0, h1 === v ? (_(q, true), q.strm.avail_out === 0 ? a1 : j) : q.last_lit && (_(q, false), q.strm.avail_out === 0) ? C : E;
              }(b, Y) : r[b.level].func(b, Y);
              if (r1 !== a1 && r1 !== j || (b.status = 666), r1 === C || r1 === a1) return L.avail_out === 0 && (b.last_flush = -1), g;
              if (r1 === E && (Y === 1 ? l._tr_align(b) : Y !== 5 && (l._tr_stored_block(b, 0, 0, false), Y === 3 && (J(b.head), b.lookahead === 0 && (b.strstart = 0, b.block_start = 0, b.insert = 0))), W(L), L.avail_out === 0)) return b.last_flush = -1, g;
            }
            return Y !== v ? g : b.wrap <= 0 ? 1 : (b.wrap === 2 ? (g1(b, 255 & L.adler), g1(b, L.adler >> 8 & 255), g1(b, L.adler >> 16 & 255), g1(b, L.adler >> 24 & 255), g1(b, 255 & L.total_in), g1(b, L.total_in >> 8 & 255), g1(b, L.total_in >> 16 & 255), g1(b, L.total_in >> 24 & 255)) : (X(b, L.adler >>> 16), X(b, 65535 & L.adler)), W(L), 0 < b.wrap && (b.wrap = -b.wrap), b.pending !== 0 ? g : 1);
          }, c.deflateEnd = function(L) {
            var Y;
            return L && L.state ? (Y = L.state.status) !== A && Y !== 69 && Y !== 73 && Y !== 91 && Y !== 103 && Y !== P && Y !== 666 ? K(L, s) : (L.state = null, Y === P ? K(L, -3) : g) : s;
          }, c.deflateSetDictionary = function(L, Y) {
            var Q, b, R, O, t1, r1, q, h1, d1 = Y.length;
            if (!L || !L.state || (O = (Q = L.state).wrap) === 2 || O === 1 && Q.status !== A || Q.lookahead) return s;
            for (O === 1 && (L.adler = i5(L.adler, Y, d1, 0)), Q.wrap = 0, d1 >= Q.w_size && (O === 0 && (J(Q.head), Q.strstart = 0, Q.block_start = 0, Q.insert = 0), h1 = new e.Buf8(Q.w_size), e.arraySet(h1, Y, d1 - Q.w_size, Q.w_size, 0), Y = h1, d1 = Q.w_size), t1 = L.avail_in, r1 = L.next_in, q = L.input, L.avail_in = d1, L.next_in = 0, L.input = Y, o1(Q); Q.lookahead >= k; ) {
              for (b = Q.strstart, R = Q.lookahead - (k - 1); Q.ins_h = (Q.ins_h << Q.hash_shift ^ Q.window[b + k - 1]) & Q.hash_mask, Q.prev[b & Q.w_mask] = Q.head[Q.ins_h], Q.head[Q.ins_h] = b, b++, --R; ) ;
              Q.strstart = b, Q.lookahead = k - 1, o1(Q);
            }
            return Q.strstart += Q.lookahead, Q.block_start = Q.strstart, Q.insert = Q.lookahead, Q.lookahead = 0, Q.match_length = Q.prev_length = k - 1, Q.match_available = 0, L.next_in = r1, L.input = q, L.avail_in = t1, Q.wrap = O, g;
          }, c.deflateInfo = "pako deflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(t2, a, c) {
          a.exports = function() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
          };
        }, {}], 48: [function(t2, a, c) {
          a.exports = function(r, e) {
            var l, i5, o, n, h, v, g, s, d, z, u, f, p, m, M, w, H, y, k, F, U, A, P, C, E;
            l = r.state, i5 = r.next_in, C = r.input, o = i5 + (r.avail_in - 5), n = r.next_out, E = r.output, h = n - (e - r.avail_out), v = n + (r.avail_out - 257), g = l.dmax, s = l.wsize, d = l.whave, z = l.wnext, u = l.window, f = l.hold, p = l.bits, m = l.lencode, M = l.distcode, w = (1 << l.lenbits) - 1, H = (1 << l.distbits) - 1;
            t: do {
              p < 15 && (f += C[i5++] << p, p += 8, f += C[i5++] << p, p += 8), y = m[f & w];
              a: for (; ; ) {
                if (f >>>= k = y >>> 24, p -= k, (k = y >>> 16 & 255) === 0) E[n++] = 65535 & y;
                else {
                  if (!(16 & k)) {
                    if (!(64 & k)) {
                      y = m[(65535 & y) + (f & (1 << k) - 1)];
                      continue a;
                    }
                    if (32 & k) {
                      l.mode = 12;
                      break t;
                    }
                    r.msg = "invalid literal/length code", l.mode = 30;
                    break t;
                  }
                  F = 65535 & y, (k &= 15) && (p < k && (f += C[i5++] << p, p += 8), F += f & (1 << k) - 1, f >>>= k, p -= k), p < 15 && (f += C[i5++] << p, p += 8, f += C[i5++] << p, p += 8), y = M[f & H];
                  c: for (; ; ) {
                    if (f >>>= k = y >>> 24, p -= k, !(16 & (k = y >>> 16 & 255))) {
                      if (!(64 & k)) {
                        y = M[(65535 & y) + (f & (1 << k) - 1)];
                        continue c;
                      }
                      r.msg = "invalid distance code", l.mode = 30;
                      break t;
                    }
                    if (U = 65535 & y, p < (k &= 15) && (f += C[i5++] << p, (p += 8) < k && (f += C[i5++] << p, p += 8)), g < (U += f & (1 << k) - 1)) {
                      r.msg = "invalid distance too far back", l.mode = 30;
                      break t;
                    }
                    if (f >>>= k, p -= k, (k = n - h) < U) {
                      if (d < (k = U - k) && l.sane) {
                        r.msg = "invalid distance too far back", l.mode = 30;
                        break t;
                      }
                      if (P = u, (A = 0) === z) {
                        if (A += s - k, k < F) {
                          for (F -= k; E[n++] = u[A++], --k; ) ;
                          A = n - U, P = E;
                        }
                      } else if (z < k) {
                        if (A += s + z - k, (k -= z) < F) {
                          for (F -= k; E[n++] = u[A++], --k; ) ;
                          if (A = 0, z < F) {
                            for (F -= k = z; E[n++] = u[A++], --k; ) ;
                            A = n - U, P = E;
                          }
                        }
                      } else if (A += z - k, k < F) {
                        for (F -= k; E[n++] = u[A++], --k; ) ;
                        A = n - U, P = E;
                      }
                      for (; 2 < F; ) E[n++] = P[A++], E[n++] = P[A++], E[n++] = P[A++], F -= 3;
                      F && (E[n++] = P[A++], 1 < F && (E[n++] = P[A++]));
                    } else {
                      for (A = n - U; E[n++] = E[A++], E[n++] = E[A++], E[n++] = E[A++], 2 < (F -= 3); ) ;
                      F && (E[n++] = E[A++], 1 < F && (E[n++] = E[A++]));
                    }
                    break;
                  }
                }
                break;
              }
            } while (i5 < o && n < v);
            i5 -= F = p >> 3, f &= (1 << (p -= F << 3)) - 1, r.next_in = i5, r.next_out = n, r.avail_in = i5 < o ? o - i5 + 5 : 5 - (i5 - o), r.avail_out = n < v ? v - n + 257 : 257 - (n - v), l.hold = f, l.bits = p;
          };
        }, {}], 49: [function(t2, a, c) {
          var r = t2("../utils/common"), e = t2("./adler32"), l = t2("./crc32"), i5 = t2("./inffast"), o = t2("./inftrees"), n = 1, h = 2, v = 0, g = -2, s = 1, d = 852, z = 592;
          function u(A) {
            return (A >>> 24 & 255) + (A >>> 8 & 65280) + ((65280 & A) << 8) + ((255 & A) << 24);
          }
          function f() {
            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new r.Buf16(320), this.work = new r.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function p(A) {
            var P;
            return A && A.state ? (P = A.state, A.total_in = A.total_out = P.total = 0, A.msg = "", P.wrap && (A.adler = 1 & P.wrap), P.mode = s, P.last = 0, P.havedict = 0, P.dmax = 32768, P.head = null, P.hold = 0, P.bits = 0, P.lencode = P.lendyn = new r.Buf32(d), P.distcode = P.distdyn = new r.Buf32(z), P.sane = 1, P.back = -1, v) : g;
          }
          function m(A) {
            var P;
            return A && A.state ? ((P = A.state).wsize = 0, P.whave = 0, P.wnext = 0, p(A)) : g;
          }
          function M(A, P) {
            var C, E;
            return A && A.state ? (E = A.state, P < 0 ? (C = 0, P = -P) : (C = 1 + (P >> 4), P < 48 && (P &= 15)), P && (P < 8 || 15 < P) ? g : (E.window !== null && E.wbits !== P && (E.window = null), E.wrap = C, E.wbits = P, m(A))) : g;
          }
          function w(A, P) {
            var C, E;
            return A ? (E = new f(), (A.state = E).window = null, (C = M(A, P)) !== v && (A.state = null), C) : g;
          }
          var H, y, k = true;
          function F(A) {
            if (k) {
              var P;
              for (H = new r.Buf32(512), y = new r.Buf32(32), P = 0; P < 144; ) A.lens[P++] = 8;
              for (; P < 256; ) A.lens[P++] = 9;
              for (; P < 280; ) A.lens[P++] = 7;
              for (; P < 288; ) A.lens[P++] = 8;
              for (o(n, A.lens, 0, 288, H, 0, A.work, { bits: 9 }), P = 0; P < 32; ) A.lens[P++] = 5;
              o(h, A.lens, 0, 32, y, 0, A.work, { bits: 5 }), k = false;
            }
            A.lencode = H, A.lenbits = 9, A.distcode = y, A.distbits = 5;
          }
          function U(A, P, C, E) {
            var a1, j = A.state;
            return j.window === null && (j.wsize = 1 << j.wbits, j.wnext = 0, j.whave = 0, j.window = new r.Buf8(j.wsize)), E >= j.wsize ? (r.arraySet(j.window, P, C - j.wsize, j.wsize, 0), j.wnext = 0, j.whave = j.wsize) : (E < (a1 = j.wsize - j.wnext) && (a1 = E), r.arraySet(j.window, P, C - E, a1, j.wnext), (E -= a1) ? (r.arraySet(j.window, P, C - E, E, 0), j.wnext = E, j.whave = j.wsize) : (j.wnext += a1, j.wnext === j.wsize && (j.wnext = 0), j.whave < j.wsize && (j.whave += a1))), 0;
          }
          c.inflateReset = m, c.inflateReset2 = M, c.inflateResetKeep = p, c.inflateInit = function(A) {
            return w(A, 15);
          }, c.inflateInit2 = w, c.inflate = function(A, P) {
            var C, E, a1, j, K, Z, J, W, _, g1, X, $, o1, u1, N, x1, i1, B1, k1, A1, L, Y, Q, b, R = 0, O = new r.Buf8(4), t1 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!A || !A.state || !A.output || !A.input && A.avail_in !== 0) return g;
            (C = A.state).mode === 12 && (C.mode = 13), K = A.next_out, a1 = A.output, J = A.avail_out, j = A.next_in, E = A.input, Z = A.avail_in, W = C.hold, _ = C.bits, g1 = Z, X = J, Y = v;
            t: for (; ; ) switch (C.mode) {
              case s:
                if (C.wrap === 0) {
                  C.mode = 13;
                  break;
                }
                for (; _ < 16; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if (2 & C.wrap && W === 35615) {
                  O[C.check = 0] = 255 & W, O[1] = W >>> 8 & 255, C.check = l(C.check, O, 2, 0), _ = W = 0, C.mode = 2;
                  break;
                }
                if (C.flags = 0, C.head && (C.head.done = false), !(1 & C.wrap) || (((255 & W) << 8) + (W >> 8)) % 31) {
                  A.msg = "incorrect header check", C.mode = 30;
                  break;
                }
                if ((15 & W) != 8) {
                  A.msg = "unknown compression method", C.mode = 30;
                  break;
                }
                if (_ -= 4, L = 8 + (15 & (W >>>= 4)), C.wbits === 0) C.wbits = L;
                else if (L > C.wbits) {
                  A.msg = "invalid window size", C.mode = 30;
                  break;
                }
                C.dmax = 1 << L, A.adler = C.check = 1, C.mode = 512 & W ? 10 : 12, _ = W = 0;
                break;
              case 2:
                for (; _ < 16; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if (C.flags = W, (255 & C.flags) != 8) {
                  A.msg = "unknown compression method", C.mode = 30;
                  break;
                }
                if (57344 & C.flags) {
                  A.msg = "unknown header flags set", C.mode = 30;
                  break;
                }
                C.head && (C.head.text = W >> 8 & 1), 512 & C.flags && (O[0] = 255 & W, O[1] = W >>> 8 & 255, C.check = l(C.check, O, 2, 0)), _ = W = 0, C.mode = 3;
              case 3:
                for (; _ < 32; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                C.head && (C.head.time = W), 512 & C.flags && (O[0] = 255 & W, O[1] = W >>> 8 & 255, O[2] = W >>> 16 & 255, O[3] = W >>> 24 & 255, C.check = l(C.check, O, 4, 0)), _ = W = 0, C.mode = 4;
              case 4:
                for (; _ < 16; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                C.head && (C.head.xflags = 255 & W, C.head.os = W >> 8), 512 & C.flags && (O[0] = 255 & W, O[1] = W >>> 8 & 255, C.check = l(C.check, O, 2, 0)), _ = W = 0, C.mode = 5;
              case 5:
                if (1024 & C.flags) {
                  for (; _ < 16; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  C.length = W, C.head && (C.head.extra_len = W), 512 & C.flags && (O[0] = 255 & W, O[1] = W >>> 8 & 255, C.check = l(C.check, O, 2, 0)), _ = W = 0;
                } else C.head && (C.head.extra = null);
                C.mode = 6;
              case 6:
                if (1024 & C.flags && (Z < ($ = C.length) && ($ = Z), $ && (C.head && (L = C.head.extra_len - C.length, C.head.extra || (C.head.extra = new Array(C.head.extra_len)), r.arraySet(C.head.extra, E, j, $, L)), 512 & C.flags && (C.check = l(C.check, E, $, j)), Z -= $, j += $, C.length -= $), C.length)) break t;
                C.length = 0, C.mode = 7;
              case 7:
                if (2048 & C.flags) {
                  if (Z === 0) break t;
                  for ($ = 0; L = E[j + $++], C.head && L && C.length < 65536 && (C.head.name += String.fromCharCode(L)), L && $ < Z; ) ;
                  if (512 & C.flags && (C.check = l(C.check, E, $, j)), Z -= $, j += $, L) break t;
                } else C.head && (C.head.name = null);
                C.length = 0, C.mode = 8;
              case 8:
                if (4096 & C.flags) {
                  if (Z === 0) break t;
                  for ($ = 0; L = E[j + $++], C.head && L && C.length < 65536 && (C.head.comment += String.fromCharCode(L)), L && $ < Z; ) ;
                  if (512 & C.flags && (C.check = l(C.check, E, $, j)), Z -= $, j += $, L) break t;
                } else C.head && (C.head.comment = null);
                C.mode = 9;
              case 9:
                if (512 & C.flags) {
                  for (; _ < 16; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  if (W !== (65535 & C.check)) {
                    A.msg = "header crc mismatch", C.mode = 30;
                    break;
                  }
                  _ = W = 0;
                }
                C.head && (C.head.hcrc = C.flags >> 9 & 1, C.head.done = true), A.adler = C.check = 0, C.mode = 12;
                break;
              case 10:
                for (; _ < 32; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                A.adler = C.check = u(W), _ = W = 0, C.mode = 11;
              case 11:
                if (C.havedict === 0) return A.next_out = K, A.avail_out = J, A.next_in = j, A.avail_in = Z, C.hold = W, C.bits = _, 2;
                A.adler = C.check = 1, C.mode = 12;
              case 12:
                if (P === 5 || P === 6) break t;
              case 13:
                if (C.last) {
                  W >>>= 7 & _, _ -= 7 & _, C.mode = 27;
                  break;
                }
                for (; _ < 3; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                switch (C.last = 1 & W, _ -= 1, 3 & (W >>>= 1)) {
                  case 0:
                    C.mode = 14;
                    break;
                  case 1:
                    if (F(C), C.mode = 20, P !== 6) break;
                    W >>>= 2, _ -= 2;
                    break t;
                  case 2:
                    C.mode = 17;
                    break;
                  case 3:
                    A.msg = "invalid block type", C.mode = 30;
                }
                W >>>= 2, _ -= 2;
                break;
              case 14:
                for (W >>>= 7 & _, _ -= 7 & _; _ < 32; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if ((65535 & W) != (W >>> 16 ^ 65535)) {
                  A.msg = "invalid stored block lengths", C.mode = 30;
                  break;
                }
                if (C.length = 65535 & W, _ = W = 0, C.mode = 15, P === 6) break t;
              case 15:
                C.mode = 16;
              case 16:
                if ($ = C.length) {
                  if (Z < $ && ($ = Z), J < $ && ($ = J), $ === 0) break t;
                  r.arraySet(a1, E, j, $, K), Z -= $, j += $, J -= $, K += $, C.length -= $;
                  break;
                }
                C.mode = 12;
                break;
              case 17:
                for (; _ < 14; ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if (C.nlen = 257 + (31 & W), W >>>= 5, _ -= 5, C.ndist = 1 + (31 & W), W >>>= 5, _ -= 5, C.ncode = 4 + (15 & W), W >>>= 4, _ -= 4, 286 < C.nlen || 30 < C.ndist) {
                  A.msg = "too many length or distance symbols", C.mode = 30;
                  break;
                }
                C.have = 0, C.mode = 18;
              case 18:
                for (; C.have < C.ncode; ) {
                  for (; _ < 3; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  C.lens[t1[C.have++]] = 7 & W, W >>>= 3, _ -= 3;
                }
                for (; C.have < 19; ) C.lens[t1[C.have++]] = 0;
                if (C.lencode = C.lendyn, C.lenbits = 7, Q = { bits: C.lenbits }, Y = o(0, C.lens, 0, 19, C.lencode, 0, C.work, Q), C.lenbits = Q.bits, Y) {
                  A.msg = "invalid code lengths set", C.mode = 30;
                  break;
                }
                C.have = 0, C.mode = 19;
              case 19:
                for (; C.have < C.nlen + C.ndist; ) {
                  for (; x1 = (R = C.lencode[W & (1 << C.lenbits) - 1]) >>> 16 & 255, i1 = 65535 & R, !((N = R >>> 24) <= _); ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  if (i1 < 16) W >>>= N, _ -= N, C.lens[C.have++] = i1;
                  else {
                    if (i1 === 16) {
                      for (b = N + 2; _ < b; ) {
                        if (Z === 0) break t;
                        Z--, W += E[j++] << _, _ += 8;
                      }
                      if (W >>>= N, _ -= N, C.have === 0) {
                        A.msg = "invalid bit length repeat", C.mode = 30;
                        break;
                      }
                      L = C.lens[C.have - 1], $ = 3 + (3 & W), W >>>= 2, _ -= 2;
                    } else if (i1 === 17) {
                      for (b = N + 3; _ < b; ) {
                        if (Z === 0) break t;
                        Z--, W += E[j++] << _, _ += 8;
                      }
                      _ -= N, L = 0, $ = 3 + (7 & (W >>>= N)), W >>>= 3, _ -= 3;
                    } else {
                      for (b = N + 7; _ < b; ) {
                        if (Z === 0) break t;
                        Z--, W += E[j++] << _, _ += 8;
                      }
                      _ -= N, L = 0, $ = 11 + (127 & (W >>>= N)), W >>>= 7, _ -= 7;
                    }
                    if (C.have + $ > C.nlen + C.ndist) {
                      A.msg = "invalid bit length repeat", C.mode = 30;
                      break;
                    }
                    for (; $--; ) C.lens[C.have++] = L;
                  }
                }
                if (C.mode === 30) break;
                if (C.lens[256] === 0) {
                  A.msg = "invalid code -- missing end-of-block", C.mode = 30;
                  break;
                }
                if (C.lenbits = 9, Q = { bits: C.lenbits }, Y = o(n, C.lens, 0, C.nlen, C.lencode, 0, C.work, Q), C.lenbits = Q.bits, Y) {
                  A.msg = "invalid literal/lengths set", C.mode = 30;
                  break;
                }
                if (C.distbits = 6, C.distcode = C.distdyn, Q = { bits: C.distbits }, Y = o(h, C.lens, C.nlen, C.ndist, C.distcode, 0, C.work, Q), C.distbits = Q.bits, Y) {
                  A.msg = "invalid distances set", C.mode = 30;
                  break;
                }
                if (C.mode = 20, P === 6) break t;
              case 20:
                C.mode = 21;
              case 21:
                if (6 <= Z && 258 <= J) {
                  A.next_out = K, A.avail_out = J, A.next_in = j, A.avail_in = Z, C.hold = W, C.bits = _, i5(A, X), K = A.next_out, a1 = A.output, J = A.avail_out, j = A.next_in, E = A.input, Z = A.avail_in, W = C.hold, _ = C.bits, C.mode === 12 && (C.back = -1);
                  break;
                }
                for (C.back = 0; x1 = (R = C.lencode[W & (1 << C.lenbits) - 1]) >>> 16 & 255, i1 = 65535 & R, !((N = R >>> 24) <= _); ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if (x1 && !(240 & x1)) {
                  for (B1 = N, k1 = x1, A1 = i1; x1 = (R = C.lencode[A1 + ((W & (1 << B1 + k1) - 1) >> B1)]) >>> 16 & 255, i1 = 65535 & R, !(B1 + (N = R >>> 24) <= _); ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  W >>>= B1, _ -= B1, C.back += B1;
                }
                if (W >>>= N, _ -= N, C.back += N, C.length = i1, x1 === 0) {
                  C.mode = 26;
                  break;
                }
                if (32 & x1) {
                  C.back = -1, C.mode = 12;
                  break;
                }
                if (64 & x1) {
                  A.msg = "invalid literal/length code", C.mode = 30;
                  break;
                }
                C.extra = 15 & x1, C.mode = 22;
              case 22:
                if (C.extra) {
                  for (b = C.extra; _ < b; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  C.length += W & (1 << C.extra) - 1, W >>>= C.extra, _ -= C.extra, C.back += C.extra;
                }
                C.was = C.length, C.mode = 23;
              case 23:
                for (; x1 = (R = C.distcode[W & (1 << C.distbits) - 1]) >>> 16 & 255, i1 = 65535 & R, !((N = R >>> 24) <= _); ) {
                  if (Z === 0) break t;
                  Z--, W += E[j++] << _, _ += 8;
                }
                if (!(240 & x1)) {
                  for (B1 = N, k1 = x1, A1 = i1; x1 = (R = C.distcode[A1 + ((W & (1 << B1 + k1) - 1) >> B1)]) >>> 16 & 255, i1 = 65535 & R, !(B1 + (N = R >>> 24) <= _); ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  W >>>= B1, _ -= B1, C.back += B1;
                }
                if (W >>>= N, _ -= N, C.back += N, 64 & x1) {
                  A.msg = "invalid distance code", C.mode = 30;
                  break;
                }
                C.offset = i1, C.extra = 15 & x1, C.mode = 24;
              case 24:
                if (C.extra) {
                  for (b = C.extra; _ < b; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  C.offset += W & (1 << C.extra) - 1, W >>>= C.extra, _ -= C.extra, C.back += C.extra;
                }
                if (C.offset > C.dmax) {
                  A.msg = "invalid distance too far back", C.mode = 30;
                  break;
                }
                C.mode = 25;
              case 25:
                if (J === 0) break t;
                if ($ = X - J, C.offset > $) {
                  if (($ = C.offset - $) > C.whave && C.sane) {
                    A.msg = "invalid distance too far back", C.mode = 30;
                    break;
                  }
                  o1 = $ > C.wnext ? ($ -= C.wnext, C.wsize - $) : C.wnext - $, $ > C.length && ($ = C.length), u1 = C.window;
                } else u1 = a1, o1 = K - C.offset, $ = C.length;
                for (J < $ && ($ = J), J -= $, C.length -= $; a1[K++] = u1[o1++], --$; ) ;
                C.length === 0 && (C.mode = 21);
                break;
              case 26:
                if (J === 0) break t;
                a1[K++] = C.length, J--, C.mode = 21;
                break;
              case 27:
                if (C.wrap) {
                  for (; _ < 32; ) {
                    if (Z === 0) break t;
                    Z--, W |= E[j++] << _, _ += 8;
                  }
                  if (X -= J, A.total_out += X, C.total += X, X && (A.adler = C.check = C.flags ? l(C.check, a1, X, K - X) : e(C.check, a1, X, K - X)), X = J, (C.flags ? W : u(W)) !== C.check) {
                    A.msg = "incorrect data check", C.mode = 30;
                    break;
                  }
                  _ = W = 0;
                }
                C.mode = 28;
              case 28:
                if (C.wrap && C.flags) {
                  for (; _ < 32; ) {
                    if (Z === 0) break t;
                    Z--, W += E[j++] << _, _ += 8;
                  }
                  if (W !== (4294967295 & C.total)) {
                    A.msg = "incorrect length check", C.mode = 30;
                    break;
                  }
                  _ = W = 0;
                }
                C.mode = 29;
              case 29:
                Y = 1;
                break t;
              case 30:
                Y = -3;
                break t;
              case 31:
                return -4;
              case 32:
              default:
                return g;
            }
            return A.next_out = K, A.avail_out = J, A.next_in = j, A.avail_in = Z, C.hold = W, C.bits = _, (C.wsize || X !== A.avail_out && C.mode < 30 && (C.mode < 27 || P !== 4)) && U(A, A.output, A.next_out, X - A.avail_out) ? (C.mode = 31, -4) : (g1 -= A.avail_in, X -= A.avail_out, A.total_in += g1, A.total_out += X, C.total += X, C.wrap && X && (A.adler = C.check = C.flags ? l(C.check, a1, X, A.next_out - X) : e(C.check, a1, X, A.next_out - X)), A.data_type = C.bits + (C.last ? 64 : 0) + (C.mode === 12 ? 128 : 0) + (C.mode === 20 || C.mode === 15 ? 256 : 0), (g1 == 0 && X === 0 || P === 4) && Y === v && (Y = -5), Y);
          }, c.inflateEnd = function(A) {
            if (!A || !A.state) return g;
            var P = A.state;
            return P.window && (P.window = null), A.state = null, v;
          }, c.inflateGetHeader = function(A, P) {
            var C;
            return A && A.state && 2 & (C = A.state).wrap ? ((C.head = P).done = false, v) : g;
          }, c.inflateSetDictionary = function(A, P) {
            var C, E = P.length;
            return A && A.state ? (C = A.state).wrap !== 0 && C.mode !== 11 ? g : C.mode === 11 && e(1, P, E, 0) !== C.check ? -3 : U(A, P, E, E) ? (C.mode = 31, -4) : (C.havedict = 1, v) : g;
          }, c.inflateInfo = "pako inflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(t2, a, c) {
          var r = t2("../utils/common"), e = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], l = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], i5 = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], o = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          a.exports = function(n, h, v, g, s, d, z, u) {
            var f, p, m, M, w, H, y, k, F, U = u.bits, A = 0, P = 0, C = 0, E = 0, a1 = 0, j = 0, K = 0, Z = 0, J = 0, W = 0, _ = null, g1 = 0, X = new r.Buf16(16), $ = new r.Buf16(16), o1 = null, u1 = 0;
            for (A = 0; A <= 15; A++) X[A] = 0;
            for (P = 0; P < g; P++) X[h[v + P]]++;
            for (a1 = U, E = 15; 1 <= E && X[E] === 0; E--) ;
            if (E < a1 && (a1 = E), E === 0) return s[d++] = 20971520, s[d++] = 20971520, u.bits = 1, 0;
            for (C = 1; C < E && X[C] === 0; C++) ;
            for (a1 < C && (a1 = C), A = Z = 1; A <= 15; A++) if (Z <<= 1, (Z -= X[A]) < 0) return -1;
            if (0 < Z && (n === 0 || E !== 1)) return -1;
            for ($[1] = 0, A = 1; A < 15; A++) $[A + 1] = $[A] + X[A];
            for (P = 0; P < g; P++) h[v + P] !== 0 && (z[$[h[v + P]]++] = P);
            if (H = n === 0 ? (_ = o1 = z, 19) : n === 1 ? (_ = e, g1 -= 257, o1 = l, u1 -= 257, 256) : (_ = i5, o1 = o, -1), A = C, w = d, K = P = W = 0, m = -1, M = (J = 1 << (j = a1)) - 1, n === 1 && 852 < J || n === 2 && 592 < J) return 1;
            for (; ; ) {
              for (y = A - K, F = z[P] < H ? (k = 0, z[P]) : z[P] > H ? (k = o1[u1 + z[P]], _[g1 + z[P]]) : (k = 96, 0), f = 1 << A - K, C = p = 1 << j; s[w + (W >> K) + (p -= f)] = y << 24 | k << 16 | F | 0, p !== 0; ) ;
              for (f = 1 << A - 1; W & f; ) f >>= 1;
              if (f !== 0 ? (W &= f - 1, W += f) : W = 0, P++, --X[A] == 0) {
                if (A === E) break;
                A = h[v + z[P]];
              }
              if (a1 < A && (W & M) !== m) {
                for (K === 0 && (K = a1), w += C, Z = 1 << (j = A - K); j + K < E && !((Z -= X[j + K]) <= 0); ) j++, Z <<= 1;
                if (J += 1 << j, n === 1 && 852 < J || n === 2 && 592 < J) return 1;
                s[m = W & M] = a1 << 24 | j << 16 | w - d | 0;
              }
            }
            return W !== 0 && (s[w + W] = A - K << 24 | 64 << 16 | 0), u.bits = a1, 0;
          };
        }, { "../utils/common": 41 }], 51: [function(t2, a, c) {
          a.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
        }, {}], 52: [function(t2, a, c) {
          var r = t2("../utils/common"), e = 0, l = 1;
          function i5(R) {
            for (var O = R.length; 0 <= --O; ) R[O] = 0;
          }
          var o = 0, n = 29, h = 256, v = h + 1 + n, g = 30, s = 19, d = 2 * v + 1, z = 15, u = 16, f = 7, p = 256, m = 16, M = 17, w = 18, H = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], y = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], k = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], F = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], U = new Array(2 * (v + 2));
          i5(U);
          var A = new Array(2 * g);
          i5(A);
          var P = new Array(512);
          i5(P);
          var C = new Array(256);
          i5(C);
          var E = new Array(n);
          i5(E);
          var a1, j, K, Z = new Array(g);
          function J(R, O, t1, r1, q) {
            this.static_tree = R, this.extra_bits = O, this.extra_base = t1, this.elems = r1, this.max_length = q, this.has_stree = R && R.length;
          }
          function W(R, O) {
            this.dyn_tree = R, this.max_code = 0, this.stat_desc = O;
          }
          function _(R) {
            return R < 256 ? P[R] : P[256 + (R >>> 7)];
          }
          function g1(R, O) {
            R.pending_buf[R.pending++] = 255 & O, R.pending_buf[R.pending++] = O >>> 8 & 255;
          }
          function X(R, O, t1) {
            R.bi_valid > u - t1 ? (R.bi_buf |= O << R.bi_valid & 65535, g1(R, R.bi_buf), R.bi_buf = O >> u - R.bi_valid, R.bi_valid += t1 - u) : (R.bi_buf |= O << R.bi_valid & 65535, R.bi_valid += t1);
          }
          function $(R, O, t1) {
            X(R, t1[2 * O], t1[2 * O + 1]);
          }
          function o1(R, O) {
            for (var t1 = 0; t1 |= 1 & R, R >>>= 1, t1 <<= 1, 0 < --O; ) ;
            return t1 >>> 1;
          }
          function u1(R, O, t1) {
            var r1, q, h1 = new Array(z + 1), d1 = 0;
            for (r1 = 1; r1 <= z; r1++) h1[r1] = d1 = d1 + t1[r1 - 1] << 1;
            for (q = 0; q <= O; q++) {
              var l1 = R[2 * q + 1];
              l1 !== 0 && (R[2 * q] = o1(h1[l1]++, l1));
            }
          }
          function N(R) {
            var O;
            for (O = 0; O < v; O++) R.dyn_ltree[2 * O] = 0;
            for (O = 0; O < g; O++) R.dyn_dtree[2 * O] = 0;
            for (O = 0; O < s; O++) R.bl_tree[2 * O] = 0;
            R.dyn_ltree[2 * p] = 1, R.opt_len = R.static_len = 0, R.last_lit = R.matches = 0;
          }
          function x1(R) {
            8 < R.bi_valid ? g1(R, R.bi_buf) : 0 < R.bi_valid && (R.pending_buf[R.pending++] = R.bi_buf), R.bi_buf = 0, R.bi_valid = 0;
          }
          function i1(R, O, t1, r1) {
            var q = 2 * O, h1 = 2 * t1;
            return R[q] < R[h1] || R[q] === R[h1] && r1[O] <= r1[t1];
          }
          function B1(R, O, t1) {
            for (var r1 = R.heap[t1], q = t1 << 1; q <= R.heap_len && (q < R.heap_len && i1(O, R.heap[q + 1], R.heap[q], R.depth) && q++, !i1(O, r1, R.heap[q], R.depth)); ) R.heap[t1] = R.heap[q], t1 = q, q <<= 1;
            R.heap[t1] = r1;
          }
          function k1(R, O, t1) {
            var r1, q, h1, d1, l1 = 0;
            if (R.last_lit !== 0) for (; r1 = R.pending_buf[R.d_buf + 2 * l1] << 8 | R.pending_buf[R.d_buf + 2 * l1 + 1], q = R.pending_buf[R.l_buf + l1], l1++, r1 === 0 ? $(R, q, O) : ($(R, (h1 = C[q]) + h + 1, O), (d1 = H[h1]) !== 0 && X(R, q -= E[h1], d1), $(R, h1 = _(--r1), t1), (d1 = y[h1]) !== 0 && X(R, r1 -= Z[h1], d1)), l1 < R.last_lit; ) ;
            $(R, p, O);
          }
          function A1(R, O) {
            var t1, r1, q, h1 = O.dyn_tree, d1 = O.stat_desc.static_tree, l1 = O.stat_desc.has_stree, e1 = O.stat_desc.elems, w1 = -1;
            for (R.heap_len = 0, R.heap_max = d, t1 = 0; t1 < e1; t1++) h1[2 * t1] !== 0 ? (R.heap[++R.heap_len] = w1 = t1, R.depth[t1] = 0) : h1[2 * t1 + 1] = 0;
            for (; R.heap_len < 2; ) h1[2 * (q = R.heap[++R.heap_len] = w1 < 2 ? ++w1 : 0)] = 1, R.depth[q] = 0, R.opt_len--, l1 && (R.static_len -= d1[2 * q + 1]);
            for (O.max_code = w1, t1 = R.heap_len >> 1; 1 <= t1; t1--) B1(R, h1, t1);
            for (q = e1; t1 = R.heap[1], R.heap[1] = R.heap[R.heap_len--], B1(R, h1, 1), r1 = R.heap[1], R.heap[--R.heap_max] = t1, R.heap[--R.heap_max] = r1, h1[2 * q] = h1[2 * t1] + h1[2 * r1], R.depth[q] = (R.depth[t1] >= R.depth[r1] ? R.depth[t1] : R.depth[r1]) + 1, h1[2 * t1 + 1] = h1[2 * r1 + 1] = q, R.heap[1] = q++, B1(R, h1, 1), 2 <= R.heap_len; ) ;
            R.heap[--R.heap_max] = R.heap[1], function(R1, a0) {
              var V0, p4, Xt, p2, he, iv, a5 = a0.dyn_tree, ff = a0.max_code, Lq = a0.stat_desc.static_tree, Hq = a0.stat_desc.has_stree, Vq = a0.stat_desc.extra_bits, Mf = a0.stat_desc.extra_base, Yt = a0.stat_desc.max_length, ve = 0;
              for (p2 = 0; p2 <= z; p2++) R1.bl_count[p2] = 0;
              for (a5[2 * R1.heap[R1.heap_max] + 1] = 0, V0 = R1.heap_max + 1; V0 < d; V0++) Yt < (p2 = a5[2 * a5[2 * (p4 = R1.heap[V0]) + 1] + 1] + 1) && (p2 = Yt, ve++), a5[2 * p4 + 1] = p2, ff < p4 || (R1.bl_count[p2]++, he = 0, Mf <= p4 && (he = Vq[p4 - Mf]), iv = a5[2 * p4], R1.opt_len += iv * (p2 + he), Hq && (R1.static_len += iv * (Lq[2 * p4 + 1] + he)));
              if (ve !== 0) {
                do {
                  for (p2 = Yt - 1; R1.bl_count[p2] === 0; ) p2--;
                  R1.bl_count[p2]--, R1.bl_count[p2 + 1] += 2, R1.bl_count[Yt]--, ve -= 2;
                } while (0 < ve);
                for (p2 = Yt; p2 !== 0; p2--) for (p4 = R1.bl_count[p2]; p4 !== 0; ) ff < (Xt = R1.heap[--V0]) || (a5[2 * Xt + 1] !== p2 && (R1.opt_len += (p2 - a5[2 * Xt + 1]) * a5[2 * Xt], a5[2 * Xt + 1] = p2), p4--);
              }
            }(R, O), u1(h1, w1, R.bl_count);
          }
          function L(R, O, t1) {
            var r1, q, h1 = -1, d1 = O[1], l1 = 0, e1 = 7, w1 = 4;
            for (d1 === 0 && (e1 = 138, w1 = 3), O[2 * (t1 + 1) + 1] = 65535, r1 = 0; r1 <= t1; r1++) q = d1, d1 = O[2 * (r1 + 1) + 1], ++l1 < e1 && q === d1 || (l1 < w1 ? R.bl_tree[2 * q] += l1 : q !== 0 ? (q !== h1 && R.bl_tree[2 * q]++, R.bl_tree[2 * m]++) : l1 <= 10 ? R.bl_tree[2 * M]++ : R.bl_tree[2 * w]++, h1 = q, w1 = (l1 = 0) === d1 ? (e1 = 138, 3) : q === d1 ? (e1 = 6, 3) : (e1 = 7, 4));
          }
          function Y(R, O, t1) {
            var r1, q, h1 = -1, d1 = O[1], l1 = 0, e1 = 7, w1 = 4;
            for (d1 === 0 && (e1 = 138, w1 = 3), r1 = 0; r1 <= t1; r1++) if (q = d1, d1 = O[2 * (r1 + 1) + 1], !(++l1 < e1 && q === d1)) {
              if (l1 < w1) for (; $(R, q, R.bl_tree), --l1 != 0; ) ;
              else q !== 0 ? (q !== h1 && ($(R, q, R.bl_tree), l1--), $(R, m, R.bl_tree), X(R, l1 - 3, 2)) : l1 <= 10 ? ($(R, M, R.bl_tree), X(R, l1 - 3, 3)) : ($(R, w, R.bl_tree), X(R, l1 - 11, 7));
              h1 = q, w1 = (l1 = 0) === d1 ? (e1 = 138, 3) : q === d1 ? (e1 = 6, 3) : (e1 = 7, 4);
            }
          }
          i5(Z);
          var Q = false;
          function b(R, O, t1, r1) {
            X(R, (o << 1) + (r1 ? 1 : 0), 3), function(q, h1, d1, l1) {
              x1(q), g1(q, d1), g1(q, ~d1), r.arraySet(q.pending_buf, q.window, h1, d1, q.pending), q.pending += d1;
            }(R, O, t1);
          }
          c._tr_init = function(R) {
            Q || (function() {
              var O, t1, r1, q, h1, d1 = new Array(z + 1);
              for (q = r1 = 0; q < n - 1; q++) for (E[q] = r1, O = 0; O < 1 << H[q]; O++) C[r1++] = q;
              for (C[r1 - 1] = q, q = h1 = 0; q < 16; q++) for (Z[q] = h1, O = 0; O < 1 << y[q]; O++) P[h1++] = q;
              for (h1 >>= 7; q < g; q++) for (Z[q] = h1 << 7, O = 0; O < 1 << y[q] - 7; O++) P[256 + h1++] = q;
              for (t1 = 0; t1 <= z; t1++) d1[t1] = 0;
              for (O = 0; O <= 143; ) U[2 * O + 1] = 8, O++, d1[8]++;
              for (; O <= 255; ) U[2 * O + 1] = 9, O++, d1[9]++;
              for (; O <= 279; ) U[2 * O + 1] = 7, O++, d1[7]++;
              for (; O <= 287; ) U[2 * O + 1] = 8, O++, d1[8]++;
              for (u1(U, v + 1, d1), O = 0; O < g; O++) A[2 * O + 1] = 5, A[2 * O] = o1(O, 5);
              a1 = new J(U, H, h + 1, v, z), j = new J(A, y, 0, g, z), K = new J(new Array(0), k, 0, s, f);
            }(), Q = true), R.l_desc = new W(R.dyn_ltree, a1), R.d_desc = new W(R.dyn_dtree, j), R.bl_desc = new W(R.bl_tree, K), R.bi_buf = 0, R.bi_valid = 0, N(R);
          }, c._tr_stored_block = b, c._tr_flush_block = function(R, O, t1, r1) {
            var q, h1, d1 = 0;
            0 < R.level ? (R.strm.data_type === 2 && (R.strm.data_type = function(l1) {
              var e1, w1 = 4093624447;
              for (e1 = 0; e1 <= 31; e1++, w1 >>>= 1) if (1 & w1 && l1.dyn_ltree[2 * e1] !== 0) return e;
              if (l1.dyn_ltree[18] !== 0 || l1.dyn_ltree[20] !== 0 || l1.dyn_ltree[26] !== 0) return l;
              for (e1 = 32; e1 < h; e1++) if (l1.dyn_ltree[2 * e1] !== 0) return l;
              return e;
            }(R)), A1(R, R.l_desc), A1(R, R.d_desc), d1 = function(l1) {
              var e1;
              for (L(l1, l1.dyn_ltree, l1.l_desc.max_code), L(l1, l1.dyn_dtree, l1.d_desc.max_code), A1(l1, l1.bl_desc), e1 = s - 1; 3 <= e1 && l1.bl_tree[2 * F[e1] + 1] === 0; e1--) ;
              return l1.opt_len += 3 * (e1 + 1) + 5 + 5 + 4, e1;
            }(R), q = R.opt_len + 3 + 7 >>> 3, (h1 = R.static_len + 3 + 7 >>> 3) <= q && (q = h1)) : q = h1 = t1 + 5, t1 + 4 <= q && O !== -1 ? b(R, O, t1, r1) : R.strategy === 4 || h1 === q ? (X(R, 2 + (r1 ? 1 : 0), 3), k1(R, U, A)) : (X(R, 4 + (r1 ? 1 : 0), 3), function(l1, e1, w1, R1) {
              var a0;
              for (X(l1, e1 - 257, 5), X(l1, w1 - 1, 5), X(l1, R1 - 4, 4), a0 = 0; a0 < R1; a0++) X(l1, l1.bl_tree[2 * F[a0] + 1], 3);
              Y(l1, l1.dyn_ltree, e1 - 1), Y(l1, l1.dyn_dtree, w1 - 1);
            }(R, R.l_desc.max_code + 1, R.d_desc.max_code + 1, d1 + 1), k1(R, R.dyn_ltree, R.dyn_dtree)), N(R), r1 && x1(R);
          }, c._tr_tally = function(R, O, t1) {
            return R.pending_buf[R.d_buf + 2 * R.last_lit] = O >>> 8 & 255, R.pending_buf[R.d_buf + 2 * R.last_lit + 1] = 255 & O, R.pending_buf[R.l_buf + R.last_lit] = 255 & t1, R.last_lit++, O === 0 ? R.dyn_ltree[2 * t1]++ : (R.matches++, O--, R.dyn_ltree[2 * (C[t1] + h + 1)]++, R.dyn_dtree[2 * _(O)]++), R.last_lit === R.lit_bufsize - 1;
          }, c._tr_align = function(R) {
            X(R, 2, 3), $(R, p, U), function(O) {
              O.bi_valid === 16 ? (g1(O, O.bi_buf), O.bi_buf = 0, O.bi_valid = 0) : 8 <= O.bi_valid && (O.pending_buf[O.pending++] = 255 & O.bi_buf, O.bi_buf >>= 8, O.bi_valid -= 8);
            }(R);
          };
        }, { "../utils/common": 41 }], 53: [function(t2, a, c) {
          a.exports = function() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          };
        }, {}], 54: [function(t2, a, c) {
          (function(r) {
            (function(e, l) {
              if (!e.setImmediate) {
                var i5, o, n, h, v = 1, g = {}, s = false, d = e.document, z = Object.getPrototypeOf && Object.getPrototypeOf(e);
                z = z && z.setTimeout ? z : e, i5 = {}.toString.call(e.process) === "[object process]" ? function(m) {
                  process.nextTick(function() {
                    f(m);
                  });
                } : function() {
                  if (e.postMessage && !e.importScripts) {
                    var m = true, M = e.onmessage;
                    return e.onmessage = function() {
                      m = false;
                    }, e.postMessage("", "*"), e.onmessage = M, m;
                  }
                }() ? (h = "setImmediate$" + Math.random() + "$", e.addEventListener ? e.addEventListener("message", p, false) : e.attachEvent("onmessage", p), function(m) {
                  e.postMessage(h + m, "*");
                }) : e.MessageChannel ? ((n = new MessageChannel()).port1.onmessage = function(m) {
                  f(m.data);
                }, function(m) {
                  n.port2.postMessage(m);
                }) : d && "onreadystatechange" in d.createElement("script") ? (o = d.documentElement, function(m) {
                  var M = d.createElement("script");
                  M.onreadystatechange = function() {
                    f(m), M.onreadystatechange = null, o.removeChild(M), M = null;
                  }, o.appendChild(M);
                }) : function(m) {
                  setTimeout(f, 0, m);
                }, z.setImmediate = function(m) {
                  typeof m != "function" && (m = new Function("" + m));
                  for (var M = new Array(arguments.length - 1), w = 0; w < M.length; w++) M[w] = arguments[w + 1];
                  var H = { callback: m, args: M };
                  return g[v] = H, i5(v), v++;
                }, z.clearImmediate = u;
              }
              function u(m) {
                delete g[m];
              }
              function f(m) {
                if (s) setTimeout(f, 0, m);
                else {
                  var M = g[m];
                  if (M) {
                    s = true;
                    try {
                      (function(w) {
                        var H = w.callback, y = w.args;
                        switch (y.length) {
                          case 0:
                            H();
                            break;
                          case 1:
                            H(y[0]);
                            break;
                          case 2:
                            H(y[0], y[1]);
                            break;
                          case 3:
                            H(y[0], y[1], y[2]);
                            break;
                          default:
                            H.apply(l, y);
                        }
                      })(M);
                    } finally {
                      u(m), s = false;
                    }
                  }
                }
              }
              function p(m) {
                m.source === e && typeof m.data == "string" && m.data.indexOf(h) === 0 && f(+m.data.slice(h.length));
              }
            })(typeof self == "undefined" ? r === void 0 ? this : r : self);
          }).call(this, typeof commonjsGlobal != "undefined" ? commonjsGlobal : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
        }, {}] }, {}, [10])(10);
      });
    });
    var en, dr, c51, RI, r51, e51, an, l51, bI, i51, Au, cn, rn, a7, o51, n51, h51, sr, n3, v51, g51, Ru, ln, FI = x(() => {
      en = I(G(), 1), dr = I(G(), 1), c51 = (t2) => typeof t2 == "function", RI = (t2, a) => c51(t2) ? t2(a) : t2, r51 = /* @__PURE__ */ (() => {
        let t2 = 0;
        return () => (++t2).toString();
      })(), e51 = 20, an = /* @__PURE__ */ new Map(), l51 = 1e3, bI = (t2) => {
        if (an.has(t2)) return;
        let a = setTimeout(() => {
          an.delete(t2), a7({ type: 4, toastId: t2 });
        }, l51);
        an.set(t2, a);
      }, i51 = (t2) => {
        let a = an.get(t2);
        a && clearTimeout(a);
      }, Au = (t2, a) => {
        switch (a.type) {
          case 0:
            return D(S({}, t2), { toasts: [a.toast, ...t2.toasts].slice(0, e51) });
          case 1:
            return a.toast.id && i51(a.toast.id), D(S({}, t2), { toasts: t2.toasts.map((l) => l.id === a.toast.id ? S(S({}, l), a.toast) : l) });
          case 2:
            let { toast: c } = a;
            return t2.toasts.find((l) => l.id === c.id) ? Au(t2, { type: 1, toast: c }) : Au(t2, { type: 0, toast: c });
          case 3:
            let { toastId: r } = a;
            return r ? bI(r) : t2.toasts.forEach((l) => {
              bI(l.id);
            }), D(S({}, t2), { toasts: t2.toasts.map((l) => l.id === r || r === void 0 ? D(S({}, l), { visible: false }) : l) });
          case 4:
            return a.toastId === void 0 ? D(S({}, t2), { toasts: [] }) : D(S({}, t2), { toasts: t2.toasts.filter((l) => l.id !== a.toastId) });
          case 5:
            return D(S({}, t2), { pausedAt: a.time });
          case 6:
            let e = a.time - (t2.pausedAt || 0);
            return D(S({}, t2), { pausedAt: void 0, toasts: t2.toasts.map((l) => D(S({}, l), { pauseDuration: l.pauseDuration + e })) });
        }
      }, cn = [], rn = { toasts: [], pausedAt: void 0 }, a7 = (t2) => {
        rn = Au(rn, t2), cn.forEach((a) => {
          a(rn);
        });
      }, o51 = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 }, n51 = (t2 = {}) => {
        let [a, c] = (0, en.useState)(rn);
        (0, en.useEffect)(() => (cn.push(c), () => {
          let e = cn.indexOf(c);
          e > -1 && cn.splice(e, 1);
        }), [a]);
        let r = a.toasts.map((e) => {
          var l, i5;
          return D(S(S(S({}, t2), t2[e.type]), e), { duration: e.duration || ((l = t2[e.type]) == null ? void 0 : l.duration) || (t2 == null ? void 0 : t2.duration) || o51[e.type], style: S(S(S({}, t2.style), (i5 = t2[e.type]) == null ? void 0 : i5.style), e.style) });
        });
        return D(S({}, a), { toasts: r });
      }, h51 = (t2, a = "blank", c) => D(S({ createdAt: Date.now(), visible: true, type: a, ariaProps: { role: "status", "aria-live": "polite" }, message: t2, pauseDuration: 0 }, c), { id: (c == null ? void 0 : c.id) || r51() }), sr = (t2) => (a, c) => {
        let r = h51(a, t2, c);
        return a7({ type: 2, toast: r }), r.id;
      }, n3 = (t2, a) => sr("blank")(t2, a);
      n3.error = sr("error");
      n3.success = sr("success");
      n3.loading = sr("loading");
      n3.custom = sr("custom");
      n3.dismiss = (t2) => {
        a7({ type: 3, toastId: t2 });
      };
      n3.remove = (t2) => a7({ type: 4, toastId: t2 });
      n3.promise = (t2, a, c) => {
        let r = n3.loading(a.loading, S(S({}, c), c == null ? void 0 : c.loading));
        return t2.then((e) => (n3.success(RI(a.success, e), S(S({ id: r }, c), c == null ? void 0 : c.success)), e)).catch((e) => {
          n3.error(RI(a.error, e), S(S({ id: r }, c), c == null ? void 0 : c.error));
        }), t2;
      };
      v51 = (t2, a) => {
        a7({ type: 1, toast: { id: t2, height: a } });
      }, g51 = () => {
        a7({ type: 5, time: Date.now() });
      }, Ru = (t2) => {
        let { toasts: a, pausedAt: c } = n51(t2);
        (0, dr.useEffect)(() => {
          if (c) return;
          let l = Date.now(), i5 = a.map((o) => {
            if (o.duration === 1 / 0) return;
            let n = (o.duration || 0) + o.pauseDuration - (l - o.createdAt);
            if (n < 0) {
              o.visible && n3.dismiss(o.id);
              return;
            }
            return setTimeout(() => n3.dismiss(o.id), n);
          });
          return () => {
            i5.forEach((o) => o && clearTimeout(o));
          };
        }, [a, c]);
        let r = (0, dr.useCallback)(() => {
          c && a7({ type: 6, time: Date.now() });
        }, [c]), e = (0, dr.useCallback)((l, i5) => {
          let { reverseOrder: o = false, gutter: n = 8, defaultPosition: h } = i5 || {}, v = a.filter((d) => (d.position || h) === (l.position || h) && d.height), g = v.findIndex((d) => d.id === l.id), s = v.filter((d, z) => z < g && d.visible).length;
          return v.filter((d) => d.visible).slice(...o ? [s + 1] : [0, s]).reduce((d, z) => d + (z.height || 0) + n, 0);
        }, [a]);
        return { toasts: a, handlers: { updateHeight: v51, startPause: g51, endPause: r, calculateOffset: e } };
      }, ln = n3;
    });
    function EI() {
      return { async: false, baseUrl: null, breaks: false, extensions: null, gfm: true, headerIds: true, headerPrefix: "", highlight: null, langPrefix: "language-", mangle: true, pedantic: false, renderer: null, sanitize: false, sanitizer: null, silent: false, smartypants: false, tokenizer: null, walkTokens: null, xhtml: false };
    }
    function d51(t2) {
      ht = t2;
    }
    function Z2(t2, a) {
      if (a) {
        if (s51.test(t2)) return t2.replace(z51, II);
      } else if (u51.test(t2)) return t2.replace(p51, II);
      return t2;
    }
    function DI(t2) {
      return t2.replace(f51, (a, c) => (c = c.toLowerCase(), c === "colon" ? ":" : c.charAt(0) === "#" ? c.charAt(1) === "x" ? String.fromCharCode(parseInt(c.substring(2), 16)) : String.fromCharCode(+c.substring(1)) : ""));
    }
    function U1(t2, a) {
      t2 = typeof t2 == "string" ? t2 : t2.source, a = a || "";
      let c = { replace: (r, e) => (e = e.source || e, e = e.replace(M51, "$1"), t2 = t2.replace(r, e), c), getRegex: () => new RegExp(t2, a) };
      return c;
    }
    function PI(t2, a, c) {
      if (t2) {
        let r;
        try {
          r = decodeURIComponent(DI(c)).replace(x51, "").toLowerCase();
        } catch (e) {
          return null;
        }
        if (r.indexOf("javascript:") === 0 || r.indexOf("vbscript:") === 0 || r.indexOf("data:") === 0) return null;
      }
      a && !C51.test(c) && (c = w51(a, c));
      try {
        c = encodeURI(c).replace(/%25/g, "%");
      } catch (r) {
        return null;
      }
      return c;
    }
    function w51(t2, a) {
      on[" " + t2] || (L51.test(t2) ? on[" " + t2] = t2 + "/" : on[" " + t2] = nn(t2, "/", true)), t2 = on[" " + t2];
      let c = t2.indexOf(":") === -1;
      return a.substring(0, 2) === "//" ? c ? a : t2.replace(H51, "$1") + a : a.charAt(0) === "/" ? c ? a : t2.replace(V51, "$1") + a : t2 + a;
    }
    function l4(t2) {
      let a = 1, c, r;
      for (; a < arguments.length; a++) {
        c = arguments[a];
        for (r in c) Object.prototype.hasOwnProperty.call(c, r) && (t2[r] = c[r]);
      }
      return t2;
    }
    function GI(t2, a) {
      let c = t2.replace(/\|/g, (l, i5, o) => {
        let n = false, h = i5;
        for (; --h >= 0 && o[h] === "\\"; ) n = !n;
        return n ? "|" : " |";
      }), r = c.split(/ \|/), e = 0;
      if (r[0].trim() || r.shift(), r.length > 0 && !r[r.length - 1].trim() && r.pop(), r.length > a) r.splice(a);
      else for (; r.length < a; ) r.push("");
      for (; e < r.length; e++) r[e] = r[e].trim().replace(/\\\|/g, "|");
      return r;
    }
    function nn(t2, a, c) {
      let r = t2.length;
      if (r === 0) return "";
      let e = 0;
      for (; e < r; ) {
        let l = t2.charAt(r - e - 1);
        if (l === a && !c) e++;
        else if (l !== a && c) e++;
        else break;
      }
      return t2.slice(0, r - e);
    }
    function B51(t2, a) {
      if (t2.indexOf(a[1]) === -1) return -1;
      let c = t2.length, r = 0, e = 0;
      for (; e < c; e++) if (t2[e] === "\\") e++;
      else if (t2[e] === a[0]) r++;
      else if (t2[e] === a[1] && (r--, r < 0)) return e;
      return -1;
    }
    function WI(t2) {
      t2 && t2.sanitize && !t2.silent && console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
    }
    function TI(t2, a) {
      if (a < 1) return "";
      let c = "";
      for (; a > 1; ) a & 1 && (c += t2), a >>= 1, t2 += t2;
      return c + t2;
    }
    function ZI(t2, a, c, r) {
      let e = a.href, l = a.title ? Z2(a.title) : null, i5 = t2[1].replace(/\\([\[\]])/g, "$1");
      if (t2[0].charAt(0) !== "!") {
        r.state.inLink = true;
        let o = { type: "link", raw: c, href: e, title: l, text: i5, tokens: r.inlineTokens(i5) };
        return r.state.inLink = false, o;
      }
      return { type: "image", raw: c, href: e, title: l, text: Z2(i5) };
    }
    function y51(t2, a) {
      let c = t2.match(/^(\s+)(?:```)/);
      if (c === null) return a;
      let r = c[1];
      return a.split("\n").map((e) => {
        let l = e.match(/^\s+/);
        if (l === null) return e;
        let [i5] = l;
        return i5.length >= r.length ? e.slice(r.length) : e;
      }).join("\n");
    }
    function S51(t2) {
      return t2.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…");
    }
    function OI(t2) {
      let a = "", c, r, e = t2.length;
      for (c = 0; c < e; c++) r = t2.charCodeAt(c), Math.random() > 0.5 && (r = "x" + r.toString(16)), a += "&#" + r + ";";
      return a;
    }
    function V1(t2, a, c) {
      if (typeof t2 == "undefined" || t2 === null) throw new Error("marked(): input parameter is undefined or null");
      if (typeof t2 != "string") throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(t2) + ", string expected");
      if (typeof a == "function" && (c = a, a = null), a = l4({}, V1.defaults, a || {}), WI(a), c) {
        let e = a.highlight, l;
        try {
          l = Q6.lex(t2, a);
        } catch (n) {
          return c(n);
        }
        let i5 = function(n) {
          let h;
          if (!n) try {
            a.walkTokens && V1.walkTokens(l, a.walkTokens), h = B5.parse(l, a);
          } catch (v) {
            n = v;
          }
          return a.highlight = e, n ? c(n) : c(null, h);
        };
        if (!e || e.length < 3 || (delete a.highlight, !l.length)) return i5();
        let o = 0;
        V1.walkTokens(l, function(n) {
          n.type === "code" && (o++, setTimeout(() => {
            e(n.text, n.lang, function(h, v) {
              if (h) return i5(h);
              v != null && v !== n.text && (n.text = v, n.escaped = true), o--, o === 0 && i5();
            });
          }, 0));
        }), o === 0 && i5();
        return;
      }
      function r(e) {
        if (e.message += "\nPlease report this to https://github.com/markedjs/marked.", a.silent) return "<p>An error occurred:</p><pre>" + Z2(e.message + "", true) + "</pre>";
        throw e;
      }
      try {
        let e = Q6.lex(t2, a);
        if (a.walkTokens) {
          if (a.async) return Promise.all(V1.walkTokens(e, a.walkTokens)).then(() => B5.parse(e, a)).catch(r);
          V1.walkTokens(e, a.walkTokens);
        }
        return B5.parse(e, a);
      } catch (e) {
        r(e);
      }
    }
    var ht, s51, z51, u51, p51, m51, II, f51, M51, x51, C51, on, L51, H51, V51, hn, zr, H1, m1, Q6, ur, vn, gn, B5, _I = x(() => {
      ht = EI();
      s51 = /[&<>"']/, z51 = /[&<>"']/g, u51 = /[<>"']|&(?!#?\w+;)/, p51 = /[<>"']|&(?!#?\w+;)/g, m51 = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }, II = (t2) => m51[t2];
      f51 = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
      M51 = /(^|[^\[])\^/g;
      x51 = /[^\w:]/g, C51 = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
      on = {}, L51 = /^[^:]+:\/*[^/]*$/, H51 = /^([^:]+:)[\s\S]*$/, V51 = /^([^:]+:\/*[^/]*)[\s\S]*$/;
      hn = { exec: function() {
      } };
      zr = class {
        constructor(a) {
          this.options = a || ht;
        }
        space(a) {
          let c = this.rules.block.newline.exec(a);
          if (c && c[0].length > 0) return { type: "space", raw: c[0] };
        }
        code(a) {
          let c = this.rules.block.code.exec(a);
          if (c) {
            let r = c[0].replace(/^ {1,4}/gm, "");
            return { type: "code", raw: c[0], codeBlockStyle: "indented", text: this.options.pedantic ? r : nn(r, "\n") };
          }
        }
        fences(a) {
          let c = this.rules.block.fences.exec(a);
          if (c) {
            let r = c[0], e = y51(r, c[3] || "");
            return { type: "code", raw: r, lang: c[2] ? c[2].trim() : c[2], text: e };
          }
        }
        heading(a) {
          let c = this.rules.block.heading.exec(a);
          if (c) {
            let r = c[2].trim();
            if (/#$/.test(r)) {
              let e = nn(r, "#");
              (this.options.pedantic || !e || / $/.test(e)) && (r = e.trim());
            }
            return { type: "heading", raw: c[0], depth: c[1].length, text: r, tokens: this.lexer.inline(r) };
          }
        }
        hr(a) {
          let c = this.rules.block.hr.exec(a);
          if (c) return { type: "hr", raw: c[0] };
        }
        blockquote(a) {
          let c = this.rules.block.blockquote.exec(a);
          if (c) {
            let r = c[0].replace(/^ *>[ \t]?/gm, "");
            return { type: "blockquote", raw: c[0], tokens: this.lexer.blockTokens(r, []), text: r };
          }
        }
        list(a) {
          let c = this.rules.block.list.exec(a);
          if (c) {
            let r, e, l, i5, o, n, h, v, g, s, d, z, u = c[1].trim(), f = u.length > 1, p = { type: "list", raw: "", ordered: f, start: f ? +u.slice(0, -1) : "", loose: false, items: [] };
            u = f ? "\\d{1,9}\\".concat(u.slice(-1)) : "\\".concat(u), this.options.pedantic && (u = f ? u : "[*+-]");
            let m = new RegExp("^( {0,3}".concat(u, ")((?:[	 ][^\\n]*)?(?:\\n|$))"));
            for (; a && (z = false, !(!(c = m.exec(a)) || this.rules.block.hr.test(a))); ) {
              if (r = c[0], a = a.substring(r.length), v = c[2].split("\n", 1)[0], g = a.split("\n", 1)[0], this.options.pedantic ? (i5 = 2, d = v.trimLeft()) : (i5 = c[2].search(/[^ ]/), i5 = i5 > 4 ? 1 : i5, d = v.slice(i5), i5 += c[1].length), n = false, !v && /^ *$/.test(g) && (r += g + "\n", a = a.substring(g.length + 1), z = true), !z) {
                let w = new RegExp("^ {0,".concat(Math.min(3, i5 - 1), "}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))")), H = new RegExp("^ {0,".concat(Math.min(3, i5 - 1), "}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)")), y = new RegExp("^ {0,".concat(Math.min(3, i5 - 1), "}(?:```|~~~)")), k = new RegExp("^ {0,".concat(Math.min(3, i5 - 1), "}#"));
                for (; a && (s = a.split("\n", 1)[0], v = s, this.options.pedantic && (v = v.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ")), !(y.test(v) || k.test(v) || w.test(v) || H.test(a))); ) {
                  if (v.search(/[^ ]/) >= i5 || !v.trim()) d += "\n" + v.slice(i5);
                  else if (!n) d += "\n" + v;
                  else break;
                  !n && !v.trim() && (n = true), r += s + "\n", a = a.substring(s.length + 1);
                }
              }
              p.loose || (h ? p.loose = true : /\n *\n *$/.test(r) && (h = true)), this.options.gfm && (e = /^\[[ xX]\] /.exec(d), e && (l = e[0] !== "[ ] ", d = d.replace(/^\[[ xX]\] +/, ""))), p.items.push({ type: "list_item", raw: r, task: !!e, checked: l, loose: false, text: d }), p.raw += r;
            }
            p.items[p.items.length - 1].raw = r.trimRight(), p.items[p.items.length - 1].text = d.trimRight(), p.raw = p.raw.trimRight();
            let M = p.items.length;
            for (o = 0; o < M; o++) {
              this.lexer.state.top = false, p.items[o].tokens = this.lexer.blockTokens(p.items[o].text, []);
              let w = p.items[o].tokens.filter((y) => y.type === "space"), H = w.every((y) => {
                let k = y.raw.split(""), F = 0;
                for (let U of k) if (U === "\n" && (F += 1), F > 1) return true;
                return false;
              });
              !p.loose && w.length && H && (p.loose = true, p.items[o].loose = true);
            }
            return p;
          }
        }
        html(a) {
          let c = this.rules.block.html.exec(a);
          if (c) {
            let r = { type: "html", raw: c[0], pre: !this.options.sanitizer && (c[1] === "pre" || c[1] === "script" || c[1] === "style"), text: c[0] };
            if (this.options.sanitize) {
              let e = this.options.sanitizer ? this.options.sanitizer(c[0]) : Z2(c[0]);
              r.type = "paragraph", r.text = e, r.tokens = this.lexer.inline(e);
            }
            return r;
          }
        }
        def(a) {
          let c = this.rules.block.def.exec(a);
          if (c) return c[3] && (c[3] = c[3].substring(1, c[3].length - 1)), { type: "def", tag: c[1].toLowerCase().replace(/\s+/g, " "), raw: c[0], href: c[2], title: c[3] };
        }
        table(a) {
          let c = this.rules.block.table.exec(a);
          if (c) {
            let r = { type: "table", header: GI(c[1]).map((e) => ({ text: e })), align: c[2].replace(/^ *|\| *$/g, "").split(/ *\| */), rows: c[3] && c[3].trim() ? c[3].replace(/\n[ \t]*$/, "").split("\n") : [] };
            if (r.header.length === r.align.length) {
              r.raw = c[0];
              let e = r.align.length, l, i5, o, n;
              for (l = 0; l < e; l++) /^ *-+: *$/.test(r.align[l]) ? r.align[l] = "right" : /^ *:-+: *$/.test(r.align[l]) ? r.align[l] = "center" : /^ *:-+ *$/.test(r.align[l]) ? r.align[l] = "left" : r.align[l] = null;
              for (e = r.rows.length, l = 0; l < e; l++) r.rows[l] = GI(r.rows[l], r.header.length).map((h) => ({ text: h }));
              for (e = r.header.length, i5 = 0; i5 < e; i5++) r.header[i5].tokens = this.lexer.inline(r.header[i5].text);
              for (e = r.rows.length, i5 = 0; i5 < e; i5++) for (n = r.rows[i5], o = 0; o < n.length; o++) n[o].tokens = this.lexer.inline(n[o].text);
              return r;
            }
          }
        }
        lheading(a) {
          let c = this.rules.block.lheading.exec(a);
          if (c) return { type: "heading", raw: c[0], depth: c[2].charAt(0) === "=" ? 1 : 2, text: c[1], tokens: this.lexer.inline(c[1]) };
        }
        paragraph(a) {
          let c = this.rules.block.paragraph.exec(a);
          if (c) {
            let r = c[1].charAt(c[1].length - 1) === "\n" ? c[1].slice(0, -1) : c[1];
            return { type: "paragraph", raw: c[0], text: r, tokens: this.lexer.inline(r) };
          }
        }
        text(a) {
          let c = this.rules.block.text.exec(a);
          if (c) return { type: "text", raw: c[0], text: c[0], tokens: this.lexer.inline(c[0]) };
        }
        escape(a) {
          let c = this.rules.inline.escape.exec(a);
          if (c) return { type: "escape", raw: c[0], text: Z2(c[1]) };
        }
        tag(a) {
          let c = this.rules.inline.tag.exec(a);
          if (c) return !this.lexer.state.inLink && /^<a /i.test(c[0]) ? this.lexer.state.inLink = true : this.lexer.state.inLink && /^<\/a>/i.test(c[0]) && (this.lexer.state.inLink = false), !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(c[0]) ? this.lexer.state.inRawBlock = true : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(c[0]) && (this.lexer.state.inRawBlock = false), { type: this.options.sanitize ? "text" : "html", raw: c[0], inLink: this.lexer.state.inLink, inRawBlock: this.lexer.state.inRawBlock, text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(c[0]) : Z2(c[0]) : c[0] };
        }
        link(a) {
          let c = this.rules.inline.link.exec(a);
          if (c) {
            let r = c[2].trim();
            if (!this.options.pedantic && /^</.test(r)) {
              if (!/>$/.test(r)) return;
              let i5 = nn(r.slice(0, -1), "\\");
              if ((r.length - i5.length) % 2 === 0) return;
            } else {
              let i5 = B51(c[2], "()");
              if (i5 > -1) {
                let n = (c[0].indexOf("!") === 0 ? 5 : 4) + c[1].length + i5;
                c[2] = c[2].substring(0, i5), c[0] = c[0].substring(0, n).trim(), c[3] = "";
              }
            }
            let e = c[2], l = "";
            if (this.options.pedantic) {
              let i5 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(e);
              i5 && (e = i5[1], l = i5[3]);
            } else l = c[3] ? c[3].slice(1, -1) : "";
            return e = e.trim(), /^</.test(e) && (this.options.pedantic && !/>$/.test(r) ? e = e.slice(1) : e = e.slice(1, -1)), ZI(c, { href: e && e.replace(this.rules.inline._escapes, "$1"), title: l && l.replace(this.rules.inline._escapes, "$1") }, c[0], this.lexer);
          }
        }
        reflink(a, c) {
          let r;
          if ((r = this.rules.inline.reflink.exec(a)) || (r = this.rules.inline.nolink.exec(a))) {
            let e = (r[2] || r[1]).replace(/\s+/g, " ");
            if (e = c[e.toLowerCase()], !e || !e.href) {
              let l = r[0].charAt(0);
              return { type: "text", raw: l, text: l };
            }
            return ZI(r, e, r[0], this.lexer);
          }
        }
        emStrong(a, c, r = "") {
          let e = this.rules.inline.emStrong.lDelim.exec(a);
          if (!e || e[3] && r.match(/[\p{L}\p{N}]/u)) return;
          let l = e[1] || e[2] || "";
          if (!l || l && (r === "" || this.rules.inline.punctuation.exec(r))) {
            let i5 = e[0].length - 1, o, n, h = i5, v = 0, g = e[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
            for (g.lastIndex = 0, c = c.slice(-1 * a.length + i5); (e = g.exec(c)) != null; ) {
              if (o = e[1] || e[2] || e[3] || e[4] || e[5] || e[6], !o) continue;
              if (n = o.length, e[3] || e[4]) {
                h += n;
                continue;
              } else if ((e[5] || e[6]) && i5 % 3 && !((i5 + n) % 3)) {
                v += n;
                continue;
              }
              if (h -= n, h > 0) continue;
              if (n = Math.min(n, n + h + v), Math.min(i5, n) % 2) {
                let d = a.slice(1, i5 + e.index + n);
                return { type: "em", raw: a.slice(0, i5 + e.index + n + 1), text: d, tokens: this.lexer.inlineTokens(d) };
              }
              let s = a.slice(2, i5 + e.index + n - 1);
              return { type: "strong", raw: a.slice(0, i5 + e.index + n + 1), text: s, tokens: this.lexer.inlineTokens(s) };
            }
          }
        }
        codespan(a) {
          let c = this.rules.inline.code.exec(a);
          if (c) {
            let r = c[2].replace(/\n/g, " "), e = /[^ ]/.test(r), l = /^ /.test(r) && / $/.test(r);
            return e && l && (r = r.substring(1, r.length - 1)), r = Z2(r, true), { type: "codespan", raw: c[0], text: r };
          }
        }
        br(a) {
          let c = this.rules.inline.br.exec(a);
          if (c) return { type: "br", raw: c[0] };
        }
        del(a) {
          let c = this.rules.inline.del.exec(a);
          if (c) return { type: "del", raw: c[0], text: c[2], tokens: this.lexer.inlineTokens(c[2]) };
        }
        autolink(a, c) {
          let r = this.rules.inline.autolink.exec(a);
          if (r) {
            let e, l;
            return r[2] === "@" ? (e = Z2(this.options.mangle ? c(r[1]) : r[1]), l = "mailto:" + e) : (e = Z2(r[1]), l = e), { type: "link", raw: r[0], text: e, href: l, tokens: [{ type: "text", raw: e, text: e }] };
          }
        }
        url(a, c) {
          let r;
          if (r = this.rules.inline.url.exec(a)) {
            let e, l;
            if (r[2] === "@") e = Z2(this.options.mangle ? c(r[0]) : r[0]), l = "mailto:" + e;
            else {
              let i5;
              do
                i5 = r[0], r[0] = this.rules.inline._backpedal.exec(r[0])[0];
              while (i5 !== r[0]);
              e = Z2(r[0]), r[1] === "www." ? l = "http://" + e : l = e;
            }
            return { type: "link", raw: r[0], text: e, href: l, tokens: [{ type: "text", raw: e, text: e }] };
          }
        }
        inlineText(a, c) {
          let r = this.rules.inline.text.exec(a);
          if (r) {
            let e;
            return this.lexer.state.inRawBlock ? e = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(r[0]) : Z2(r[0]) : r[0] : e = Z2(this.options.smartypants ? c(r[0]) : r[0]), { type: "text", raw: r[0], text: e };
          }
        }
      }, H1 = { newline: /^(?: *(?:\n|$))+/, code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/, fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/, hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/, heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/, blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/, list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/, html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))", def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/, table: hn, lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/, _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/, text: /^[^\n]+/ };
      H1._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
      H1._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
      H1.def = U1(H1.def).replace("label", H1._label).replace("title", H1._title).getRegex();
      H1.bullet = /(?:[*+-]|\d{1,9}[.)])/;
      H1.listItemStart = U1(/^( *)(bull) */).replace("bull", H1.bullet).getRegex();
      H1.list = U1(H1.list).replace(/bull/g, H1.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + H1.def.source + ")").getRegex();
      H1._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
      H1._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
      H1.html = U1(H1.html, "i").replace("comment", H1._comment).replace("tag", H1._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
      H1.paragraph = U1(H1._paragraph).replace("hr", H1.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", H1._tag).getRegex();
      H1.blockquote = U1(H1.blockquote).replace("paragraph", H1.paragraph).getRegex();
      H1.normal = l4({}, H1);
      H1.gfm = l4({}, H1.normal, { table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)" });
      H1.gfm.table = U1(H1.gfm.table).replace("hr", H1.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", H1._tag).getRegex();
      H1.gfm.paragraph = U1(H1._paragraph).replace("hr", H1.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", H1.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", H1._tag).getRegex();
      H1.pedantic = l4({}, H1.normal, { html: U1(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", H1._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(), def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/, heading: /^(#{1,6})(.*)(?:\n+|$)/, fences: hn, paragraph: U1(H1.normal._paragraph).replace("hr", H1.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", H1.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex() });
      m1 = { escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/, autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/, url: hn, tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/, reflink: /^!?\[(label)\]\[(ref)\]/, nolink: /^!?\[(ref)\](?:\[\])?/, reflinkSearch: "reflink|nolink(?!\\()", emStrong: { lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/, rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/, rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ }, code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/, br: /^( {2,}|\\)\n(?!\s*$)/, del: hn, text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/, punctuation: /^([\spunctuation])/ };
      m1._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
      m1.punctuation = U1(m1.punctuation).replace(/punctuation/g, m1._punctuation).getRegex();
      m1.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
      m1.escapedEmSt = /\\\*|\\_/g;
      m1._comment = U1(H1._comment).replace("(?:-->|$)", "-->").getRegex();
      m1.emStrong.lDelim = U1(m1.emStrong.lDelim).replace(/punct/g, m1._punctuation).getRegex();
      m1.emStrong.rDelimAst = U1(m1.emStrong.rDelimAst, "g").replace(/punct/g, m1._punctuation).getRegex();
      m1.emStrong.rDelimUnd = U1(m1.emStrong.rDelimUnd, "g").replace(/punct/g, m1._punctuation).getRegex();
      m1._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
      m1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
      m1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
      m1.autolink = U1(m1.autolink).replace("scheme", m1._scheme).replace("email", m1._email).getRegex();
      m1._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
      m1.tag = U1(m1.tag).replace("comment", m1._comment).replace("attribute", m1._attribute).getRegex();
      m1._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
      m1._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
      m1._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
      m1.link = U1(m1.link).replace("label", m1._label).replace("href", m1._href).replace("title", m1._title).getRegex();
      m1.reflink = U1(m1.reflink).replace("label", m1._label).replace("ref", H1._label).getRegex();
      m1.nolink = U1(m1.nolink).replace("ref", H1._label).getRegex();
      m1.reflinkSearch = U1(m1.reflinkSearch, "g").replace("reflink", m1.reflink).replace("nolink", m1.nolink).getRegex();
      m1.normal = l4({}, m1);
      m1.pedantic = l4({}, m1.normal, { strong: { start: /^__|\*\*/, middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/, endAst: /\*\*(?!\*)/g, endUnd: /__(?!_)/g }, em: { start: /^_|\*/, middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/, endAst: /\*(?!\*)/g, endUnd: /_(?!_)/g }, link: U1(/^!?\[(label)\]\((.*?)\)/).replace("label", m1._label).getRegex(), reflink: U1(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", m1._label).getRegex() });
      m1.gfm = l4({}, m1.normal, { escape: U1(m1.escape).replace("])", "~|])").getRegex(), _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/, url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/, del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/, text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/ });
      m1.gfm.url = U1(m1.gfm.url, "i").replace("email", m1.gfm._extended_email).getRegex();
      m1.breaks = l4({}, m1.gfm, { br: U1(m1.br).replace("{2,}", "*").getRegex(), text: U1(m1.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex() });
      Q6 = class t2 {
        constructor(a) {
          this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = a || ht, this.options.tokenizer = this.options.tokenizer || new zr(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = { inLink: false, inRawBlock: false, top: true };
          let c = { block: H1.normal, inline: m1.normal };
          this.options.pedantic ? (c.block = H1.pedantic, c.inline = m1.pedantic) : this.options.gfm && (c.block = H1.gfm, this.options.breaks ? c.inline = m1.breaks : c.inline = m1.gfm), this.tokenizer.rules = c;
        }
        static get rules() {
          return { block: H1, inline: m1 };
        }
        static lex(a, c) {
          return new t2(c).lex(a);
        }
        static lexInline(a, c) {
          return new t2(c).inlineTokens(a);
        }
        lex(a) {
          a = a.replace(/\r\n|\r/g, "\n"), this.blockTokens(a, this.tokens);
          let c;
          for (; c = this.inlineQueue.shift(); ) this.inlineTokens(c.src, c.tokens);
          return this.tokens;
        }
        blockTokens(a, c = []) {
          this.options.pedantic ? a = a.replace(/\t/g, "    ").replace(/^ +$/gm, "") : a = a.replace(/^( *)(\t+)/gm, (o, n, h) => n + "    ".repeat(h.length));
          let r, e, l, i5;
          for (; a; ) if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((o) => (r = o.call({ lexer: this }, a, c)) ? (a = a.substring(r.raw.length), c.push(r), true) : false))) {
            if (r = this.tokenizer.space(a)) {
              a = a.substring(r.raw.length), r.raw.length === 1 && c.length > 0 ? c[c.length - 1].raw += "\n" : c.push(r);
              continue;
            }
            if (r = this.tokenizer.code(a)) {
              a = a.substring(r.raw.length), e = c[c.length - 1], e && (e.type === "paragraph" || e.type === "text") ? (e.raw += "\n" + r.raw, e.text += "\n" + r.text, this.inlineQueue[this.inlineQueue.length - 1].src = e.text) : c.push(r);
              continue;
            }
            if (r = this.tokenizer.fences(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.heading(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.hr(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.blockquote(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.list(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.html(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.def(a)) {
              a = a.substring(r.raw.length), e = c[c.length - 1], e && (e.type === "paragraph" || e.type === "text") ? (e.raw += "\n" + r.raw, e.text += "\n" + r.raw, this.inlineQueue[this.inlineQueue.length - 1].src = e.text) : this.tokens.links[r.tag] || (this.tokens.links[r.tag] = { href: r.href, title: r.title });
              continue;
            }
            if (r = this.tokenizer.table(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.lheading(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (l = a, this.options.extensions && this.options.extensions.startBlock) {
              let o = 1 / 0, n = a.slice(1), h;
              this.options.extensions.startBlock.forEach(function(v) {
                h = v.call({ lexer: this }, n), typeof h == "number" && h >= 0 && (o = Math.min(o, h));
              }), o < 1 / 0 && o >= 0 && (l = a.substring(0, o + 1));
            }
            if (this.state.top && (r = this.tokenizer.paragraph(l))) {
              e = c[c.length - 1], i5 && e.type === "paragraph" ? (e.raw += "\n" + r.raw, e.text += "\n" + r.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = e.text) : c.push(r), i5 = l.length !== a.length, a = a.substring(r.raw.length);
              continue;
            }
            if (r = this.tokenizer.text(a)) {
              a = a.substring(r.raw.length), e = c[c.length - 1], e && e.type === "text" ? (e.raw += "\n" + r.raw, e.text += "\n" + r.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = e.text) : c.push(r);
              continue;
            }
            if (a) {
              let o = "Infinite loop on byte: " + a.charCodeAt(0);
              if (this.options.silent) {
                console.error(o);
                break;
              } else throw new Error(o);
            }
          }
          return this.state.top = true, c;
        }
        inline(a, c = []) {
          return this.inlineQueue.push({ src: a, tokens: c }), c;
        }
        inlineTokens(a, c = []) {
          let r, e, l, i5 = a, o, n, h;
          if (this.tokens.links) {
            let v = Object.keys(this.tokens.links);
            if (v.length > 0) for (; (o = this.tokenizer.rules.inline.reflinkSearch.exec(i5)) != null; ) v.includes(o[0].slice(o[0].lastIndexOf("[") + 1, -1)) && (i5 = i5.slice(0, o.index) + "[" + TI("a", o[0].length - 2) + "]" + i5.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
          }
          for (; (o = this.tokenizer.rules.inline.blockSkip.exec(i5)) != null; ) i5 = i5.slice(0, o.index) + "[" + TI("a", o[0].length - 2) + "]" + i5.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
          for (; (o = this.tokenizer.rules.inline.escapedEmSt.exec(i5)) != null; ) i5 = i5.slice(0, o.index) + "++" + i5.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
          for (; a; ) if (n || (h = ""), n = false, !(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((v) => (r = v.call({ lexer: this }, a, c)) ? (a = a.substring(r.raw.length), c.push(r), true) : false))) {
            if (r = this.tokenizer.escape(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.tag(a)) {
              a = a.substring(r.raw.length), e = c[c.length - 1], e && r.type === "text" && e.type === "text" ? (e.raw += r.raw, e.text += r.text) : c.push(r);
              continue;
            }
            if (r = this.tokenizer.link(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.reflink(a, this.tokens.links)) {
              a = a.substring(r.raw.length), e = c[c.length - 1], e && r.type === "text" && e.type === "text" ? (e.raw += r.raw, e.text += r.text) : c.push(r);
              continue;
            }
            if (r = this.tokenizer.emStrong(a, i5, h)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.codespan(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.br(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.del(a)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (r = this.tokenizer.autolink(a, OI)) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (!this.state.inLink && (r = this.tokenizer.url(a, OI))) {
              a = a.substring(r.raw.length), c.push(r);
              continue;
            }
            if (l = a, this.options.extensions && this.options.extensions.startInline) {
              let v = 1 / 0, g = a.slice(1), s;
              this.options.extensions.startInline.forEach(function(d) {
                s = d.call({ lexer: this }, g), typeof s == "number" && s >= 0 && (v = Math.min(v, s));
              }), v < 1 / 0 && v >= 0 && (l = a.substring(0, v + 1));
            }
            if (r = this.tokenizer.inlineText(l, S51)) {
              a = a.substring(r.raw.length), r.raw.slice(-1) !== "_" && (h = r.raw.slice(-1)), n = true, e = c[c.length - 1], e && e.type === "text" ? (e.raw += r.raw, e.text += r.text) : c.push(r);
              continue;
            }
            if (a) {
              let v = "Infinite loop on byte: " + a.charCodeAt(0);
              if (this.options.silent) {
                console.error(v);
                break;
              } else throw new Error(v);
            }
          }
          return c;
        }
      }, ur = class {
        constructor(a) {
          this.options = a || ht;
        }
        code(a, c, r) {
          let e = (c || "").match(/\S*/)[0];
          if (this.options.highlight) {
            let l = this.options.highlight(a, e);
            l != null && l !== a && (r = true, a = l);
          }
          return a = a.replace(/\n$/, "") + "\n", e ? '<pre><code class="' + this.options.langPrefix + Z2(e, true) + '">' + (r ? a : Z2(a, true)) + "</code></pre>\n" : "<pre><code>" + (r ? a : Z2(a, true)) + "</code></pre>\n";
        }
        blockquote(a) {
          return "<blockquote>\n".concat(a, "</blockquote>\n");
        }
        html(a) {
          return a;
        }
        heading(a, c, r, e) {
          if (this.options.headerIds) {
            let l = this.options.headerPrefix + e.slug(r);
            return "<h".concat(c, ' id="').concat(l, '">').concat(a, "</h").concat(c, ">\n");
          }
          return "<h".concat(c, ">").concat(a, "</h").concat(c, ">\n");
        }
        hr() {
          return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
        }
        list(a, c, r) {
          let e = c ? "ol" : "ul", l = c && r !== 1 ? ' start="' + r + '"' : "";
          return "<" + e + l + ">\n" + a + "</" + e + ">\n";
        }
        listitem(a) {
          return "<li>".concat(a, "</li>\n");
        }
        checkbox(a) {
          return "<input " + (a ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
        }
        paragraph(a) {
          return "<p>".concat(a, "</p>\n");
        }
        table(a, c) {
          return c && (c = "<tbody>".concat(c, "</tbody>")), "<table>\n<thead>\n" + a + "</thead>\n" + c + "</table>\n";
        }
        tablerow(a) {
          return "<tr>\n".concat(a, "</tr>\n");
        }
        tablecell(a, c) {
          let r = c.header ? "th" : "td";
          return (c.align ? "<".concat(r, ' align="').concat(c.align, '">') : "<".concat(r, ">")) + a + "</".concat(r, ">\n");
        }
        strong(a) {
          return "<strong>".concat(a, "</strong>");
        }
        em(a) {
          return "<em>".concat(a, "</em>");
        }
        codespan(a) {
          return "<code>".concat(a, "</code>");
        }
        br() {
          return this.options.xhtml ? "<br/>" : "<br>";
        }
        del(a) {
          return "<del>".concat(a, "</del>");
        }
        link(a, c, r) {
          if (a = PI(this.options.sanitize, this.options.baseUrl, a), a === null) return r;
          let e = '<a href="' + Z2(a) + '"';
          return c && (e += ' title="' + c + '"'), e += ">" + r + "</a>", e;
        }
        image(a, c, r) {
          if (a = PI(this.options.sanitize, this.options.baseUrl, a), a === null) return r;
          let e = '<img src="'.concat(a, '" alt="').concat(r, '"');
          return c && (e += ' title="'.concat(c, '"')), e += this.options.xhtml ? "/>" : ">", e;
        }
        text(a) {
          return a;
        }
      }, vn = class {
        strong(a) {
          return a;
        }
        em(a) {
          return a;
        }
        codespan(a) {
          return a;
        }
        del(a) {
          return a;
        }
        html(a) {
          return a;
        }
        text(a) {
          return a;
        }
        link(a, c, r) {
          return "" + r;
        }
        image(a, c, r) {
          return "" + r;
        }
        br() {
          return "";
        }
      }, gn = class {
        constructor() {
          this.seen = {};
        }
        serialize(a) {
          return a.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
        }
        getNextSafeSlug(a, c) {
          let r = a, e = 0;
          if (this.seen.hasOwnProperty(r)) {
            e = this.seen[a];
            do
              e++, r = a + "-" + e;
            while (this.seen.hasOwnProperty(r));
          }
          return c || (this.seen[a] = e, this.seen[r] = 0), r;
        }
        slug(a, c = {}) {
          let r = this.serialize(a);
          return this.getNextSafeSlug(r, c.dryrun);
        }
      }, B5 = class t2 {
        constructor(a) {
          this.options = a || ht, this.options.renderer = this.options.renderer || new ur(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.textRenderer = new vn(), this.slugger = new gn();
        }
        static parse(a, c) {
          return new t2(c).parse(a);
        }
        static parseInline(a, c) {
          return new t2(c).parseInline(a);
        }
        parse(a, c = true) {
          let r = "", e, l, i5, o, n, h, v, g, s, d, z, u, f, p, m, M, w, H, y, k = a.length;
          for (e = 0; e < k; e++) {
            if (d = a[e], this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[d.type] && (y = this.options.extensions.renderers[d.type].call({ parser: this }, d), y !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(d.type))) {
              r += y || "";
              continue;
            }
            switch (d.type) {
              case "space":
                continue;
              case "hr": {
                r += this.renderer.hr();
                continue;
              }
              case "heading": {
                r += this.renderer.heading(this.parseInline(d.tokens), d.depth, DI(this.parseInline(d.tokens, this.textRenderer)), this.slugger);
                continue;
              }
              case "code": {
                r += this.renderer.code(d.text, d.lang, d.escaped);
                continue;
              }
              case "table": {
                for (g = "", v = "", o = d.header.length, l = 0; l < o; l++) v += this.renderer.tablecell(this.parseInline(d.header[l].tokens), { header: true, align: d.align[l] });
                for (g += this.renderer.tablerow(v), s = "", o = d.rows.length, l = 0; l < o; l++) {
                  for (h = d.rows[l], v = "", n = h.length, i5 = 0; i5 < n; i5++) v += this.renderer.tablecell(this.parseInline(h[i5].tokens), { header: false, align: d.align[i5] });
                  s += this.renderer.tablerow(v);
                }
                r += this.renderer.table(g, s);
                continue;
              }
              case "blockquote": {
                s = this.parse(d.tokens), r += this.renderer.blockquote(s);
                continue;
              }
              case "list": {
                for (z = d.ordered, u = d.start, f = d.loose, o = d.items.length, s = "", l = 0; l < o; l++) m = d.items[l], M = m.checked, w = m.task, p = "", m.task && (H = this.renderer.checkbox(M), f ? m.tokens.length > 0 && m.tokens[0].type === "paragraph" ? (m.tokens[0].text = H + " " + m.tokens[0].text, m.tokens[0].tokens && m.tokens[0].tokens.length > 0 && m.tokens[0].tokens[0].type === "text" && (m.tokens[0].tokens[0].text = H + " " + m.tokens[0].tokens[0].text)) : m.tokens.unshift({ type: "text", text: H }) : p += H), p += this.parse(m.tokens, f), s += this.renderer.listitem(p, w, M);
                r += this.renderer.list(s, z, u);
                continue;
              }
              case "html": {
                r += this.renderer.html(d.text);
                continue;
              }
              case "paragraph": {
                r += this.renderer.paragraph(this.parseInline(d.tokens));
                continue;
              }
              case "text": {
                for (s = d.tokens ? this.parseInline(d.tokens) : d.text; e + 1 < k && a[e + 1].type === "text"; ) d = a[++e], s += "\n" + (d.tokens ? this.parseInline(d.tokens) : d.text);
                r += c ? this.renderer.paragraph(s) : s;
                continue;
              }
              default: {
                let F = 'Token with "' + d.type + '" type was not found.';
                if (this.options.silent) {
                  console.error(F);
                  return;
                } else throw new Error(F);
              }
            }
          }
          return r;
        }
        parseInline(a, c) {
          c = c || this.renderer;
          let r = "", e, l, i5, o = a.length;
          for (e = 0; e < o; e++) {
            if (l = a[e], this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[l.type] && (i5 = this.options.extensions.renderers[l.type].call({ parser: this }, l), i5 !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(l.type))) {
              r += i5 || "";
              continue;
            }
            switch (l.type) {
              case "escape": {
                r += c.text(l.text);
                break;
              }
              case "html": {
                r += c.html(l.text);
                break;
              }
              case "link": {
                r += c.link(l.href, l.title, this.parseInline(l.tokens, c));
                break;
              }
              case "image": {
                r += c.image(l.href, l.title, l.text);
                break;
              }
              case "strong": {
                r += c.strong(this.parseInline(l.tokens, c));
                break;
              }
              case "em": {
                r += c.em(this.parseInline(l.tokens, c));
                break;
              }
              case "codespan": {
                r += c.codespan(l.text);
                break;
              }
              case "br": {
                r += c.br();
                break;
              }
              case "del": {
                r += c.del(this.parseInline(l.tokens, c));
                break;
              }
              case "text": {
                r += c.text(l.text);
                break;
              }
              default: {
                let n = 'Token with "' + l.type + '" type was not found.';
                if (this.options.silent) {
                  console.error(n);
                  return;
                } else throw new Error(n);
              }
            }
          }
          return r;
        }
      };
      V1.options = V1.setOptions = function(t2) {
        return l4(V1.defaults, t2), d51(V1.defaults), V1;
      };
      V1.getDefaults = EI;
      V1.defaults = ht;
      V1.use = function(...t2) {
        let a = l4({}, ...t2), c = V1.defaults.extensions || { renderers: {}, childTokens: {} }, r;
        t2.forEach((e) => {
          if (e.extensions && (r = true, e.extensions.forEach((l) => {
            if (!l.name) throw new Error("extension name required");
            if (l.renderer) {
              let i5 = c.renderers ? c.renderers[l.name] : null;
              i5 ? c.renderers[l.name] = function(...o) {
                let n = l.renderer.apply(this, o);
                return n === false && (n = i5.apply(this, o)), n;
              } : c.renderers[l.name] = l.renderer;
            }
            if (l.tokenizer) {
              if (!l.level || l.level !== "block" && l.level !== "inline") throw new Error("extension level must be 'block' or 'inline'");
              c[l.level] ? c[l.level].unshift(l.tokenizer) : c[l.level] = [l.tokenizer], l.start && (l.level === "block" ? c.startBlock ? c.startBlock.push(l.start) : c.startBlock = [l.start] : l.level === "inline" && (c.startInline ? c.startInline.push(l.start) : c.startInline = [l.start]));
            }
            l.childTokens && (c.childTokens[l.name] = l.childTokens);
          })), e.renderer) {
            let l = V1.defaults.renderer || new ur();
            for (let i5 in e.renderer) {
              let o = l[i5];
              l[i5] = (...n) => {
                let h = e.renderer[i5].apply(l, n);
                return h === false && (h = o.apply(l, n)), h;
              };
            }
            a.renderer = l;
          }
          if (e.tokenizer) {
            let l = V1.defaults.tokenizer || new zr();
            for (let i5 in e.tokenizer) {
              let o = l[i5];
              l[i5] = (...n) => {
                let h = e.tokenizer[i5].apply(l, n);
                return h === false && (h = o.apply(l, n)), h;
              };
            }
            a.tokenizer = l;
          }
          if (e.walkTokens) {
            let l = V1.defaults.walkTokens;
            a.walkTokens = function(i5) {
              let o = [];
              return o.push(e.walkTokens.call(this, i5)), l && (o = o.concat(l.call(this, i5))), o;
            };
          }
          r && (a.extensions = c), V1.setOptions(a);
        });
      };
      V1.walkTokens = function(t2, a) {
        let c = [];
        for (let r of t2) switch (c = c.concat(a.call(V1, r)), r.type) {
          case "table": {
            for (let e of r.header) c = c.concat(V1.walkTokens(e.tokens, a));
            for (let e of r.rows) for (let l of e) c = c.concat(V1.walkTokens(l.tokens, a));
            break;
          }
          case "list": {
            c = c.concat(V1.walkTokens(r.items, a));
            break;
          }
          default:
            V1.defaults.extensions && V1.defaults.extensions.childTokens && V1.defaults.extensions.childTokens[r.type] ? V1.defaults.extensions.childTokens[r.type].forEach(function(e) {
              c = c.concat(V1.walkTokens(r[e], a));
            }) : r.tokens && (c = c.concat(V1.walkTokens(r.tokens, a)));
        }
        return c;
      };
      V1.parseInline = function(t2, a) {
        if (typeof t2 == "undefined" || t2 === null) throw new Error("marked.parseInline(): input parameter is undefined or null");
        if (typeof t2 != "string") throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(t2) + ", string expected");
        a = l4({}, V1.defaults, a || {}), WI(a);
        try {
          let c = Q6.lexInline(t2, a);
          return a.walkTokens && V1.walkTokens(c, a.walkTokens), B5.parseInline(c, a);
        } catch (c) {
          if (c.message += "\nPlease report this to https://github.com/markedjs/marked.", a.silent) return "<p>An error occurred:</p><pre>" + Z2(c.message + "", true) + "</pre>";
          throw c;
        }
      };
      V1.Parser = B5;
      V1.parser = B5.parse;
      V1.Renderer = ur;
      V1.TextRenderer = vn;
      V1.Lexer = Q6;
      V1.lexer = Q6.lex;
      V1.Tokenizer = zr;
      V1.Slugger = gn;
      V1.parse = V1;
      V1.options, V1.setOptions, V1.use, V1.walkTokens, V1.parseInline, B5.parse, Q6.lex;
    });
    var jI, k51, dn, bu = x(() => {
      c1();
      gr();
      k51 = B(w5)(jI || (jI = V(["\n  padding: 6px;\n"]))), dn = k51;
    });
    var u2, Fu, zn, Iu, NI, A51, UI, rP, KI, R51, $I, qI, QI, b51, F51, XI, I51, sn, c7, YI, P51, JI, G51, tP, T51, aP, Z51, cP, O51, eP, lP, Pu, vt = x(() => {
      u2 = I(G());
      FI();
      c1();
      G1();
      M1();
      f1();
      _I();
      nt();
      bu();
      Fu = ({ title: t2, message: a }) => "".concat(t2, " ").concat(a), zn = /* @__PURE__ */ (() => {
        let t2 = /* @__PURE__ */ new Map();
        return { add: (a) => {
          let c = Fu(a);
          t2.has(c) ? t2.set(c, t2.get(c) + 1) : t2.set(c, 1);
        }, delete: (a) => {
          let c = Fu(a);
          t2.has(c) && t2.get(c) > 1 ? t2.set(c, t2.get(c) - 1) : t2.delete(c);
        }, clear: () => {
          t2.clear();
        }, check: (a) => t2.has(Fu(a)) };
      })(), Iu = /* @__PURE__ */ (() => {
        let t2 = /* @__PURE__ */ new Map();
        return { add: (a) => {
          t2.has(a) ? t2.set(a, t2.get(a) + 1) : t2.set(a, 1);
        }, delete: (a) => {
          t2.has(a) && t2.get(a) > 1 ? t2.set(a, t2.get(a) - 1) : t2.delete(a);
        }, clear: () => {
          t2.clear();
        }, check: (a) => t2.has(a), get types() {
          return Array.of(...t2.keys());
        } };
      })(), A51 = B.div(NI || (NI = V(["\n  width: 100%;\n  border-radius: 4px;\n  display: flex;\n  gap: 12px;\n  ", ";\n  background-color: rgba(40, 43, 47, 0.8);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25), 0 2px 6px rgba(0, 0, 0, 0.15);\n  backdrop-filter: blur(14px);\n\n  @supports not (backdrop-filter: blur()) {\n    background: rgba(40, 43, 47, 0.95);\n  }\n"])), C1), rP = B.div(UI || (UI = V(["\n  font-size: 14px;\n  font-weight: bold;\n  color: #fff;\n"]))), R51 = B.div(KI || (KI = V(["\n  flex: 1;\n  flex-direction: column;\n  width: 0;\n  display: flex;\n  padding: 16px 0;\n  gap: 12px;\n"]))), qI = B.div($I || ($I = V(["\n  color: #b4b4b4;\n  font-size: 12px;\n  line-height: 1.4;\n\n  a {\n    color: rgba(255, 255, 255, 0.9);\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  strong {\n    font-weight: bold;\n    color: #d5d5d5;\n  }\n\n  p {\n    margin-bottom: 8px;\n  }\n\n  code {\n    font-family: monospace;\n    background: rgba(0, 0, 0, 0.3);\n    padding: 1px 1px 2px;\n    border-radius: 4px;\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    white-space: pre-wrap;\n  }\n\n  pre > code {\n    white-space: pre;\n    display: block;\n    overflow: auto;\n    padding: 4px;\n  }\n\n  pre {\n    white-space: pre-wrap;\n    margin-bottom: 8px;\n  }\n"]))), b51 = B.button(QI || (QI = V(["\n  color: rgba(255, 255, 255, 0.9);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: none;\n  border: none;\n  padding-left: 12px;\n  padding-right: 12px;\n  border-left: 1px solid rgba(255, 255, 255, 0.05);\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.05);\n  }\n"]))), F51 = { info: "#3b82f6", success: "#10b981", warning: "#f59e0b", error: "#ef4444" }, I51 = B.div(XI || (XI = V(["\n  display: flex;\n  justify-content: center;\n  margin-left: 12px;\n  padding-top: 21px;\n\n  ::before {\n    content: '';\n    width: 8px;\n    height: 8px;\n    border-radius: 999999px;\n    background-color: ", ";\n  }\n"])), ({ type: t2 }) => F51[t2]), sn = (t2) => (a, c, r = [], e = false) => {
        (e || !zn.check({ title: a, message: c })) && (zn.add({ title: a, message: c }), Iu.add(t2), ln.custom((l) => u2.default.createElement(A51, null, u2.default.createElement(I51, { type: t2 }), u2.default.createElement(R51, null, u2.default.createElement(rP, null, a), u2.default.createElement(qI, { dangerouslySetInnerHTML: { __html: V1.parse(c) } }), r.length > 0 && u2.default.createElement(qI, null, u2.default.createElement("span", null, "Docs:", " ", r.map((i5, o) => u2.default.createElement(u2.Fragment, { key: o }, o > 0 && ", ", u2.default.createElement("a", { target: "_blank", href: i5.url }, i5.title)))))), u2.default.createElement(b51, { onClick: () => {
          ln.remove(l.id), zn.delete({ title: a, message: c }), Iu.delete(t2);
        } }, "Close")), { duration: 1 / 0 }));
      }, c7 = { warning: sn("warning"), success: sn("success"), info: sn("info"), error: sn("error") }, P51 = B.div(YI || (YI = V(["\n  display: flex;\n  justify-content: ", ";\n  gap: 12px;\n"])), ({ align: t2 }) => t2 === "center" ? "center" : "flex-end"), G51 = B.button(JI || (JI = V(["\n  position: relative;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  ", ";\n  background-color: rgba(40, 43, 47, 0.8);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25), 0 2px 6px rgba(0, 0, 0, 0.15);\n  backdrop-filter: blur(14px);\n  border: none;\n  padding: 12px;\n  color: #fff;\n  overflow: hidden;\n\n  ::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n  }\n\n  :hover::before {\n    background: ", ";\n  }\n\n  @supports not (backdrop-filter: blur()) {\n    background: rgba(40, 43, 47, 0.95);\n  }\n"])), C1, ({ danger: t2 }) => t2 ? "rgba(255, 0, 0, 0.1)" : "rgba(255, 255, 255, 0.1)"), T51 = B.div(tP || (tP = V(["\n  z-index: 10;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  position: fixed;\n  right: 92px;\n  top: 50px;\n  width: 500px;\n  height: 85vh;\n  min-height: 400px;\n"]))), Z51 = B.div(aP || (aP = V(["\n  overflow: hidden;\n  pointer-events: auto;\n  border-radius: 4px;\n\n  & > div {\n    display: flex;\n    flex-direction: column-reverse;\n    gap: 8px;\n    overflow: scroll;\n    height: 100%;\n  }\n"]))), O51 = B.div(cP || (cP = V(["\n  width: fit-content;\n  padding: 8px;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  color: #b4b4b4;\n  font-size: 12px;\n  line-height: 1.4;\n"]))), eP = () => {
        let { hasNotifications: t2 } = Pu();
        return R3({ enabled: !t2 }, () => u2.default.createElement(dn, null, u2.default.createElement(O51, null, u2.default.createElement(rP, null, "No notifications"), "Notifications will appear here when you get them.")));
      }, lP = () => {
        var l;
        let { toasts: t2, handlers: a } = Ru(), { startPause: c, endPause: r } = a, e = (l = s1(T().atomP.ahistoric.pinNotifications)) != null ? l : false;
        return u2.default.createElement(T51, null, e ? t2.length > 0 && u2.default.createElement(Z51, { onMouseEnter: c, onMouseLeave: r }, u2.default.createElement("div", null, t2.map((i5) => u2.default.createElement("div", { key: i5.id }, i5.message(i5))))) : null, u2.default.createElement(P51, { align: "side" }, e && t2.length > 0 && u2.default.createElement(G51, { onClick: () => {
          Iu.clear(), zn.clear(), ln.remove();
        }, danger: true }, "Clear")));
      }, Pu = () => {
        let { toasts: t2 } = Ru();
        return { hasNotifications: t2.length > 0 };
      };
    });
    function pr(t2, a) {
      var o;
      let c = Object.values((o = (0, iP.val)(t2.pointers.historic.sheetsById)) != null ? o : {}), r = c.flatMap((n) => {
        var h;
        return Object.values((h = n == null ? void 0 : n.staticOverrides.byObject) != null ? h : {});
      }).flatMap((n) => Object.values(n != null ? n : {})), l = [...c.flatMap((n) => {
        var h, v;
        return Object.values((v = (h = n == null ? void 0 : n.sequence) == null ? void 0 : h.tracksByObject) != null ? v : {});
      }).flatMap((n) => {
        var h;
        return Object.values((h = n == null ? void 0 : n.trackData) != null ? h : {});
      }).flatMap((n) => n == null ? void 0 : n.keyframes).map((n) => n == null ? void 0 : n.value)];
      return r.forEach((n) => {
        q5(n, (h) => {
          l.push(h);
        }, []);
      }), l.filter((n) => (n == null ? void 0 : n.type) && typeof (n == null ? void 0 : n.type) == "string").map((n) => n.id).filter((n, h, v) => n !== null && n !== "" && v.indexOf(n) === h);
    }
    var iP, Gu = x(() => {
      iP = requireDist$2();
      de();
    });
    function oP(t2, a) {
      let c = new File([t2], a), r = URL.createObjectURL(c), e = Object.assign(document.createElement("a"), { href: r, target: "_blank", rel: "noopener" });
      e.setAttribute("download", a), e.click(), setTimeout(() => {
        URL.revokeObjectURL(r);
      }, 4e4);
    }
    var L0, gP, nP, E51, hP, D51, vP, W51, _51, dP, sP = x(() => {
      f1();
      e4();
      c4();
      L0 = I(G());
      c1();
      Bu();
      SI();
      gP = I(AI());
      vt();
      Gu();
      E51 = B.div(nP || (nP = V([""]))), D51 = B.div(hP || (hP = V(["\n  padding: 8px 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n"]))), W51 = B(T2)(vP || (vP = V(["\n  display flex;\n  flex-direction: column;\n  gap: 1em;\n  width: 280px;\n  padding: 1em;\n"])));
      _51 = ({ projects: t2 }) => {
        let a = t2[0], c = a.address.projectId, r = c.replace(/[^\w\d'_\-]+/g, " ").trim(), e = "".concat(r, ".theatre-project-state.json"), [l, i5] = (0, L0.useState)(false), o = (0, L0.useCallback)(() => e2(void 0, null, function* () {
          var s, d;
          let h = pr(a), v = /* @__PURE__ */ new Map();
          try {
            yield Promise.all(h.map((z) => e2(void 0, null, function* () {
              let u = a.assetStorage.getAssetUrl(z), f = yield fetch(u);
              f.ok && v.set(z, yield f.blob());
            })));
          } catch (z) {
            c7.error("Failed to access assets", "Export aborted. Failed to access assets at ".concat((d = (s = a.config.assets) == null ? void 0 : s.baseUrl) != null ? d : "/", ". This is likely due to a CORS issue."));
            return;
          }
          if (v.size > 0) {
            let z = new gP.default();
            for (let [f, p] of v) z.file(f, p);
            let u = yield z.generateAsync({ type: "blob" });
            oP(u, "".concat(r, ".assets.zip"));
          }
          let g = JSON.stringify(T().createContentOfSaveFile(a.address.projectId), null, 2);
          oP(g, e), i5(true), setTimeout(() => {
            i5(false);
          }, 2e3);
        }), [a, e]), n = x2({ debugName: "ProjectDetails", pointerDistanceThreshold: 50 }, () => L0.default.createElement(W51, null, L0.default.createElement("p", null, "This will create a JSON file with the state of your project. You can commit this file to your git repo and include it in your production bundle."), L0.default.createElement("p", null, "If your project uses assets, this will also create a zip file with all the assets that you can unpack in your public folder."), L0.default.createElement("a", { href: "https://www.theatrejs.com/docs/latest/manual/projects#state", target: "_blank" }, "Here is a quick guide on how to export to production.")));
        return L0.default.createElement(L0.default.Fragment, null, n.node, L0.default.createElement(E51, null, L0.default.createElement(yI, { projectId: c }), L0.default.createElement(D51, null, L0.default.createElement(vr, { onMouseEnter: (h) => n.open(h, h.target), onClick: l ? void 0 : o, disabled: l }, l ? "(Exported)" : "Export ".concat(c, " to JSON")))));
      }, dP = _51;
    });
    var X6, zP, j51, uP, q51, pP, N51, mP, U51, K51, fP, MP = x(() => {
      X6 = I(G());
      c1();
      b9();
      j51 = B.div(zP || (zP = V(["\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n"]))), q51 = B.div(uP || (uP = V(["\n  display: flex;\n  flex-direction: column;\n  gap: 11px;\n  color: rgba(255, 255, 255, 0.9);\n"]))), N51 = B.div(pP || (pP = V(["\n  color: rgba(145, 145, 145, 0.8);\n"]))), U51 = B.a(mP || (mP = V(["\n  color: #919191;\n  font-size: 10px;\n  text-decoration-color: #40434a;\n  text-underline-offset: 3px;\n"]))), K51 = () => X6.default.createElement(j51, null, X6.default.createElement(q51, null, X6.default.createElement(N51, null, X6.default.createElement(Gc, null)), X6.default.createElement("div", null, "Please select an object from the ", X6.default.createElement("u", null, "Outline Menu"), " to see its properties.")), X6.default.createElement(U51, { href: "https://www.theatrejs.com/docs/latest/manual/objects", target: "_blank" }, "Learn more about Objects")), fP = K51;
    });
    function mr() {
      let [t2, a] = (0, un.useState)(false), c = (0, un.useMemo)(() => {
        let r = /* @__PURE__ */ new Set();
        return () => {
          let e = () => {
            r.delete(e), a(r.size > 0);
          };
          return r.add(e), a(true), e;
        };
      }, []);
      return [t2, c];
    }
    var un, Tu = x(() => {
      un = I(G());
    });
    var O1, Y6, $51, HP, Zu, VP, xP, wP, CP, BP, LP, N9, Q51, yP, Ou, gt, Io = x(() => {
      C5();
      M1();
      O1 = I(G());
      c1();
      N5();
      b4();
      G1();
      gI();
      sP();
      f1();
      bz();
      Y6 = requireDist$2();
      MP();
      Tu();
      K6();
      $51 = "32px", Zu = B.div(HP || (HP = V(["\n  ", ";\n  background-color: rgba(40, 43, 47, 0.8);\n  position: fixed;\n  right: 8px;\n  top: 50px;\n  // Temporary, see comment about CSS grid in SingleRowPropEditor.\n  width: 280px;\n  height: fit-content;\n  z-index: ", ";\n\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25), 0 2px 6px rgba(0, 0, 0, 0.15);\n  backdrop-filter: blur(14px);\n  border-radius: 2px;\n\n  display: ", ";\n\n  &:hover {\n    display: block;\n  }\n\n  @supports not (backdrop-filter: blur()) {\n    background: rgba(40, 43, 47, 0.95);\n  }\n"])), C1, M5.propsPanel, ({ pin: t2 }) => t2 ? "block" : "none"), xP = B.div(VP || (VP = V(["\n  margin: 0 10px;\n  color: #919191;\n  font-weight: 500;\n  font-size: 10px;\n  user-select: none;\n  ", ";\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])), C1), CP = B.div(wP || (wP = V(["\n  height: ", ";\n  display: flex;\n  align-items: center;\n"])), $51), LP = B.div(BP || (BP = V(["\n  ", ";\n  max-height: calc(100vh - 100px);\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  scrollbar-width: none;\n  padding: 0;\n  user-select: none;\n\n  /* Set the font-size for input values in the detail panel */\n  font-size: 12px;\n"])), C1), N9 = (0, O1.createContext)([false, () => () => {
      }]), Q51 = (t2) => {
        let a = s1(T().atomP.ahistoric.pinDetails) !== false, c = Dc("right");
        (0, O1.useLayoutEffect)(() => {
          Ou.set(c);
        }, [c]), (0, O1.useEffect)(() => () => {
          gt.set(false), Ou.set(false);
        }, []);
        let [r] = (0, O1.useContext)(N9), e = a || c || r, [l, i5] = (0, O1.useState)(null);
        return _o(l), v1(() => {
          let o = c3(), n = o.find(c0);
          if (n) return O1.default.createElement(Zu, { "data-testid": "DetailPanel-Object", pin: e, ref: i5, onMouseEnter: () => {
            gt.set(true);
          }, onMouseLeave: () => {
            gt.set(false);
          } }, O1.default.createElement(CP, null, O1.default.createElement(xP, { title: "".concat(n.sheet.address.sheetId, ": ").concat(n.sheet.address.sheetInstanceId, " > ").concat(n.address.objectKey) }, O1.default.createElement(x5, null, n.sheet.address.sheetId, " "), O1.default.createElement(R9, null, ":", " "), O1.default.createElement(x5, null, n.sheet.address.sheetInstanceId, " "), O1.default.createElement(R9, null, " → "), O1.default.createElement(x5, null, n.address.objectKey))), O1.default.createElement(LP, null, O1.default.createElement(vI, { objects: [n] })));
          let h = o.find(se);
          return h ? O1.default.createElement(Zu, { pin: e }, O1.default.createElement(CP, null, O1.default.createElement(xP, { title: "".concat(h.address.projectId) }, O1.default.createElement(x5, null, h.address.projectId, " "))), O1.default.createElement(LP, null, O1.default.createElement(dP, { projects: [h] }))) : O1.default.createElement(Zu, { pin: e, onMouseEnter: () => {
            gt.set(true);
          }, onMouseLeave: () => {
            gt.set(false);
          } }, O1.default.createElement(fP, null));
        }, [e]);
      }, yP = () => {
        let t2 = mr();
        return O1.default.createElement(N9.Provider, { value: t2 }, O1.default.createElement(Q51, null));
      }, Ou = new Y6.Atom(false), gt = new Y6.Atom(false), (0, Y6.prism)(() => {
        let t2 = (0, Y6.val)(gt.prism), a = (0, Y6.val)(Ou.prism);
        return t2 || a;
      });
    });
    var pn, fr, dt, SP, D4, X51, mn, r7 = x(() => {
      pn = requireDist$2();
      M1();
      f1();
      Tu();
      fr = I(G());
      Ao();
      dt = (t2, a) => {
        let c = t2.left / a.width, r = (t2.left + t2.width) / a.width, e = t2.top / a.height, l = (t2.height + t2.top) / a.height;
        return { edges: { left: c <= 0.5 ? { from: "screenLeft", distance: c } : { from: "screenRight", distance: 1 - c }, right: r <= 0.5 ? { from: "screenLeft", distance: r } : { from: "screenRight", distance: 1 - r }, top: e <= 0.5 ? { from: "screenTop", distance: e } : { from: "screenBottom", distance: 1 - e }, bottom: l <= 0.5 ? { from: "screenTop", distance: l } : { from: "screenBottom", distance: 1 - l } } };
      }, SP = fr.default.createContext(null), D4 = () => (0, fr.useContext)(SP), X51 = ({ panelId: t2, children: a, defaultPosition: c, minDims: r }) => {
        let e = _9(800, 200), [l, i5] = mr(), { stuff: o } = v1(() => {
          var p;
          let { edges: n } = (p = (0, pn.val)(T().atomP.historic.panelPositions[t2])) != null ? p : c, h = Math.floor(e.width * (n.left.from === "screenLeft" ? n.left.distance : 1 - n.left.distance)), v = Math.floor(e.width * (n.right.from === "screenLeft" ? n.right.distance : 1 - n.right.distance)), g = Math.floor(e.height * (n.top.from === "screenTop" ? n.top.distance : 1 - n.top.distance)), s = Math.floor(e.height * (n.bottom.from === "screenTop" ? n.bottom.distance : 1 - n.bottom.distance)), d = Math.max(v - h, r.width), z = Math.max(s - g, r.height);
          return { stuff: { dims: pn.prism.memo("dims", () => ({ width: d, left: h, top: g, height: z }), [d, h, g, z]), panelId: t2, minDims: r, boundsHighlighted: l, addBoundsHighlightLock: i5 } };
        }, [t2, e, l, i5]);
        return fr.default.createElement(SP.Provider, { value: o }, a);
      }, mn = X51;
    });
    var e7, kP, Y51, J51, fn, Eu = x(() => {
      P1();
      f1();
      M2();
      e7 = I(G());
      c1();
      r7();
      I0();
      H2();
      b4();
      Y51 = B.div(kP || (kP = V(["\n  cursor: move;\n"]))), J51 = (t2) => {
        let a = D4(), c = (0, e7.useRef)(a);
        c.current = a;
        let [r, e] = z1(null), l = (0, e7.useMemo)(() => ({ debugName: "PanelDragZone", lockCursorTo: "move", onDragStart() {
          let h = c.current, v, g = a.addBoundsHighlightLock();
          return { onDrag(s, d) {
            let z = D(S({}, h.dims), { top: b1(h.dims.top + d, 0, window.innerHeight - S3), left: b1(h.dims.left + s, -h.dims.width + S3, window.innerWidth - S3) }), u = dt(z, { width: window.innerWidth, height: window.innerHeight });
            v == null || v.discard(), v = T().tempTransaction(({ stateEditors: f }) => {
              f.studio.historic.panelPositions.setPanelPosition({ position: u, panelId: h.panelId });
            });
          }, onDragEnd(s) {
            g(), s ? v == null || v.commit() : v == null || v.discard();
          } };
        } }), []), [i5] = S1(e, l);
        s2(i5, "dragging", "move");
        let [o, n] = (0, e7.useMemo)(() => {
          let h;
          return [function() {
            if (h) {
              let g = h;
              h = void 0, g();
            }
            h = a.addBoundsHighlightLock();
          }, function() {
            if (h) {
              let g = h;
              h = void 0, g();
            }
          }];
        }, []);
        return e7.default.createElement(Y51, D(S({}, t2), { ref: r, onMouseEnter: o, onMouseLeave: n }));
      }, fn = J51;
    });
    var st, RP, jP, bP, qP, FP, NP, IP, t61, PP, a61, GP, UP, TP, c61, ZP, r61, OP, Mn, EP, e61, DP, l61, WP, i61, _P, o61, n61, AP, h61, y5, KP = x(() => {
      P1();
      f1();
      M2();
      R0();
      st = I(G());
      c1();
      r7();
      G1();
      H2();
      b4();
      jP = B.div(RP || (RP = V(["\n  position: absolute;\n  ", ";\n  &:after {\n    position: absolute;\n    inset: -5px;\n    display: block;\n    content: ' ';\n  }\n\n  opacity: 0;\n  background-color: #478698;\n\n  &.isHighlighted {\n    opacity: 0.7;\n  }\n\n  &.isDragging {\n    opacity: 1;\n    /* background-color: ", "; */\n  }\n\n  &:hover {\n    opacity: 1;\n  }\n"])), C1, R6(0.2, "#478698")), qP = B(jP)(bP || (bP = V(["\n  /**\n  The horizintal/vertical resize handles have z-index:-1 and are offset 1px outside of the panel\n  to make sure they don't occlude any element that pops out of the panel (like the Playhead in SequenceEditorPanel).\n\n  This means that panels will always need an extra 1px margin for their resize handles to be visible, but that's not a problem\n  that we have to deal with right now (if it is at all a problem).\n  \n   */\n  z-index: -1;\n"]))), NP = B(qP)(FP || (FP = V(["\n  left: 0px;\n  right: 0px;\n  height: 1px;\n"]))), t61 = B(NP)(IP || (IP = V(["\n  top: -1px;\n"]))), a61 = B(NP)(PP || (PP = V(["\n  bottom: -1px;\n"]))), UP = B(qP)(GP || (GP = V(["\n  z-index: -1;\n  top: -1px;\n  bottom: -1px;\n  width: 1px;\n"]))), c61 = B(UP)(TP || (TP = V(["\n  left: -1px;\n"]))), r61 = B(UP)(ZP || (ZP = V(["\n  right: -1px;\n"]))), Mn = B(jP)(OP || (OP = V(["\n  // The angles have z-index: 10 to make sure they _do_ occlude other elements in the panel.\n  z-index: 10;\n  width: 8px;\n  height: 8px;\n"]))), e61 = B(Mn)(EP || (EP = V(["\n  top: 0;\n  left: 0;\n"]))), l61 = B(Mn)(DP || (DP = V(["\n  top: 0;\n  right: 0;\n"]))), i61 = B(Mn)(WP || (WP = V(["\n  bottom: 0;\n  left: 0;\n"]))), o61 = B(Mn)(_P || (_P = V(["\n  bottom: 0;\n  right: 0;\n"]))), n61 = { Top: t61, TopLeft: e61, TopRight: l61, Bottom: a61, BottomLeft: i61, BottomRight: o61, Left: c61, Right: r61 }, AP = { Top: "ns-resize", Bottom: "ns-resize", Left: "ew-resize", Right: "ew-resize", TopLeft: "nw-resize", TopRight: "ne-resize", BottomLeft: "sw-resize", BottomRight: "se-resize" }, h61 = ({ which: t2 }) => {
        let a = D4(), c = (0, st.useRef)(a);
        c.current = a;
        let [r, e] = z1(null), l = (0, st.useMemo)(() => ({ debugName: "PanelResizeHandle", lockCursorTo: AP[t2], onDragStart() {
          let h, v = c.current, g = a.addBoundsHighlightLock();
          return { onDrag(s, d) {
            let z = S({}, v.dims);
            if (t2.startsWith("Bottom")) z.height = Math.max(z.height + d, v.minDims.height);
            else if (t2.startsWith("Top")) {
              let f = z.top + z.height, p = b1(z.top + d, 0, Math.min(f - v.minDims.height, window.innerHeight - S3)), m = f - p;
              z.height = m, z.top = p;
            }
            if (t2.endsWith("Left")) {
              let f = z.left + z.width, p = Math.min(z.left + s, Math.min(f - v.minDims.width, window.innerWidth - S3)), m = f - p;
              z.width = m, z.left = p;
            } else t2.endsWith("Right") && (z.width = Math.max(z.width + s, Math.max(v.minDims.width, S3 - v.dims.left)));
            let u = dt(z, { width: window.innerWidth, height: window.innerHeight });
            h == null || h.discard(), h = T().tempTransaction(({ stateEditors: f }) => {
              f.studio.historic.panelPositions.setPanelPosition({ position: u, panelId: v.panelId });
            });
          }, onDragEnd(s) {
            g(), s ? h == null || h.commit() : h == null || h.discard();
          } };
        } }), [t2]), [i5] = S1(e, l), o = n61[t2], n = t2.length <= 6;
        return st.default.createElement(o, { ref: r, className: [i5 ? "isDragging" : "", a.boundsHighlighted && n ? "isHighlighted" : ""].join(" "), style: { cursor: AP[t2] } });
      }, y5 = h61;
    });
    var i4, v61, $P, QP = x(() => {
      i4 = I(G());
      KP();
      v61 = (t2) => i4.default.createElement(i4.default.Fragment, null, i4.default.createElement(y5, { which: "Bottom" }), i4.default.createElement(y5, { which: "Top" }), i4.default.createElement(y5, { which: "Left" }), i4.default.createElement(y5, { which: "Right" }), i4.default.createElement(y5, { which: "TopLeft" }), i4.default.createElement(y5, { which: "TopRight" }), i4.default.createElement(y5, { which: "BottomLeft" }), i4.default.createElement(y5, { which: "BottomRight" })), $P = v61;
    });
    var xn, XP, g61, d61, Cn, Du = x(() => {
      G1();
      xn = I(G());
      c1();
      r7();
      QP();
      g61 = B.div(XP || (XP = V(["\n  position: absolute;\n  user-select: none;\n  box-sizing: border-box;\n  ", ";\n  /* box-shadow: 1px 2px 10px -5px black; */\n\n  z-index: 1000;\n"])), C1), d61 = xn.default.forwardRef((t2, a) => {
        let c = D4(), i5 = t2, { style: r, children: e } = i5, l = m4(i5, ["style", "children"]);
        return xn.default.createElement(g61, D(S({ ref: a }, l), { style: S({ width: c.dims.width + "px", height: c.dims.height + "px", top: c.dims.top + "px", left: c.dims.left + "px" }, r != null ? r : {}) }), xn.default.createElement($P, null), e);
      }), Cn = d61;
    });
    var JP = L1((Ln, YP) => {
      (function(t2, a) {
        typeof Ln == "object" && typeof YP != "undefined" ? a(Ln, G()) : (t2 = typeof globalThis != "undefined" ? globalThis : t2 || self, a(t2.ReactErrorBoundary = {}, t2.React));
      })(Ln, function(t2, a) {
        function c(g) {
          if (g && g.__esModule) return g;
          var s = /* @__PURE__ */ Object.create(null);
          return g && Object.keys(g).forEach(function(d) {
            if (d !== "default") {
              var z = Object.getOwnPropertyDescriptor(g, d);
              Object.defineProperty(s, d, z.get ? z : { enumerable: true, get: function() {
                return g[d];
              } });
            }
          }), s.default = g, Object.freeze(s);
        }
        var r = c(a);
        function e(g, s) {
          return e = Object.setPrototypeOf || function(z, u) {
            return z.__proto__ = u, z;
          }, e(g, s);
        }
        function l(g, s) {
          g.prototype = Object.create(s.prototype), g.prototype.constructor = g, e(g, s);
        }
        var i5 = function(s, d) {
          return s === void 0 && (s = []), d === void 0 && (d = []), s.length !== d.length || s.some(function(z, u) {
            return !Object.is(z, d[u]);
          });
        }, o = { error: null }, n = function(g) {
          l(s, g);
          function s() {
            for (var z, u = arguments.length, f = new Array(u), p = 0; p < u; p++) f[p] = arguments[p];
            return z = g.call.apply(g, [this].concat(f)) || this, z.state = o, z.updatedWithError = false, z.resetErrorBoundary = function() {
              for (var m, M = arguments.length, w = new Array(M), H = 0; H < M; H++) w[H] = arguments[H];
              z.props.onReset == null || (m = z.props).onReset.apply(m, w), z.reset();
            }, z;
          }
          s.getDerivedStateFromError = function(u) {
            return { error: u };
          };
          var d = s.prototype;
          return d.reset = function() {
            this.updatedWithError = false, this.setState(o);
          }, d.componentDidCatch = function(u, f) {
            var p, m;
            (p = (m = this.props).onError) == null || p.call(m, u, f);
          }, d.componentDidMount = function() {
            var u = this.state.error;
            u !== null && (this.updatedWithError = true);
          }, d.componentDidUpdate = function(u) {
            var f = this.state.error, p = this.props.resetKeys;
            if (f !== null && !this.updatedWithError) {
              this.updatedWithError = true;
              return;
            }
            if (f !== null && i5(u.resetKeys, p)) {
              var m, M;
              (m = (M = this.props).onResetKeysChange) == null || m.call(M, u.resetKeys, p), this.reset();
            }
          }, d.render = function() {
            var u = this.state.error, f = this.props, p = f.fallbackRender, m = f.FallbackComponent, M = f.fallback;
            if (u !== null) {
              var w = { error: u, resetErrorBoundary: this.resetErrorBoundary };
              if (r.isValidElement(M)) return M;
              if (typeof p == "function") return p(w);
              if (m) return r.createElement(m, w);
              throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
            }
            return this.props.children;
          }, s;
        }(r.Component);
        function h(g, s) {
          var d = function(f) {
            return r.createElement(n, s, r.createElement(g, f));
          }, z = g.displayName || g.name || "Unknown";
          return d.displayName = "withErrorBoundary(" + z + ")", d;
        }
        function v(g) {
          var s = r.useState(null), d = s[0], z = s[1];
          if (g != null) throw g;
          if (d != null) throw d;
          return z;
        }
        t2.ErrorBoundary = n, t2.useErrorHandler = v, t2.withErrorBoundary = h, Object.defineProperty(t2, "__esModule", { value: true });
      });
    });
    var B2, iG, s61, z61, u61, tG, p61, aG, m61, cG, f61, rG, M61, eG, x61, lG, C61, L61, H61, oG, nG = x(() => {
      B2 = I(G());
      c1();
      b4();
      r7();
      Eu();
      Du();
      iG = I(JP());
      K8();
      f1();
      b4();
      s61 = { edges: { left: { from: "screenLeft", distance: 0.3 }, right: { from: "screenRight", distance: 0.3 }, top: { from: "screenTop", distance: 0.3 }, bottom: { from: "screenBottom", distance: 0.3 } } }, z61 = { width: 300, height: 300 }, u61 = ({ paneInstance: t2 }) => B2.default.createElement(mn, { panelId: "pane-".concat(t2.instanceId), defaultPosition: s61, minDims: z61 }, B2.default.createElement(H61, { paneInstance: t2 })), p61 = B(Cn)(tG || (tG = V(["\n  display: flex;\n  flex-direction: column;\n\n  box-shadow: 0px 5px 12px -4px rgb(0 0 0 / 22%);\n  z-index: ", ";\n"])), M5.pluginPanes), m61 = B.div(aG || (aG = V(["\n  width: 100%;\n"]))), f61 = B.div(cG || (cG = V(["\n  display: flex;\n  align-items: center;\n  opacity: 1;\n  position: absolute;\n  right: 4px;\n  top: 0;\n  bottom: 0;\n"]))), M61 = B.button(rG || (rG = V(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 2px;\n  font-size: 11px;\n  height: 10px;\n  width: 18px;\n  color: #adadadb3;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    color: white;\n  }\n"]))), x61 = B(YS)(eG || (eG = V(["\n  position: relative;\n  overflow: hidden;\n\n  &:after {\n    z-index: 10;\n    position: absolute;\n    inset: 0;\n    display: block;\n    content: ' ';\n    pointer-events: none;\n\n    #pointer-root:not(.normal) & {\n      pointer-events: auto;\n    }\n  }\n"]))), C61 = B.div(lG || (lG = V(["\n  padding: 12px;\n\n  & > pre {\n    border: 1px solid #ff62624f;\n    background-color: rgb(255 0 0 / 5%);\n    margin: 8px 0;\n    padding: 8px;\n    font-family: monospace;\n    overflow: scroll;\n    color: #ff9896;\n  }\n"]))), L61 = (t2) => B2.default.createElement(C61, null, "An Error occurred rendering this pane. Open the console for more info.", B2.default.createElement("pre", null, JSON.stringify({ message: t2.error.message, stack: t2.error.stack }, null, 2))), H61 = ({ paneInstance: t2 }) => {
        let [a, c] = (0, B2.useState)(null), r = t2.definition.mount;
        (0, B2.useLayoutEffect)(() => {
          if (!a) return;
          let l = r({ paneId: t2.instanceId, node: a });
          if (typeof l == "function") return l;
        }, [a, r, t2.instanceId]);
        let e = (0, B2.useCallback)(() => {
          T().paneManager.destroyPane(t2.instanceId);
        }, [t2]);
        return B2.default.createElement(p61, { "data-testid": "theatre-pane-wrapper-".concat(t2.instanceId) }, B2.default.createElement(fn, null, B2.default.createElement(oo, null, B2.default.createElement(f61, null, B2.default.createElement(M61, { onClick: e, title: "Close Pane" }, B2.default.createElement(AA, null))), B2.default.createElement(m61, null, t2.instanceId))), B2.default.createElement(iG.ErrorBoundary, { FallbackComponent: L61 }, B2.default.createElement(x61, { "data-testid": "theatre-pane-content-".concat(t2.instanceId), ref: c })));
      }, oG = u61;
    });
    var Hn, Vn, Wu = x(() => {
      Hn = requireDist$2(), Vn = (t2, a) => {
        let c = Hn.prism.memo(t2, () => new Hn.Atom(a), []);
        return c.set(a), c;
      };
    });
    function wn(t2, a) {
      (0, hG.useLayoutEffect)(() => {
        if (!t2 || a.type !== "propWithChildren" && a.type !== "primitiveProp" && a.type !== "sheetObject") return;
        let c = null, r = D(S({}, a.sheetObject.address), { pathToProp: a.type === "sheetObject" ? [] : a.pathToProp });
        function e() {
          c = tt.replaceLock(r, () => {
          });
        }
        function l() {
          c == null || c();
        }
        return t2.addEventListener("mouseenter", e), t2.addEventListener("mouseleave", l), () => {
          c == null || c(), t2.removeEventListener("mouseenter", e), t2.removeEventListener("mouseleave", l);
        };
      }, [t2]);
    }
    var hG, _u = x(() => {
      hG = I(G());
      Qo();
    });
    var S5, vG, ju, gG, qu, dG, pG, sG, V61, zG, w61, uG, B61, y61, zt, Mr = x(() => {
      G1();
      S5 = I(G());
      K8();
      c1();
      N6();
      _u();
      ju = B.li(vG || (vG = V(["\n  --depth: ", ";\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"])), (t2) => t2.depth), qu = B.div(gG || (gG = V(["\n  border-bottom: 1px solid #7695b705;\n"]))), pG = B(qu)(dG || (dG = V(["\n  padding-left: calc(8px + var(--depth) * 20px);\n\n  display: flex;\n  align-items: stretch;\n  color: ", ";\n\n  box-sizing: border-box;\n\n  ", ";\n"])), Z6.panel.body.compoudThing.label.color, (t2) => t2.isSelected && "background: blue"), V61 = B.span(sG || (sG = V(["\n  ", ";\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding-right: 4px;\n  line-height: 26px;\n  flex-wrap: nowrap;\n\n  ", ":hover & {\n    color: #ccc;\n  }\n"])), T0, pG), w61 = B.span(zG || (zG = V(["\n  width: 12px;\n  padding: 8px;\n  font-size: 9px;\n  display: flex;\n  align-items: center;\n\n  transition: transform 0.05s ease-out, color 0.1s ease-out;\n  transform: rotateZ(", "deg);\n  color: #66686a;\n\n  &:hover {\n    transform: rotateZ(", "deg);\n    color: #c0c4c9;\n  }\n"])), (t2) => t2.isCollapsed ? 0 : 90, (t2) => t2.isCollapsed ? 15 : 75), B61 = B.ul(uG || (uG = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"]))), y61 = ({ leaf: t2, label: a, children: c, isSelectable: r, isSelected: e, toggleSelect: l, toggleCollapsed: i5, isCollapsed: o }) => {
        let n = Array.isArray(c) && c.length > 0, h = (0, S5.useRef)(null);
        return wn(h.current, t2), t2.shouldRender ? S5.default.createElement(ju, { depth: t2.depth }, S5.default.createElement(pG, { ref: h, style: { height: t2.nodeHeight + "px" }, isSelectable: r === true, isSelected: e === true, onClick: l, isEven: t2.n % 2 === 0 }, S5.default.createElement(w61, { isCollapsed: o, onClick: i5 }, S5.default.createElement(Co, null)), S5.default.createElement(V61, null, a)), n && S5.default.createElement(B61, null, c)) : null;
      }, zt = y61;
    });
    function mG(t2, a) {
      return a.every((c, r) => c === t2[r]);
    }
    function fG(t2, a) {
      if (t2.length !== a.length) return false;
      for (let c = 0; c < t2.length; c++) if (t2[c] !== a[c]) return false;
      return true;
    }
    function J6(t2) {
      var c;
      let a = [];
      for (; ; ) {
        let r = a.length, e = (c = t2[0]) == null ? void 0 : c[r];
        if (e === void 0) return a;
        for (let l of t2) if (e !== l[r]) return a;
        a.push(e);
      }
    }
    var h3, ut, o4 = x(() => {
      tr();
      h3 = T4((t2) => JSON.stringify(t2)), ut = (t2) => JSON.parse(t2);
    });
    function Nu(t2, a) {
      let c = (0, Bn.useRef)({ combo: t2, listener: a });
      c.current = { combo: t2, listener: a }, (0, Bn.useEffect)(() => {
        function r(i5) {
          i5.key === c.current.combo && c.current.listener({ down: true, event: i5 });
        }
        function e(i5) {
          i5.key === c.current.combo && c.current.listener({ down: false, event: i5 });
        }
        function l(i5) {
          c.current.listener({ down: false, event: void 0 });
        }
        return document.addEventListener("keydown", r), document.addEventListener("keyup", e), window.addEventListener("blur", l), () => {
          document.removeEventListener("keydown", r), document.removeEventListener("keyup", e), window.removeEventListener("blur", l);
        };
      }, []);
    }
    var Bn, MG = x(() => {
      Bn = I(G());
    });
    function xr(t2) {
      let [a, c] = (0, xG.useState)(false);
      return Nu(t2, ({ down: r }) => {
        c(r);
      }), a;
    }
    var xG, Uu = x(() => {
      xG = I(G());
      MG();
    });
    function Ku(t2) {
      let a = (0, yn.useMemo)(() => new CG.Atom(t2), []);
      return (0, yn.useLayoutEffect)(() => {
        a.set(t2);
      }, [t2]), a;
    }
    var CG, yn, LG = x(() => {
      CG = requireDist$2(), yn = I(G());
    });
    function kn(t2, a, c) {
      let r = (0, Sn.pointer)({ root: {}, path: [] }), e = a(r);
      i6(t2, (0, Sn.getPointerParts)(e).path, c);
    }
    var Sn, HG = x(() => {
      Sn = requireDist$2();
      Xe();
    });
    var $u, S61, r2, b3 = x(() => {
      $u = "data-pos", S61 = { checkIfMouseEventSnapToPos(t2, a) {
        let c = t2.composedPath().find((r) => r instanceof Element && r !== (a == null ? void 0 : a.ignore) && r.hasAttribute($u));
        if (c) {
          let r = parseFloat(c.getAttribute($u));
          if (isFinite(r)) return r;
        }
        return null;
      }, includePositionSnapAttrs(t2) {
        return { [$u]: t2 };
      } }, r2 = S61;
    });
    function t8(t2) {
      let a = t2.type === "sheet" ? A61(t2) : Qu(t2);
      return { byPosition: k61(a), tracks: a };
    }
    function k61(t2) {
      let a = /* @__PURE__ */ new Map();
      for (let c of t2) for (let r of c.data.keyframes) {
        let e = a.get(r.position);
        e || (e = [], a.set(r.position, e)), e.push({ kf: r, track: c, itemKey: c2.forTrackKeyframe(c.sheetObject, c.id, r.id) });
      }
      return a;
    }
    function A61(t2) {
      return t2.children.flatMap(Qu);
    }
    function Qu(t2) {
      return t2.children.flatMap((a) => a.type === "propWithChildren" ? Qu(a) : R61(a));
    }
    function R61(t2) {
      let a = t2.sheetObject, c = a.address.projectId, r = T().atomP.historic.coreByProject[c].sheetsById[a.address.sheetId].sequence.tracksByObject[a.address.objectKey], e = (0, An.val)(r.trackIdByPropPath[h3(t2.pathToProp)]);
      if (!e) return [];
      let l = (0, An.val)(r.trackData[e]);
      return l ? [{ id: e, data: l, sheetObject: a }] : [];
    }
    function VG(t2, a) {
      return x3(t2.children.flatMap((c) => Rn(c, a)));
    }
    function Rn(t2, a) {
      return x3(t2.children.flatMap((c) => c.type === "propWithChildren" ? Rn(c, a) : b61(c, a)));
    }
    function b61(t2, a) {
      var i5, o;
      let c = t2.sheetObject, r = c.address.projectId, e = T().atomP.historic.coreByProject[r].sheetsById[c.address.sheetId].sequence.tracksByObject[c.address.objectKey], l = (0, An.val)(e.trackIdByPropPath[h3(t2.pathToProp)]);
      return l ? (o = (i5 = a[c.address.objectKey]) == null ? void 0 : i5[l]) != null ? o : [] : [];
    }
    var An, l7 = x(() => {
      f1();
      An = requireDist$2();
      O4();
      o4();
      H2();
    });
    function P61(t2, a) {
      let [c, r] = z1(null), e = C0("useCaptureSelection");
      return S1(a, (0, a8.useMemo)(() => ({ debugName: "DopeSheetSelectionView/useCaptureSelection", dontBlockMouseDown: true, lockCSSCursorTo: "cell", onDragStart(l) {
        if (!l.shiftKey || l.target instanceof HTMLInputElement) return false;
        let i5 = a.getBoundingClientRect(), o = l.clientX - i5.left - (0, F3.val)(t2.scaledSpace.leftPadding), n = (0, F3.val)(t2.scaledSpace.toUnitSpace)(o);
        return c.current = { h: [n, n], v: [l.clientY - i5.top, l.clientY - i5.top] }, (0, F3.val)(t2.selectionAtom).set({ current: void 0 }), { onDrag(h, v, g) {
          let s = a.getBoundingClientRect(), d = g.clientX - s.left - (0, F3.val)(t2.scaledSpace.leftPadding), z = (0, F3.val)(t2.scaledSpace.toUnitSpace)(d);
          c.current = { h: [c.current.h[0], z], v: [c.current.v[0], g.clientY - s.top] };
          let u = Xu.boundsToSelection(e, (0, F3.val)(t2), c.current);
          (0, F3.val)(t2.selectionAtom).set({ current: u });
        }, onDragEnd(h) {
          c.current = null;
        } };
      } }), [t2, a, c])), r;
    }
    var F3, a8, i7, wG, F61, I61, Xu, BG, G61, yG, T61, SG, kG = x(() => {
      f1();
      M2();
      Uu();
      LG();
      HG();
      P1();
      M1();
      F3 = requireDist$2(), a8 = I(G());
      c1();
      b3();
      l7();
      L5();
      i7 = 5, F61 = B.div(wG || (wG = V(["\n  cursor: ", ";\n"])), (t2) => t2.isShiftDown ? "cell" : "default"), I61 = ({ layoutP: t2, children: a, height: c }) => {
        let [r, e] = z1(null), l = xr("Shift"), i5 = P61(t2, e), o = (0, a8.useRef)(i5);
        return o.current = i5, a8.default.createElement(F61, { style: { height: c + "px" }, ref: r, isShiftDown: l, className: "selectionview" }, i5 && a8.default.createElement(T61, { state: i5, layoutP: t2 }), a);
      };
      ((l) => {
        let t2 = (i5, o, n, h, v) => {
          let g = t8(n);
          if (n.top + n.nodeHeight / 2 + i7 > h.v[0] && n.top + n.nodeHeight / 2 - i7 < h.v[1]) for (let [s, d] of g.byPosition) {
            let z = o.scaledSpace.toUnitSpace(i7);
            if (!(s + z <= h.h[0] || s - z >= h.h[1])) for (let f of d) kn(v, (p) => p[f.track.sheetObject.address.objectKey].byTrackId[f.track.id].byKeyframeId[f.kf.id], true);
          }
          c(i5, o, n, h, v);
        }, a = { sheet(i5, o, n, h, v) {
          t2(i5, o, n, h, v);
        }, propWithChildren(i5, o, n, h, v) {
          t2(i5, o, n, h, v);
        }, sheetObject(i5, o, n, h, v) {
          t2(i5, o, n, h, v);
        }, primitiveProp(i5, o, n, h, v) {
          let { sheetObject: g, trackId: s } = n, d = (0, F3.val)(T().atomP.historic.coreByProject[g.address.projectId].sheetsById[g.address.sheetId].sequence.tracksByObject[g.address.objectKey].trackData[s]);
          if (!(h.v[0] > n.top + n.heightIncludingChildren / 2 + i7 || n.top + n.heightIncludingChildren / 2 - i7 > h.v[1])) {
            for (let z of d.keyframes) if (!(z.position + o.scaledSpace.toUnitSpace(i7) <= h.h[0])) {
              if (z.position - o.scaledSpace.toUnitSpace(i7) >= h.h[1]) break;
              kn(v, (u) => u[g.address.objectKey].byTrackId[s].byKeyframeId[z.id], true);
            }
          }
        } }, c = (i5, o, n, h, v) => {
          if ("children" in n) for (let g of n.children) r(i5, o, g, h, v);
        };
        function r(i5, o, n, h, v) {
          if (!n.shouldRender || h.v[0] > n.top + n.heightIncludingChildren || n.top > h.v[1]) return;
          let g = a[n.type];
          g ? g(i5, o, n, h, v) : c(i5, o, n, h, v);
        }
        function e(i5, o, n) {
          let h = {};
          n = yG(n);
          let v = o.tree;
          r(i5.utilFor.internal(), o, v, n, h);
          let g = o.tree.sheet;
          return { type: "DopeSheetSelection", byObjectKey: h, getDragHandlers(s) {
            return { debugName: "DopeSheetSelectionView/boundsToSelection", onDragStart() {
              let d, z = o.scaledSpace.toUnitSpace;
              return { onDrag(u, f, p) {
                d && (d.discard(), d = void 0);
                let m = r2.checkIfMouseEventSnapToPos(p, { ignore: s.domNode }), M = m != null ? m - s.positionAtStartOfDrag : z(u);
                d = T().tempTransaction(({ stateEditors: w }) => {
                  let H = w.coreByProject.historic.sheetsById.sequence.transformKeyframes;
                  for (let y of Object.keys(h)) {
                    let { byTrackId: k } = h[y];
                    for (let F of Object.keys(k)) {
                      let { byKeyframeId: U } = k[F];
                      H({ trackId: F, keyframeIds: Object.keys(U), translate: M, scale: 1, origin: 0, snappingFunction: g.getSequence().closestGridPosition, objectKey: y, projectId: s.projectId, sheetId: s.sheetId });
                    }
                  }
                });
              }, onDragEnd(u) {
                u ? d == null || d.commit() : d == null || d.discard();
              } };
            } };
          }, delete() {
            T().transaction(({ stateEditors: s }) => {
              let d = s.coreByProject.historic.sheetsById.sequence.deleteKeyframes;
              for (let z of Object.keys(h)) {
                let { byTrackId: u } = h[z];
                for (let f of Object.keys(u)) {
                  let { byKeyframeId: p } = u[f];
                  d(D(S({}, g.address), { objectKey: z, trackId: f, keyframeIds: Object.keys(p) }));
                }
              }
            });
          } };
        }
        l.boundsToSelection = e;
      })(Xu || (Xu = {}));
      G61 = B.div(BG || (BG = V(["\n  position: absolute;\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px dashed rgba(255, 255, 255, 0.4);\n  box-sizing: border-box;\n"]))), yG = (t2) => ({ h: [...t2.h].sort((a, c) => a - c), v: [...t2.v].sort((a, c) => a - c) }), T61 = ({ state: t2, layoutP: a }) => {
        let c = Ku(t2);
        return v1(() => {
          let r = (0, F3.val)(c.pointer), e = yG(r), l = (0, F3.val)(a.scaledSpace.fromUnitSpace), i5 = (0, F3.val)(a.scaledSpace.leftPadding), o = e.h.map(l).map((s) => s + i5), n = e.v[0], h = e.v[1] - e.v[0], v = o[0], g = o[1] - o[0];
          return a8.default.createElement(G61, { style: { top: n + "px", height: h + "px", left: v + "px", width: g + "px" } });
        }, [a, c]);
      }, SG = I61;
    });
    var n4, AG, Z61, RG, bG, O61, FG, Yu = x(() => {
      W8();
      n4 = I(G());
      c1();
      W4();
      Z61 = B.div(AG || (AG = V(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  z-index: ", ";\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  scrollbar-width: none;\n"])), () => K2.scrollableArea), RG = (0, n4.createContext)(h0), bG = () => (0, n4.useContext)(RG), O61 = (t2) => {
        let a = (0, n4.useRef)(null), c = (0, n4.useCallback)((r) => {
          a.current.scrollBy(0, r.deltaY);
        }, []);
        return n4.default.createElement(RG.Provider, { value: c }, n4.default.createElement(Z61, { ref: a }, t2.children));
      }, FG = O61;
    });
    var PG, IG = x(() => {
      PG = 'data:image/svg+xml,<svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">%0A  <path d="M1 7V1H7" stroke="%2374FFDE" stroke-width="0.25" />%0A  <path d="M7 33H1L1 27" stroke="%2374FFDE" stroke-width="0.25" />%0A  <path d="M33 27V33H27" stroke="%2374FFDE" stroke-width="0.25" />%0A  <path d="M27 1L33 1V7" stroke="%2374FFDE" stroke-width="0.25" />%0A</svg>';
    });
    var H0, Cr = x(() => {
      H0 = (t2, a = t2) => "\n  left: ".concat(t2 * -0.5, "px;\n  top: ").concat(a * -0.5, "px;\n  width: ").concat(t2, "px;\n  height: ").concat(a, "px;\n");
    });
    var bn, D61, GG, TG = x(() => {
      bn = requireDist$2(), D61 = (0, bn.prism)(() => {
        let [t2, a] = bn.prism.state("pos", null);
        return bn.prism.effect("setupListeners", () => {
          let c = (r) => {
            a(r);
          };
          return document.addEventListener("mousemove", c), () => {
            document.removeEventListener("mousemove", c);
          };
        }, []), t2;
      }), GG = D61;
    });
    var h4, C2, Fn, W61, _61, ZG, OG, g0, O2, Ju, j61, EG, E2 = x(() => {
      h4 = requireDist$2();
      TG();
      H2();
      C2 = I(G()), Fn = (0, C2.createContext)(null), W61 = 0, _61 = ({ children: t2, layoutP: a }) => {
        let c = (0, C2.useMemo)(() => new h4.Atom([]), []), r = (0, C2.useMemo)(() => (0, h4.prism)(() => {
          let i5 = h4.prism.memo("p", () => j61(a), [a]).getValue(), o = (0, h4.val)(c.pointer);
          return o.length > 0 ? M3(o).position : i5;
        }), [a]), e = (0, C2.useCallback)(() => {
          let i5 = W61++;
          return c.reduce((h) => [...h, { id: i5, position: [-1, 0] }]), { set: (h) => {
            c.reduce((v) => {
              let g = v.findIndex((d) => d.id === i5);
              if (g === -1) return console.warn("Lock is already freed. This is a bug."), v;
              let s = [...v];
              return s.splice(g, 1, { id: i5, position: [h, h === -1 ? 0 : 1] }), s;
            });
          }, unlock: () => {
            c.reduce((h) => h.filter((v) => v.id !== i5));
          } };
        }, []), l = { currentD: r, getLock: e };
        return C2.default.createElement(Fn.Provider, { value: l }, t2);
      }, ZG = () => (0, C2.useContext)(Fn).currentD, OG = () => {
        let { getLock: t2 } = (0, C2.useContext)(Fn), a = (0, C2.useRef)();
        return (0, C2.useLayoutEffect)(() => () => {
          var c;
          (c = a.current) == null || c.unlock();
        }, []), (0, C2.useMemo)(() => {
          let c;
          return (r, e) => {
            var l, i5;
            (c == null ? void 0 : c.shouldLock) !== r && (r ? a.current = t2() : (l = a.current) == null || l.unlock()), (c == null ? void 0 : c.pos) !== e && r && ((i5 = a.current) == null || i5.set(e)), c = { shouldLock: r, pos: e };
          };
        }, [t2]);
      }, g0 = (t2, a) => {
        let { getLock: c } = (0, C2.useContext)(Fn), r = (0, C2.useRef)();
        (0, C2.useLayoutEffect)(() => {
          if (t2) return r.current = c(), () => {
            r.current.unlock();
          };
        }, [t2, c]), (0, C2.useLayoutEffect)(() => {
          t2 && r.current.set(a);
        }, [a, t2]);
      }, O2 = (t2) => ({ [Ju]: t2 === "hide" ? t2 : t2.toFixed(3) }), Ju = "data-theatre-lock-framestamp-to", j61 = (t2) => (0, h4.prism)(() => {
        let a = (0, h4.val)(t2.rightDims), c = (0, h4.val)(t2.clippedSpace.toUnitSpace), r = (0, h4.val)(GG);
        if (!r) return [-1, 0];
        for (let v of r.composedPath()) {
          if (!(v instanceof HTMLElement || v instanceof SVGElement)) break;
          if (v.hasAttribute(Ju)) {
            let g = v.getAttribute(Ju);
            if (typeof g != "string") continue;
            if (g === "hide") return [-1, 0];
            let s = parseFloat(g);
            if (isFinite(s) && s >= 0) return [s, 2];
          }
        }
        let { clientX: e, clientY: l } = r, { screenX: i5, screenY: o, width: n, height: h } = a;
        if (Qe(e, i5, i5 + n) && Qe(l, o + 16, o + h)) {
          let v = e - i5;
          return [c(v), 3];
        } else return [-1, 0];
      }), EG = _61;
    });
    var q61, In, DG, WG, _G, v4, tp = x(() => {
      G1();
      I0();
      c1();
      IG();
      Cr();
      b3();
      E2();
      q61 = 12, In = 34, DG = "beingDragged", v4 = { BEING_DRAGGED_CLASS: DG, CSS: f2(WG || (WG = V(["\n    position: absolute;\n    ", ";\n    ", ";\n\n    &.", " {\n      pointer-events: none !important;\n    }\n  "])), H0(q61), C1, DG), CSS_WHEN_SOMETHING_DRAGGING: f2(_G || (_G = V(["\n    pointer-events: auto;\n    cursor: var(", ");\n\n    // ⸢⸤⸣⸥ thing\n    // This box extends the hitzone so the user does not\n    // accidentally leave the hitzone\n    &:hover:after {\n      position: absolute;\n      top: calc(50% - ", "px);\n      left: calc(50% - ", "px);\n      width: ", "px;\n      height: ", "px;\n      display: block;\n      content: ' ';\n      background: url(", ") no-repeat 100% 100%;\n      // This icon might also fit: GiConvergenceTarget\n    }\n  "])), F0, In / 2, In / 2, In, In, PG), reactProps(t2) {
        return D(S(S({}, O2(t2.position)), r2.includePositionSnapAttrs(t2.position)), { className: t2.isDragging ? v4.BEING_DRAGGED_CLASS : "" });
      } };
    });
    function mt() {
      Pn.set({ mode: "snapToAll" });
    }
    function I3() {
      Pn.set({ mode: "snapToNone" });
    }
    function Tn(t2) {
      Pn.set({ mode: "snapToSome", positions: t2 });
    }
    function Zn(t2, a) {
      return Object.fromEntries(Object.entries(t2).map(([c, r]) => [c, Object.fromEntries(Object.entries(r.trackData).map(([e, l]) => [e, l.keyframes.filter((i5) => a(i5, { trackId: e, trackData: l, objectKey: c })).map((i5) => i5.position)]))]));
    }
    var NG, UG, ap, jG, N61, qG, U61, K61, pt, Pn, Gn, c8 = x(() => {
      NG = requireDist$2(), UG = requireDist$2(), ap = I(G());
      c1();
      tp();
      N61 = B.div(jG || (jG = V(["\n  z-index: 1;\n  cursor: ew-resize;\n\n  ", "\n\n  #pointer-root.draggingPositionInSequenceEditor & {\n    ", "\n  }\n"])), v4.CSS, v4.CSS_WHEN_SOMETHING_DRAGGING), U61 = B.div(qG || (qG = V(["\n  position: absolute;\n"]))), K61 = (t2) => ap.default.createElement(U61, { style: { top: "".concat(t2.leaf.nodeHeight / 2, "px"), left: "calc(".concat((0, UG.val)(t2.layoutP.scaledSpace.leftPadding), "px + calc(var(--unitSpaceToScaledSpaceMultiplier) * ").concat(t2.position, "px))") } }, ap.default.createElement(N61, S({}, v4.reactProps({ isDragging: false, position: t2.position })))), pt = K61, Pn = new NG.Atom({ mode: "snapToNone" }), Gn = Pn.prism;
    });
    function X61(t2, a) {
      let c = (0, k5.useMemo)(() => ({ debugName: "HorizontallyScrollableArea", onDragStart(e) {
        if (e.target instanceof HTMLInputElement || e.shiftKey || e.altKey || e.ctrlKey || e.metaKey || e.composedPath().some((g) => g instanceof HTMLElement && g.draggable === true)) return false;
        let l = e.clientX - a.getBoundingClientRect().left, i5 = b1((0, i2.val)(t2.clippedSpace.toUnitSpace)(l), 0, 1 / 0), o = (0, i2.val)(t2.seeker.setIsSeeking), n = (0, i2.val)(t2.sheet).getSequence();
        n.position = i5;
        let h = i5, v = (0, i2.val)(t2.scaledSpace.toUnitSpace);
        return o(true), mt(), { onDrag(g, s, d) {
          let z = v(g), f = b1(h + z, 0, n.length), p = r2.checkIfMouseEventSnapToPos(d, {});
          p != null && (f = p), n.position = f;
        }, onDragEnd() {
          o(false), I3();
        } };
      } }), [t2, a]), [r] = S1(a, c);
      s2(r, "draggingPositionInSequenceEditor", "ew-resize");
    }
    function Y61(t2, a) {
      let c = bG();
      (0, k5.useLayoutEffect)(() => {
        if (!a) return;
        let r = (l) => {
          if (l.ctrlKey) {
            l.preventDefault(), l.stopPropagation();
            let i5 = l.clientX - a.getBoundingClientRect().left, o = (0, i2.val)(t2.clippedSpace.toUnitSpace)(i5), n = (0, i2.val)(t2.clippedSpace.range), v = 1 + cp(l.deltaY, [-50, 50]) * 0.03, g = l5(n, (z) => (z - o) * v + o), s = (0, i2.val)(t2.sheet).getSequence().length, d = s + s * 0.25;
            (0, i2.val)(t2.clippedSpace.setRange)(J61(g, [0, d]));
            return;
          } else if (l.shiftKey) {
            l.preventDefault(), l.stopPropagation();
            let i5 = (0, i2.val)(t2.sheet).getSequence().length, o = (0, i2.val)(t2.clippedSpace.range), h = (o.end - o.start) / i5, g = cp(l.deltaY || l.deltaX, [-50, 50]) * 0.05 * h, s = l5(o, (d) => d + g);
            (0, i2.val)(t2.clippedSpace.setRange)(s);
            return;
          } else {
            c(l), l.preventDefault(), l.stopPropagation();
            let o = (0, i2.val)(t2.scaledSpace.toUnitSpace)(l.deltaX * 1), n = (0, i2.val)(t2.clippedSpace.range), h = l5(n, (g) => g + o);
            (0, i2.val)(t2.clippedSpace.setRange)(h);
            return;
          }
        }, e = { capture: true, passive: false };
        return a.addEventListener("wheel", r, e), () => {
          a.removeEventListener("wheel", r, e);
        };
      }, [a, t2]), S1(a, (0, k5.useMemo)(() => ({ onDragStart(r) {
        let e = (0, i2.val)(t2.clippedSpace.range), l = (0, i2.val)(t2.clippedSpace.setRange), i5 = (0, i2.val)(t2.scaledSpace.toUnitSpace);
        return r.preventDefault(), r.stopPropagation(), { onDrag(o, n, h, v, g) {
          c({ deltaY: -g });
          let s = -i5(o), d = l5(e, (z) => z + s);
          l(d);
        } };
      }, debugName: "HorizontallyScrollableArea Middle Button Drag", buttons: [1], lockCSSCursorTo: "grabbing" }), [t2]));
    }
    function cp(t2, [a, c]) {
      return Math.max(Math.min(t2, c), a);
    }
    function J61(t2, a) {
      return l5(t2, (c) => cp(c, a));
    }
    function t81(t2, a) {
      (0, k5.useLayoutEffect)(() => {
        if (!a) return;
        let c = (0, i2.prism)(() => {
          let i5 = (0, i2.val)(t2.clippedSpace.range);
          return (0, i2.val)(t2.scaledSpace.fromUnitSpace)(i5.start);
        }), r = () => {
          let i5 = c.getValue();
          a.scrollLeft = i5;
        }, e = c.onStale(r);
        r();
        let l = setTimeout(r, 100);
        return () => {
          clearTimeout(l), e();
        };
      }, [t2, a]);
    }
    var i2, k5, KG, $61, Q61, On, rp = x(() => {
      M2();
      P1();
      M1();
      i2 = requireDist$2();
      H2();
      k5 = I(G());
      c1();
      Yu();
      G1();
      I0();
      b3();
      c8();
      $61 = B.div(KG || (KG = V(["\n  position: absolute;\n\n  right: 0;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  ", ";\n\n  // hide the scrollbar on Gecko\n  scrollbar-width: none;\n\n  // hide the scrollbar on Webkit/Blink\n  &::-webkit-scrollbar {\n    display: none;\n  }\n"])), C1), Q61 = k5.default.memo(({ layoutP: t2, children: a, height: c }) => {
        let { width: r, unitSpaceToScaledSpaceMultiplier: e } = v1(() => ({ width: (0, i2.val)(t2.rightDims.width), unitSpaceToScaledSpaceMultiplier: (0, i2.val)(t2.scaledSpace.fromUnitSpace)(1) }), [t2]), [l, i5] = z1(null);
        return Y61(t2, i5), X61(t2, i5), t81(t2, i5), k5.default.createElement($61, { ref: l, style: { width: r + "px", height: c + "px", "--unitSpaceToScaledSpaceMultiplier": e } }, a);
      }), On = Q61;
    });
    var En, $G, a81, QG, c81, XG, r81, e81, A5, Lr = x(() => {
      En = I(G());
      c1();
      a81 = B.li($G || ($G = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  box-sizing: border-box;\n  position: relative;\n"]))), c81 = B.div(QG || (QG = V(["\n  box-sizing: border-box;\n  width: 100%;\n  position: relative;\n\n  &:before {\n    position: absolute;\n    display: block;\n    content: ' ';\n    left: -40px;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    box-sizing: border-box;\n    border-bottom: 1px solid #252b3869;\n    background: ", ";\n  }\n"])), (t2) => t2.isEven ? "transparent" : "#6b8fb505"), r81 = B.ul(XG || (XG = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"]))), e81 = ({ leaf: t2, children: a, node: c, isCollapsed: r }) => {
        let e = Array.isArray(a) && a.length > 0;
        return t2.shouldRender ? En.default.createElement(a81, null, En.default.createElement(c81, { style: { height: t2.nodeHeight + "px" }, isEven: t2.n % 2 === 0 }, c), e && En.default.createElement(r81, null, a)) : null;
      }, A5 = e81;
    });
    var tT = L1((YG, JG) => {
      (function() {
        var t2 = this, a = {};
        typeof YG != "undefined" ? JG.exports = a : t2.fuzzy = a, a.simpleFilter = function(c, r) {
          return r.filter(function(e) {
            return a.test(c, e);
          });
        }, a.test = function(c, r) {
          return a.match(c, r) !== null;
        }, a.match = function(c, r, e) {
          e = e || {};
          var l = 0, i5 = [], o = r.length, n = 0, h = 0, v = e.pre || "", g = e.post || "", s = e.caseSensitive && r || r.toLowerCase(), d;
          c = e.caseSensitive && c || c.toLowerCase();
          for (var z = 0; z < o; z++) d = r[z], s[z] === c[l] ? (d = v + d + g, l += 1, h += 1 + h) : h = 0, n += h, i5[i5.length] = d;
          return l === c.length ? (n = s === c ? 1 / 0 : n, { rendered: i5.join(""), score: n }) : null;
        }, a.filter = function(c, r, e) {
          return !r || r.length === 0 ? [] : typeof c != "string" ? r : (e = e || {}, r.reduce(function(l, i5, o, n) {
            var h = i5;
            e.extract && (h = e.extract(i5));
            var v = a.match(c, h, e);
            return v != null && (l[l.length] = { string: v.rendered, score: v.score, index: o, original: i5 }), l;
          }, []).sort(function(l, i5) {
            var o = i5.score - l.score;
            return o || l.index - i5.index;
          }));
        };
      })();
    });
    function aT(t2, a) {
      let [c, r] = (0, ft.useState)(false), e = (0, ft.useRef)(a);
      return c || (e.current = a), (0, ft.useMemo)(() => t2(r), e.current);
    }
    var ft, cT = x(() => {
      ft = I(G());
    });
    var Dn, _4, Hr = x(() => {
      Dn = "rgba(26, 28, 30, 0.97);", _4 = "#272B2F";
    });
    function lT(t2, a, c, r) {
      let e = aT((l) => ({ debugName: "CurveSegmentEditor/useKeyframeDrag", lockCSSCursorTo: "move", onDragStart() {
        return l(true), { onDrag(i5, o) {
          t2 && c.onCurveChange(r(i5, o));
        }, onDragEnd(i5) {
          l(false), c.onCancelCurveChange();
        } };
      } }), [t2, c.onCurveChange, c.onCancelCurveChange]);
      S1(a, e);
    }
    var I1, lp, Wn, wr, l81, _n, i81, ep, o81, n81, h81, Vr, v81, Mt, g81, d81, rT, iT, ip, oT, eT, s81, nT, hT = x(() => {
      I1 = I(G());
      M2();
      P1();
      ua();
      c1();
      G1();
      cT();
      Hr();
      lp = 0.12, Wn = 1 + lp * 2, wr = 0.01, l81 = 8, _n = (1 - wr) / (l81 - 1), i81 = "#3EAAA4", ep = "#3EAAA4", o81 = "#3EAAA4", n81 = "#3EAAA4", h81 = "#3EAAA4", Vr = "#3EAAA4", v81 = "#3EAAA4", Mt = "#B3B3B3", g81 = "#3eaaa4", d81 = "#67dfd8", rT = ["goldenrod", "cornflowerblue", "dodgerblue", "lawngreen"], ip = B.circle(iT || (iT = V(["\n  stroke-width: 0.1px;\n  vector-effect: non-scaling-stroke;\n  r: 0.04px;\n  pointer-events: none;\n  transition: r 0.15s;\n  fill: ", ";\n"])), g81), eT = B.circle(oT || (oT = V(["\n  stroke-width: 0.1px;\n  vector-effect: non-scaling-stroke;\n  r: 0.09px;\n  cursor: move;\n  ", ";\n  &:hover {\n    opacity: 0.4;\n  }\n  &:hover + ", " {\n    fill: ", ";\n  }\n"])), C1, ip, d81), s81 = (t2) => {
        let { curveConnection: { left: a, right: c }, backgroundConnections: r } = t2, e = Math.min(0, 1 - c.handles[1], 1 - a.handles[3]), l = Math.max(1, 1 - c.handles[1], 1 - a.handles[3]), i5 = Math.max(1, l - e), o = (m) => (m - e) / i5, [n, h] = z1(null), v = Wn / ((h == null ? void 0 : h.clientWidth) || 1), g = Wn / ((h == null ? void 0 : h.clientHeight) || 1), [s, d] = z1(null);
        lT(h, d, t2, (m, M) => {
          let w = b1(a.handles[2] + m * v, 0, 1), H = a.handles[3] - M * g;
          return [w, H, c.handles[0], c.handles[1]];
        });
        let [z, u] = z1(null);
        lT(h, u, t2, (m, M) => {
          let w = b1(c.handles[0] + m * v, 0, 1), H = c.handles[1] - M * g;
          return [a.handles[2], a.handles[3], w, H];
        });
        let f = (m) => "M0 ".concat(o(1), " C").concat(m.left.handles[2], " ").concat(o(1 - m.left.handles[3]), " ").concat(m.right.handles[0], " ").concat(o(1 - m.right.handles[1]), " 1 ").concat(o(0));
        return I1.default.createElement("svg", { height: "100%", width: "100%", ref: n, viewBox: "".concat(-lp, " ").concat(-lp, " ").concat(Wn, " ").concat(Wn), xmlns: "http://www.w3.org/2000/svg", preserveAspectRatio: "none", fill: "none" }, I1.default.createElement("linearGradient", { id: "myGradient", gradientTransform: "rotate(90)" }, I1.default.createElement("stop", { offset: o(-1), stopColor: v81 }), I1.default.createElement("stop", { offset: o(0), stopColor: Vr }), I1.default.createElement("stop", { offset: o(0.3), stopColor: h81 }), I1.default.createElement("stop", { offset: o(0.5), stopColor: n81 }), I1.default.createElement("stop", { offset: o(0.7), stopColor: o81 }), I1.default.createElement("stop", { offset: o(1), stopColor: ep }), I1.default.createElement("stop", { offset: o(2), stopColor: i81 })), I1.default.createElement("pattern", { id: "dot-background-pattern-1", width: _n, height: _n / i5, y: -e / i5 }, I1.default.createElement("rect", { width: wr, height: wr, fill: Mt, opacity: 0.3 })), I1.default.createElement("rect", { x: 0, y: 0, width: "1", height: 1, fill: "url(#dot-background-pattern-1)" }), I1.default.createElement("pattern", { id: "dot-background-pattern-2", width: _n, height: _n }, I1.default.createElement("rect", { width: wr, height: wr, fill: Mt })), I1.default.createElement("rect", { x: 0, y: o(0), width: "1", height: o(1) - o(0), fill: "url(#dot-background-pattern-2)" }), !a.type || a.type === "bezier" ? I1.default.createElement(I1.default.Fragment, null, I1.default.createElement("line", { x1: 0, y1: o(1), x2: a.handles[2], y2: o(1 - a.handles[3]), stroke: Mt, strokeWidth: "0.01" }), I1.default.createElement("line", { x1: 1, y1: o(0), x2: c.handles[0], y2: o(1 - c.handles[1]), stroke: Mt, strokeWidth: "0.01" }), I1.default.createElement("path", { d: f(t2.curveConnection), stroke: "none", fill: "url('#myGradient')", opacity: "0.1" }), r.map((m, M) => I1.default.createElement("path", { key: m.objectKey + "/" + m.left.id, d: f(m), stroke: rT[M % rT.length], opacity: 0.6, strokeWidth: "0.01" })), I1.default.createElement("path", { d: f(t2.curveConnection), stroke: "url('#myGradient')", strokeWidth: "0.02" }), I1.default.createElement("circle", { cx: 0, cy: o(1), r: "0.025", stroke: ep, strokeWidth: "0.02", fill: _4 }), I1.default.createElement("circle", { cx: 1, cy: o(0), r: "0.025", stroke: Vr, strokeWidth: "0.02", fill: _4 }), I1.default.createElement(eT, { ref: s, cx: a.handles[2], cy: o(1 - a.handles[3]), fill: ep, opacity: 0.2 }), I1.default.createElement(ip, { cx: a.handles[2], cy: o(1 - a.handles[3]) }), I1.default.createElement(eT, { ref: z, cx: c.handles[0], cy: o(1 - c.handles[1]), fill: Vr, opacity: 0.2 }), I1.default.createElement(ip, { cx: c.handles[0], cy: o(1 - c.handles[1]) })) : I1.default.createElement(I1.default.Fragment, null, I1.default.createElement("line", { x1: 0, y1: o(1), x2: 1, y2: o(1), stroke: Mt, strokeWidth: "0.01" }), I1.default.createElement("line", { x1: 1, y1: o(1), x2: 1, y2: 0, stroke: Mt, strokeWidth: "0.01" }), I1.default.createElement("circle", { cx: 0, cy: 1, r: "0.025", stroke: Vr, strokeWidth: "0.02", fill: _4 }), I1.default.createElement("circle", { cx: 1, cy: 0, r: "0.025", stroke: Vr, strokeWidth: "0.02", fill: _4 })));
      }, nT = s81;
    });
    function Br(t2) {
      return t2.map((a) => a.toFixed(3)).join(", ");
    }
    function xt(t2) {
      if (!t2 || (t2 == null ? void 0 : t2.length) > z81) return null;
      let a = t2.split(",");
      if (a.length !== 4) return null;
      let c = a.map((r) => Number(r.trim()));
      return !c.every((r) => isFinite(r)) || c[0] < 0 || c[0] > 1 || c[2] < 0 || c[2] > 1 ? null : c;
    }
    function vT(t2, a, c = { threshold: 0.02 }) {
      if (!t2 || !a) return false;
      let r = 0;
      for (let e = 0; e < 4; e++) r += Math.abs(t2[e] - a[e]);
      return r < c.threshold;
    }
    var z81, jn, op = x(() => {
      z81 = 128;
      jn = [{ label: "Quad Out", value: "0.250, 0.460, 0.450, 0.940" }, { label: "Quad In Out", value: "0.455, 0.030, 0.515, 0.955" }, { label: "Quad In", value: "0.550, 0.085, 0.680, 0.530" }, { label: "Cubic Out", value: "0.215, 0.610, 0.355, 1.000" }, { label: "Cubic In Out", value: "0.645, 0.045, 0.355, 1.000" }, { label: "Cubic In", value: "0.550, 0.055, 0.675, 0.190" }, { label: "Quart Out", value: "0.165, 0.840, 0.440, 1.000" }, { label: "Quart In Out", value: "0.770, 0.000, 0.175, 1.000" }, { label: "Quart In", value: "0.895, 0.030, 0.685, 0.220" }, { label: "Quint Out", value: "0.230, 1.000, 0.320, 1.000" }, { label: "Quint In Out", value: "0.860, 0.000, 0.070, 1.000" }, { label: "Quint In", value: "0.755, 0.050, 0.855, 0.060" }, { label: "Sine Out", value: "0.390, 0.575, 0.565, 1.000" }, { label: "Sine In Out", value: "0.445, 0.050, 0.550, 0.950" }, { label: "Sine In", value: "0.470, 0.000, 0.745, 0.715" }, { label: "Expo Out", value: "0.190, 1.000, 0.220, 1.000" }, { label: "Expo In Out", value: "1.000, 0.000, 0.000, 1.000" }, { label: "Expo In", value: "0.780, 0.000, 0.810, 0.00" }, { label: "Circ Out", value: "0.075, 0.820, 0.165, 1.000" }, { label: "Circ In Out", value: "0.785, 0.135, 0.150, 0.860" }, { label: "Circ In", value: "0.600, 0.040, 0.980, 0.335" }, { label: "Back Out", value: "0.175, 0.885, 0.320, 1.275" }, { label: "Back In Out", value: "0.680, -0.550, 0.265, 1.550" }, { label: "Back In", value: "0.600, -0.280, 0.735, 0.045" }, { label: "linear", value: "0.5, 0.5, 0.5, 0.5" }, { label: "In Out", value: "0.42,0,0.58,1" }, { label: "Hold", value: "0, 0, Infinity, Infinity" }];
    });
    var d0, np, Ct, gT, u81, p81, qn, dT, sT, m81, zT, uT = x(() => {
      d0 = I(G()), np = 0.75, Ct = 0.1, gT = 1 + np * 2, u81 = "#F5F5F5", p81 = "#888888", qn = "#4f4f4f", dT = "rgba(255, 255, 255, 0.1)", sT = (t2) => 1 - t2, m81 = (t2) => {
        let { easing: a, isSelected: c } = t2, r = c ? u81 : p81, e = "".concat(-np, " ").concat(-np, " ").concat(gT, " ").concat(gT);
        if (a) {
          let l = [a[0], sT(a[1])], i5 = [a[2], sT(a[3])];
          return d0.default.createElement("svg", { height: "100%", width: "100%", viewBox: e, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, d0.default.createElement("line", { x1: "0", y1: "1", x2: l[0], y2: l[1], stroke: qn, strokeWidth: "0.1" }), d0.default.createElement("line", { x1: "1", y1: "0", x2: i5[0], y2: i5[1], stroke: qn, strokeWidth: "0.1" }), d0.default.createElement("circle", { cx: l[0], cy: l[1], r: 0.1, fill: dT }), d0.default.createElement("circle", { cx: i5[0], cy: i5[1], r: 0.1, fill: dT }), d0.default.createElement("circle", { cx: l[0], cy: l[1], r: Ct, fill: qn }), d0.default.createElement("circle", { cx: i5[0], cy: i5[1], r: Ct, fill: qn }), d0.default.createElement("path", { d: "M0 1 C".concat(l[0], " ").concat(l[1], " ").concat(i5[0], " \n        ").concat(i5[1], " 1 0"), stroke: r, strokeWidth: "0.08" }), d0.default.createElement("circle", { cx: 0, cy: 1, r: Ct, fill: r }), d0.default.createElement("circle", { cx: 1, cy: 0, r: Ct, fill: r }));
        }
        return d0.default.createElement("svg", { height: "100%", width: "100%", viewBox: e, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, d0.default.createElement("line", { x1: "0", y1: "1", x2: 1, y2: 1, stroke: r, strokeWidth: "0.08" }), d0.default.createElement("line", { x1: "1", y1: "0", x2: 1, y2: 1, stroke: r, strokeWidth: "0.08" }), d0.default.createElement("circle", { cx: 0, cy: 1, r: Ct, fill: r }), d0.default.createElement("circle", { cx: 1, cy: 0, r: Ct, fill: r }));
      }, zT = m81;
    });
    var yr, pT, mT, f81, fT, M81, x81, MT, xT = x(() => {
      nt();
      yr = I(G());
      c1();
      op();
      uT();
      Wc();
      Hr();
      e4();
      f81 = B.div(mT || (mT = V(["\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  aspect-ratio: 1;\n\n  transition: background-color 0.15s;\n  background-color: ", ";\n  border-radius: 2px;\n  cursor: pointer;\n  outline: none;\n\n  ", "\n\n  &:hover {\n    background-color: #31353a;\n  }\n\n  &:focus {\n    background-color: #383d42;\n  }\n"])), _4, ({ isSelected: t2 }) => t2 && f2(pT || (pT = V(["\n      background-color: #383d42;\n    "])))), M81 = B(T2)(fT || (fT = V(["\n  padding: 0.5em;\n  color: white;\n  max-width: 240px;\n  pointer-events: none !important;\n  --popover-bg: black;\n  --popover-outer-stroke: transparent;\n  --popover-inner-stroke: transparent;\n  box-shadow: none;\n"]))), x81 = yr.default.forwardRef((t2, a) => {
        let [c, r] = R3({ enabled: true, verticalPlacement: t2.tooltipPlacement, verticalGap: 0 }, () => yr.default.createElement(M81, { showPopoverEdgeTriangle: false }, t2.easing.label));
        return yr.default.createElement(f81, S({ ref: D6([r, a]) }, t2), c, yr.default.createElement(zT, { easing: xt(t2.easing.value), isSelected: t2.isSelected }));
      }), MT = x81;
    });
    function LT(t2) {
      var i5;
      let [a, c] = (0, CT.useState)(null), r = (o) => {
        if (a === null) {
          t2.items.length > 0 && c(0);
          return;
        }
        let n = a + o * t2.uiColumns, h = n < 0, v = n > t2.items.length - 1;
        if (h || v) {
          if (t2.canVerticleExit && t2.canVerticleExit(h ? "top" : "bottom")) {
            c(null);
            return;
          }
          return;
        }
        c(n);
      }, e = (o) => {
        a === null ? c(VT(o, t2.items.length)) : a + o < 0 ? c(null) : c(Math.min(a + o, t2.items.length - 1));
      };
      return { focusFirstItem() {
        c(0);
      }, onParentEltKeyDown: (o) => {
        if (o.key === "ArrowRight") e(1);
        else if (o.key === "ArrowLeft") e(-1);
        else if (o.key === "ArrowUp") r(-1);
        else if (o.key === "ArrowDown") r(1);
        else return 0;
        return 1;
      }, gridItems: t2.items.map((o, n) => t2.renderItem({ isSelected: n === a, item: o, select(h) {
        c(n), t2.onSelectItem(o) === 1 && (h == null || h.preventDefault(), h == null || h.stopPropagation());
      } })), currentSelection: (i5 = t2.items[a != null ? a : -1]) != null ? i5 : null };
    }
    var CT, HT = x(() => {
      CT = I(G());
      Sr();
    });
    function wT(t2, a, c) {
      var e;
      (e = t2.current) == null || e.discard(), t2.current = null;
      let r = xt(c);
      r === null ? t2.current = k81(a) : t2.current = S81(a, r);
    }
    function BT(t2) {
      var a;
      (a = t2.current) == null || a.discard(), t2.current = null;
    }
    function S81(t2, a) {
      return T().tempTransaction(({ stateEditors: c }) => {
        let { setHandlesForKeyframe: r, setKeyframeType: e } = c.coreByProject.historic.sheetsById.sequence;
        for (let { projectId: l, sheetId: i5, objectKey: o, trackId: n, left: h, right: v } of t2) r({ projectId: l, sheetId: i5, objectKey: o, trackId: n, keyframeId: h.id, start: [a[0], a[1]] }), r({ projectId: l, sheetId: i5, objectKey: o, trackId: n, keyframeId: v.id, end: [a[2], a[3]] }), e({ projectId: l, sheetId: i5, objectKey: o, trackId: n, keyframeId: h.id, keyframeType: "bezier" });
      });
    }
    function k81(t2) {
      return T().tempTransaction(({ stateEditors: a }) => {
        let { setKeyframeType: c } = a.coreByProject.historic.sheetsById.sequence;
        for (let { projectId: r, sheetId: e, objectKey: l, trackId: i5, left: o } of t2) c({ projectId: r, sheetId: e, objectKey: l, trackId: i5, keyframeId: o.id, keyframeType: "hold" });
      });
    }
    function VT(t2, a) {
      return (t2 % a + a) % a;
    }
    function A81(t2, a) {
      return () => setTimeout(t2, a);
    }
    function R81({ left: t2, right: a }) {
      return ({ left: c, right: r }) => t2.handles[2] !== c.handles[2] || t2.handles[3] !== c.handles[3] || a.handles[0] !== r.handles[0] || a.handles[1] !== r.handles[1];
    }
    var kr, D1, bT, FT, IT, C81, yT, L81, ST, H81, kT, V81, AT, w81, RT, B81, y81, Nn, WR1, Un, b81, Sr = x(() => {
      kr = requireDist$2(), D1 = I(G());
      c1();
      bT = I(tT());
      f1();
      hT();
      xT();
      op();
      Hr();
      P1();
      HT();
      FT = 3, IT = 53, C81 = 25, L81 = B.div(yT || (yT = V(["\n  background: ", ";\n  display: grid;\n  grid-template-areas:\n    'search  tween'\n    'presets tween';\n  grid-template-rows: 32px 1fr;\n  grid-template-columns: ", "px 120px;\n  gap: 1px;\n  height: 120px;\n"])), Dn, FT * IT), H81 = B.div(ST || (ST = V(["\n  overflow: auto;\n  grid-area: presets;\n\n  display: grid;\n  grid-template-columns: repeat(", ", 1fr);\n  grid-auto-rows: min-content;\n  gap: 1px;\n\n  overflow-y: scroll;\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\n  &::-webkit-scrollbar {\n    /* WebKit */\n    width: 0;\n    height: 0;\n  }\n"])), FT), V81 = B.input.attrs({ type: "text" })(kT || (kT = V(["\n  background-color: ", ";\n  border: none;\n  border-radius: 2px;\n  color: rgba(255, 255, 255, 0.8);\n  padding: 6px;\n  font-size: 12px;\n  outline: none;\n  cursor: text;\n  text-align: left;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n\n  grid-area: search;\n\n  &:hover {\n    background-color: #212121;\n  }\n\n  &:focus {\n    background-color: rgba(16, 16, 16, 0.26);\n    outline: 1px solid rgba(0, 0, 0, 0.35);\n  }\n"])), _4), w81 = B.div(AT || (AT = V(["\n  grid-area: tween;\n  background: ", ";\n"])), _4), B81 = B.div(RT || (RT = V(["\n  grid-column: 1 / 4;\n  padding: 6px;\n  color: #888888;\n"]))), y81 = (t2) => {
        let a = (0, D1.useMemo)(() => [t2.curveConnection, ...t2.additionalConnections], [t2.curveConnection, ...t2.additionalConnections]), c = (0, D1.useRef)(null);
        (0, D1.useEffect)(() => {
          let C = b81(a);
          return () => {
            var E;
            C(), (E = c.current) == null || E.commit();
          };
        }, [c]);
        let r = [t2.curveConnection.left.handles[2], t2.curveConnection.left.handles[3], t2.curveConnection.right.handles[0], t2.curveConnection.right.handles[1]], e = (0, D1.useRef)(null);
        (0, D1.useLayoutEffect)(() => {
          var C, E;
          (C = e.current) == null || C.select(), (E = e.current) == null || E.focus();
        }, [e.current]);
        let [l, i5] = (0, D1.useState)(Br(r)), o = (C) => {
          if (C === void 0) return;
          v(1), i5(C.target.value), xt(C.target.value) && s(C.target.value);
        }, n = (C) => {
          var E, a1;
          v(1), (C.key === "ArrowDown" || C.key === "ArrowUp") && C.preventDefault(), C.key === "ArrowDown" ? (P.focusFirstItem(), (a1 = (E = y.current[p[0].label]) == null ? void 0 : E.current) == null || a1.focus()) : C.key === "Escape" ? (BT(c), t2.onRequestClose("key Escape")) : C.key === "Enter" && t2.onRequestClose("key Enter");
        }, [h, v] = (0, D1.useState)(0);
        (0, D1.useEffect)(() => {
          h === 2 ? i5(Br(r)) : h === 3 && l !== "" && i5("");
        }, a);
        let [g, s] = (0, D1.useState)(Br(r)), [d, z] = (0, D1.useState)(null);
        (0, D1.useEffect)(() => {
          var C;
          h !== 0 && h !== 3 && wT(c, a, (C = d != null ? d : g) != null ? C : "");
        }, [d, g, h]), a.some(R81(t2.curveConnection)) && h === 0 && v(3);
        let u = (C) => {
          var a1, j;
          v(2);
          let E = Br(C);
          i5(E), s(E), (a1 = e.current) == null || a1.select(), (j = e.current) == null || j.focus();
        }, f = () => {
        }, p = (0, D1.useMemo)(() => /^[A-Za-z]/.test(l) ? bT.default.filter(l, jn, { extract: (E) => E.label }).map((E) => E.original) : jn, [l]);
        (0, D1.useEffect)(() => {
          h === 1 && p[0] && s(p[0].value);
        }, [p]);
        let m = (C) => {
          C.key === "Escape" ? (BT(c), t2.onRequestClose("key Escape"), C.stopPropagation()) : C.key === "Enter" && (t2.onRequestClose("key Enter"), C.stopPropagation());
        }, M = (C) => {
          h === 0 && v(2), z(C.value);
        }, w = () => z(null), H = (C) => (wT(c, a, C.value), t2.onRequestClose("selected easing option"), 1), y = (0, D1.useRef)(jn.reduce((C, E) => (C[E.label] = { current: null }, C), {})), [k, F] = z1(null), [U, A] = (0, D1.useState)(0);
        (0, D1.useEffect)(() => {
          let C = () => {
            var E;
            A((E = F == null ? void 0 : F.scrollTop) != null ? E : 0);
          };
          return F == null || F.addEventListener("scroll", C), () => F == null ? void 0 : F.removeEventListener("scroll", C);
        }, [F]);
        let P = LT({ items: p, uiColumns: 3, onSelectItem: H, canVerticleExit(C) {
          var E, a1;
          return C === "top" ? ((E = e.current) == null || E.select(), (a1 = e.current) == null || a1.focus(), 1) : 0;
        }, renderItem: ({ item: C, select: E }) => {
          var a1, j;
          return D1.default.createElement(MT, { key: C.label, easing: C, tabIndex: 0, onKeyDown: m, ref: y.current[C.label], onMouseOver: () => M(C), onMouseOut: w, onClick: E, tooltipPlacement: ((j = (a1 = y.current[C.label].current) == null ? void 0 : a1.offsetTop) != null ? j : 0) - (U != null ? U : 0) < IT + C81 ? "bottom" : "top", isSelected: vT(r, xt(C.value)) });
        } });
        return (0, D1.useLayoutEffect)(() => {
          var C, E;
          if (P.currentSelection !== null && document.activeElement !== e.current) {
            let a1 = (E = (C = y.current) == null ? void 0 : C[P.currentSelection.label]) == null ? void 0 : E.current;
            a1 == null || a1.focus(), s(P.currentSelection.value), /^[A-Za-z]/.test(l) || i5(P.currentSelection.value);
          }
        }, [P.currentSelection]), D1.default.createElement(L81, null, D1.default.createElement(V81, { value: l, placeholder: h === 3 ? "Multiple easings selected" : "Search presets...", onPaste: A81(o), onChange: o, ref: e, onKeyDown: n }), D1.default.createElement(H81, { ref: k, onKeyDown: (C) => P.onParentEltKeyDown(C) }, P.gridItems, P.gridItems.length === 0 ? D1.default.createElement(B81, null, "No results found") : void 0), D1.default.createElement(w81, { onClick: () => {
          var C;
          return (C = e.current) == null ? void 0 : C.focus();
        } }, D1.default.createElement(nT, { curveConnection: t2.curveConnection, backgroundConnections: t2.additionalConnections, onCurveChange: u, onCancelCurveChange: f })));
      }, Nn = y81;
      ({ isCurveEditorOpenD: WR1, isConnectionEditingInCurvePopover: Un, getLock: b81 } = (() => {
        let t2 = new kr.Atom([]);
        return { getLock(a) {
          return t2.set(a), function() {
            t2.set([]);
          };
        }, isCurveEditorOpenD: (0, kr.prism)(() => t2.prism.getValue().length > 0), isConnectionEditingInCurvePopover(a) {
          return kr.prism.ensurePrism(), t2.prism.getValue().some(({ left: c, right: r }) => a.left.id === c.id && a.right.id === r.id);
        } };
      })());
    });
    function F81(t2, a) {
      for (let { keyframeId: c } of G81(a)) if (t2.left.id === c) return true;
      return false;
    }
    function Kn(t2, a, c) {
      return (0, Ar.prism)(() => {
        if (c === void 0) return [];
        let r = [];
        for (let { objectKey: e, trackId: l } of PT(c)) {
          let i5 = (0, Ar.val)(T().atomP.historic.coreByProject[t2].sheetsById[a].sequence.tracksByObject[e].trackData[l]);
          i5 && (r = r.concat(P81(i5.keyframes).filter((o) => F81(o, c)).map(({ left: o, right: n }) => ({ left: o, right: n, trackId: l, objectKey: e, sheetId: a, projectId: t2 }))));
        }
        return r;
      });
    }
    function r8(t2, a, c) {
      var i5;
      if (c === void 0) return [];
      let r = [];
      for (let { objectKey: o, trackId: n, keyframeIds: h } of PT(c)) r = r.concat((i5 = Rr({ projectId: t2, sheetId: a, objectKey: o, trackId: n, keyframeIds: h })) != null ? i5 : []);
      let e = J6(r.map((o) => o.pathToProp));
      return r.map(({ keyframe: o, pathToProp: n }) => ({ keyframe: o, pathToProp: n.slice(e.length) }));
    }
    function Rr({ projectId: t2, sheetId: a, objectKey: c, trackId: r, keyframeIds: e }) {
      let l = (0, Ar.val)(T().atomP.historic.coreByProject[t2].sheetsById[a].sequence.tracksByObject[c]), i5 = l == null ? void 0 : l.trackData[r];
      if (!i5) return null;
      let n = I81((l == null ? void 0 : l.trackIdByPropPath) || {})[r];
      if (!n) return null;
      let h = [c, ...ut(n)];
      return e.map((v) => ({ keyframe: i5.keyframes.find((g) => g.id === v), pathToProp: h })).filter(({ keyframe: v }) => v !== void 0);
    }
    function I81(t2) {
      let a = {};
      for (let [c, r] of Object.entries(t2)) a[r] = c;
      return a;
    }
    function P81(t2) {
      return t2.map((a, c) => ({ left: a, right: t2[c + 1] })).slice(0, -1);
    }
    function G81(t2) {
      var c, r, e;
      let a = [];
      for (let [l, i5] of Object.entries((c = t2 == null ? void 0 : t2.byObjectKey) != null ? c : {})) for (let [o, n] of Object.entries((r = i5 == null ? void 0 : i5.byTrackId) != null ? r : {})) for (let h of Object.keys((e = n == null ? void 0 : n.byKeyframeId) != null ? e : {})) a.push({ objectKey: l, trackId: o, keyframeId: h });
      return a;
    }
    function PT(t2) {
      var c, r, e;
      let a = [];
      for (let [l, i5] of Object.entries((c = t2 == null ? void 0 : t2.byObjectKey) != null ? c : {})) for (let [o, n] of Object.entries((r = i5 == null ? void 0 : i5.byTrackId) != null ? r : {})) a.push({ objectKey: l, trackId: o, keyframeIds: Object.keys((e = n == null ? void 0 : n.byKeyframeId) != null ? e : {}) });
      return a;
    }
    var Ar, o7 = x(() => {
      Ar = requireDist$2();
      f1();
      o4();
    });
    function TT(t2, a) {
      return (0, GT.useMemo)(() => T81(t2, a), []);
    }
    function T81(t2, a) {
      let c = null, r = (i5) => T().tempTransaction((o) => t2(o, i5));
      function e() {
        c == null || c.discard(), c = null;
      }
      let l = { createAsset: a.sheet.project.assetStorage.createAsset, getAssetUrl: (i5) => i5.id ? a.sheet.project.assetStorage.getAssetUrl(i5.id) : void 0 };
      return S({ temporarilySetValue(i5) {
        e(), c = r(i5);
      }, discardTemporaryValue: e, permanentlySetValue(i5) {
        e(), r(i5).commit();
      } }, l);
    }
    var GT, ZT = x(() => {
      f1();
      GT = I(G());
    });
    function $n(t2) {
      var a;
      if (t2.type === "sheetObject") return $2.default.createElement($2.default.Fragment, null, $2.default.createElement(hp, { style: { paddingLeft: "".concat(t2.indent * vp, "px") } }, t2.sheetObject.address.objectKey), t2.children.map((c, r) => $2.default.createElement($n, D(S({ key: r }, c), { autoFocusInput: t2.autoFocusInput && r === 0, indent: t2.indent + 1 }))));
      if (t2.type === "propWithChildren") {
        let c = (a = t2.propConfig.label) != null ? a : M3(t2.pathToProp);
        return $2.default.createElement($2.default.Fragment, null, $2.default.createElement(hp, { style: { paddingLeft: "".concat(t2.indent * vp, "px") } }, c), t2.children.map((r, e) => $2.default.createElement($n, D(S({ key: e }, r), { autoFocusInput: t2.autoFocusInput && e === 0, indent: t2.indent + 1 }))));
      } else return $2.default.createElement(E81, D(S({}, t2), { autoFocusInput: t2.autoFocusInput, indent: t2.indent }));
    }
    function E81(t2) {
      var r;
      let a = (r = t2.propConfig.label) != null ? r : M3(t2.pathToProp), c = D81(t2);
      if (t2.propConfig.type === "enum") return $2.default.createElement($2.default.Fragment, null);
      {
        let e = Go[t2.propConfig.type];
        return $2.default.createElement(Z81, null, $2.default.createElement(hp, null, $2.default.createElement("span", { style: { paddingLeft: "".concat(t2.indent * vp, "px") } }, a)), $2.default.createElement(O81, null, $2.default.createElement(e, { editingTools: c, propConfig: t2.propConfig, value: X8(t2.keyframe.value, t2.propConfig), autoFocus: t2.autoFocusInput })));
      }
    }
    function D81(t2) {
      let a = t2.sheetObject;
      return TT(({ stateEditors: c }, r) => {
        let e = D(S({}, t2.keyframe), { value: r });
        c.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, a.address), { trackId: t2.trackId, keyframes: [e], snappingFunction: a.sheet.getSequence().closestGridPosition }));
      }, a);
    }
    var $2, OT, Z81, ET, hp, vp, DT, O81, WT = x(() => {
      $2 = I(G());
      c1();
      au();
      ma();
      ZT();
      H5();
      Z81 = B.div(OT || (OT = V(["\n  display: flex;\n  align-items: stretch;\n  min-width: 200px;\n\n  select {\n    min-width: 100px;\n  }\n"]))), hp = B.div(ET || (ET = V(["\n  font-style: normal;\n  font-weight: 400;\n  font-size: 11px;\n  line-height: 13px;\n  letter-spacing: 0.01em;\n  padding: 6px 6px 6px 0;\n\n  width: 40%;\n\n  color: #919191;\n\n  overflow: hidden;\n"]))), vp = 10;
      O81 = B.div(DT || (DT = V(["\n  display: flex;\n  align-items: center;\n  width: 60%;\n"])));
    });
    function e8(t2) {
      return x2({ debugName: "useKeyframeInlineEditorPopover" }, () => Qn.default.createElement(T2, { showPopoverEdgeTriangle: true }, Qn.default.createElement("div", { style: { margin: "1px 2px 1px 10px" } }, Array.isArray(t2) ? t2.map((a, c) => Qn.default.createElement($n, D(S({ key: c }, a), { autoFocusInput: c === 0, indent: 0 }))) : void 0)));
    }
    var Qn, br = x(() => {
      Qn = I(G());
      c4();
      e4();
      WT();
    });
    function q81(t2, a, c) {
      return Z1(t2, { displayName: "Keyframe", menuItems: () => {
        let r = r8(c.leaf.sheetObject.address.projectId, c.leaf.sheetObject.address.sheetId, c.selection);
        return [{ label: r.length > 0 ? "Copy (selection)" : "Copy", callback: () => {
          r.length > 0 ? T().transaction((e) => {
            e.stateEditors.studio.ahistoric.setClipboardKeyframes(r);
          }) : T().transaction((e) => {
            e.stateEditors.studio.ahistoric.setClipboardKeyframes([{ keyframe: c.keyframe, pathToProp: c.leaf.pathToProp }]);
          });
        } }, { label: c.selection !== void 0 ? "Delete (selection)" : "Delete", callback: () => {
          c.selection ? c.selection.delete() : T().transaction(({ stateEditors: e }) => {
            e.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, c.leaf.sheetObject.address), { keyframeIds: [c.keyframe.id], trackId: c.leaf.trackId }));
          });
        } }];
      }, onOpen() {
        a._debug("Show keyframe", c);
      } });
    }
    function N81(t2, a, c) {
      let r = (0, j4.useRef)(a);
      r.current = a;
      let { onClickFromDrag: e } = c, l = (0, j4.useMemo)(() => ({ debugName: "KeyframeDot/useDragKeyframe", onDragStart(o) {
        let n = r.current, h = (0, Yn.val)(T().atomP.historic.coreByProject[n.leaf.sheetObject.address.projectId].sheetsById[n.leaf.sheetObject.address.sheetId].sequence.tracksByObject), v = Zn(h, function(u, { trackId: f, objectKey: p }) {
          var m, M;
          return u.id !== n.keyframe.id && !(n.selection && ((M = (m = n.selection.byObjectKey[p]) == null ? void 0 : m.byTrackId[f]) != null && M.byKeyframeId[u.id]));
        });
        if (Tn(v), n.selection) {
          let { selection: z, leaf: u } = n, { sheetObject: f } = u, p = z.getDragHandlers(D(S({}, f.address), { domNode: t2, positionAtStartOfDrag: n.track.data.keyframes[n.index].position })).onDragStart(o);
          return p && D(S({}, p), { onClick: e, onDragEnd: (...m) => {
            var M;
            (M = p.onDragEnd) == null || M.call(p, ...m), I3();
          } });
        }
        let g = n, s = (0, Yn.val)(g.layoutP.scaledSpace.toUnitSpace), d;
        return { onDrag(z, u, f) {
          var M;
          let p = g.track.data.keyframes[g.index], m = Math.max((M = r2.checkIfMouseEventSnapToPos(f, { ignore: t2 })) != null ? M : p.position + s(z), 0);
          d == null || d.discard(), d = void 0, d = T().tempTransaction(({ stateEditors: w }) => {
            w.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, g.leaf.sheetObject.address), { trackId: g.leaf.trackId, keyframes: [D(S({}, p), { position: m })], snappingFunction: (0, Yn.val)(g.layoutP.sheet).getSequence().closestGridPosition }));
          });
        }, onDragEnd(z) {
          z ? d == null || d.commit() : d == null || d.discard(), I3();
        }, onClick(z) {
          e(z);
        } };
      } }), [e]), [i5] = S1(t2, l);
      return g0(i5, a.keyframe.position), s2(i5, "draggingPositionInSequenceEditor", "ew-resize"), [i5];
    }
    var j4, Yn, Fr, _T, Xn, UT, jT, gp, qT, W81, NT, _81, j81, KT, sp = x(() => {
      j4 = I(G());
      c1();
      f1();
      v0();
      M2();
      P1();
      Yn = requireDist$2();
      E2();
      I0();
      b3();
      Cr();
      L5();
      o7();
      G1();
      c8();
      br();
      K6();
      Fr = 6, _T = Fr + 2, Xn = { normalColor: "#40AAA4", selectedColor: "#F2C95C", inlineEditorOpenColor: "#FCF3DC", selectedAndInlineEditorOpenColor: "#CBEBEA" }, UT = ({ isSelected: t2, isInlineEditorPopoverOpen: a }) => t2 && a ? Xn.inlineEditorOpenColor : t2 ? Xn.selectedColor : a ? Xn.selectedAndInlineEditorOpenColor : Xn.normalColor, gp = B.div(jT || (jT = V(["\n  position: absolute;\n  ", "\n\n  background: ", ";\n  transform: rotateZ(45deg);\n\n  ", ";\n\n  z-index: 1;\n  pointer-events: none;\n"])), H0(Fr), (t2) => UT(t2), (t2) => t2.flag === 2 ? "outline: 2px solid white;" : ""), W81 = B.div(qT || (qT = V(["\n  position: absolute;\n  ", "\n\n  background: ", ";\n\n  ", ";\n\n  z-index: 1;\n  pointer-events: none;\n"])), H0(Fr * 1.5), (t2) => UT(t2), (t2) => t2.flag === 2 ? "outline: 2px solid white;" : ""), _81 = B.div(NT || (NT = V(["\n  z-index: 1;\n  cursor: ew-resize;\n\n  position: absolute;\n  ", ";\n  ", ";\n\n  & + ", " {\n    ", "\n  }\n\n  &:hover + ", " {\n    ", "\n  }\n"])), H0(12), C1, gp, (t2) => t2.isInlineEditorPopoverOpen ? H0(_T) : "", gp, H0(_T)), j81 = (t2) => {
        let a = C0("SingleKeyframeDot", t2.keyframe.id), c = i3(t2.itemKey), [r, e] = z1(null), [l] = q81(e, a, t2), { node: i5, toggle: o, isOpen: n } = e8([{ type: "primitiveProp", keyframe: t2.keyframe, pathToProp: t2.leaf.pathToProp, propConfig: t2.leaf.propConf, sheetObject: t2.leaf.sheetObject, trackId: t2.leaf.trackId }]);
        N81(e, t2, { onClickFromDrag(g) {
          o(g, r.current);
        } });
        let v = !t2.keyframe.type || t2.keyframe.type === "bezier";
        return j4.default.createElement(j4.default.Fragment, null, j4.default.createElement(_81, S({ ref: r, isInlineEditorPopoverOpen: n }, c.attrs)), v ? j4.default.createElement(gp, { isSelected: !!t2.selection, isInlineEditorPopoverOpen: n, flag: c.flag }) : j4.default.createElement(W81, { isSelected: !!t2.selection, isInlineEditorPopoverOpen: n, flag: c.flag }), i5, l);
      }, KT = j81;
    });
    var zp, $T, XT, Lt, QT, U81, Jn, up = x(() => {
      R0();
      zp = I(G());
      c1();
      sp();
      $T = Fr / 2 + 1, XT = 1e3, Lt = { normalColor: "#365b59", selectedColor: "#8A7842", barColor: (t2) => {
        let a = t2.isSelected ? Lt.selectedColor : Lt.normalColor;
        return t2.isPopoverOpen ? _i(0.2, R6(0.2, a)) : a;
      }, hoverColor: (t2) => {
        let a = t2.isSelected ? Lt.selectedColor : Lt.normalColor;
        return t2.isPopoverOpen ? _i(0.2, R6(0.2, a)) : _i(0.1, R6(0.1, a));
      } }, U81 = B.div(QT || (QT = V(["\n  position: absolute;\n  background: ", ";\n  height: ", "px;\n  width: ", "px;\n\n  left: 0;\n  top: -", "px;\n  transform-origin: top left;\n  z-index: 0;\n  cursor: ew-resize;\n\n  &:after {\n    display: block;\n    position: absolute;\n    content: ' ';\n    top: -4px;\n    bottom: -4px;\n    left: 0;\n    right: 0;\n  }\n\n  &:hover {\n    background: ", ";\n  }\n"])), Lt.barColor, $T, XT, $T / 2, Lt.hoverColor), Jn = zp.default.forwardRef((t2, a) => {
        let c = { isPopoverOpen: t2.isPopoverOpen, isSelected: t2.isSelected };
        return zp.default.createElement(U81, D(S({}, c), { ref: a, style: { transform: "scaleX(calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(t2.connectorLengthInUnitSpace / XT, "))") }, onClick: (r) => {
          var e;
          (e = t2.openPopover) == null || e.call(t2, r);
        } }), t2.children);
      });
    });
    function X81(t2, a) {
      let c = (0, ah.useRef)(a);
      c.current = a;
      let r = (0, ah.useMemo)(() => ({ debugName: "useDragKeyframe", lockCSSCursorTo: "ew-resize", onDragStart(e) {
        let l = c.current, i5;
        if (l.selection) {
          let { selection: v, leaf: g } = l, { sheetObject: s } = g;
          return v.getDragHandlers(D(S({}, s.address), { domNode: t2, positionAtStartOfDrag: l.track.data.keyframes[l.index].position })).onDragStart(e);
        }
        let o = l, n = (0, th.val)(o.layoutP.sheet).getSequence(), h = (0, th.val)(o.layoutP.scaledSpace.toUnitSpace);
        return { onDrag(v, g, s) {
          let d = h(v);
          i5 && (i5.discard(), i5 = void 0), i5 = T().tempTransaction(({ stateEditors: z }) => {
            z.coreByProject.historic.sheetsById.sequence.transformKeyframes(D(S({}, o.leaf.sheetObject.address), { trackId: o.leaf.trackId, keyframeIds: [o.keyframe.id, o.track.data.keyframes[o.index + 1].id], translate: d, scale: 1, origin: 0, snappingFunction: n.closestGridPosition }));
          });
        }, onDragEnd(v) {
          v ? i5 && i5.commit() : i5 && i5.discard();
        } };
      } }), []);
      S1(t2, r);
    }
    function Y81(t2, a, c, r) {
      return Z1(a, { displayName: "Tween", menuItems: () => {
        let e = r8(t2.leaf.sheetObject.address.projectId, t2.leaf.sheetObject.address.sheetId, t2.selection);
        return [{ label: e.length > 0 ? "Copy (selection)" : "Copy", callback: () => {
          e.length > 0 ? T().transaction((l) => {
            l.stateEditors.studio.ahistoric.setClipboardKeyframes(e);
          }) : T().transaction((l) => {
            l.stateEditors.studio.ahistoric.setClipboardKeyframes([{ keyframe: c, pathToProp: t2.leaf.pathToProp }, { keyframe: r, pathToProp: t2.leaf.pathToProp }]);
          });
        } }, { label: t2.selection ? "Delete (selection)" : "Delete", callback: () => {
          t2.selection ? t2.selection.delete() : T().transaction(({ stateEditors: l }) => {
            l.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, t2.leaf.sheetObject.address), { keyframeIds: [c.id, r.id], trackId: t2.leaf.trackId }));
          });
        } }];
      } });
    }
    var th, l8, ah, YT, JT, K81, $81, tZ, Q81, aZ = x(() => {
      f1();
      v0();
      M2();
      P1();
      th = requireDist$2(), l8 = I(G()), ah = I(G());
      c4();
      e4();
      Sr();
      up();
      Hr();
      M1();
      o7();
      o7();
      c1();
      YT = 5, K81 = B(T2)(JT || (JT = V(["\n  --popover-outer-stroke: transparent;\n  --popover-inner-stroke: ", ";\n"])), Dn), $81 = (t2) => {
        let { index: a, track: c } = t2, r = c.data.keyframes[a], e = c.data.keyframes[a + 1], [l, i5] = z1(null), { node: o, toggle: n, close: h } = x2(() => {
          let z = (0, th.val)(t2.layoutP.rightDims);
          return { debugName: "Connector", constraints: { minX: z.screenX + YT, maxX: z.screenX + z.width - YT } };
        }, () => l8.default.createElement(Q81, D(S({}, t2), { closePopover: h }))), [v] = Y81(t2, i5, r, e);
        X81(i5, t2);
        let g = e.position - r.position, d = { isPopoverOpen: v1(() => Un(D(S({}, t2.leaf.sheetObject.address), { trackId: t2.leaf.trackId, left: r, right: e })), [t2.leaf.sheetObject.address, t2.leaf.trackId, r, e]), isSelected: t2.selection !== void 0 };
        return l8.default.createElement(l8.default.Fragment, null, l8.default.createElement(Jn, D(S({ ref: l, connectorLengthInUnitSpace: g }, d), { openPopover: (z) => {
          i5 && n(z, i5);
        } }), o), v);
      }, tZ = $81, Q81 = l8.default.forwardRef((t2, a) => {
        let { index: c, track: { data: r }, selection: e } = t2, l = r.keyframes[c], i5 = r.keyframes[c + 1], o = t2.leaf.trackId, n = t2.leaf.sheetObject.address, h = v1(() => Kn(n.projectId, n.sheetId, e).getValue(), [n, e]), v = S({ left: l, right: i5, trackId: o }, n);
        return l8.default.createElement(K81, { showPopoverEdgeTriangle: false, ref: a }, l8.default.createElement(Nn, { curveConnection: v, additionalConnections: h, onRequestClose: t2.closePopover }));
      });
    });
    var rZ, n7, cZ, J81, t71, a71, eZ, lZ = x(() => {
      rZ = requireDist$2(), n7 = I(G());
      c1();
      aZ();
      sp();
      J81 = B.div(cZ || (cZ = V(["\n  position: absolute;\n"]))), t71 = n7.default.createElement(n7.default.Fragment, null), a71 = n7.default.memo((t2) => {
        let { index: a, track: { data: c } } = t2, r = c.keyframes[a], e = c.keyframes[a + 1], l = r.connectedRight && !!e;
        return n7.default.createElement(J81, { style: { top: "".concat(t2.leaf.nodeHeight / 2, "px"), left: "calc(".concat((0, rZ.val)(t2.layoutP.scaledSpace.leftPadding), "px + calc(var(--unitSpaceToScaledSpaceMultiplier) * ").concat(r.position, "px))") } }, n7.default.createElement(KT, D(S({}, t2), { itemKey: t2.itemKey })), l ? n7.default.createElement(tZ, S({}, t2)) : t71);
      }), eZ = a71;
    });
    function r71(t2, a) {
      return Z1(t2, { displayName: "Keyframe Track", menuItems: () => {
        var r;
        let c = (r = (0, Ht.val)(T().atomP.ahistoric.clipboard.keyframesWithRelativePaths)) != null ? r : [];
        return [e71(a, c)];
      } });
    }
    function e71(t2, a) {
      return { label: "Paste Keyframes", enabled: a.length > 0, callback: () => {
        var i5;
        let r = (0, Ht.val)(t2.layoutP.sheet).getSequence(), e = (i5 = a[0]) == null ? void 0 : i5.pathToProp, l = a.filter(({ keyframe: o, pathToProp: n }) => fG(e, n)).map(({ keyframe: o, pathToProp: n }) => o);
        T().transaction(({ stateEditors: o }) => {
          var h;
          r.position = r.closestGridPosition(r.position);
          let n = (h = l71(l)) == null ? void 0 : h.position;
          for (let v of l) o.coreByProject.historic.sheetsById.sequence.setKeyframeAtPosition(D(S({}, t2.leaf.sheetObject.address), { trackId: t2.leaf.trackId, position: r.position + v.position - n, handles: v.handles, value: v.value, snappingFunction: r.closestGridPosition, type: v.type }));
        });
      } };
    }
    function l71(t2) {
      let a = null;
      for (let c of t2) (a === null || c.position < a.position) && (a = c);
      return a;
    }
    var Ht, q4, iZ, c71, oZ, nZ, hZ = x(() => {
      M1();
      Ht = requireDist$2(), q4 = I(G());
      c1();
      lZ();
      v0();
      P1();
      f1();
      o4();
      c8();
      O4();
      c71 = B.div(iZ || (iZ = V(["\n  position: relative;\n  height: 100%;\n  width: 100%;\n"]))), oZ = q4.default.memo((t2) => {
        var m;
        let { layoutP: a, trackData: c, leaf: r } = t2, [e, l] = z1(null), { selectedKeyframeIds: i5, selection: o } = v1(() => {
          let M = (0, Ht.val)(a.selectionAtom), w = (0, Ht.val)(M.pointer.current.byObjectKey[r.sheetObject.address.objectKey].byTrackId[r.trackId].byKeyframeId);
          return w ? { selectedKeyframeIds: w, selection: (0, Ht.val)(M.pointer.current) } : { selectedKeyframeIds: {}, selection: void 0 };
        }, [a, r.trackId]), [n, h, v] = r71(l, t2), g = s1(Gn), s = g.mode === "snapToSome" ? (m = g.positions[r.sheetObject.address.objectKey]) == null ? void 0 : m[r.trackId] : [], d = g.mode === "snapToAll", z = (0, q4.useMemo)(() => ({ data: c, id: r.trackId, sheetObject: t2.leaf.sheetObject }), [c, r.trackId]), u = c.keyframes.map((M, w) => q4.default.createElement(eZ, { key: "keyframe-" + M.id, itemKey: c2.forTrackKeyframe(r.sheetObject, r.trackId, M.id), keyframe: M, index: w, track: z, layoutP: a, leaf: r, selection: i5[M.id] === true ? o : void 0 })), f = s.map((M) => q4.default.createElement(pt, { key: "snap-target-" + M, layoutP: a, leaf: r, position: M })), p = d ? c.keyframes.map((M) => q4.default.createElement(pt, { key: "additionalSnapTarget-".concat(M.id), layoutP: a, leaf: r, position: M.position })) : null;
        return q4.default.createElement(c71, { ref: e, style: { background: v ? "#444850 " : "unset" } }, u, f, q4.default.createElement(q4.default.Fragment, null, p), n);
      });
      oZ.displayName = "BasicKeyframedTrack";
      nZ = oZ;
    });
    var vZ, Ir, i71, gZ, dZ = x(() => {
      f1();
      M1();
      vZ = requireDist$2(), Ir = I(G());
      Lr();
      hZ();
      L5();
      i71 = ({ leaf: t2, layoutP: a }) => {
        let c = C0("PrimitivePropRow", t2.pathToProp.join());
        return v1(() => {
          let { sheetObject: r } = t2, { trackId: e } = t2, l = (0, vZ.val)(T().atomP.historic.coreByProject[r.address.projectId].sheetsById[r.address.sheetId].sequence.tracksByObject[r.address.objectKey].trackData[e]);
          return (l == null ? void 0 : l.type) !== "BasicKeyframedTrack" ? (c.errorDev("trackData type ".concat(l == null ? void 0 : l.type, " is not yet supported on the sequence editor")), Ir.default.createElement(A5, { leaf: t2, isCollapsed: false, node: Ir.default.createElement("div", null) })) : Ir.default.createElement(A5, { leaf: t2, isCollapsed: false, node: Ir.default.createElement(nZ, { layoutP: a, trackData: l, leaf: t2 }) });
        }, [t2, a]);
      }, gZ = i71;
    });
    function sZ(t2) {
      return t2();
    }
    var zZ = x(() => {
    });
    function ch(t2) {
      let { index: a, aggregateKeyframes: c, selection: r } = t2;
      return v1(mp(t2), [a, c, r, t2.viewModel]);
    }
    function mp(t2) {
      let { index: a, aggregateKeyframes: c, selection: r } = t2, { projectId: e, sheetId: l } = t2.viewModel.type === "sheet" ? t2.viewModel.sheet.address : t2.viewModel.sheetObject.address;
      return () => {
        let i5 = c[a], o = c[a + 1], h = o && i5.keyframes.length === o.keyframes.length && i5.keyframes.every(({ track: z }, u) => o.keyframes[u].track === z) ? { length: o.position - i5.position, selected: i5.selected === 0 && o.selected === 0 } : null, v = h ? i5.keyframes.map(({ kf: z, track: u }, f) => D(S({}, u.sheetObject.address), { trackId: u.id, left: z, right: o.keyframes[f].kf })) : [], g = sZ(() => {
          let z = pp.prism.memo("selectedConnections", () => Kn(e, l, r), [e, l, r]).getValue();
          return [...v, ...z];
        }), s = v.every((z) => Un(z));
        return { itemKey: pp.prism.memo("itemKey", () => t2.viewModel.type === "sheet" ? c2.forSheetAggregateKeyframe(t2.viewModel.sheet, i5.position) : t2.viewModel.type === "sheetObject" ? c2.forSheetObjectAggregateKeyframe(t2.viewModel.sheetObject, i5.position) : c2.forCompoundPropAggregateKeyframe(t2.viewModel.sheetObject, t2.viewModel.pathToProp, i5.position), [t2.viewModel, i5.position]), cur: i5, connected: h, isAggregateEditingInCurvePopover: s, allConnections: g };
      };
    }
    var pp, rh = x(() => {
      pp = requireDist$2();
      O4();
      Sr();
      M1();
      o7();
      zZ();
    });
    function h71(t2, a) {
      let c = (0, E0.useRef)(a);
      c.current = a;
      let r = (0, E0.useMemo)(() => ({ debugName: "useDragKeyframe", lockCSSCursorTo: "ew-resize", onDragStart(e) {
        let l = c.current, i5, o = l.aggregateKeyframes[l.index].keyframes, { selection: n, viewModel: h } = l, v = h.type === "sheet" ? h.sheet.address : h.sheetObject.address;
        if (n && l.aggregateKeyframes[l.index].selected === 0) return n.getDragHandlers(D(S({}, v), { domNode: t2, positionAtStartOfDrag: l.aggregateKeyframes[l.index].position })).onDragStart(e);
        let g = l, s = (0, eh.val)(g.layoutP.sheet).getSequence(), d = (0, eh.val)(g.layoutP.scaledSpace.toUnitSpace);
        return { onDrag(z, u, f) {
          let p = d(z);
          i5 && (i5.discard(), i5 = void 0), i5 = T().tempTransaction(({ stateEditors: m }) => {
            for (let M of o) m.coreByProject.historic.sheetsById.sequence.transformKeyframes(D(S({}, M.track.sheetObject.address), { trackId: M.track.id, keyframeIds: [M.kf.id, M.track.data.keyframes[M.track.data.keyframes.indexOf(M.kf) + 1].id], translate: p, scale: 1, origin: 0, snappingFunction: s.closestGridPosition }));
          });
        }, onDragEnd(z) {
          z ? i5 && i5.commit() : i5 && i5.discard();
        } };
      } }), []);
      return S1(t2, r);
    }
    function v71(t2, a) {
      return Z1(a, { displayName: "Aggregate Tween", menuItems: () => {
        let c = t2.utils.allConnections.reduce((o, n) => {
          var h;
          return o.concat((h = Rr(D(S({}, n), { keyframeIds: [n.left.id, n.right.id] }))) != null ? h : []);
        }, []), r = J6(c.map((o) => o.pathToProp)), e = c.map(({ keyframe: o, pathToProp: n }) => ({ keyframe: o, pathToProp: n.slice(r.length) })), l = t2.editorProps.viewModel, i5 = l.type === "sheet" ? l.sheet.address : l.sheetObject.address;
        return [{ label: "Copy", callback: () => {
          if (t2.editorProps.selection) {
            let o = r8(i5.projectId, i5.sheetId, t2.editorProps.selection);
            T().transaction((n) => {
              n.stateEditors.studio.ahistoric.setClipboardKeyframes(o);
            });
          } else T().transaction((o) => {
            o.stateEditors.studio.ahistoric.setClipboardKeyframes(e);
          });
        } }, { label: "Delete", callback: () => {
          t2.editorProps.selection ? t2.editorProps.selection.delete() : T().transaction(({ stateEditors: o }) => {
            for (let n of t2.utils.allConnections) o.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, i5), { objectKey: n.objectKey, keyframeIds: [n.left.id, n.right.id], trackId: n.trackId }));
          });
        } }];
      } });
    }
    var eh, E0, uZ, pZ, o71, n71, mZ, fZ = x(() => {
      eh = requireDist$2(), E0 = I(G());
      up();
      c4();
      P1();
      f1();
      M2();
      Sr();
      rh();
      c1();
      e4();
      o7();
      v0();
      o4();
      uZ = 5, o71 = B(T2)(pZ || (pZ = V(["\n  --popover-outer-stroke: transparent;\n  --popover-inner-stroke: rgba(26, 28, 30, 0.97);\n"]))), n71 = E0.default.forwardRef((t2, a) => {
        let { allConnections: c } = ch(t2);
        return E0.default.createElement(o71, { showPopoverEdgeTriangle: false, ref: a }, E0.default.createElement(Nn, { curveConnection: c[0], additionalConnections: c, onRequestClose: t2.closePopover }));
      }), mZ = (t2) => {
        let [a, c] = z1(null), { editorProps: r } = t2, [e] = v71(t2, c), [l] = h71(c, t2.editorProps), { node: i5, toggle: o, close: n } = x2(() => {
          let g = (0, eh.val)(r.layoutP.rightDims);
          return { debugName: "Connector", constraints: { minX: g.screenX + uZ, maxX: g.screenX + g.width - uZ } };
        }, () => E0.default.createElement(n71, D(S({}, r), { closePopover: n }))), { connected: h, isAggregateEditingInCurvePopover: v } = t2.utils;
        return h || l ? E0.default.createElement(E0.default.Fragment, null, E0.default.createElement(Jn, { ref: a, connectorLengthInUnitSpace: h ? h.length : 0, isSelected: h ? h.selected : false, isPopoverOpen: v, openPopover: (g) => {
          c && o(g, c);
        } }), i5, e) : E0.default.createElement(E0.default.Fragment, null);
      };
    });
    function HZ(t2) {
      let a = { isSelected: t2.isSelected, flag: t2.flag };
      return R5.default.createElement(fp, null, t2.isAllHere ? R5.default.createElement(s71, S({}, a)) : R5.default.createElement(z71, S({}, a)));
    }
    var R5, CZ, g71, MZ, fp, xZ, LZ, VZ, wZ, BZ, yZ, d71, s71, z71, SZ = x(() => {
      R5 = I(G());
      c1();
      Cr();
      G1();
      CZ = 16, g71 = CZ + 2, fp = B.div(MZ || (MZ = V(["\n  position: absolute;\n  ", "\n  z-index: 1;\n"])), H0(CZ)), LZ = B.div(xZ || (xZ = V(["\n  z-index: 2;\n  cursor: ew-resize;\n\n  position: absolute;\n  ", ";\n  ", ";\n\n  &:hover\n    + ", ",\n    #pointer-root.draggingPositionInSequenceEditor\n    &:hover\n    + ", " {\n    ", "\n  }\n"])), H0(12), C1, fp, fp, H0(g71));
      VZ = "#F2C95C", wZ = "#40AAA4", BZ = "#45747C", yZ = (t2) => t2.isSelected === 0 ? VZ : t2.isSelected === 1 ? wZ : BZ, d71 = (t2) => t2.isSelected === 0 ? VZ : t2.isSelected === 1 ? wZ : BZ, s71 = (t2) => R5.default.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, R5.default.createElement("rect", { x: "4.46443", y: "10.0078", width: "5", height: "5", transform: "rotate(-45 4.46443 10.0078)", fill: "#212327", stroke: d71(t2) }), R5.default.createElement("rect", { x: "3.75732", y: "6.01953", width: "6", height: "6", transform: "rotate(-45 3.75732 6.01953)", fill: yZ(t2), stroke: t2.flag === 2 ? "white" : void 0, strokeWidth: t2.flag === 2 ? "2px" : void 0 })), z71 = (t2) => R5.default.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, R5.default.createElement("rect", { x: "4.46443", y: "8", width: "5", height: "5", transform: "rotate(-45 4.46443 8)", fill: "#23262B", stroke: t2.flag === 2 ? "white" : yZ(t2), strokeWidth: t2.flag === 2 ? "2px" : void 0 }));
    });
    function u71(t2, a) {
      let c = t2.children.map((r) => r.type === "propWithChildren" ? Mp(r, a) : AZ(r, a)).filter(kZ);
      return c.length === 0 ? null : { type: "sheetObject", sheetObject: t2.sheetObject, children: c };
    }
    function Mp(t2, a) {
      let c = t2.children.map((r) => r.type === "propWithChildren" ? Mp(r, a) : AZ(r, a)).filter(kZ);
      return c.length === 0 ? null : { type: "propWithChildren", pathToProp: t2.pathToProp, propConfig: t2.propConf, children: c };
    }
    function AZ(t2, a) {
      let c = a.find((r) => r.track.id === t2.trackId);
      return c ? { type: "primitiveProp", keyframe: c.kf, pathToProp: t2.pathToProp, propConfig: t2.propConf, sheetObject: t2.sheetObject, trackId: t2.trackId } : null;
    }
    function RZ(t2) {
      var o, n, h, v;
      let { cur: a } = t2.utils, c = e8(t2.editorProps.viewModel.type === "sheet" ? null : t2.editorProps.viewModel.type === "sheetObject" ? (n = (o = u71(t2.editorProps.viewModel, a.keyframes)) == null ? void 0 : o.children) != null ? n : null : (v = (h = Mp(t2.editorProps.viewModel, a.keyframes)) == null ? void 0 : h.children) != null ? v : null), r = i3(t2.utils.itemKey);
      r.useRelations(() => a.keyframes.map((g) => ({ affects: g.itemKey, flag: 2 })), [a.keyframes.map((g) => g.track.id).join("-")]);
      let [e, l] = z1(null), [i5] = p71(t2, l);
      return Pr.default.createElement(Pr.default.Fragment, null, Pr.default.createElement(LZ, D(S(S({ ref: e }, r.attrs), r2.includePositionSnapAttrs(a.position)), { onClick: (g) => t2.editorProps.viewModel.type !== "sheet" ? c.open(g, e.current) : null })), Pr.default.createElement(HZ, { flag: r.flag, isAllHere: a.allHere, isSelected: a.selected }), i5, c.node);
    }
    function p71(t2, a) {
      return Z1(a, { displayName: "Aggregate Keyframe", menuItems: () => {
        let c = t2.editorProps.viewModel, r = t2.editorProps.selection;
        return [{ label: r ? "Copy (selection)" : "Copy", callback: () => {
          if (r) {
            let { projectId: e, sheetId: l } = c.type === "sheet" ? c.sheet.address : c.sheetObject.address, i5 = r8(e, l, r);
            T().transaction((o) => {
              o.stateEditors.studio.ahistoric.setClipboardKeyframes(i5);
            });
          } else {
            let e = t2.utils.cur.keyframes.flatMap((n) => {
              var h;
              return (h = Rr(D(S({}, n.track.sheetObject.address), { trackId: n.track.id, keyframeIds: [n.kf.id] }))) != null ? h : [];
            }), l = c.type === "sheet" ? [] : c.type === "sheetObject" ? [c.sheetObject.address.objectKey] : c.type === "propWithChildren" ? [c.sheetObject.address.objectKey, ...c.pathToProp] : [], i5 = J6([l, ...e.map((n) => n.pathToProp)]), o = e.map(({ keyframe: n, pathToProp: h }) => ({ keyframe: n, pathToProp: h.slice(i5.length) }));
            T().transaction((n) => {
              n.stateEditors.studio.ahistoric.setClipboardKeyframes(o);
            });
          }
        } }, { label: r ? "Delete (selection)" : "Delete", callback: () => {
          r ? r.delete() : T().transaction(({ stateEditors: e }) => {
            for (let l of t2.utils.cur.keyframes) e.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, l.track.sheetObject.address), { keyframeIds: [l.kf.id], trackId: l.track.id }));
          });
        } }];
      } });
    }
    var Pr, kZ, bZ = x(() => {
      Pr = I(G());
      P1();
      K6();
      v0();
      SZ();
      f1();
      o7();
      o4();
      b3();
      br();
      kZ = (t2) => t2 !== null;
    });
    var IZ, Gr, FZ, m71, f71, PZ, GZ = x(() => {
      IZ = requireDist$2(), Gr = I(G());
      c1();
      fZ();
      rh();
      bZ();
      m71 = B.div(FZ || (FZ = V(["\n  position: absolute;\n"]))), f71 = Gr.default.memo((t2) => {
        let a = ch(t2);
        return Gr.default.createElement(m71, { style: { top: "".concat(t2.viewModel.nodeHeight / 2, "px"), left: "calc(".concat((0, IZ.val)(t2.layoutP.scaledSpace.leftPadding), "px + calc(var(--unitSpaceToScaledSpaceMultiplier) * ").concat(a.cur.position, "px))") } }, Gr.default.createElement(RZ, { editorProps: t2, utils: a }), Gr.default.createElement(mZ, { editorProps: t2, utils: a }));
      }), PZ = f71;
    });
    function C71(t2) {
      let { layoutP: a, aggregatedKeyframes: c, viewModel: r } = t2, e = C0("AggregatedKeyframeTrack"), [l, i5] = z1(null), { selectedPositions: o, selection: n } = H71(a, c), [h, v, g] = B71(i5, t2, () => e._debug("see aggregatedKeyframes", t2.aggregatedKeyframes)), s = (0, D0.useMemo)(() => [...c.byPosition.entries()].sort((H, y) => H[0] - y[0]).map(([H, y]) => ({ position: H, keyframes: y, selected: o.get(H), allHere: y.length === c.tracks.length })), [c, o]), d = s1(Gn), z = d.mode === "snapToAll", u = d.mode === "snapToSome" ? d.positions : $o, p = (0, D0.useMemo)(() => r.type === "sheet" ? VG(r, u) : Rn(r, u), [u]).map((H) => D0.default.createElement(pt, { key: "snap-target-" + H, layoutP: a, leaf: r, position: H })), m = (0, D0.useMemo)(() => s.map(({ position: H, keyframes: y }, k) => ({ position: H, editorProps: { index: k, layoutP: a, viewModel: r, aggregateKeyframes: s, selection: o.has(H) ? n : void 0 } })), [s, r, o]);
      A71(i5, (H) => {
        var y;
        return (y = m.find((k) => k.position === H)) == null ? void 0 : y.editorProps;
      }, { onClickFromDrag(H) {
      } });
      let w = m.map((H, y) => D0.default.createElement(D0.Fragment, { key: "agg-" + s[y].keyframes[0].kf.id }, z && D0.default.createElement(pt, { layoutP: a, leaf: r, position: H.position }), D0.default.createElement(PZ, S({}, H.editorProps))));
      return D0.default.createElement(M71, { ref: l, style: { background: g ? "#444850 " : "unset" } }, w, p, h);
    }
    function H71(t2, a) {
      return v1(() => (0, Q2.val)(V71(t2, a)), [t2, a]);
    }
    function V71(t2, a) {
      return (0, Q2.prism)(() => {
        let c = (0, Q2.val)(t2.selectionAtom), r = (0, Q2.val)(c.pointer.current);
        if (!r) return x71;
        let e = /* @__PURE__ */ new Map();
        for (let [l, i5] of a.byPosition) {
          let o = w71(i5, r);
          o !== void 0 && o !== xp && e.set(l, o);
        }
        return { selectedPositions: e, selection: (0, Q2.val)(c.pointer.current) };
      });
    }
    function w71(t2, a) {
      var r, e, l;
      let c;
      for (let { track: i5, kf: o } of t2) {
        let n = ((l = (e = (r = a.byObjectKey[i5.sheetObject.address.objectKey]) == null ? void 0 : r.byTrackId[i5.id]) == null ? void 0 : e.byKeyframeId) == null ? void 0 : l[o.id]) === true;
        c === void 0 ? n ? c = TZ : c = xp : n ? c === xp && (c = ZZ) : c === TZ && (c = ZZ);
      }
      return c;
    }
    function B71(t2, a, c) {
      return Z1(t2, { onOpen: c, displayName: "Aggregate Keyframe Track", menuItems: () => {
        var e;
        let r = (e = (0, Q2.pointerToPrism)(T().atomP.ahistoric.clipboard.keyframesWithRelativePaths).getValue()) != null ? e : [];
        return [y71(a, r)];
      } });
    }
    function y71(t2, a) {
      return { label: "Paste Keyframes", enabled: a.length > 0, callback: () => {
        let r = (0, Q2.val)(t2.layoutP.sheet).getSequence();
        t2.viewModel.type === "sheet" ? S71(t2.viewModel, a, r) : k71(t2.viewModel, a, r);
      } };
    }
    function S71(t2, a, c) {
      var o;
      let { projectId: r, sheetId: e, sheetInstanceId: l } = t2.sheet.address;
      if (a.every(({ pathToProp: n }) => n.length === 0)) for (let n of t2.children.map((h) => h.sheetObject)) {
        let h = (0, Q2.pointerToPrism)(T().atomP.historic.coreByProject[r].sheetsById[e].sequence.tracksByObject[n.address.objectKey]).getValue(), v = Object.keys((o = h == null ? void 0 : h.trackData) != null ? o : {});
        Cp(n.address, v, a, c);
      }
      else {
        let n = (0, Q2.pointerToPrism)(T().atomP.historic.coreByProject[r].sheetsById[e].sequence.tracksByObject).getValue(), h = a.map(({ keyframe: v, pathToProp: g }) => {
          var p, m;
          let s = g[0], d = g.slice(1), z = h3([...d]), f = ((m = (p = n == null ? void 0 : n[s]) == null ? void 0 : p.trackIdByPropPath) != null ? m : {})[z];
          return f ? { keyframe: v, trackId: f, address: { objectKey: s, projectId: r, sheetId: e, sheetInstanceId: l } } : null;
        }).filter((v) => v !== null);
        DZ(h, c);
      }
    }
    function k71(t2, a, c) {
      var n;
      let { projectId: r, sheetId: e, objectKey: l } = t2.sheetObject.address, i5 = (0, Q2.pointerToPrism)(T().atomP.historic.coreByProject[r].sheetsById[e].sequence.tracksByObject[l]).getValue();
      if (a.every(({ pathToProp: h }) => h.length === 0)) {
        let h = Object.keys((n = i5 == null ? void 0 : i5.trackData) != null ? n : {});
        if (t2.type === "sheetObject") Cp(t2.sheetObject.address, h, a, c);
        else {
          let v = (i5 == null ? void 0 : i5.trackIdByPropPath) || {}, g = Object.entries(v).filter(([s, d]) => d !== void 0 && mG(ut(s), t2.pathToProp)).map(([s, d]) => d);
          Cp(t2.sheetObject.address, g, a, c);
        }
      } else {
        let h = (i5 == null ? void 0 : i5.trackIdByPropPath) || {}, v = t2.type === "propWithChildren" ? t2.pathToProp : [], g = a.map(({ keyframe: s, pathToProp: d }) => {
          let z = h3([...v, ...d]), u = h[z];
          return u ? { keyframe: s, trackId: u, address: t2.sheetObject.address } : null;
        }).filter((s) => s !== null);
        DZ(g, c);
      }
    }
    function Cp(t2, a, c, r) {
      var l;
      r.position = r.closestGridPosition(r.position);
      let e = (l = WZ(c.map(({ keyframe: i5 }) => i5))) == null ? void 0 : l.position;
      T().transaction(({ stateEditors: i5 }) => {
        for (let o of a) for (let { keyframe: n } of c) i5.coreByProject.historic.sheetsById.sequence.setKeyframeAtPosition(D(S({}, t2), { trackId: o, position: r.position + n.position - e, handles: n.handles, value: n.value, snappingFunction: r.closestGridPosition, type: n.type }));
      });
    }
    function DZ(t2, a) {
      var r;
      a.position = a.closestGridPosition(a.position);
      let c = (r = WZ(t2.map(({ keyframe: e }) => e))) == null ? void 0 : r.position;
      T().transaction(({ stateEditors: e }) => {
        for (let { keyframe: l, trackId: i5, address: o } of t2) e.coreByProject.historic.sheetsById.sequence.setKeyframeAtPosition(D(S({}, o), { trackId: i5, position: a.position + l.position - c, handles: l.handles, value: l.value, snappingFunction: a.closestGridPosition, type: l.type }));
      });
    }
    function WZ(t2) {
      let a = null;
      for (let c of t2) (a === null || c.position < a.position) && (a = c);
      return a;
    }
    function A71(t2, a, c) {
      let r = C0("useDragForAggregateKeyframeDot"), e = OG(), l = (0, D0.useMemo)(() => ({ debugName: "AggregateKeyframeDot/useDragKeyframe", onDragStart(o) {
        r._debug("onDragStart", { target: o.target });
        let n = Number(o.target.dataset.pos), h = a(n);
        if (!h) return r._debug("no props found for ", { positionToFind: n }), false;
        e(true, n);
        let v = (0, Q2.prism)(mp(h)).getValue().cur.keyframes, g = h.viewModel.type === "sheet" ? h.viewModel.sheet.address : h.viewModel.sheetObject.address, s = (0, Q2.val)(T().atomP.historic.coreByProject[g.projectId].sheetsById[g.sheetId].sequence.tracksByObject), d = Zn(s, function(m, { trackId: M, objectKey: w }) {
          var H, y;
          return v.every((k) => m.id !== k.kf.id) && !(h.selection && ((y = (H = h.selection.byObjectKey[w]) == null ? void 0 : H.byTrackId[M]) != null && y.byKeyframeId[m.id]));
        });
        if (Tn(d), h.selection && h.aggregateKeyframes[h.index].selected === 0) {
          let { selection: p, viewModel: m } = h, M = p.getDragHandlers(D(S({}, g), { domNode: t2, positionAtStartOfDrag: v[0].kf.position })).onDragStart(o);
          return M && D(S({}, M), { onClick: c.onClickFromDrag, onDragEnd: (...w) => {
            var H;
            (H = M.onDragEnd) == null || H.call(M, ...w), I3();
          } });
        }
        let z = h, u = (0, Q2.val)(z.layoutP.scaledSpace.toUnitSpace), f;
        return { onDrag(p, m, M) {
          var H;
          let w = Math.max((H = r2.checkIfMouseEventSnapToPos(M, {})) != null ? H : v[0].kf.position + u(p), 0);
          e(true, w), f == null || f.discard(), f = void 0, f = T().tempTransaction(({ stateEditors: y }) => {
            for (let k of v) {
              let F = k.kf;
              y.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, k.track.sheetObject.address), { trackId: k.track.id, keyframes: [D(S({}, F), { position: w })], snappingFunction: (0, Q2.val)(z.layoutP.sheet).getSequence().closestGridPosition }));
            }
          });
        }, onDragEnd(p) {
          e(false, -1), p ? f == null || f.commit() : (f == null || f.discard(), c.onClickFromDrag(o)), I3();
        }, onClick(p) {
          c.onClickFromDrag(p);
        } };
      } }), [a, c.onClickFromDrag]), [i5] = S1(t2, l);
      return s2(i5, "draggingPositionInSequenceEditor", "ew-resize"), [i5];
    }
    var Q2, D0, OZ, M71, x71, L71, Vt, EZ, TZ, ZZ, xp, lh = x(() => {
      M1();
      Q2 = requireDist$2(), D0 = I(G());
      c1();
      v0();
      P1();
      GZ();
      l7();
      L5();
      rh();
      b3();
      M2();
      E2();
      I0();
      f1();
      o4();
      c8();
      pu();
      c8();
      l7();
      M71 = B.div(OZ || (OZ = V(["\n  position: relative;\n  height: 100%;\n  width: 100%;\n"]))), x71 = Object.freeze({ selectedPositions: /* @__PURE__ */ new Map(), selection: void 0 });
      L71 = D0.default.memo(C71), Vt = L71, EZ = ((r) => (r[r.AllSelected = 0] = "AllSelected", r[r.AtLeastOneUnselected = 1] = "AtLeastOneUnselected", r[r.NoneSelected = 2] = "NoneSelected", r))(EZ || {}), { AllSelected: TZ, AtLeastOneUnselected: ZZ, NoneSelected: xp } = EZ;
    });
    var wt, Lp, R71, _Z = x(() => {
      M1();
      wt = I(G());
      dZ();
      Lr();
      lh();
      l7();
      L5();
      Lp = (t2, a) => t2.type === "propWithChildren" ? wt.default.createElement(R71, { layoutP: a, viewModel: t2, key: "prop" + t2.pathToProp[t2.pathToProp.length - 1] }) : wt.default.createElement(gZ, { layoutP: a, leaf: t2, key: "prop" + t2.pathToProp[t2.pathToProp.length - 1] }), R71 = ({ viewModel: t2, layoutP: a }) => {
        let c = C0("RightPropWithChildrenRow", t2.pathToProp.join());
        return v1(() => {
          let r = t8(t2);
          return wt.default.createElement(uo, { logger: c }, wt.default.createElement(A5, { leaf: t2, node: wt.default.createElement(Vt, { layoutP: a, aggregatedKeyframes: r, viewModel: t2 }), isCollapsed: t2.isCollapsed }, t2.children.map((l) => Lp(l, a))));
        }, [t2, a]);
      };
    });
    var Hp, b71, jZ, qZ = x(() => {
      M1();
      Hp = I(G());
      _Z();
      Lr();
      l7();
      lh();
      b71 = ({ leaf: t2, layoutP: a }) => v1(() => {
        let c = t8(t2);
        return Hp.default.createElement(A5, { leaf: t2, node: Hp.default.createElement(Vt, { layoutP: a, aggregatedKeyframes: c, viewModel: t2 }), isCollapsed: t2.isCollapsed }, t2.children.map((e) => Lp(e, a)));
      }, [t2, a]), jZ = b71;
    });
    var ih, F71, NZ, UZ = x(() => {
      M1();
      ih = I(G());
      qZ();
      Lr();
      l7();
      lh();
      F71 = ({ leaf: t2, layoutP: a }) => v1(() => {
        let c = t8(t2);
        return ih.default.createElement(A5, { leaf: t2, node: ih.default.createElement(Vt, { layoutP: a, aggregatedKeyframes: c, viewModel: t2 }), isCollapsed: t2.isCollapsed }, t2.children.map((e) => ih.default.createElement(jZ, { layoutP: a, key: "sheetObject-" + e.sheetObject.address.objectKey, leaf: e })));
      }, [t2, a]), NZ = F71;
    });
    var Tr, h7, oh, KZ, I71, P71, $Z, Vp = x(() => {
      M1();
      Tr = requireDist$2(), h7 = I(G());
      c1();
      kG();
      rp();
      UZ();
      oh = 1e6, I71 = B.ul(KZ || (KZ = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  position: absolute;\n  left: 0;\n  width: ", "px;\n"])), oh), P71 = ({ layoutP: t2 }) => v1(() => {
        let a = (0, Tr.val)(t2.tree), c = (0, Tr.val)(t2.tree.top) + Math.max((0, Tr.val)(t2.tree.heightIncludingChildren), (0, Tr.val)(t2.dopeSheetDims.height));
        return h7.default.createElement(h7.default.Fragment, null, h7.default.createElement(On, { layoutP: t2, height: c }, h7.default.createElement(SG, { layoutP: t2, height: c }, h7.default.createElement(I71, { style: { top: a.top + "px" } }, h7.default.createElement(NZ, { leaf: a, layoutP: t2 })))));
      }, [t2]), $Z = P71;
    });
    function Zr(t2, a, c, r) {
      let e = "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(t2, "px)"), l = "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(a, ") * 1px)");
      c === 0 && (c = 1e-4);
      let i5 = "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(c, ")");
      r === 0 && (r = 1e-3);
      let o = "calc(var(--graphEditorVerticalSpace) * ".concat(r * -1, ")");
      return "translate(".concat(e, ", ").concat(l, ") scale(").concat(i5, ", ").concat(o, ")");
    }
    function O71(t2, a) {
      let { index: c, trackData: r } = a, e = r.keyframes[c], l = r.keyframes[c + 1];
      return Z1(t2, { menuItems: () => [{ label: "Delete", callback: () => {
        T().transaction(({ stateEditors: i5 }) => {
          let { deleteKeyframes: o } = i5.coreByProject.historic.sheetsById.sequence;
          o(D(S({}, a.sheetObject.address), { trackId: a.trackId, keyframeIds: [e.id, l.id] }));
        });
      } }] });
    }
    var nh, QZ, G71, T71, Z71, XZ, hh = x(() => {
      H5();
      f1();
      v0();
      P1();
      nh = I(G());
      c1();
      G71 = B.path(QZ || (QZ = V(["\n  stroke-width: 2;\n  stroke: var(--main-color);\n  fill: none;\n  vector-effect: non-scaling-stroke;\n"]))), T71 = "M 0 0 L 1 0 L 1 1", Z71 = (t2) => {
        let { index: a, trackData: c } = t2, r = c.keyframes[a], e = c.keyframes[a + 1], l = e.position - r.position, [i5, o] = z1(null), [n] = O71(o, t2), h = t2.isScalar ? X8(r.value, t2.propConfig) : 0, v = t2.isScalar ? X8(e.value, t2.propConfig) : 1, g = t2.extremumSpace.fromValueSpace(h), d = t2.extremumSpace.fromValueSpace(v) - g, z = Zr(r.position, g, l, d), u = r.handles[2], f = r.handles[3], p = e.handles[0], m = e.handles[1], M = "M 0 0 C ".concat(u, " ").concat(f, " ").concat(p, " ").concat(m, " 1 1");
        return nh.default.createElement(nh.default.Fragment, null, nh.default.createElement(G71, { ref: i5, d: !r.type || r.type === "bezier" ? M : T71, style: { transform: z } }), n);
      };
      XZ = Z71;
    });
    function _71(t2, a) {
      let c = (0, b5.useRef)(a);
      c.current = a;
      let r = (0, b5.useMemo)(() => ({ debugName: "CurveHandler/useOurDrags", lockCSSCursorTo: "move", onDragStart() {
        let e, l = c.current, i5 = (0, Or.val)(l.layoutP.scaledSpace.toUnitSpace), o = (0, Or.val)(l.layoutP.graphEditorVerticalSpace.toExtremumSpace), n = l.extremumSpace.lock();
        return { onDrag(h, v) {
          e && (e.discard(), e = void 0);
          let { index: g, trackData: s } = l, d = s.keyframes[g], z = s.keyframes[g + 1], f = i5(h) / (z.position - d.position), p = -v, m = o(p), M = l.extremumSpace.deltaToValueSpace(m), w = a.isScalar ? d.value : 0, H = a.isScalar ? z.value : 1, y = M / (H - w);
          if (l.which === "left") {
            let k = b1(d.handles[2] + f, 0, 1), F = d.handles[3] + y;
            e = T().tempTransaction(({ stateEditors: U }) => {
              U.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, l.sheetObject.address), { snappingFunction: (0, Or.val)(l.layoutP.sheet).getSequence().closestGridPosition, trackId: l.trackId, keyframes: [D(S({}, d), { handles: [d.handles[0], d.handles[1], k, F] })] }));
            });
          } else {
            let k = b1(z.handles[0] + f, 0, 1), F = z.handles[1] + y;
            e = T().tempTransaction(({ stateEditors: U }) => {
              U.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, l.sheetObject.address), { trackId: l.trackId, snappingFunction: (0, Or.val)(l.layoutP.sheet).getSequence().closestGridPosition, keyframes: [D(S({}, z), { handles: [k, F, z.handles[2], z.handles[3]] })] }));
            });
          }
        }, onDragEnd(h) {
          n(), h ? e && e.commit() : e && e.discard();
        } };
      } }), []);
      S1(t2, r);
    }
    function j71(t2, a) {
      return Z1(t2, { menuItems: () => [{ label: "Delete", callback: () => {
        T().transaction(({ stateEditors: c }) => {
          c.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, a.sheetObject.address), { keyframeIds: [a.keyframe.id], trackId: a.trackId }));
        });
      } }] });
    }
    var Or, b5, YZ, aO, JZ, E71, tO, D71, W71, wp, cO = x(() => {
      f1();
      v0();
      M2();
      P1();
      Or = requireDist$2();
      H2();
      b5 = I(G());
      c1();
      hh();
      G1();
      aO = B.circle(YZ || (YZ = V(["\n  stroke-width: 1px;\n  vector-effect: non-scaling-stroke;\n  fill: var(--main-color);\n  r: 2px;\n  pointer-events: none;\n"]))), E71 = B.circle(JZ || (JZ = V(["\n  stroke-width: 6px;\n  vector-effect: non-scaling-stroke;\n  r: 6px;\n  fill: transparent;\n  cursor: move;\n  ", ";\n  &:hover {\n  }\n  &:hover + ", " {\n    r: 6px;\n  }\n"])), C1, aO), D71 = B.path(tO || (tO = V(["\n  stroke-width: 1;\n  stroke: var(--main-color);\n  /* stroke: gray; */\n  fill: none;\n  vector-effect: non-scaling-stroke;\n"]))), W71 = (t2) => {
        let [a, c] = z1(null), { index: r, trackData: e } = t2, l = e.keyframes[r], i5 = e.keyframes[r + 1], [o] = j71(c, t2);
        _71(c, t2);
        let n = t2.which === "left" ? l.handles[2] : i5.handles[0], h = l.position + (i5.position - l.position) * n, v = t2.which === "left" ? l.handles[3] : i5.handles[1], g = t2.isScalar ? l.value : 0, s = t2.isScalar ? i5.value : 1, d = g + (s - g) * v, z = t2.extremumSpace.fromValueSpace(d), u = z - t2.extremumSpace.fromValueSpace(t2.which === "left" ? g : s), f = Zr(t2.which === "left" ? l.position : i5.position, t2.extremumSpace.fromValueSpace(t2.which === "left" ? g : s), h - (t2.which === "left" ? l.position : i5.position), u);
        return b5.default.createElement("g", null, b5.default.createElement(E71, { ref: a, style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(h, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(z, ") * 1px)") } }), b5.default.createElement(aO, { style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(h, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(z, ") * 1px)") } }), b5.default.createElement(D71, { d: "M 0 0 L 1 1", style: { transform: f } }), o);
      }, wp = W71;
    });
    function U71(t2) {
      let [a, c] = (0, g4.useState)(false);
      g0(a, t2.props.keyframe.position);
      let r = (0, g4.useRef)(t2.props);
      r.current = t2.props;
      let e = (0, g4.useMemo)(() => ({ debugName: "GraphEditorDotScalar/useDragKeyframe", lockCSSCursorTo: "move", onDragStart(l) {
        c(true);
        let i5 = !!l.altKey, o = r.current, n = (0, vh.val)(o.layoutP.scaledSpace.toUnitSpace), h = (0, vh.val)(o.layoutP.graphEditorVerticalSpace.toExtremumSpace), v = o.extremumSpace.lock(), g;
        return { onDrag(s, d) {
          let z = o.trackData.keyframes[o.index], u = n(s), f = -d, p = h(f), m = o.extremumSpace.deltaToValueSpace(p), M = [], w = D(S({}, z), { position: z.position + u, value: z.value + m, handles: [...z.handles] });
          if (M.push(w), i5) {
            let H = o.trackData.keyframes[o.index - 1];
            if (H && Math.abs(z.value - H.value) > 0) {
              let k = D(S({}, H), { handles: [...H.handles] });
              M.push(k), k.handles[3] = $71(H.handles[3], H.value, H.value, z.value, w.value);
            }
            let y = o.trackData.keyframes[o.index + 1];
            if (y && Math.abs(z.value - y.value) > 0) {
              let k = D(S({}, y), { handles: [...y.handles] });
              M.push(k), k.handles[1] = Q71(k.handles[1], k.value, k.value, z.value, w.value);
            }
          }
          g == null || g.discard(), g = T().tempTransaction(({ stateEditors: H }) => {
            H.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, o.sheetObject.address), { trackId: o.trackId, keyframes: M, snappingFunction: (0, vh.val)(o.layoutP.sheet).getSequence().closestGridPosition }));
          });
        }, onDragEnd(s) {
          c(false), v(), s ? g == null || g.commit() : (g == null || g.discard(), t2.onDetectedClick(l));
        } };
      } }), []);
      return S1(t2.node, e), s2(a, "draggingPositionInSequenceEditor", "move"), a;
    }
    function K71(t2, a) {
      return Z1(t2, { menuItems: () => [{ label: "Delete", callback: () => {
        T().transaction(({ stateEditors: c }) => {
          c.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, a.sheetObject.address), { keyframeIds: [a.keyframe.id], trackId: a.trackId }));
        });
      } }] });
    }
    function $71(t2, a, c, r, e) {
      return (r - a) * t2 / (e - c);
    }
    function Q71(t2, a, c, r, e) {
      return ((a - r) * t2 + r - a + c - e) / (c - e);
    }
    var vh, g4, rO, lO, eO, q71, N71, iO, oO = x(() => {
      f1();
      v0();
      M2();
      P1();
      vh = requireDist$2(), g4 = I(G());
      c1();
      E2();
      E2();
      G1();
      I0();
      b3();
      br();
      K6();
      lO = B.circle(rO || (rO = V(["\n  fill: var(--main-color);\n  stroke-width: 1px;\n  vector-effect: non-scaling-stroke;\n\n  r: 2px;\n"]))), q71 = B.circle(eO || (eO = V(["\n  stroke-width: 6px;\n  vector-effect: non-scaling-stroke;\n  r: 6px;\n  fill: transparent;\n  ", ";\n\n  &:hover + ", " {\n    r: 6px;\n  }\n\n  #pointer-root.normal & {\n    cursor: move;\n  }\n\n  #pointer-root.draggingPositionInSequenceEditor & {\n    pointer-events: auto;\n    cursor: var(", ");\n  }\n\n  &.beingDragged {\n    pointer-events: none !important;\n  }\n"])), C1, lO, F0), N71 = (t2) => {
        let [a, c] = z1(null), { index: r, trackData: e } = t2, l = e.keyframes[r], [i5] = K71(c, t2), o = i3(t2.itemKey), n = l.value, h = t2.extremumSpace.fromValueSpace(n), v = e8([{ type: "primitiveProp", keyframe: t2.keyframe, pathToProp: t2.pathToProp, propConfig: t2.propConfig, sheetObject: t2.sheetObject, trackId: t2.trackId }]), g = U71({ node: c, props: t2, onDetectedClick: (s) => v.toggle(s, s.target instanceof Element ? s.target : c) });
        return g4.default.createElement(g4.default.Fragment, null, g4.default.createElement(q71, D(S(S(S({ ref: a, style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(l.position, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(h, ") * 1px)") } }, O2(l.position)), r2.includePositionSnapAttrs(l.position)), o.attrs), { className: g ? "beingDragged" : "" })), g4.default.createElement(lO, { style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(l.position, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(h, ") * 1px)"), fill: o.flag === 2 ? "white" : void 0 } }), v.node, i5);
      }, iO = N71;
    });
    function J71(t2) {
      let [a, c] = (0, d4.useState)(false);
      g0(a, t2.props.keyframe.position);
      let r = (0, d4.useRef)(t2.props);
      r.current = t2.props;
      let e = (0, d4.useMemo)(() => ({ debugName: "GraphEditorDotNonScalar/useDragKeyframe", lockCSSCursorTo: "ew-resize", onDragStart(l) {
        c(true);
        let i5 = r.current, o = (0, Bp.val)(i5.layoutP.scaledSpace.toUnitSpace), n = i5.extremumSpace.lock(), h;
        return { onDrag(v, g) {
          let s = i5.trackData.keyframes[i5.index], d = o(v), z = [], u = D(S({}, s), { position: s.position + d, value: s.value, handles: [...s.handles] });
          z.push(u), h == null || h.discard(), h = T().tempTransaction(({ stateEditors: f }) => {
            f.coreByProject.historic.sheetsById.sequence.replaceKeyframes(D(S({}, i5.sheetObject.address), { trackId: i5.trackId, keyframes: z, snappingFunction: (0, Bp.val)(i5.layoutP.sheet).getSequence().closestGridPosition }));
          });
        }, onDragEnd(v) {
          c(false), n(), v ? h == null || h.commit() : (h == null || h.discard(), t2.onDetectedClick(l));
        } };
      } }), []);
      return S1(t2.node, e), s2(a, "draggingPositionInSequenceEditor", "ew-resize"), a;
    }
    function t91(t2, a) {
      return Z1(t2, { menuItems: () => [{ label: "Delete", callback: () => {
        T().transaction(({ stateEditors: c }) => {
          c.coreByProject.historic.sheetsById.sequence.deleteKeyframes(D(S({}, a.sheetObject.address), { keyframeIds: [a.keyframe.id], trackId: a.trackId }));
        });
      } }] });
    }
    var Bp, d4, nO, vO, hO, X71, Y71, yp, gO = x(() => {
      f1();
      v0();
      M2();
      P1();
      Bp = requireDist$2(), d4 = I(G());
      c1();
      E2();
      E2();
      G1();
      I0();
      b3();
      br();
      K6();
      vO = B.circle(nO || (nO = V(["\n  fill: var(--main-color);\n  stroke-width: 1px;\n  vector-effect: non-scaling-stroke;\n\n  r: 2px;\n"]))), X71 = B.circle(hO || (hO = V(["\n  stroke-width: 6px;\n  vector-effect: non-scaling-stroke;\n  r: 6px;\n  fill: transparent;\n  ", ";\n\n  &:hover + ", " {\n    r: 6px;\n  }\n\n  #pointer-root.normal & {\n    cursor: ew-resize;\n  }\n\n  #pointer-root.draggingPositionInSequenceEditor & {\n    pointer-events: auto;\n    cursor: var(", ");\n  }\n\n  &.beingDragged {\n    pointer-events: none !important;\n  }\n"])), C1, vO, F0), Y71 = (t2) => {
        let [a, c] = z1(null), { index: r, trackData: e, itemKey: l } = t2, i5 = e.keyframes[r], [o] = t91(c, t2), n = i3(l), h = t2.which === "left" ? 0 : 1, v = e8([{ type: "primitiveProp", keyframe: t2.keyframe, pathToProp: t2.pathToProp, propConfig: t2.propConfig, sheetObject: t2.sheetObject, trackId: t2.trackId }]), g = J71({ node: c, props: t2, onDetectedClick: (d) => v.toggle(d, d.target instanceof Element ? d.target : c) }), s = t2.extremumSpace.fromValueSpace(h);
        return d4.default.createElement(d4.default.Fragment, null, d4.default.createElement(X71, D(S(S(S({ ref: a, style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(i5.position, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(s, ") * 1px)") } }, n.attrs), O2(i5.position)), r2.includePositionSnapAttrs(i5.position)), { className: g ? "beingDragged" : "" })), d4.default.createElement(vO, { style: { cx: "calc(var(--unitSpaceToScaledSpaceMultiplier) * ".concat(i5.position, " * 1px)"), cy: "calc((var(--graphEditorVerticalSpace) - var(--graphEditorVerticalSpace) * ".concat(s, ") * 1px)"), fill: n.flag === 2 ? "white" : void 0 } }), v.node, o);
      }, yp = Y71;
    });
    var gh, dO, a91, c91, sO, zO = x(() => {
      gh = I(G());
      c1();
      hh();
      a91 = B.path(dO || (dO = V(["\n  stroke-width: 2;\n  stroke: var(--main-color);\n  stroke-dasharray: 3 2;\n  fill: none;\n  vector-effect: non-scaling-stroke;\n  opacity: 0.3;\n"]))), c91 = (t2) => {
        let { index: a, trackData: c } = t2, r = "M 0 0 L 1 1", e = Zr(c.keyframes[a].position, t2.extremumSpace.fromValueSpace(0), 0, t2.extremumSpace.fromValueSpace(1) - t2.extremumSpace.fromValueSpace(0));
        return gh.default.createElement(gh.default.Fragment, null, gh.default.createElement(a91, { d: r, style: { transform: e } }));
      }, sO = c91;
    });
    var X2, uO, r91, e91, l91, pO, mO = x(() => {
      X2 = I(G());
      c1();
      hh();
      cO();
      oO();
      gO();
      zO();
      r91 = B.g(uO || (uO = V(["\n  /* position: absolute; */\n"]))), e91 = X2.default.createElement(X2.default.Fragment, null), l91 = (t2) => {
        let { index: a, trackData: c, isScalar: r } = t2, e = c.keyframes[a], l = c.keyframes[a + 1], o = e.connectedRight && !!l && l.value !== e.value;
        return X2.default.createElement(r91, null, o ? X2.default.createElement(X2.default.Fragment, null, X2.default.createElement(XZ, S({}, t2)), !e.type || e.type === "bezier" && X2.default.createElement(X2.default.Fragment, null, X2.default.createElement(wp, D(S({}, t2), { which: "left" })), X2.default.createElement(wp, D(S({}, t2), { which: "right" })))) : e91, r ? X2.default.createElement(iO, S({}, t2)) : X2.default.createElement(X2.default.Fragment, null, X2.default.createElement(yp, D(S({}, t2), { which: "left" })), X2.default.createElement(yp, D(S({}, t2), { which: "right" })), X2.default.createElement(sO, S({}, t2))));
      }, pO = l91;
    });
    function o91(t2, a) {
      let c = 1 / 0, r = -1 / 0;
      function e(l) {
        c = Math.min(l, c), r = Math.max(l, r);
      }
      return t2.forEach((l, i5) => {
        let o = X8(l.value, a);
        if (e(o), !l.connectedRight) return;
        let n = t2[i5 + 1];
        if (!n) return;
        let h = (typeof n.value == "number" ? n.value : 1) - o;
        e(o + l.handles[3] * h), e(o + n.handles[1] * h);
      }), [c, r];
    }
    function n91(t2) {
      let a = 0, c = 1;
      function r(e) {
        a = Math.min(e, a), c = Math.max(e, c);
      }
      return t2.forEach((e, l) => {
        if (!e.connectedRight) return;
        let i5 = t2[l + 1];
        i5 && (r(e.handles[3]), r(i5.handles[1]));
      }), [a, c];
    }
    var v3, i91, fO, MO = x(() => {
      O4();
      v3 = I(G());
      Er();
      mO();
      H5();
      M1();
      i91 = v3.default.memo(({ layoutP: t2, trackData: a, sheetObject: c, trackId: r, color: e, pathToProp: l }) => {
        let i5 = U9(s1(c.template.configPointer), l);
        if (G0(i5)) return console.error("Composite prop types cannot be keyframed"), v3.default.createElement(v3.default.Fragment, null);
        let [o, n] = (0, v3.useState)(false), h = (0, v3.useMemo)(() => {
          let d = /* @__PURE__ */ new Set();
          return function() {
            let u = d.size === 0;
            d.add(f), u && n(true);
            function f() {
              let p = d.size > 0;
              d.delete(f), p && d.size === 0 && n(false);
            }
            return f;
          };
        }, []), v = (0, v3.useMemo)(() => {
          let d = i5.type === "number" ? o91(a.keyframes, i5) : n91(a.keyframes), z = (p) => (p - d[0]) / (d[1] - d[0]), u = (p) => d[0] + f(p), f = (p) => p * (d[1] - d[0]);
          return { fromValueSpace: z, toValueSpace: u, deltaToValueSpace: f, lock: h };
        }, [a.keyframes]), g = (0, v3.useRef)(void 0);
        o || (g.current = v);
        let s = a.keyframes.map((d, z) => v3.default.createElement(pO, { pathToProp: l, propConfig: i5, itemKey: c2.forTrackKeyframe(c, r, d.id), keyframe: d, index: z, trackData: a, layoutP: t2, sheetObject: c, trackId: r, isScalar: i5.type === "number", key: d.id, extremumSpace: g.current, color: e }));
        return v3.default.createElement("g", { style: { "--main-color": v7[e].iconColor } }, s);
      }), fO = i91;
    });
    var xO, dh, h91, CO, LO = x(() => {
      f1();
      M1();
      xO = requireDist$2(), dh = I(G());
      MO();
      h91 = (t2) => v1(() => {
        let { sheetObject: a, trackId: c } = t2, r = (0, xO.val)(T().atomP.historic.coreByProject[a.address.projectId].sheetsById[a.address.sheetId].sequence.tracksByObject[a.address.objectKey].trackData[c]);
        return (r == null ? void 0 : r.type) !== "BasicKeyframedTrack" ? (console.error("trackData type ".concat(r == null ? void 0 : r.type, " is not yet supported on the graph editor")), dh.default.createElement(dh.default.Fragment, null)) : dh.default.createElement(fO, D(S({}, t2), { trackData: r }));
      }, [t2.trackId, t2.layoutP]), CO = h91;
    });
    function Dr({ clippedSpaceRange: t2, clippedSpaceWidth: a, fps: c, gapWidth: r = 120 }, e) {
      let l = 1 / c, i5 = t2.end - t2.start, o = a / (c * i5), n = Math.floor(r / o), v = (n < c ? v91(c).find((d) => d >= n) : c * Math.floor(n / c)) * l, g = Math.floor(t2.start / v), s = Math.ceil(t2.end / v);
      for (let d = g; d <= s; d++) {
        let z = d * v, u = z % 1 === 0;
        e(z, u);
      }
    }
    var v91, Sp = x(() => {
      H2();
      v91 = sa((t2) => {
        let a = [];
        for (let c = 1; c <= t2; c++) t2 % c === 0 && a.push(c);
        return a;
      });
    });
    function m91(t2) {
      let { clippedSpaceWidth: a, height: c, ctx: r, unitSpaceToClippedSpace: e, snapToGrid: l } = t2;
      r.clearRect(0, 0, a, c), Dr(t2, (i5, o) => {
        let n = l(i5), h = Math.floor(e(n));
        r.strokeStyle = o ? "rgba(225, 225, 225, 0.04)" : "rgba(255, 255, 255, 0.01)", r.beginPath(), r.moveTo(h, 0), r.lineTo(h, c), r.stroke(), r.closePath();
      });
    }
    var i8, s4, HO, g91, VO, d91, s91, z91, u91, p91, sh, kp = x(() => {
      i8 = requireDist$2(), s4 = I(G());
      c1();
      Sp();
      f1();
      g91 = B.div(HO || (HO = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  pointer-events: none;\n"]))), d91 = B.canvas(VO || (VO = V(["\n  position: relative;\n  left: 0;\n"]))), s91 = (t2) => {
        let a = t2;
        return a.webkitBackingStorePixelRatio || a.mozBackingStorePixelRatio || a.msBackingStorePixelRatio || a.oBackingStorePixelRatio || a.backingStorePixelRatio || 1;
      }, z91 = () => window.devicePixelRatio || 1, u91 = (t2) => z91() / s91(t2), p91 = ({ layoutP: t2, width: a, height: c }) => {
        let r = (0, s4.useRef)(null), [e, l] = (0, s4.useState)(null), { ctx: i5, ratio: o } = (0, s4.useMemo)(() => {
          if (!e) return {};
          let n = e.getContext("2d"), h = u91(n);
          return { ctx: n, ratio: h };
        }, [e]);
        return (0, s4.useLayoutEffect)(() => {
          if (!i5) return;
          e.width = a * o, e.height = c * o;
          let n = (0, i8.prism)(() => {
            let h = (0, i8.val)(t2.sheet).getSequence();
            return { ctx: i5, clippedSpaceRange: (0, i8.val)(t2.clippedSpace.range), clippedSpaceWidth: (0, i8.val)(t2.clippedSpace.width), unitSpaceToClippedSpace: (0, i8.val)(t2.clippedSpace.fromUnitSpace), height: c, leftPadding: (0, i8.val)(t2.scaledSpace.leftPadding), fps: h.subUnitsPerUnit, snapToGrid: (v) => h.closestGridPosition(v) };
          }).onChange(T().ticker, (h) => {
            i5.save(), i5.scale(o, o), m91(h), i5.restore();
          }, true);
          return () => {
            n();
          };
        }, [i5, a, c, t2]), s4.default.createElement(g91, { ref: r, style: { width: a + "px" } }, s4.default.createElement(d91, { ref: l, style: { width: a + "px", height: c + "px" } }));
      }, sh = p91;
    });
    var N4, g7, v7, wO, f91, BO, M91, x91, yO, Er = x(() => {
      f1();
      o4();
      rr();
      M1();
      N4 = requireDist$2(), g7 = I(G());
      c1();
      Vp();
      rp();
      LO();
      kp();
      R0();
      v7 = { 1: { iconColor: "#b98b08" }, 2: { iconColor: "#70a904" }, 3: { iconColor: "#2e928a" }, 4: { iconColor: "#a943bb" }, 5: { iconColor: "#b90808" }, 6: { iconColor: "#b4bf0e" } }, f91 = B.div(wO || (wO = V(["\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  background: ", ";\n"])), N2(0.03, "#1a1c1e")), M91 = B.svg(BO || (BO = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: 0;\n  pointer-events: none;\n"]))), x91 = ({ layoutP: t2 }) => v1(() => {
        let a = (0, N4.val)(t2.sheet), c = (0, N4.val)(T().atomP.historic.projects.stateByProjectId[a.address.projectId].stateBySheetId[a.address.sheetId].sequenceEditor.selectedPropsByObject), r = (0, N4.val)(t2.graphEditorDims.height), e = (0, N4.val)(t2.scaledSpace.fromUnitSpace)(1), l = [];
        if (c) for (let [o, n] of Object.entries(c)) {
          let h = a.getObject(o);
          if (!h) continue;
          let v = (0, N4.val)(h.template.getMapOfValidSequenceTracks_forStudio());
          for (let [g, s] of Object.entries(n)) {
            let d = ut(g), z = l3(v, d);
            z && l.push(g7.default.createElement(CO, { key: "graph-".concat(o, "-").concat(g), sheetObject: h, pathToProp: d, layoutP: t2, trackId: z, color: s }));
          }
        }
        let i5 = (0, N4.val)(t2.rightDims.width);
        return g7.default.createElement(f91, { style: { width: i5 + "px", height: r + "px", "--unitSpaceToScaledSpaceMultiplier": e, "--graphEditorVerticalSpace": "".concat((0, N4.val)(t2.graphEditorVerticalSpace.space)) } }, g7.default.createElement(sh, { layoutP: t2, width: i5, height: r }), g7.default.createElement(On, { layoutP: t2, height: r }, g7.default.createElement(M91, { width: oh, height: r, viewBox: "0 0 ".concat(oh, " ").concat(r) }, g7.default.createElement("g", { style: { transform: "translate(".concat((0, N4.val)(t2.scaledSpace.leftPadding), "px, ").concat((0, N4.val)(t2.graphEditorDims.padding.top), "px)") } }, l))));
      }, [t2]), yO = x91;
    });
    var bO, W0, C91, SO, L91, kO, FO, AO, H91, V91, RO, w91, B91, IO, PO = x(() => {
      f1();
      o4();
      er();
      M1();
      bO = requireDist$2(), W0 = I(G());
      c1();
      Xo();
      ir();
      Er();
      Mr();
      N6();
      _u();
      C91 = { label: { color: "#9a9a9a" } }, L91 = B(ju)(SO || (SO = V([""]))), FO = B(qu)(kO || (kO = V(["\n  display: flex;\n  color: ", ";\n  padding-right: 12px;\n  align-items: center;\n  justify-content: flex-end;\n  box-sizing: border-box;\n"])), C91.label.color), H91 = B.button(AO || (AO = V(["\n  background: none;\n  border: none;\n  outline: none;\n  display: flex;\n  box-sizing: border-box;\n  font-size: 14px;\n  align-items: center;\n  height: 100%;\n  margin-left: 12px;\n  color: ", ";\n\n  &:not([disabled]):hover {\n    color: white;\n  }\n"])), (t2) => t2.isSelected ? v7[t2.graphEditorColor].iconColor : V5.offColor), V91 = () => W0.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "10", height: "12", viewBox: "0 0 640 512" }, W0.default.createElement("g", { transform: "translate(0 100)" }, W0.default.createElement("path", { fill: "currentColor", d: "M368 32h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zM208 88h-84.75C113.75 64.56 90.84 48 64 48 28.66 48 0 76.65 0 112s28.66 64 64 64c26.84 0 49.75-16.56 59.25-40h79.73c-55.37 32.52-95.86 87.32-109.54 152h49.4c11.3-41.61 36.77-77.21 71.04-101.56-3.7-8.08-5.88-16.99-5.88-26.44V88zm-48 232H64c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32zM576 48c-26.84 0-49.75 16.56-59.25 40H432v72c0 9.45-2.19 18.36-5.88 26.44 34.27 24.35 59.74 59.95 71.04 101.56h49.4c-13.68-64.68-54.17-119.48-109.54-152h79.73c9.5 23.44 32.41 40 59.25 40 35.34 0 64-28.65 64-64s-28.66-64-64-64zm0 272h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32z" }))), w91 = B.span(RO || (RO = V(["\n  margin-right: 4px;\n  ", ";\n\n  ", ":hover & {\n    color: #ccc;\n  }\n"])), T0, FO), B91 = ({ leaf: t2 }) => {
        var g;
        let a = Z4(t2.sheetObject.propsP, t2.pathToProp), c = t2.sheetObject, { controlIndicators: r } = rt(a, c, t2.propConf), e = v1(() => {
          let s = t2.sheetObject.address, d = h3(t2.pathToProp);
          return (0, bO.val)(T().atomP.historic.projects.stateByProjectId[s.projectId].stateBySheetId[s.sheetId].sequenceEditor.selectedPropsByObject[s.objectKey][d]);
        }, [t2]), l = (0, W0.useRef)(false), i5 = typeof e == "string";
        l.current = i5;
        let o = (0, W0.useCallback)(() => {
          let s = t2.sheetObject.address;
          T().transaction(({ stateEditors: d }) => {
            l.current ? d.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.removePropFromGraphEditor(D(S({}, s), { pathToProp: t2.pathToProp })) : (d.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.addPropToGraphEditor(D(S({}, s), { pathToProp: t2.pathToProp })), d.studio.historic.panels.sequenceEditor.graphEditor.setIsOpen({ isOpen: true }));
          });
        }, [t2]), n = (g = t2.propConf.label) != null ? g : t2.pathToProp[t2.pathToProp.length - 1], v = (0, W0.useRef)(null);
        return wn(v.current, t2), W0.default.createElement(L91, { depth: t2.depth }, W0.default.createElement(FO, { ref: v, isEven: t2.n % 2 === 0, style: { height: t2.nodeHeight + "px" }, isSelected: i5 === true }, W0.default.createElement(w91, null, n), r, W0.default.createElement(H91, { onClick: o, isSelected: i5 === true, graphEditorColor: e != null ? e : "1", style: { opacity: 1 }, disabled: false }, W0.default.createElement(V91, null))));
      }, IO = B91;
    });
    function Bt(t2, a) {
      T().transaction(({ stateEditors: c }) => {
        c.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.sequenceEditorCollapsableItems.set(D(S({}, a.sheetAddress), { studioSheetItemKey: a.sheetItemKey, isCollapsed: t2 }));
      });
    }
    var zh = x(() => {
      f1();
    });
    var yt, Ap, y91, GO = x(() => {
      yt = I(G());
      Mr();
      PO();
      zh();
      Ap = (t2) => {
        let a = "prop" + t2.pathToProp[t2.pathToProp.length - 1];
        return t2.shouldRender ? t2.type === "propWithChildren" ? yt.default.createElement(y91, { leaf: t2, key: a }) : yt.default.createElement(IO, { leaf: t2, key: a }) : yt.default.createElement(yt.default.Fragment, { key: a });
      }, y91 = ({ leaf: t2 }) => yt.default.createElement(zt, { leaf: t2, label: t2.pathToProp[t2.pathToProp.length - 1], isCollapsed: t2.isCollapsed, toggleCollapsed: () => Bt(!t2.isCollapsed, { sheetAddress: t2.sheetObject.address, sheetItemKey: t2.sheetItemKey }) }, t2.children.map((a) => Ap(a)));
    });
    var TO, S91, ZO, OO = x(() => {
      TO = I(G());
      Mr();
      GO();
      zh();
      f1();
      S91 = ({ leaf: t2 }) => TO.default.createElement(zt, { leaf: t2, label: t2.sheetObject.address.objectKey, isCollapsed: t2.isCollapsed, toggleSelect: () => {
        T().transaction(({ stateEditors: a }) => {
          a.studio.historic.panels.outline.selection.set([t2.sheetObject]);
        });
      }, toggleCollapsed: () => Bt(!t2.isCollapsed, { sheetAddress: t2.sheetObject.address, sheetItemKey: t2.sheetItemKey }) }, t2.children.map((a) => Ap(a))), ZO = S91;
    });
    var Rp, k91, EO, DO = x(() => {
      M1();
      Rp = I(G());
      OO();
      Mr();
      zh();
      wu();
      k91 = ({ leaf: t2 }) => v1(() => Rp.default.createElement(zt, { leaf: t2, label: t2.sheet.address.sheetId, isCollapsed: t2.isCollapsed, toggleCollapsed: () => {
        Bt(!t2.isCollapsed, { sheetAddress: t2.sheet.address, sheetItemKey: t2.sheetItemKey });
      } }, t2.children.map((a) => Rp.default.createElement(ZO, { key: "sheetObject-" + hr(a.sheetObject), leaf: a }))), [t2]), EO = k91;
    });
    var bp, uh, WO, A91, _O, R91, b91, jO, qO = x(() => {
      M1();
      bp = requireDist$2(), uh = I(G());
      c1();
      DO();
      A91 = B.div(WO || (WO = V(["\n  position: absolute;\n  left: 0;\n  overflow-x: visible;\n"]))), R91 = B.ul(_O || (_O = V(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"]))), b91 = ({ layoutP: t2 }) => v1(() => {
        let a = (0, bp.val)(t2.tree), c = (0, bp.val)(t2.leftDims.width);
        return uh.default.createElement(A91, { style: { width: c + "px", top: a.top + "px" } }, uh.default.createElement(R91, null, uh.default.createElement(EO, { leaf: a })));
      }, [t2]), jO = b91;
    });
    var Fp, NO, F91, I91, UO, KO = x(() => {
      G1();
      W4();
      M1();
      R0();
      Fp = I(G());
      c1();
      kp();
      F91 = B.div(NO || (NO = V(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: ", ";\n  overflow: hidden;\n  background: ", ";\n  pointer-events: none;\n"])), () => K2.rightBackground, N2(0.01, A6(1 * 0.03, Z6.panel.bg))), I91 = ({ layoutP: t2 }) => {
        let a = s1(t2.rightDims.width), c = s1(t2.panelDims.height);
        return Fp.default.createElement(F91, { style: { width: a + "px" } }, Fp.default.createElement(sh, { width: a, height: c, layoutP: t2 }));
      }, UO = I91;
    });
    var St, $O, P91, G91, QO, XO = x(() => {
      M1();
      St = I(G());
      c1();
      qO();
      KO();
      Vp();
      Yu();
      P91 = B.div($O || ($O = V(["\n  position: absolute;\n  left: 0;\n  right: 0;\n"]))), G91 = ({ layoutP: t2 }) => {
        let a = s1(t2.dopeSheetDims.height);
        return St.default.createElement(P91, { style: { height: a + "px" } }, St.default.createElement(UO, { layoutP: t2 }), St.default.createElement(FG, null, St.default.createElement(jO, { layoutP: t2 }), St.default.createElement($Z, { layoutP: t2 })));
      }, QO = G91;
    });
    function Pp(t2, a, c) {
      return Ip.prism.memo(t2, () => (0, Ip.prism)(a), c).getValue();
    }
    var Ip, YO = x(() => {
      Ip = requireDist$2();
    });
    function Q1(t2) {
      return function(c, r) {
        return t2(c, r());
      };
    }
    function d3(t2) {
      return Object.freeze({ audience: d7(t2, 8) ? "internal" : d7(t2, 16) ? "dev" : "public", category: d7(t2, 4) ? "troubleshooting" : d7(t2, 2) ? "todo" : "general", level: d7(t2, 512) ? 512 : d7(t2, 256) ? 256 : d7(t2, 128) ? 128 : 64 });
    }
    function d7(t2, a) {
      return (t2 & a) === a;
    }
    function X1(t2, a) {
      return ((a & 32) === 32 ? true : (a & 16) === 16 ? t2.dev : (a & 8) === 8 ? t2.internal : false) && t2.min <= a;
    }
    function Wr(t2 = console, a = {}) {
      let c = D(S({}, F5), { includes: S({}, F5.includes) }), r = { styled: O91.bind(c, t2), noStyle: D91.bind(c, t2) }, e = Z91.bind(c);
      function l() {
        return c.loggingConsoleStyle && c.loggerConsoleStyle ? r.styled : r.noStyle;
      }
      return c.create = l(), { configureLogger(i5) {
        var o;
        i5 === "console" ? (c.loggerConsoleStyle = F5.loggerConsoleStyle, c.create = l()) : i5.type === "console" ? (c.loggerConsoleStyle = (o = i5.style) != null ? o : F5.loggerConsoleStyle, c.create = l()) : i5.type === "keyed" ? (c.creatExt = (n) => i5.keyed(n.names), c.create = e) : i5.type === "named" && (c.creatExt = T91.bind(null, i5.named), c.create = e);
      }, configureLogging(i5) {
        var o, n, h, v, g;
        c.includes.dev = (o = i5.dev) != null ? o : F5.includes.dev, c.includes.internal = (n = i5.internal) != null ? n : F5.includes.internal, c.includes.min = (h = i5.min) != null ? h : F5.includes.min, c.include = (v = i5.include) != null ? v : F5.include, c.loggingConsoleStyle = (g = i5.consoleStyle) != null ? g : F5.loggingConsoleStyle, c.create = l();
      }, getLogger() {
        return c.create({ names: [] });
      } };
    }
    function T91(t2, a) {
      let c = [];
      for (let { name: r, key: e } of a.names) c.push(e == null ? r : "".concat(r, " (").concat(e, ")"));
      return t2(c);
    }
    function Z91(t2) {
      let a = S(S({}, this.includes), this.include(t2)), c = this.filtered, r = this.named.bind(this, t2), e = this.creatExt(t2), l = X1(a, 524), i5 = X1(a, 522), o = X1(a, 521), n = X1(a, 529), h = X1(a, 545), v = X1(a, 265), g = X1(a, 268), s = X1(a, 273), d = X1(a, 289), z = X1(a, 137), u = X1(a, 145), f = X1(a, 73), p = X1(a, 81), m = l ? e.error.bind(e, g3._hmm) : c.bind(t2, 524), M = i5 ? e.error.bind(e, g3._todo) : c.bind(t2, 522), w = o ? e.error.bind(e, g3._error) : c.bind(t2, 521), H = n ? e.error.bind(e, g3.errorDev) : c.bind(t2, 529), y = h ? e.error.bind(e, g3.errorPublic) : c.bind(t2, 545), k = g ? e.warn.bind(e, g3._kapow) : c.bind(t2, 268), F = v ? e.warn.bind(e, g3._warn) : c.bind(t2, 265), U = s ? e.warn.bind(e, g3.warnDev) : c.bind(t2, 273), A = d ? e.warn.bind(e, g3.warnPublic) : c.bind(t2, 273), P = z ? e.debug.bind(e, g3._debug) : c.bind(t2, 137), C = u ? e.debug.bind(e, g3.debugDev) : c.bind(t2, 145), E = f ? e.trace.bind(e, g3._trace) : c.bind(t2, 73), a1 = p ? e.trace.bind(e, g3.traceDev) : c.bind(t2, 81), j = { _hmm: m, _todo: M, _error: w, errorDev: H, errorPublic: y, _kapow: k, _warn: F, warnDev: U, warnPublic: A, _debug: P, debugDev: C, _trace: E, traceDev: a1, lazy: { _hmm: l ? Q1(m) : m, _todo: i5 ? Q1(M) : M, _error: o ? Q1(w) : w, errorDev: n ? Q1(H) : H, errorPublic: h ? Q1(y) : y, _kapow: g ? Q1(k) : k, _warn: v ? Q1(F) : F, warnDev: s ? Q1(U) : U, warnPublic: d ? Q1(A) : A, _debug: z ? Q1(P) : P, debugDev: u ? Q1(C) : C, _trace: f ? Q1(E) : E, traceDev: p ? Q1(a1) : a1 }, named: r, utilFor: { internal() {
        return { debug: j._debug, error: j._error, warn: j._warn, trace: j._trace, named(K, Z) {
          return j.named(K, Z).utilFor.internal();
        } };
      }, dev() {
        return { debug: j.debugDev, error: j.errorDev, warn: j.warnDev, trace: j.traceDev, named(K, Z) {
          return j.named(K, Z).utilFor.dev();
        } };
      }, public() {
        return { error: j.errorPublic, warn: j.warnPublic, debug(K, Z) {
          j._warn('(public "debug" filtered out) '.concat(K), Z);
        }, trace(K, Z) {
          j._warn('(public "trace" filtered out) '.concat(K), Z);
        }, named(K, Z) {
          return j.named(K, Z).utilFor.public();
        } };
      } } };
      return j;
    }
    function O91(t2, a) {
      let c = S(S({}, this.includes), this.include(a)), r = [], e = "";
      for (let n = 0; n < a.names.length; n++) {
        let { name: h, key: v } = a.names[n];
        if (e += " %c".concat(h), r.push(this.style.css(h)), v != null) {
          let g = "%c#".concat(v);
          e += g, r.push(this.style.css(g));
        }
      }
      let l = this.filtered, i5 = this.named.bind(this, a), o = [e, ...r];
      return JO(l, a, c, t2, o, E91(o), i5);
    }
    function E91(t2) {
      let a = t2.slice(0);
      for (let c = 1; c < a.length; c++) a[c] += ";background-color:#e0005a;padding:2px;color:white";
      return a;
    }
    function D91(t2, a) {
      let c = S(S({}, this.includes), this.include(a)), r = "";
      for (let o = 0; o < a.names.length; o++) {
        let { name: n, key: h } = a.names[o];
        r += " ".concat(n), h != null && (r += "#".concat(h));
      }
      let e = this.filtered, l = this.named.bind(this, a), i5 = [r];
      return JO(e, a, c, t2, i5, i5, l);
    }
    function JO(t2, a, c, r, e, l, i5) {
      let o = X1(c, 524), n = X1(c, 522), h = X1(c, 521), v = X1(c, 529), g = X1(c, 545), s = X1(c, 265), d = X1(c, 268), z = X1(c, 273), u = X1(c, 289), f = X1(c, 137), p = X1(c, 145), m = X1(c, 73), M = X1(c, 81), w = o ? r.error.bind(r, ...e) : t2.bind(a, 524), H = n ? r.error.bind(r, ...e) : t2.bind(a, 522), y = h ? r.error.bind(r, ...e) : t2.bind(a, 521), k = v ? r.error.bind(r, ...e) : t2.bind(a, 529), F = g ? r.error.bind(r, ...e) : t2.bind(a, 545), U = d ? r.warn.bind(r, ...l) : t2.bind(a, 268), A = s ? r.warn.bind(r, ...e) : t2.bind(a, 265), P = z ? r.warn.bind(r, ...e) : t2.bind(a, 273), C = u ? r.warn.bind(r, ...e) : t2.bind(a, 273), E = f ? r.info.bind(r, ...e) : t2.bind(a, 137), a1 = p ? r.info.bind(r, ...e) : t2.bind(a, 145), j = m ? r.debug.bind(r, ...e) : t2.bind(a, 73), K = M ? r.debug.bind(r, ...e) : t2.bind(a, 81), Z = { _hmm: w, _todo: H, _error: y, errorDev: k, errorPublic: F, _kapow: U, _warn: A, warnDev: P, warnPublic: C, _debug: E, debugDev: a1, _trace: j, traceDev: K, lazy: { _hmm: o ? Q1(w) : w, _todo: n ? Q1(H) : H, _error: h ? Q1(y) : y, errorDev: v ? Q1(k) : k, errorPublic: g ? Q1(F) : F, _kapow: d ? Q1(U) : U, _warn: s ? Q1(A) : A, warnDev: z ? Q1(P) : P, warnPublic: u ? Q1(C) : C, _debug: f ? Q1(E) : E, debugDev: p ? Q1(a1) : a1, _trace: m ? Q1(j) : j, traceDev: M ? Q1(K) : K }, named: i5, utilFor: { internal() {
        return { debug: Z._debug, error: Z._error, warn: Z._warn, trace: Z._trace, named(J, W) {
          return Z.named(J, W).utilFor.internal();
        } };
      }, dev() {
        return { debug: Z.debugDev, error: Z.errorDev, warn: Z.warnDev, trace: Z.traceDev, named(J, W) {
          return Z.named(J, W).utilFor.dev();
        } };
      }, public() {
        return { error: Z.errorPublic, warn: Z.warnPublic, debug(J, W) {
          Z._warn('(public "debug" filtered out) '.concat(J), W);
        }, trace(J, W) {
          Z._warn('(public "trace" filtered out) '.concat(J), W);
        }, named(J, W) {
          return Z.named(J, W).utilFor.public();
        } };
      } } };
      return Z;
    }
    var g3, F5, Gp = x(() => {
      g3 = { _hmm: d3(524), _todo: d3(522), _error: d3(521), errorDev: d3(529), errorPublic: d3(545), _kapow: d3(268), _warn: d3(265), warnDev: d3(273), warnPublic: d3(289), _debug: d3(137), debugDev: d3(145), _trace: d3(73), traceDev: d3(81) };
      F5 = { loggingConsoleStyle: true, loggerConsoleStyle: true, includes: Object.freeze({ internal: false, dev: false, min: 256 }), filtered: function() {
      }, include: function() {
        return {};
      }, create: null, creatExt: null, named(t2, a, c) {
        return this.create({ names: [...t2.names, { name: a, key: c }] });
      }, style: { bold: void 0, italic: void 0, cssMemo: /* @__PURE__ */ new Map([["", ""]]), collapseOnRE: /[a-z- ]+/g, color: void 0, collapsed(t2) {
        if (t2.length < 5) return t2;
        let a = t2.replace(this.collapseOnRE, "");
        return this.cssMemo.has(a) || this.cssMemo.set(a, this.css(t2)), a;
      }, css(t2) {
        var r, e, l, i5;
        let a = this.cssMemo.get(t2);
        if (a) return a;
        let c = "color:".concat((e = (r = this.color) == null ? void 0 : r.call(this, t2)) != null ? e : "hsl(".concat((t2.charCodeAt(0) + t2.charCodeAt(t2.length - 1)) % 360, ", 100%, 60%)"));
        return (l = this.bold) != null && l.test(t2) && (c += ";font-weight:600"), (i5 = this.italic) != null && i5.test(t2) && (c += ";font-style:italic"), this.cssMemo.set(t2, c), c;
      } } };
    });
    var aE, kt, _r = x(() => {
      Gp();
      Gp();
      aE = Wr(console, {});
      aE.configureLogging({ dev: true, min: 64 });
      kt = aE.getLogger().named("Theatre.js (default logger)").utilFor.dev();
    });
    var U4, At, cE, rE = x(() => {
      O4();
      U4 = requireDist$2();
      _r();
      b4();
      At = 28, cE = (t2, a) => {
        var z;
        U4.prism.ensurePrism();
        let c = true, r = io + At, e = 0, l = a.atomP.ahistoric.projects.stateByProjectId[t2.address.projectId].stateBySheetId[t2.address.sheetId].sequence.collapsableItems, i5 = l.byId[c2.forSheet()].isCollapsed, o = (z = (0, U4.pointerToPrism)(i5).getValue()) != null ? z : false, n = { type: "sheet", isCollapsed: o, sheet: t2, children: [], sheetItemKey: c2.forSheet(), shouldRender: c, top: io, depth: 0, n: e, nodeHeight: At, heightIncludingChildren: -1 };
        e += 1;
        for (let u of Object.values((0, U4.val)(t2.objectsP))) u && h(u, n.children, n.depth + 1, !o);
        n.heightIncludingChildren = r - n.top;
        function h(u, f, p, m) {
          var F;
          let M = (0, U4.val)(u.template.getMapOfValidSequenceTracks_forStudio()), w = (0, U4.val)(u.template.configPointer);
          if (Object.keys(M).length === 0) return;
          let H = l.byId[c2.forSheetObject(u)].isCollapsed, y = (F = (0, U4.pointerToPrism)(H).getValue()) != null ? F : false, k = { type: "sheetObject", isCollapsed: y, sheetItemKey: c2.forSheetObject(u), shouldRender: m, top: r, children: [], depth: p, n: e, sheetObject: u, nodeHeight: m ? At : 0, heightIncludingChildren: -1 };
          f.push(k), m && (e += 1, r += k.nodeHeight), v(u, M, [], w, k.children, p + 1, m && !y), k.heightIncludingChildren = r - k.top;
        }
        function v(u, f, p, m, M, w, H) {
          for (let [y, k] of Object.entries(f)) {
            let F = m.props[y];
            g(u, k, [...p, y], F, M, w, H);
          }
        }
        function g(u, f, p, m, M, w, H) {
          m.type === "compound" ? s(u, f, m, p, m, M, w, H) : m.type === "enum" ? kt.warn("Prop type enum is not yet supported in the sequence editor") : d(u, f, p, m, M, w, H);
        }
        function s(u, f, p, m, M, w, H, y) {
          var A;
          let k = l.byId[c2.forSheetObjectProp(u, m)].isCollapsed, F = (A = (0, U4.pointerToPrism)(k).getValue()) != null ? A : false, U = { type: "propWithChildren", isCollapsed: F, propConf: p, pathToProp: m, sheetItemKey: c2.forSheetObjectProp(u, m), sheetObject: u, shouldRender: y, top: r, children: [], nodeHeight: y ? At : 0, heightIncludingChildren: -1, depth: H, trackMapping: f, n: e };
          w.push(U), y && (r += U.nodeHeight, e += 1), v(u, f, m, M, U.children, H + 1, y && !F), U.heightIncludingChildren = r - U.top;
        }
        function d(u, f, p, m, M, w, H) {
          let y = { type: "primitiveProp", propConf: m, depth: w, sheetItemKey: c2.forSheetObjectProp(u, p), sheetObject: u, pathToProp: p, shouldRender: H, top: r, nodeHeight: H ? At : 0, heightIncludingChildren: H ? At : 0, trackId: f, n: e };
          M.push(y), e += 1, r += y.nodeHeight;
        }
        return n;
      };
    });
    function eE(t2, a) {
      let c = T(), r = c.atomP.ahistoric.projects.stateByProjectId[t2.address.projectId].stateBySheetId[t2.address.sheetId], e = c.atomP.historic.projects.stateByProjectId[t2.address.projectId].stateBySheetId[t2.address.sheetId];
      return (0, s0.prism)(() => {
        var A;
        let l = Pp("tree", () => cE(t2, c), []), i5 = (0, s0.val)(a), o = (0, s0.val)(c.atomP.historic.panels.sequenceEditor.graphEditor), n = (0, s0.val)(e.sequenceEditor.selectedPropsByObject), h = !!n && Object.keys(n).length > 0, { leftDims: v, rightDims: g, graphEditorDims: s, dopeSheetDims: d, horizontalScrollbarDims: z } = s0.prism.memo("leftDims", () => {
          var _;
          let P = { width: Math.floor(i5.width * W91), height: i5.height, screenX: i5.screenX, screenY: i5.screenY }, C = { width: i5.width - P.width, height: i5.height, screenX: i5.screenX + P.width, screenY: i5.screenY }, E = h && (o == null ? void 0 : o.isOpen) === true, a1 = Math.floor((E ? b1((_ = o == null ? void 0 : o.height) != null ? _ : 0.5, 0.1, 0.7) : 0) * i5.heightWithoutBorder), j = 0 + a1, K = i5.height - j, Z = { width: i5.width, height: K, screenX: i5.screenX, screenY: i5.screenY }, J = { isAvailable: h, isOpen: E, width: C.width, height: a1, screenX: i5.screenX, screenY: i5.screenY + K, padding: { top: 20, bottom: 20 } };
          return { leftDims: P, rightDims: C, graphEditorDims: J, dopeSheetDims: Z, horizontalScrollbarDims: { bottom: 0 } };
        }, [i5, o, h]), u = s0.prism.memo("graphEditorVerticalSpace", () => {
          let P = s.height - s.padding.top - s.padding.bottom;
          return { space: P, fromExtremumSpace(C) {
            return C * P;
          }, toExtremumSpace(C) {
            return C / P;
          } };
        }, [s]), [f, p] = s0.prism.state("isSeeking", false), m = { isSeeking: f, setIsSeeking: p }, M = {}, w = (A = (0, s0.val)(r.sequence.clippedSpaceRange)) != null ? A : _91, H = s0.prism.memo("scaledSpace", () => {
          let P = w.end - w.start, C = g.width, E = P / C, a1 = C / P;
          return { fromUnitSpace(j) {
            return j * a1;
          }, toUnitSpace(j) {
            return j * E;
          }, leftPadding: 10 };
        }, [w, g.width]), y = s0.prism.memo("setClippedSpaceRange", () => function(C) {
          c.transaction(({ stateEditors: E }) => {
            let a1 = S({}, C);
            if (a1.end <= a1.start && (a1.end = a1.start + 1), a1.start < 0) {
              let j = a1.end - a1.start;
              a1.start = 0, a1.end = j;
            }
            E.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.clippedSpaceRange.set(D(S({}, t2.address), { range: a1 }));
          });
        }, []), k = s0.prism.memo("clippedSpace", () => ({ range: w, width: g.width, fromUnitSpace(P) {
          return H.fromUnitSpace(P - w.start) + H.leftPadding;
        }, toUnitSpace(P) {
          return H.toUnitSpace(P - H.leftPadding) + w.start;
        }, setRange: y }), [w, g.width, H, y]), F = s0.prism.memo("selection.current", () => new s0.Atom({}), []);
        return Vn("finalAtom", { sheet: t2, tree: l, panelDims: i5, leftDims: v, rightDims: g, dopeSheetDims: d, horizontalScrollbarDims: z, seeker: m, unitSpace: M, scaledSpace: H, clippedSpace: k, graphEditorDims: s, graphEditorVerticalSpace: u, selectionAtom: F }).pointer;
      });
    }
    var s0, W91, _91, lE = x(() => {
      f1();
      YO();
      Wu();
      s0 = requireDist$2();
      rE();
      H2();
      W91 = 0.2, _91 = { start: 0, end: 10 };
    });
    function K91(t2) {
      let { fullSecondStampsContainer: a, sequencePositionFormatter: c, snapToGrid: r, unitSpaceToClippedSpace: e } = t2, l = "";
      Dr(t2, (i5, o) => {
        let n = r(i5), h = e(n);
        o ? l += iE(c.formatFullUnitForGrid(n), h, "full-unit") : l += iE(c.formatSubUnitForGrid(n), h, "sub-unit");
      }), a.innerHTML = l;
    }
    function iE(t2, a, c) {
      return '<span class="'.concat(c, '" style="transform: translate3d(').concat(a.toFixed(1), 'px, -50%, 0);">').concat(t2, "</span>");
    }
    var o8, K4, oE, j91, n8, nE, q91, hE, N91, U91, vE, Tp = x(() => {
      o8 = requireDist$2();
      R0();
      K4 = I(G());
      c1();
      Sp();
      f1();
      j91 = B.div(oE || (oE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  pointer-events: none;\n"]))), n8 = { fullUnitStampColor: "#6a6a6a", stampFontSize: "10px", get subUnitStampColor() {
        return A6(0.2, n8.fullUnitStampColor);
      } }, q91 = B.div(nE || (nE = V(["\n  position: absolute;\n  top: 0;\n  height: 100%;\n  left: 0;\n  overflow: hidden;\n  z-index: 2;\n  will-change: transform;\n  pointer-events: none;\n"]))), N91 = B.div(hE || (hE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  & > span {\n    position: absolute;\n    display: block;\n    top: 9px;\n    left: -10px;\n    color: ", ";\n    text-align: center;\n    font-size: ", ";\n    width: 20px;\n\n    &.full-unit {\n      color: ", ";\n    }\n\n    &.sub-unit {\n      color: ", ";\n    }\n  }\n\n  pointer-events: none;\n"])), n8.fullUnitStampColor, n8.stampFontSize, n8.fullUnitStampColor, n8.subUnitStampColor), U91 = ({ layoutP: t2, width: a }) => {
        let c = (0, K4.useRef)(null), [r, e] = (0, K4.useState)(null);
        return (0, K4.useLayoutEffect)(() => {
          if (r) return (0, o8.prism)(() => {
            let l = (0, o8.val)(t2.sheet).getSequence();
            return { fullSecondStampsContainer: r, clippedSpaceRange: (0, o8.val)(t2.clippedSpace.range), clippedSpaceWidth: (0, o8.val)(t2.clippedSpace.width), unitSpaceToClippedSpace: (0, o8.val)(t2.clippedSpace.fromUnitSpace), leftPadding: (0, o8.val)(t2.scaledSpace.leftPadding), fps: l.subUnitsPerUnit, sequencePositionFormatter: l.positionFormatter, snapToGrid: (i5) => l.closestGridPosition(i5) };
          }).onChange(T().ticker, K91, true);
        }, [r, a, t2]), K4.default.createElement(j91, { ref: c, style: { width: a + "px" } }, K4.default.createElement(q91, { style: { width: a + "px" } }, K4.default.createElement(N91, { ref: e })));
      }, vE = U91;
    });
    function Zp(t2) {
      let [a, c] = (0, ph.useState)(false);
      return (0, ph.useEffect)(() => {
        if (c(false), !t2) return;
        let r = (l) => {
          l.target === t2 ? c(true) : c(false);
        }, e = () => {
          c(false);
        };
        return t2.addEventListener("mouseenter", r), t2.addEventListener("mousemove", r), t2.addEventListener("mouseleave", e), () => {
          c(false), t2.removeEventListener("mouseenter", r), t2.removeEventListener("mousemove", r), t2.removeEventListener("mouseleave", e);
        };
      }, [t2]), a;
    }
    var ph, gE = x(() => {
      ph = I(G());
    });
    function $91(t2, a) {
      let c = 0, [r, e] = t2, [l, i5] = a;
      return e - r > i5 - l ? [l, i5] : (r < l && (c = 0 - r), e > i5 && (c = i5 - e), [r + c, e + c]);
    }
    var z4, I5, L2, sE, dE, mh, Q91, zE, Op = x(() => {
      z4 = requireDist$2();
      M1();
      G1();
      f1();
      h8();
      v0();
      M2();
      P1();
      I5 = I(G());
      c1();
      E2();
      L2 = { enabled: { backgroundColor: "#2C2F34", stroke: "#646568" }, disabled: { backgroundColor: "#282a2cc5", stroke: "#595a5d" }, hover: { backgroundColor: "#34373D", stroke: "#C8CAC0" }, dragging: { backgroundColor: "#3F444A", stroke: "#C8CAC0" }, thumbWidth: 9, hitZoneWidth: 26, rangeStripMinWidth: 30 }, sE = 1e3, mh = B.div(dE || (dE = V(["\n  position: absolute;\n  height: ", "px;\n  background-color: ", ";\n  cursor: grab;\n  top: 0;\n  left: 0;\n  width: ", "px;\n  transform-origin: left top;\n  &:hover {\n    background-color: ", ";\n  }\n  &.dragging {\n    background-color: ", ";\n    cursor: grabbing !important;\n  }\n  ", ";\n\n  /* covers the one pixel space between the focus range strip and the top strip\n  of the sequence editor panel, which would have caused that one pixel to act\n  like a panel drag zone */\n  &:after {\n    display: block;\n    content: ' ';\n    position: absolute;\n    bottom: -1px;\n    height: 1px;\n    left: 0;\n    right: 0;\n    background: transparent;\n    pointer-events: normal;\n    z-index: -1;\n  }\n"])), () => _0 - 1, (t2) => t2.enabled ? L2.enabled.backgroundColor : L2.disabled.backgroundColor, sE, L2.hover.backgroundColor, L2.dragging.backgroundColor, C1);
      Q91 = ({ layoutP: t2 }) => {
        let a = (0, I5.useMemo)(() => (0, z4.prism)(() => {
          let { projectId: h, sheetId: v } = (0, z4.val)(t2.sheet).address;
          return (0, z4.val)(T().atomP.ahistoric.projects.stateByProjectId[h].stateBySheetId[v].sequence.focusRange);
        }), [t2]), [c, r] = z1(null), [e] = Z1(r, { menuItems: () => {
          let h = (0, z4.val)(t2.sheet), v = a.getValue();
          return [{ label: "Delete focus range", callback: () => {
            T().tempTransaction(({ stateEditors: g }) => {
              g.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.focusRange.unset(S({}, h.address));
            }).commit();
          } }, { label: v != null && v.enabled ? "Disable focus range" : "Enable focus range", callback: () => {
            v !== void 0 && T().tempTransaction(({ stateEditors: g }) => {
              g.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.focusRange.set(D(S({}, h.address), { range: v.range, enabled: !v.enabled }));
            }).commit();
          } }];
        } }), l = s1(t2.scaledSpace.toUnitSpace), i5 = s1(t2.sheet), o = (0, I5.useMemo)(() => {
          let h, v;
          return { debugName: "FocusRangeStrip", onDragStart(g) {
            let s, d = a.getValue();
            if (!d) return false;
            let z = d.range.start, u = d.range.end, f = false, p = (0, z4.val)(t2.sheet).getSequence();
            return { onDrag(m) {
              if (d = a.getValue(), d) {
                f = true;
                let M = l(m), w = z + M, H = u + M;
                H < w && (H = w), [h, v] = $91([w, H], [0, p.length]).map((y) => p.closestGridPosition(y)), s && s.discard(), s = T().tempTransaction(({ stateEditors: y }) => {
                  var k;
                  y.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.focusRange.set(D(S({}, i5.address), { range: { start: h, end: v }, enabled: (k = d == null ? void 0 : d.enabled) != null ? k : true }));
                });
              }
            }, onDragEnd() {
              d && (f && s !== void 0 ? s.commit() : s && s.discard());
            } };
          }, lockCSSCursorTo: "grabbing" };
        }, [i5, l]), [n] = S1(r, o);
        return g0(n, -1), v1(() => {
          let h = a.getValue(), v = (h == null ? void 0 : h.range) || { start: 0, end: 0 }, g = (0, z4.val)(t2.clippedSpace.fromUnitSpace)(v.start), s = (0, z4.val)(t2.clippedSpace.fromUnitSpace)(v.end), d, z;
          return g < 0 && (g = 0), s > (0, z4.val)(t2.clippedSpace.width) && (s = (0, z4.val)(t2.clippedSpace.width)), g > s ? (z = 0, d = 0) : (z = g, d = (s - g) / sE), h ? I5.default.createElement(I5.default.Fragment, null, e, I5.default.createElement(mh, { id: "range-strip", enabled: h.enabled, className: "".concat(n ? "dragging" : "", " ").concat(h.enabled ? "enabled" : ""), ref: c, style: { transform: "translateX(".concat(z, "px) scale(").concat(d, ", 1)") } })) : I5.default.createElement(I5.default.Fragment, null);
        }, [t2, c, a, e, n]);
      }, zE = Q91;
    });
    var P5, $4, uE, X91, pE, Y91, mE, J91, tt1, Ep, fE = x(() => {
      P5 = requireDist$2();
      M1();
      f1();
      h8();
      I0();
      M2();
      P1();
      $4 = I(G());
      c1();
      E2();
      Op();
      b3();
      X91 = B.div(uE || (uE = V(["\n  position: absolute;\n  top: 0;\n  // the right handle has to be pulled back by its width since its right side indicates its position, not its left side\n  left: ", "px;\n  transform-origin: left top;\n  width: ", "px;\n  height: ", "px;\n  z-index: 3;\n\n  --bg: ", ";\n\n  stroke: ", ";\n  user-select: none;\n\n  cursor: ", ";\n\n  // no pointer events unless pointer-root is in normal mode _and_ the\n  // focus range is enabled\n  #pointer-root & {\n    pointer-events: none;\n  }\n\n  #pointer-root.normal & {\n    pointer-events: auto;\n  }\n\n  #pointer-root.draggingPositionInSequenceEditor & {\n    pointer-events: auto;\n    cursor: var(", ");\n  }\n\n  &.dragging {\n    pointer-events: none !important;\n  }\n\n  // highlight the handle if it's hovered, or the whole strip is hovverd\n  ", ":hover ~ &, &:hover {\n    --bg: ", ";\n    stroke: ", ";\n  }\n\n  // highlight the handle when it's being dragged or the whole strip is being dragged.\n  // using dragging.dragging to give this selector priority, as it seems to be overridden\n  // by the hover selector above\n  &.dragging,\n  ", ".dragging.dragging ~ & {\n    --bg: ", ";\n    stroke: ", ";\n  }\n\n  #pointer-root.draggingPositionInSequenceEditor &:hover {\n    --bg: ", ";\n    stroke: #40aaa4;\n  }\n\n  background-color: var(--bg);\n\n  // a larger hit zone\n  &:before {\n    display: block;\n    content: ' ';\n    position: absolute;\n    inset: -8px;\n  }\n"])), (t2) => t2.type === "start" ? 0 : -L2.thumbWidth, L2.thumbWidth, () => _0 - 1, ({ enabled: t2 }) => t2 ? L2.enabled.backgroundColor : L2.disabled.backgroundColor, L2.enabled.stroke, (t2) => t2.type === "start" ? "w-resize" : "e-resize", F0, () => mh, L2.hover.backgroundColor, L2.hover.stroke, () => mh, L2.dragging.backgroundColor, L2.dragging.stroke, L2.dragging.backgroundColor), Y91 = B.div(pE || (pE = V(["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n\n  background: linear-gradient(\n    ", "deg,\n    var(--bg) 0%,\n    #ffffff00 100%\n  );\n\n  width: 12px;\n  left: ", "px;\n"])), (t2) => t2.type === "start" ? 90 : -90, (t2) => t2.type === "start" ? L2.thumbWidth : -L2.thumbWidth + 1), J91 = B.div(mE || (mE = V(["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n\n  background: linear-gradient(\n    ", "deg,\n    ", " 0%,\n    #ffffff00 100%\n  );\n\n  width: 12px;\n  left: ", "px;\n"])), (t2) => t2.type === "start" ? -90 : 90, () => Rt.backgroundColor, (t2) => t2.type === "start" ? -12 : L2.thumbWidth), tt1 = ({ layoutP: t2, thumbType: a }) => {
        var n;
        let [c, r] = z1(null), e = (0, $4.useMemo)(() => (0, P5.prism)(() => {
          let { projectId: h, sheetId: v } = (0, P5.val)(t2.sheet).address;
          return (0, P5.val)(T().atomP.ahistoric.projects.stateByProjectId[h].stateBySheetId[v].sequence.focusRange);
        }), [t2]), l = (0, $4.useMemo)(() => ({ debugName: "FocusRangeThumb", onDragStart() {
          let h, v, g = (0, P5.val)(t2.sheet), d = { start: 0, end: g.getSequence().length }, z = e.getValue() || { range: d, enabled: false }, u = z.enabled, f = z.range[a], p = (0, P5.val)(t2.scaledSpace.toUnitSpace), m = p(L2.rangeStripMinWidth);
          return { onDrag(M, w, H) {
            var U;
            let y, k = r2.checkIfMouseEventSnapToPos(H, { ignore: r });
            if (k == null) {
              let A = p(M);
              y = f + A;
            } else y = k;
            v = ((U = e.getValue()) == null ? void 0 : U.range) || d, a === "start" ? y = Math.max(Math.min(y, v.end - m), 0) : y = Math.min(Math.max(y, v.start + m), g.getSequence().length);
            let F = g.getSequence().closestGridPosition(y);
            h !== void 0 && h.discard(), h = T().tempTransaction(({ stateEditors: A }) => {
              A.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.focusRange.set(D(S({}, g.address), { range: D(S({}, v), { [a]: F }), enabled: u }));
            });
          }, onDragEnd(M) {
            M ? h == null || h.commit() : h == null || h.discard();
          } };
        } }), [t2]), [i5] = S1(r, l);
        s2(i5, "draggingPositionInSequenceEditor", a === "start" ? "w-resize" : "e-resize");
        let o = s1(e);
        return g0(i5, (n = o == null ? void 0 : o.range[a]) != null ? n : 0), v1(() => {
          let h = e.getValue();
          if (!h) return null;
          let { enabled: v } = h, g = h.range[a], s = (0, P5.val)(t2.clippedSpace.fromUnitSpace)(g);
          return (s < 0 || (0, P5.val)(t2.clippedSpace.width) < s) && (s = -1e4), $4.default.createElement(X91, D(S(S({ ref: c }, r2.includePositionSnapAttrs(g)), O2(g)), { className: "".concat(i5 && "dragging", " ").concat(v && "enabled"), enabled: v, type: a, style: { transform: "translate3d(".concat(s, "px, 0, 0)") } }), $4.default.createElement(Y91, { type: a, enabled: v }), $4.default.createElement(J91, { type: a }), $4.default.createElement("svg", { viewBox: "0 0 9 18", xmlns: "http://www.w3.org/2000/svg" }, $4.default.createElement("line", { x1: "4", y1: "6", x2: "4", y2: "12" }), $4.default.createElement("line", { x1: "6", y1: "6", x2: "6", y2: "12" })));
        }, [t2, c, e, i5]);
      }, Ep = tt1;
    });
    function rt1(t2, a) {
      let [c, r] = (0, j0.useState)("none");
      return s2(c !== "none", "dragging", c === "creating" ? "ew-resize" : "move"), (0, j0.useMemo)(() => {
        let e = () => ({ debugName: "FocusRangeZone/focusRangeCreationGestureHandlers", onDragStart(i5) {
          let o, n = (0, v8.val)(t2.clippedSpace.toUnitSpace), h = (0, v8.val)(t2.scaledSpace.toUnitSpace), v = (0, v8.val)(t2.sheet), g = v.getSequence(), d = i5.target.getBoundingClientRect(), z = n(i5.clientX - d.left), u = h(L2.rangeStripMinWidth);
          return { onDrag(f) {
            let p = h(f), m = z, M = z + p;
            [m, M] = [b1(m, 0, g.length), b1(M, 0, g.length)].map((w) => g.closestGridPosition(w)), M < m ? [m, M] = [Math.max(Math.min(M, m - u), 0), m] : f > 0 && (M = Math.min(Math.max(M, m + u), g.length)), o && o.discard(), o = T().tempTransaction(({ stateEditors: w }) => {
              w.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence.focusRange.set(D(S({}, v.address), { range: { start: m, end: M }, enabled: true }));
            });
          }, onDragEnd(f) {
            f && o !== void 0 ? o.commit() : o && o.discard();
          } };
        }, lockCSSCursorTo: "ew-resize" }), l = () => ({ debugName: "FocusRangeZone/panelMoveGestureHandlers", onDragStart() {
          let i5, o = a.current, n = a.current.addBoundsHighlightLock();
          return { onDrag(h, v) {
            let g = D(S({}, o.dims), { top: b1(o.dims.top + v, 0, window.innerHeight - S3), left: b1(o.dims.left + h, -o.dims.width + S3, window.innerWidth - S3) }), s = dt(g, { width: window.innerWidth, height: window.innerHeight });
            i5 == null || i5.discard(), i5 = T().tempTransaction(({ stateEditors: d }) => {
              d.studio.historic.panelPositions.setPanelPosition({ position: s, panelId: o.panelId });
            });
          }, onDragEnd(h) {
            n(), h ? i5 == null || i5.commit() : i5 == null || i5.discard();
          } };
        }, lockCSSCursorTo: "move" });
        return { debugName: "FocusRangeZone", onDragStart(i5) {
          let [o, n] = i5.shiftKey ? ["creating", e().onDragStart(i5)] : ["moving-panel", l().onDragStart(i5)];
          return r(o), n === false ? false : { onDrag(h, v, g, s, d) {
            n.onDrag(h, v, g, s, d);
          }, onDragEnd(h) {
            var v;
            r("none"), (v = n.onDragEnd) == null || v.call(n, h);
          } };
        } };
      }, [t2, a]);
    }
    var v8, j0, ME, at1, ct1, xE, CE = x(() => {
      v8 = requireDist$2();
      M1();
      f1();
      r7();
      h8();
      I0();
      M2();
      gE();
      Uu();
      P1();
      H2();
      j0 = I(G());
      c1();
      Op();
      fE();
      b4();
      at1 = B.div(ME || (ME = V(["\n  position: absolute;\n  height: ", 'px;\n  left: 0;\n  right: 0;\n  box-sizing: border-box;\n  /* Use the "grab" cursor if the shift key is up, which is the one used on the top strip of the sequence editor */\n  cursor: ', ";\n"])), () => _0, (t2) => t2.isShiftDown ? "ew-resize" : "move"), ct1 = ({ layoutP: t2 }) => {
        let [a, c] = z1(null), r = D4(), e = (0, j0.useRef)(r);
        e.current = r;
        let l = (0, j0.useMemo)(() => (0, v8.prism)(() => {
          let { projectId: n, sheetId: h } = (0, v8.val)(t2.sheet).address;
          return (0, v8.val)(T().atomP.ahistoric.projects.stateByProjectId[n].stateBySheetId[h].sequence.focusRange);
        }), [t2]);
        S1(c, rt1(t2, e));
        let i5 = xr("Shift"), o = Zp(c);
        return (0, j0.useEffect)(() => {
          if (!i5 && o) return e.current.addBoundsHighlightLock();
        }, [!i5 && o]), v1(() => j0.default.createElement(at1, { ref: a, isShiftDown: i5 }, j0.default.createElement(zE, { layoutP: t2 }), j0.default.createElement(Ep, { thumbType: "start", layoutP: t2 }), j0.default.createElement(Ep, { thumbType: "end", layoutP: t2 })), [t2, l, i5]);
      }, xE = ct1;
    });
    var bt, _0, Rt, LE, et1, lt1, HE, h8 = x(() => {
      M1();
      bt = I(G());
      c1();
      Tp();
      E2();
      G1();
      CE();
      _0 = 18, Rt = { backgroundColor: "#1f2120eb", borderColor: "#1c1e21" }, et1 = B.div(LE || (LE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: ", "px;\n  box-sizing: border-box;\n  background: ", ";\n  border-bottom: 1px solid ", ";\n  ", ";\n"])), _0, Rt.backgroundColor, Rt.borderColor, C1), lt1 = ({ layoutP: t2 }) => {
        let a = s1(t2.rightDims.width);
        return bt.default.createElement(bt.default.Fragment, null, bt.default.createElement(et1, S({}, O2("hide")), bt.default.createElement(vE, { layoutP: t2, width: a, height: _0 }), bt.default.createElement(xE, { layoutP: t2 })));
      }, HE = lt1;
    });
    var Q4, it1, VE, ot1, wE, nt1, ht1, vt1, BE, yE = x(() => {
      Q4 = I(G());
      c1();
      M1();
      f1();
      fo();
      N6();
      it1 = (t2) => isFinite(t2) && t2 > 0, ot1 = B.div(VE || (VE = V(["\n  display: flex;\n  gap: 8px;\n  padding: 4px 8px;\n  height: 28px;\n  align-items: center;\n"]))), nt1 = B.div(wE || (wE = V(["\n  ", ";\n  white-space: nowrap;\n"])), T0), ht1 = ({ deltaX: t2 }) => t2 * 0.25, vt1 = ({ layoutP: t2 }) => {
        let a = s1(t2.sheet), c = (0, Q4.useMemo)(() => {
          let e;
          return { temporarilySetValue(l) {
            e && (e.discard(), e = void 0), e = T().tempTransaction(({ stateEditors: i5 }) => {
              i5.coreByProject.historic.sheetsById.sequence.setLength(D(S({}, a.address), { length: l }));
            });
          }, discardTemporaryValue() {
            e && (e.discard(), e = void 0);
          }, permanentlySetValue(l) {
            e && (e.discard(), e = void 0), T().transaction(({ stateEditors: i5 }) => {
              i5.coreByProject.historic.sheetsById.sequence.setLength(D(S({}, a.address), { length: l }));
            });
          } };
        }, [t2, a]), r = (0, Q4.useRef)(null);
        return (0, Q4.useLayoutEffect)(() => {
          r.current.focus();
        }, []), v1(() => {
          let l = a.getSequence().length;
          return Q4.default.createElement(ot1, null, Q4.default.createElement(nt1, null, "Sequence length"), Q4.default.createElement(G9, D(S({ value: l }, c), { isValid: it1, inputRef: r, nudge: ht1 })));
        }, [a, c, r]);
      }, BE = vt1;
    });
    function mt1(t2, a) {
      let c = (0, z0.useRef)(a);
      c.current = a;
      let r = (0, z0.useMemo)(() => ({ debugName: "LengthIndicator/useDragBulge", lockCSSCursorTo: "ew-resize", onDragStart(l) {
        let i5, o = c.current, n = (0, s7.val)(c.current.layoutP.sheet), h = n.getSequence().length, v = (0, s7.val)(o.layoutP.scaledSpace.toUnitSpace);
        return { onDrag(g, s, d) {
          let z = v(g);
          i5 && (i5.discard(), i5 = void 0), i5 = T().tempTransaction(({ stateEditors: u }) => {
            u.coreByProject.historic.sheetsById.sequence.setLength(D(S({}, n.address), { length: h + z }));
          });
        }, onDragEnd(g) {
          g ? i5 && i5.commit() : i5 && i5.discard();
        } };
      } }), []), [e] = S1(t2, r);
      return g0(e, -1), [e];
    }
    var s7, z0, FE, fh, SE, z7, kE, gt1, AE, dt1, RE, st1, bE, zt1, ut1, pt1, IE, PE = x(() => {
      M1();
      s7 = requireDist$2(), z0 = I(G());
      c1();
      W4();
      h8();
      P1();
      M2();
      f1();
      c4();
      E2();
      K8();
      yE();
      G1();
      e4();
      FE = 1e3, fh = { stripNormal: "#0000006c", stripActive: "#000000" }, z7 = B.div(SE || (SE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 4px;\n  z-index: ", ";\n  pointer-events: none;\n\n  &:after {\n    display: block;\n    content: ' ';\n    position: absolute;\n    /* top: ", "px; */\n    top: 0;\n    bottom: 0;\n    left: -1px;\n    width: 1px;\n    background-color: ", ";\n  }\n\n  &:hover:after,\n  &.dragging:after {\n    background-color: ", ";\n  }\n"])), () => K2.lengthIndicatorStrip, _0, fh.stripNormal, fh.stripActive), gt1 = B.div(kE || (kE = V(["\n  position: absolute;\n  top: ", "px;\n  width: 100px;\n  left: -50px;\n  pointer-events: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n"])), _0 - 15), dt1 = B.div(AE || (AE = V(["\n  margin-top: 8px;\n  font-size: 10px;\n  white-space: nowrap;\n  padding: 2px 8px;\n  border-radius: 2px;\n  ", ";\n  cursor: ew-resize;\n  color: #464646;\n  background-color: #0000004d;\n  display: none;\n\n  ", ":hover &, ", ".dragging & {\n    display: block;\n    color: white;\n    background-color: ", ";\n  }\n"])), C1, z7, z7, fh.stripActive), st1 = B.div(RE || (RE = V(["\n  font-size: 10px;\n  white-space: nowrap;\n  padding: 1px 2px;\n  border-radius: 2px;\n  ", ";\n  justify-content: center;\n  align-items: center;\n  cursor: ew-resize;\n  color: #5d5d5d;\n  background-color: #191919;\n\n  ", ":hover &, ", ".dragging & {\n    color: white;\n    background-color: ", ";\n\n    & > svg:first-child {\n      margin-right: -1px;\n    }\n  }\n\n  & > svg:first-child {\n    margin-right: -4px;\n  }\n"])), C1, z7, z7, fh.stripActive), zt1 = B.div(bE || (bE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgb(23 23 23 / 43%);\n  width: ", "px;\n  z-index: ", ";\n  transform-origin: left top;\n\n  ", ".dragging ~ &, ", ":hover ~ & {\n    background-color: rgb(23 23 23 / 60%);\n  }\n"])), FE, () => K2.lengthIndicatorCover, z7, z7), ut1 = -1e4, pt1 = ({ layoutP: t2 }) => {
        let [a, c] = z1(null), [r] = mt1(c, { layoutP: t2 }), { node: e, toggle: l, close: i5 } = x2({ debugName: "LengthIndicator" }, () => z0.default.createElement(T2, null, z0.default.createElement(BE, { layoutP: t2, onRequestClose: i5 })));
        return v1(() => {
          let o = (0, s7.val)(t2.sheet), n = (0, s7.val)(t2.rightDims.height), h = o.getSequence(), v = h.length, g = v, s = (0, s7.val)(t2.clippedSpace.fromUnitSpace)(g), d = (0, s7.val)(t2.clippedSpace.width), z, u;
          return s > d ? (u = 0, z = 0) : (s < 0 && (s = 0), u = s, z = (d - s) / FE), z0.default.createElement(z0.default.Fragment, null, e, z0.default.createElement(z7, { style: { height: n + "px", transform: "translateX(".concat(u === 0 ? ut1 : u, "px)") }, className: r ? "dragging" : "" }, z0.default.createElement(gt1, null, z0.default.createElement(st1, S({ ref: a, onClick: (f) => {
            l(f, c);
          } }, O2("hide")), z0.default.createElement(IA, null), z0.default.createElement(PA, null)), z0.default.createElement(dt1, null, "Sequence length:", " ", h.positionFormatter.formatBasic(v)))), z0.default.createElement(zt1, { title: "Length", style: { height: n + "px", transform: "translateX(".concat(u, "px) scale(").concat(z, ", 1)") } }));
        }, [t2, a, r, e]);
      };
      IE = pt1;
    });
    var Dp, G5, GE, ft1, TE, Mt1, ZE, xt1, Ct1, OE, EE = x(() => {
      M1();
      Dp = requireDist$2(), G5 = I(G());
      c1();
      Tp();
      W4();
      h8();
      E2();
      ft1 = B.div(GE || (GE = V(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin-top: 0px;\n"]))), Mt1 = B.div(TE || (TE = V(["\n  position: absolute;\n  top: 16px;\n  font-size: ", ";\n  color: ", ";\n  text-align: center;\n  transform: translateX(-50%);\n  background: ", ";\n  padding: 1px 8px;\n  font-variant-numeric: tabular-nums;\n  pointer-events: none;\n  z-index: ", ";\n"])), n8.stampFontSize, n8.fullUnitStampColor, Rt.backgroundColor, () => K2.currentFrameStamp), xt1 = B.div(ZE || (ZE = V(["\n  position: absolute;\n  top: 5px;\n  left: -0px;\n  bottom: 0;\n  width: 0.5px;\n  background: rgba(100, 100, 100, 0.2);\n  pointer-events: none;\n"]))), Ct1 = G5.default.memo(({ layoutP: t2 }) => {
        let [a, c] = s1(ZG()), r = s1(t2.clippedSpace.fromUnitSpace), { sequence: e, formatter: l, clippedSpaceWidth: i5 } = v1(() => {
          let v = (0, Dp.val)(t2.sheet).getSequence(), g = (0, Dp.val)(t2.clippedSpace.width);
          return { sequence: v, formatter: v.positionFormatter, clippedSpaceWidth: g };
        }, [t2]);
        if (a == -1) return G5.default.createElement(G5.default.Fragment, null);
        let o = c === 3 ? e.closestGridPosition(a) : a, n = r(o), h = n >= 0 && n <= i5;
        return G5.default.createElement(G5.default.Fragment, null, G5.default.createElement(ft1, null, G5.default.createElement(Mt1, { style: { opacity: h ? 1 : 0, transform: "translate3d(calc(".concat(n, "px - 50%), 0, 0)") } }, l.formatForPlayhead(o)), G5.default.createElement(xt1, { posType: c, style: { opacity: h ? 1 : 0, transform: "translate3d(".concat(n, "px, 0, 0)") } })), " ");
      }), OE = Ct1;
    });
    var P3, D2, WE, Lt1, _E, Ht1, jE, Wp, qE, $E, NE, _p, UE, jp, KE, DE, Vt1, QE, XE = x(() => {
      M1();
      P3 = requireDist$2();
      Qv();
      R0();
      D2 = I(G());
      c1();
      W4();
      E2();
      G1();
      M2();
      Lt1 = B.div(WE || (WE = V(["\n  --threadHeight: 6px;\n  --bg-inactive: #32353b;\n  --bg-active: #5b5c5d;\n  position: absolute;\n  height: 0;\n  width: 100%;\n  left: 12px;\n  /* bottom: 8px; */\n  z-index: ", ";\n  ", "\n"])), () => K2.horizontalScrollbar, C1), Ht1 = B.div(_E || (_E = V(["\n  position: relative;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--threadHeight);\n"]))), Wp = B.div(jE || (jE = V(["\n  position: absolute;\n  height: 5px;\n  background: var(--bg-inactive);\n  cursor: ew-resize;\n  z-index: 2;\n\n  &:hover,\n  &:active {\n    background: var(--bg-active);\n  }\n\n  &:after {\n    ", ";\n    display: block;\n    content: ' ';\n  }\n"])), ji("absolute", "-4px")), $E = B.div(qE || (qE = V(["\n  position: absolute;\n  height: 5px;\n  width: 7px;\n  left: 0;\n  z-index: 2;\n  top: 0;\n  bottom: 0;\n  display: block;\n\n  &:hover:before {\n    background: var(--bg-active);\n  }\n\n  &:before {\n    ", ";\n    display: block;\n    content: ' ';\n    background: var(--bg-inactive);\n    border-radius: 0 2px 2px 0;\n  }\n\n  &:after {\n    ", ";\n    display: block;\n    content: ' ';\n  }\n"])), ji("absolute", "0"), ji("absolute", "-4px")), _p = B($E)(NE || (NE = V(["\n  left: calc(-1 * 7px);\n  cursor: w-resize;\n  &:before {\n    transform: scaleX(-1);\n  }\n"]))), jp = B($E)(UE || (UE = V(["\n  cursor: e-resize;\n  left: 0px;\n"]))), DE = B.div(KE || (KE = V(["\n  display: ", ";\n  position: absolute;\n  top: -20px;\n  left: 4px;\n  padding: 0 4px;\n  transform: translateX(-50%);\n  background: #131d1f;\n  border-radius: 4px;\n  color: #fff;\n  font-size: 10px;\n  line-height: 18px;\n  text-align: center;\n\n  ", ":hover &,\n  ", ":hover &,\n  ", ":hover ~ ", " &,\n  ", ":hover ~ ", " & {\n    display: block;\n  }\n"])), (t2) => t2.active ? "block" : "none", _p, jp, Wp, _p, Wp, jp), Vt1 = ({ layoutP: t2 }) => {
        let a = (0, D2.useCallback)((f) => f.toFixed(2), []), c = (0, D2.useMemo)(() => (0, P3.prism)(() => {
          let f = (0, P3.val)(t2.rightDims.width) - 25, p = (0, P3.val)(t2.clippedSpace.range), m = (0, P3.val)(t2.sheet).getSequence().length, M = Math.max(p.end, m), w = p.start / M * f, H = p.end / M * f;
          return { rightWidth: f, clippedSpaceRange: p, sequenceLength: m, assumedLengthOfSequence: M, rangeStartX: w, rangeEndX: H, bottom: (0, P3.val)(t2.horizontalScrollbarDims.bottom) };
        }), [t2]), { rangeStartX: r, rangeEndX: e, clippedSpaceRange: l, bottom: i5 } = s1(c), [o, n] = (0, D2.useState)("nothing"), h = (0, D2.useMemo)(() => {
          let f = (0, P3.val)(c), p = () => {
            f = (0, P3.val)(c);
          }, m = (w) => w / f.rightWidth * f.assumedLengthOfSequence;
          return { onRangeDragStart() {
            return p(), { onDrag(w) {
              n("both");
              let H = m(w), y = l5(f.clippedSpaceRange, (k) => k + H);
              (0, P3.val)(t2.clippedSpace.setRange)(y);
            }, onDragEnd() {
              n("nothing");
            } };
          }, onRangeStartDragStart() {
            return p(), { onDrag(w) {
              n("start");
              let H = m(w), y = { start: f.clippedSpaceRange.start + H, end: f.clippedSpaceRange.end };
              y.start > y.end - 1 && (y.start = y.end - 1), y.start <= 0 && (y.start = 0), (0, P3.val)(t2.clippedSpace.setRange)(y);
            }, onDragEnd() {
              n("nothing");
            } };
          }, onRangeEndDragStart() {
            return p(), { onDrag(w) {
              n("end");
              let H = m(w), y = { start: f.clippedSpaceRange.start, end: f.clippedSpaceRange.end + H };
              y.end < y.start + 1 && (y.end = y.start + 1), y.end >= f.assumedLengthOfSequence && (y.end = f.assumedLengthOfSequence), (0, P3.val)(t2.clippedSpace.setRange)(y);
            }, onDragEnd() {
              n("nothing");
            } };
          } };
        }, [t2, c]), [v, g] = (0, D2.useState)(null);
        S1(v, { debugName: "HorizontalScrollbar/onRangeDrag", onDragStart: h.onRangeDragStart, lockCSSCursorTo: "ew-resize" });
        let [s, d] = (0, D2.useState)(null);
        S1(s, { debugName: "HorizontalScrollbar/onRangeStartDrag", onDragStart: h.onRangeStartDragStart, lockCSSCursorTo: "w-resize" });
        let [z, u] = (0, D2.useState)(null);
        return S1(z, { debugName: "HorizontalScrollbar/onRangeEndDrag", onDragStart: h.onRangeEndDragStart, lockCSSCursorTo: "e-resize" }), D2.default.createElement(Lt1, S({ style: { bottom: i5 + 8 + "px" } }, O2("hide")), D2.default.createElement(Ht1, null, D2.default.createElement(Wp, { ref: g, style: { width: "".concat(e - r, "px"), transform: "translate3d(".concat(r, "px, 0, 0)") } }), D2.default.createElement(_p, { ref: d, style: { transform: "translate3d(".concat(r, "px, 0, 0)") } }, D2.default.createElement(DE, { active: o === "both" || o === "start" }, a(l.start))), D2.default.createElement(jp, { ref: u, style: { transform: "translate3d(".concat(e, "px, 0, 0)") } }, D2.default.createElement(DE, { active: o === "both" || o === "end" }, a(l.end)))));
      }, QE = Vt1;
    });
    var JE, YE, wt1, Bt1, tD, aD = x(() => {
      JE = I(G());
      c1();
      wt1 = B.div(YE || (YE = V(["\n  position: absolute;\n  inset: ", "px;\n"])), (t2) => t2.room * -1), Bt1 = (t2) => JE.default.createElement(wt1, { room: t2.room }), tD = Bt1;
    });
    var Ft, Mh, qp, yt1, cD, St1, rD, kt1, At1, Rt1, eD, lD = x(() => {
      c1();
      M1();
      fo();
      N6();
      Ft = I(G()), Mh = I(G()), qp = requireDist$2();
      ua();
      yt1 = (t2) => isFinite(t2) && t2 >= 0, St1 = B.div(cD || (cD = V(["\n  display: flex;\n  gap: 8px;\n  padding: 4px 8px;\n  height: 28px;\n  align-items: center;\n"]))), kt1 = B.div(rD || (rD = V(["\n  ", ";\n  white-space: nowrap;\n"])), T0), At1 = ({ deltaX: t2 }) => t2 * 0.25, Rt1 = ({ layoutP: t2, onRequestClose: a }) => {
        let c = (0, qp.val)(t2.sheet), r = c.getSequence(), e = (0, Ft.useMemo)(() => {
          let i5, o = r.position;
          return { temporarilySetValue(n) {
            i5 && (i5 = void 0), i5 = b1(n, 0, r.length), r.position = i5;
          }, discardTemporaryValue() {
            i5 && (i5 = void 0, r.position = o, a("discardTemporaryValue"));
          }, permanentlySetValue(n) {
            i5 && (i5 = void 0), r.position = b1(n, 0, r.length), a("permanentlySetValue");
          } };
        }, [t2, r]), l = (0, Ft.useRef)(null);
        return (0, Ft.useLayoutEffect)(() => {
          l.current.focus();
        }, []), v1(() => {
          let i5 = c.getSequence(), o = Number((0, qp.val)(i5.pointer.position).toFixed(3));
          return Mh.default.createElement(St1, null, Mh.default.createElement(kt1, null, "Sequence position"), Mh.default.createElement(G9, D(S({ value: o }, e), { isValid: yt1, inputRef: l, nudge: At1 })));
        }, [c, e, l]);
      }, eD = Rt1;
    });
    var iD, oD = x(() => {
      iD = typeof navigator != "undefined" && navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    });
    var nD, hD = x(() => {
      oD();
      nD = (t2) => iD ? t2.metaKey === true : t2.ctrlKey === true;
    });
    function gD() {
      Np = false;
    }
    function dD() {
      Np = true;
    }
    function Up() {
      let t2 = T();
      (0, vD.useEffect)(() => {
        let a = (c) => {
          let r = c.composedPath()[0];
          if (!(r && (r.tagName === "INPUT" || r.tagName === "TEXTAREA"))) {
            if (c.key === "z" || c.key === "Z" || c.code === "KeyZ") if (nD(c)) c.shiftKey === true ? t2.redo() : t2.undo();
            else return;
            else if (c.code === "Space" && !c.shiftKey && !c.metaKey && !c.altKey && !c.ctrlKey) {
              if (!Np) return;
              let e = uk();
              if (e) if (e.playing) e.pause();
              else {
                let { projectId: l, sheetId: i5 } = e.address, o = (0, s3.prism)(() => {
                  let v = (0, s3.val)(T().atomP.ahistoric.projects.stateByProjectId[l].stateBySheetId[i5].sequence.focusRange);
                  return s3.prism.memo("shouldFollowFocusRange", () => {
                    let s = e.position;
                    if (v) {
                      let d = s >= v.range.start && s <= v.range.end;
                      return v.enabled ? !!d : true;
                    } else return true;
                  }, []) && v && v.enabled ? { range: [v.range.start, v.range.end], isFollowingARange: true } : { range: [0, (0, s3.val)(e.pointer.length)], isFollowingARange: false };
                }), n = e.playDynamicRange((0, s3.prism)(() => (0, s3.val)(o).range), T().ticker), h = sD(e);
                n.finally(() => {
                  h.set(void 0);
                }), h.set(o);
              }
              else return;
            } else if (c.altKey && (c.key === "\\" || c.code === "Backslash" || c.code === "IntlBackslash")) t2.transaction(({ stateEditors: e, drafts: l }) => {
              e.studio.ahistoric.setVisibilityState(l.ahistoric.visibilityState === "everythingIsHidden" ? "everythingIsVisible" : "everythingIsHidden");
            });
            else return;
            c.preventDefault(), c.stopPropagation();
          }
        };
        return window.addEventListener("keydown", a), () => {
          window.removeEventListener("keydown", a);
        };
      }, []);
    }
    var vD, s3, Np, sD, zD, xh = x(() => {
      vD = I(G());
      f1();
      hD();
      C5();
      s3 = requireDist$2();
      tr();
      Np = true;
      sD = T4((t2) => new s3.Atom(void 0)), zD = T4((t2) => (0, s3.prism)(() => {
        let a = sD(t2).prism.getValue();
        if (a) return a.getValue().isFollowingARange;
        {
          let { projectId: c, sheetId: r } = t2.address, e = (0, s3.val)(T().atomP.ahistoric.projects.stateByProjectId[c].stateBySheetId[r].sequence.focusRange);
          if (!e || !e.enabled) return false;
          let l = (0, s3.val)(t2.pointer.position);
          return l >= e.range.start && l <= e.range.end;
        }
      }));
    });
    function Gt1(t2, a) {
      return Z1(t2, { menuItems() {
        return [{ label: "Place marker", callback: () => {
          T().transaction(({ stateEditors: c }) => {
            let r = (0, X4.val)(a.layoutP.sheet), e = r.getSequence();
            c.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.replaceMarkers({ sheetAddress: r.address, markers: [{ id: VF(), position: e.position }], snappingFunction: e.closestGridPosition });
          });
        } }];
      } });
    }
    var X4, z3, uD, It, pD, bt1, mD, xD, fD, Ft1, MD, It1, Pt1, CD, LD = x(() => {
      aD();
      M2();
      P1();
      M1();
      X4 = requireDist$2();
      ua();
      z3 = I(G());
      c1();
      W4();
      E2();
      G1();
      c4();
      e4();
      lD();
      xh();
      I0();
      v0();
      f1();
      O4();
      b3();
      c8();
      It = B.div(uD || (uD = V(["\n  --thumbColor: #00e0ff;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 5px;\n  height: 100%;\n  z-index: ", ";\n  pointer-events: none;\n\n  display: ", ";\n"])), () => K2.playhead, (t2) => t2.isVisible ? "block" : "none"), bt1 = B.div(pD || (pD = V(["\n  position: absolute;\n  top: 8px;\n  width: 0;\n  height: calc(100% - 8px);\n  border-left: 1px solid #27e0fd;\n  z-index: 10;\n  pointer-events: none;\n\n  #pointer-root.draggingPositionInSequenceEditor &:not(.seeking) {\n    /* pointer-events: auto; */\n    /* cursor: var(", "); */\n\n    &:after {\n      position: absolute;\n      inset: -8px;\n      display: block;\n      content: ' ';\n    }\n  }\n"])), F0), xD = B.div(mD || (mD = V(["\n  background-color: var(--thumbColor);\n  position: absolute;\n  width: 5px;\n  height: 13px;\n  top: -4px;\n  left: -2px;\n  z-index: 11;\n  cursor: ew-resize;\n  --sunblock-color: #1f2b2b;\n\n  ", ";\n\n  ", ".seeking > & {\n    pointer-events: none !important;\n  }\n\n  #pointer-root.draggingPositionInSequenceEditor\n    ", ":not(.seeking)\n    > & {\n    pointer-events: auto;\n    cursor: var(", ");\n  }\n\n  ", ".playheadattachedtofocusrange > & {\n    top: -8px;\n    --sunblock-color: #005662;\n    &:before,\n    &:after {\n      border-bottom-width: 8px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    display: block;\n    content: ' ';\n    left: -2px;\n    width: 0;\n    height: 0;\n    border-bottom: 4px solid var(--sunblock-color);\n    border-left: 2px solid transparent;\n  }\n\n  &:after {\n    position: absolute;\n    display: block;\n    content: ' ';\n    right: -2px;\n    width: 0;\n    height: 0;\n    border-bottom: 4px solid var(--sunblock-color);\n    border-right: 2px solid transparent;\n  }\n"])), C1, It, It, F0, It), Ft1 = B.div(fD || (fD = V(["\n  position: absolute;\n  left: 1px;\n  right: 1px;\n  top: 13px;\n  border-top: 3px solid var(--thumbColor);\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n  pointer-events: none;\n\n  /* ", ".playheadattachedtofocusrange & {\n    top: 10px;\n    &:before,\n    &:after {\n      height: 15px;\n    }\n  } */\n\n  &:before {\n    position: absolute;\n    display: block;\n    content: ' ';\n    top: -4px;\n    left: -2px;\n    height: 8px;\n    width: 2px;\n    background: none;\n    border-radius: 0 100% 0 0;\n    border-top: 1px solid var(--thumbColor);\n    border-right: 1px solid var(--thumbColor);\n  }\n\n  &:after {\n    position: absolute;\n    display: block;\n    content: ' ';\n    top: -4px;\n    right: -2px;\n    height: 8px;\n    width: 2px;\n    background: none;\n    border-radius: 100% 0 0 0;\n    border-top: 1px solid var(--thumbColor);\n    border-left: 1px solid var(--thumbColor);\n  }\n"])), It), It1 = B.div(MD || (MD = V(["\n  display: none;\n  position: absolute;\n  top: -20px;\n  left: 4px;\n  padding: 0 2px;\n  transform: translateX(-50%);\n  background: #1a1a1a;\n  border-radius: 4px;\n  color: #fff;\n  font-size: 10px;\n  line-height: 18px;\n  text-align: center;\n  ", ":hover &, ", ".seeking & {\n    display: block;\n  }\n"])), xD, It), Pt1 = ({ layoutP: t2 }) => {
        let [a, c] = z1(null), { node: r, toggle: e, close: l } = x2({ debugName: "Playhead" }, () => z3.default.createElement(T2, null, z3.default.createElement(eD, { layoutP: t2, onRequestClose: l }))), i5 = (0, z3.useMemo)(() => ({ debugName: "RightOverlay/Playhead", onDragStart() {
          let h = (0, X4.val)(t2.sheet).getSequence(), v = h.position, g = (0, X4.val)(t2.scaledSpace.toUnitSpace), s = (0, X4.val)(t2.seeker.setIsSeeking);
          return s(true), mt(), { onDrag(d, z, u) {
            var p;
            let f = g(d);
            h.position = (p = r2.checkIfMouseEventSnapToPos(u, { ignore: c })) != null ? p : b1(v + f, 0, h.length);
          }, onDragEnd(d) {
            s(false), I3();
          }, onClick(d) {
            e(d, a.current);
          } };
        } }), [t2, c]), [o] = S1(c, i5);
        s2(o, "draggingPositionInSequenceEditor", "ew-resize"), g0(s1(t2.seeker.isSeeking) || o, -1);
        let [n] = Gt1(c, { layoutP: t2 });
        return v1(() => {
          let h = (0, X4.val)(t2.seeker.isSeeking), v = (0, X4.val)(t2.sheet).getSequence(), g = (0, X4.val)(zD(v)), s = v.positionPrism.getValue(), d = (0, X4.val)(t2.clippedSpace.fromUnitSpace)(s), z = d >= 0 && d <= (0, X4.val)(t2.clippedSpace.width);
          return z3.default.createElement(z3.default.Fragment, null, n, r, z3.default.createElement(It, S({ isVisible: z, style: { transform: "translate3d(".concat(d, "px, 0, 0)") }, className: "".concat(h && "seeking", " ").concat(g && "playheadattachedtofocusrange") }, O2("hide")), z3.default.createElement(xD, S({ ref: a }, r2.includePositionSnapAttrs(s)), z3.default.createElement(tD, { room: 8 }), z3.default.createElement(Ft1, null), z3.default.createElement(It1, null, v.positionFormatter.formatForPlayhead(v.closestGridPosition(s)))), z3.default.createElement(bt1, D(S({}, r2.includePositionSnapAttrs(s)), { className: h ? "seeking" : "" }))));
        }, [t2, a, r]);
      }, CD = Pt1;
    });
    var g8, Pt, Kp, HD, Tt1, Zt1, VD, wD = x(() => {
      g8 = requireDist$2();
      M1();
      f1();
      h8();
      Pt = I(G());
      c1();
      Kp = 1e3, Tt1 = B.div(HD || (HD = V(["\n  position: absolute;\n  top: ", "px;\n  left: 0;\n  opacity: 0.15;\n  width: ", "px;\n  transform-origin: top left;\n  pointer-events: none;\n  background-color: ", ";\n"])), _0, Kp, (t2) => t2.enabled ? "#000000" : "transparent"), Zt1 = ({ layoutP: t2 }) => {
        let a = (0, Pt.useMemo)(() => (0, g8.prism)(() => {
          let { projectId: c, sheetId: r } = (0, g8.val)(t2.sheet).address;
          return (0, g8.val)(T().atomP.ahistoric.projects.stateByProjectId[c].stateBySheetId[r].sequence.focusRange);
        }), [t2]);
        return v1(() => {
          let c = a.getValue();
          if (!c || !c.enabled) return null;
          let { range: r } = c, e = (0, g8.val)(t2.rightDims.height) - _0, l = (0, g8.val)(t2.clippedSpace.fromUnitSpace), i5 = (0, g8.val)(t2.clippedSpace.width), o = [];
          {
            let n = 0, h = l(c.range.start), v, g;
            n > h ? (g = 0, v = 0) : (h > i5 && (h = i5), g = n, v = (h - n) / Kp), o.push({ translateX: g, scaleX: v });
          }
          {
            let n = l(c.range.end), h = i5, v, g;
            n > h ? (g = 0, v = 0) : (n < 0 && (n = 0), g = n, v = (h - n) / Kp), o.push({ translateX: g, scaleX: v });
          }
          return Pt.default.createElement(Pt.default.Fragment, null, o.map(({ translateX: n, scaleX: h }, v) => Pt.default.createElement(Tt1, { key: "curtain-".concat(v), enabled: true, style: { height: "".concat(e, "px"), transform: "translateX(".concat(n, "px) scaleX(").concat(h, ")") } })));
        }, [t2, a]);
      }, VD = Zt1;
    });
    var T5, BD, Ot1, yD, Et1, SD, kD = x(() => {
      T5 = I(G());
      c1();
      M1();
      f1();
      N6();
      Lo();
      Ot1 = B.div(BD || (BD = V(["\n  display: flex;\n  gap: 8px;\n  /* padding: 4px 8px; */\n  height: 28px;\n  align-items: center;\n"]))), B.div(yD || (yD = V(["\n  ", ";\n  white-space: nowrap;\n"])), T0), Et1 = ({ layoutP: t2, marker: a }) => {
        var l;
        let c = s1(t2.sheet), r = (0, T5.useMemo)(() => {
          let i5;
          return { temporarilySetValue(o) {
            i5 && (i5.discard(), i5 = void 0), i5 = T().tempTransaction(({ stateEditors: n }) => {
              n.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.updateMarker({ sheetAddress: c.address, markerId: a.id, label: o });
            });
          }, discardTemporaryValue() {
            i5 && (i5.discard(), i5 = void 0);
          }, permanentlySetValue(o) {
            i5 && (i5.discard(), i5 = void 0), T().transaction(({ stateEditors: n }) => {
              n.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.updateMarker({ sheetAddress: c.address, markerId: a.id, label: o });
            });
          } };
        }, [t2, c]), e = (0, T5.useRef)(null);
        return (0, T5.useLayoutEffect)(() => {
          e.current.focus();
        }, []), T5.default.createElement(Ot1, null, T5.default.createElement(O9, D(S({ value: (l = a.label) != null ? l : "" }, r), { isValid: () => true, inputRef: e })));
      }, SD = Et1;
    });
    function Kt1(t2, a) {
      return Z1(t2, { menuItems() {
        return [{ label: "Remove marker", callback: () => {
          T().transaction(({ stateEditors: c }) => {
            c.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.removeMarker({ sheetAddress: a.sheetAddress, markerId: a.markerId });
          });
        } }];
      } });
    }
    function $t1(t2, a) {
      let c = (0, Y2.useRef)(a);
      c.current = a;
      let r = (0, Y2.useMemo)(() => ({ debugName: "MarkerDot/useDragMarker (".concat(a.marker.id, ")"), onDragStart(l) {
        let i5 = c.current.marker, o = (0, Ch.val)(a.layoutP.scaledSpace.toUnitSpace), n;
        return mt(), { onDrag(h, v, g) {
          var z;
          let s = i5, d = Math.max((z = r2.checkIfMouseEventSnapToPos(g, { ignore: t2 })) != null ? z : s.position + o(h), 0);
          n == null || n.discard(), n = T().tempTransaction(({ stateEditors: u }) => {
            u.studio.historic.projects.stateByProjectId.stateBySheetId.sequenceEditor.replaceMarkers({ sheetAddress: (0, Ch.val)(a.layoutP.sheet.address), markers: [D(S({}, s), { position: d })], snappingFunction: (0, Ch.val)(a.layoutP.sheet).getSequence().closestGridPosition });
          });
        }, onDragEnd(h) {
          h ? n == null || n.commit() : n == null || n.discard(), I3();
        } };
      } }), []), [e] = S1(t2, r);
      return g0(e, a.marker.position), s2(e, "draggingPositionInSequenceEditor draggingMarker", "ew-resize"), [e];
    }
    var Ch, Y2, FD, ID, Dt1, Wt1, AD, _t1, RD, $p, jt1, bD, qt1, Nt1, PD, Ut1, GD = x(() => {
      Ch = requireDist$2();
      M1();
      f1();
      I0();
      v0();
      P1();
      Y2 = I(G());
      c1();
      E2();
      M2();
      W4();
      b3();
      Cr();
      tp();
      c8();
      c4();
      e4();
      kD();
      FD = 12, ID = 12, Dt1 = FD * 2, Wt1 = ID * 2, _t1 = B.div(AD || (AD = V(['\n  position: absolute;\n  // below the sequence ruler "top bar"\n  top: 18px;\n  z-index: ', ";\n"])), () => K2.marker), $p = B.div(RD || (RD = V(["\n  position: absolute;\n  ", "\n  pointer-events: none;\n"])), H0(FD, ID)), jt1 = Y2.default.memo(() => Y2.default.createElement($p, { children: Y2.default.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 12 12", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, Y2.default.createElement("path", { d: "M12 5H0V7H2.71973L5.96237 10.2426L9.20501 7H12V5Z", fill: "#40AAA4" })) })), qt1 = B.div(bD || (bD = V(["\n  z-index: 1;\n  cursor: ew-resize;\n\n  ", "\n\n  // :not dragging marker to ensure that markers don't snap to other markers\n  // this works because only one marker track (so this technique is not used by keyframes...)\n  #pointer-root.draggingPositionInSequenceEditor:not(.draggingMarker) & {\n    ", '\n  }\n\n  // "All instances of this component <Mark/> inside #pointer-root when it has the .draggingPositionInSequenceEditor class"\n  // ref: https://styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting\n  #pointer-root.draggingPositionInSequenceEditor:not(.draggingMarker) &,\n  #pointer-root.draggingPositionInSequenceEditor\n    &.', " {\n    pointer-events: auto;\n    cursor: var(", ");\n  }\n\n  &:hover\n    + ", ',\n    // notice , "or" in CSS\n    &.', "\n    + ", " {\n    ", "\n  }\n"])), v4.CSS, v4.CSS_WHEN_SOMETHING_DRAGGING, v4.BEING_DRAGGED_CLASS, F0, $p, v4.BEING_DRAGGED_CLASS, $p, H0(Dt1, Wt1)), Nt1 = ({ layoutP: t2, markerId: a }) => {
        let c = s1(t2.sheet.address), r = s1(T().atomP.historic.projects.stateByProjectId[c.projectId].stateBySheetId[c.sheetId].sequenceEditor.markerSet.byId[a]);
        if (!r) return null;
        let e = s1(t2.clippedSpace.width), i5 = s1(t2.clippedSpace.fromUnitSpace)(r.position), o = i5 <= 0 || i5 > e, n = o ? -1e4 : i5, h = o ? 0 : 1;
        return Y2.default.createElement(_t1, { style: { transform: "translateX(".concat(n, "px) scale(").concat(h, ")") } }, Y2.default.createElement(Ut1, { marker: r, layoutP: t2 }));
      }, PD = Nt1, Ut1 = ({ layoutP: t2, marker: a }) => {
        let c = s1(t2.sheet.address), [r, e] = z1(null), [l] = Kt1(e, { sheetAddress: c, markerId: a.id }), [i5] = $t1(e, { layoutP: t2, marker: a }), { node: o, toggle: n, close: h } = x2({ debugName: "MarkerPopover" }, () => Y2.default.createElement(T2, null, Y2.default.createElement(SD, { marker: a, layoutP: t2, onRequestClose: h })));
        return Y2.default.createElement(Y2.default.Fragment, null, l, o, Y2.default.createElement(qt1, S({ title: a.label ? "Marker: ".concat(a.label) : "Marker", ref: r, onClick: (v) => {
          n(v, r.current);
        } }, v4.reactProps({ isDragging: i5, position: a.position }))), Y2.default.createElement(jt1, null));
      };
    });
    var Lh, Qt1, TD, ZD = x(() => {
      M1();
      f1();
      Lh = I(G());
      GD();
      Qt1 = ({ layoutP: t2 }) => {
        let a = s1(t2.sheet.address), c = T().atomP.historic.projects.stateByProjectId[a.projectId].stateBySheetId[a.sheetId].sequenceEditor.markerSet, r = s1(c.allIds);
        return Lh.default.createElement(Lh.default.Fragment, null, r && Object.keys(r).map((e) => Lh.default.createElement(PD, { key: e, layoutP: t2, markerId: e })));
      }, TD = Qt1;
    });
    var ED, Z5, OD, Xt1, Yt1, DD, WD = x(() => {
      W4();
      M1();
      ED = requireDist$2(), Z5 = I(G());
      c1();
      PE();
      EE();
      XE();
      LD();
      h8();
      wD();
      ZD();
      Xt1 = B.div(OD || (OD = V(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: ", ";\n  overflow: visible;\n  pointer-events: none;\n"])), () => K2.rightOverlay), Yt1 = ({ layoutP: t2 }) => v1(() => {
        let a = (0, ED.val)(t2.rightDims.width);
        return Z5.default.createElement(Xt1, { style: { width: a + "px" } }, Z5.default.createElement(CD, { layoutP: t2 }), Z5.default.createElement(QE, { layoutP: t2 }), Z5.default.createElement(OE, { layoutP: t2 }), Z5.default.createElement(HE, { layoutP: t2 }), Z5.default.createElement(TD, { layoutP: t2 }), Z5.default.createElement(IE, { layoutP: t2 }), Z5.default.createElement(VD, { layoutP: t2 }));
      }, [t2]), DD = Yt1;
    });
    var jD, jr, _D, Jt1, ta1, qD, ND = x(() => {
      jD = requireDist$2();
      M1();
      f1();
      jr = I(G());
      c1();
      K8();
      E2();
      Jt1 = B.button(_D || (_D = V(["\n  outline: none;\n  background-color: #1c1d21;\n  border: 1px solid #191919;\n  border-radius: 2px;\n  display: flex;\n  bottom: 14px;\n  right: 8px;\n  z-index: 1;\n  position: absolute;\n\n  padding: 4px 8px;\n  display: flex;\n  color: #656d77;\n  line-height: 20px;\n  font-size: 10px;\n\n  &:hover {\n    color: white;\n  }\n\n  & > svg {\n    transition: transform 0.3s;\n    transform: rotateZ(0deg);\n  }\n\n  &:hover > svg {\n    transform: rotateZ(-20deg);\n  }\n\n  &.open > svg {\n    transform: rotateZ(-180deg);\n  }\n\n  &.open:hover > svg {\n    transform: rotateZ(-160deg);\n  }\n"]))), ta1 = ({ layoutP: t2 }) => {
        let a = s1(t2.graphEditorDims.isOpen), c = (0, jr.useCallback)(() => {
          let r = (0, jD.val)(t2.graphEditorDims.isOpen);
          T().transaction(({ stateEditors: e }) => {
            e.studio.historic.panels.sequenceEditor.graphEditor.setIsOpen({ isOpen: !r });
          });
        }, [t2]);
        return jr.default.createElement(Jt1, S({ onClick: c, title: "Toggle graph editor", className: a ? "open" : "" }, O2("hide")), jr.default.createElement(YA, null));
      }, qD = ta1;
    });
    var G3, Y1, UD, aa1, KD, ca1, K2, $D, ra1, ea1, la1, ia1, oa1, na1, QD, ha1, W4 = x(() => {
      C5();
      M1();
      Wu();
      G3 = requireDist$2(), Y1 = I(G());
      c1();
      XO();
      Er();
      lE();
      WD();
      r7();
      Eu();
      Du();
      E2();
      N5();
      H2();
      ND();
      b4();
      K6();
      aa1 = B(Cn)(UD || (UD = V(["\n  z-index: ", ";\n  box-shadow: 2px 2px 0 rgb(0 0 0 / 11%);\n"])), M5.sequenceEditorPanel), ca1 = B.div(KD || (KD = V(["\n  background-color: rgba(40, 43, 47, 0.99);\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  z-index: -1;\n  pointer-events: none;\n"]))), K2 = (() => {
        let t2 = { rightBackground: 0, scrollableArea: 0, rightOverlay: 0, lengthIndicatorCover: 0, lengthIndicatorStrip: 0, playhead: 0, currentFrameStamp: 0, marker: 0, horizontalScrollbar: 0 }, a = -1;
        for (let c of Object.keys(t2)) t2[c] = a, a++;
        return t2;
      })(), ra1 = B(fn)($D || ($D = V(["\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 1;\n"]))), ea1 = { edges: { left: { from: "screenLeft", distance: 0.1 }, right: { from: "screenRight", distance: 0.2 }, top: { from: "screenBottom", distance: 0.4 }, bottom: { from: "screenBottom", distance: 0.01 } } }, la1 = { width: 800, height: 200 }, ia1 = (t2) => Y1.default.createElement(mn, { panelId: "sequenceEditor", defaultPosition: ea1, minDims: la1 }, Y1.default.createElement(oa1, null)), oa1 = () => {
        let { dims: t2 } = D4(), [a, c] = (0, Y1.useState)(null);
        return _o(a), v1(() => {
          let r = G3.prism.memo("panelSize", () => {
            let d = t2.width, z = t2.height;
            return { width: d, height: z, widthWithoutBorder: d - 2, heightWithoutBorder: z - 4, screenX: t2.left, screenY: t2.top };
          }, [t2]), e = x3(c3().filter((d) => H7(d) || c0(d)).map((d) => c0(d) ? d.sheet : d));
          if (x3(e.map((d) => d.template)).length !== 1) return Y1.default.createElement(Y1.default.Fragment, null);
          let i5 = e[0];
          if (!i5) return Y1.default.createElement(Y1.default.Fragment, null);
          let o = Vn("panelSizeP", r).pointer, n = G3.prism.memo("key", () => JSON.stringify(i5.address), [i5]), h = G3.prism.memo("layout", () => eE(i5, o), [i5, o]).getValue();
          if ((0, G3.val)(h.tree.children).length === 0) return Y1.default.createElement(Y1.default.Fragment, null);
          let v = G3.prism.memo("containerRef", ha1, []), g = (0, G3.val)(h.graphEditorDims.isAvailable), s = (0, G3.val)(h.graphEditorDims.isOpen);
          return Y1.default.createElement(aa1, { ref: (d) => {
            v(d), d !== a && c(d);
          } }, Y1.default.createElement(ca1, { style: { width: "".concat((0, G3.val)(h.leftDims.width), "px") } }), Y1.default.createElement(EG, { layoutP: h }, Y1.default.createElement(na1, { layoutP: h }), Y1.default.createElement(QO, { key: n + "-dopeSheet", layoutP: h }), s && Y1.default.createElement(yO, { key: n + "-graphEditor", layoutP: h }), g && Y1.default.createElement(qD, { layoutP: h }), Y1.default.createElement(DD, { layoutP: h })));
        }, [t2, a]);
      }, na1 = ({ layoutP: t2 }) => v1(() => {
        let a = (0, G3.val)(t2.sheet);
        return Y1.default.createElement(ra1, { style: { width: (0, G3.val)(t2.leftDims.width) } }, Y1.default.createElement(oo, null, Y1.default.createElement(x5, null, a.address.sheetId, " "), Y1.default.createElement(R9, null, ":", " "), Y1.default.createElement(x5, null, a.address.sheetInstanceId, " "), Y1.default.createElement(R9, null, " ", ">", " "), Y1.default.createElement(x5, null, "Sequence")));
      }, [t2]), QD = ia1, ha1 = () => {
        let t2 = null, a = { passive: false, capture: false }, c = (r) => {
          Math.abs(r.deltaY) < Math.abs(r.deltaX) && (r.preventDefault(), r.stopPropagation());
        };
        return (r) => {
          t2 !== r && t2 && t2.removeEventListener("wheel", c, a), t2 = r, r && r.addEventListener("wheel", c, a);
        };
      };
    });
    var u7, va1, XD, YD = x(() => {
      Qk();
      Io();
      u7 = I(G());
      f1();
      M1();
      nG();
      W4();
      va1 = () => {
        let t2 = s1(T().paneManager.allPanesD), a = Object.entries(t2).map(([c, r]) => u7.default.createElement(oG, { key: "pane-".concat(c), paneInstance: r }));
        return u7.default.createElement(u7.default.Fragment, null, a, u7.default.createElement($k, null), u7.default.createElement(yP, null), u7.default.createElement(QD, null));
      }, XD = va1;
    });
    var JD, ga1, tW, aW = x(() => {
      c1();
      gr();
      ga1 = B(w5)(JD || (JD = V(["\n  --popover-outer-stroke: #e11c1c;\n  --popover-inner-stroke: #2c1c1c;\n  --popover-bg: #2c1c1c;\n  pointer-events: none !important;\n"]))), tW = ga1;
    });
    var rW = L1((UD1, cW) => {
      var Hh, Qp;
      Hh = [];
      Qp = [];
      function da1(t2, a, c) {
        var r, e, l, i5, o, n, h, v;
        if (t2 === a) return 0;
        if (r = t2.length, e = a.length, r === 0) return e;
        if (e === 0) return r;
        for (c && (t2 = t2.toLowerCase(), a = a.toLowerCase()), h = 0; h < r; ) Qp[h] = t2.charCodeAt(h), Hh[h] = ++h;
        for (v = 0; v < e; ) for (l = a.charCodeAt(v), i5 = o = v++, h = -1; ++h < r; ) n = l === Qp[h] ? o : o + 1, o = Hh[h], Hh[h] = i5 = o > i5 ? n > i5 ? i5 + 1 : n : n > o ? o + 1 : n;
        return i5;
      }
      cW.exports = da1;
    });
    var iW = L1((KD1, lW) => {
      var eW = rW();
      function sa1() {
        var t2, a, c, r, e, l = 0, i5 = arguments[0], o = arguments[1], n = o.length, h = arguments[2];
        h && (r = h.threshold, e = h.ignoreCase), r === void 0 && (r = 0);
        for (var v = 0; v < n; ++v) e ? a = eW(i5, o[v], true) : a = eW(i5, o[v]), a > i5.length ? t2 = 1 - a / o[v].length : t2 = 1 - a / i5.length, t2 > l && (l = t2, c = o[v]);
        return l >= r ? c : null;
      }
      lW.exports = sa1;
    });
    function Xp(t2, a, c = "Did you mean ", r = "?") {
      let e = (0, oW.default)(t2, a, { threshold: 0.7 });
      return e ? c + JSON.stringify(e) + r : "";
    }
    var oW, nW = x(() => {
      oW = I(iW());
    });
    function Vh(t2, a) {
      return t2.length <= a ? t2 : t2.substr(0, a - 3) + "...";
    }
    var hW = x(() => {
    });
    var za1, wh, Yp = x(() => {
      hW();
      za1 = (t2) => typeof t2 == "string" ? 'string("'.concat(Vh(t2, 10), '")') : typeof t2 == "number" ? "number(".concat(Vh(String(t2), 10), ")") : t2 === null ? "null" : t2 === void 0 ? "undefined" : typeof t2 == "boolean" ? String(t2) : Array.isArray(t2) ? "array" : typeof t2 == "object" ? "object" : "unknown", wh = za1;
    });
    var vW, ua1, Bh, Jp = x(() => {
      c1();
      T6();
      ua1 = B(uz)(vW || (vW = V(["\n  display: flex;\n  height: fit-content;\n  backdrop-filter: blur(14px);\n  border-radius: 2px;\n"]))), Bh = ua1;
    });
    var Gt, gW, pa1, ma1, Y4, Tt = x(() => {
      c1();
      G1();
      Gt = I(G());
      nt();
      Wc();
      bu();
      Jp();
      pa1 = B.button(gW || (gW = V(["\n  ", ";\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  font-weight: 600;\n  width: 32px;\n  height: 32px;\n  outline: none;\n\n  color: #a8a8a9;\n\n  background: rgba(40, 43, 47, 0.8);\n  backdrop-filter: blur(14px);\n  border: none;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n  border-radius: 2px;\n\n  svg {\n    display: block;\n  }\n\n  &:hover {\n    background: rgba(59, 63, 69, 0.8);\n  }\n\n  &:active {\n    background: rgba(82, 88, 96, 0.8);\n  }\n\n  &.selected {\n    color: rgba(255, 255, 255, 0.8);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.7);\n  }\n\n  // Don't blur if in a button group, because it already blurs. We need to blur\n  // on the group-level, otherwise we get seams.\n  ", " > & {\n    backdrop-filter: none;\n    filter: none;\n    border-radius: 0;\n\n    &:first-child {\n      border-top-left-radius: 2px;\n      border-bottom-left-radius: 2px;\n    }\n\n    &:last-child {\n      border-bottom-right-radius: 2px;\n      border-top-right-radius: 2px;\n    }\n  }\n\n  @supports not (backdrop-filter: blur()) {\n    background: rgba(40, 43, 47, 0.95);\n  }\n"])), C1, Bh), ma1 = Gt.default.forwardRef((r, c) => {
        var e = r, { title: t2 } = e, a = m4(e, ["title"]);
        let [l, i5] = R3({ enabled: typeof t2 == "string" }, () => Gt.default.createElement(dn, null, t2));
        return Gt.default.createElement(Gt.default.Fragment, null, l, Gt.default.createElement(pa1, S({ ref: D6([i5, c]) }, a)), " ");
      }), Y4 = ma1;
    });
    var sW, dW, fa1, Ma1, zW, uW = x(() => {
      sW = I(G());
      Tt();
      c1();
      G1();
      fa1 = B(Y4)(dW || (dW = V(["\n  ", ";\n  & > svg {\n    width: 1em;\n    height: 1em;\n    pointer-events: none;\n  }\n"])), C1), Ma1 = ({ config: t2, testId: a }) => {
        var c;
        return sW.default.createElement(fa1, { onClick: t2.onClick, "data-testid": a, title: t2.title, dangerouslySetInnerHTML: { __html: (c = t2.svgSource) != null ? c : "" } });
      }, zW = Ma1;
    });
    function xa1({ value: t2, label: a, icon: c, onClick: r, isSelected: e }) {
      return Zt.default.createElement(Zt.default.Fragment, null, Zt.default.createElement(Y4, { forwardedAs: zz, className: e ? "selected" : void 0, "aria-label": a, onClick: r, title: a }, c));
    }
    var Zt, Ca1, pW, mW = x(() => {
      Zt = I(G());
      T6();
      Tt();
      Jp();
      Ca1 = ({ value: t2, onChange: a, options: c }) => Zt.default.createElement(Bh, null, c.map(({ label: r, icon: e, value: l }) => Zt.default.createElement(xa1, { key: l, value: l, isSelected: t2 === l, label: r, icon: e, onClick: () => a(l) }))), pW = Ca1;
    });
    var tm, fW, La1, Ha1, MW, xW = x(() => {
      tm = I(G());
      c1();
      G1();
      mW();
      La1 = B.div(fW || (fW = V(["\n  ", ";\n  & > svg {\n    width: 1em;\n    height: 1em;\n    pointer-events: none;\n  }\n"])), C1), Ha1 = ({ config: t2 }) => tm.default.createElement(pW, { onChange: t2.onChange, options: t2.options.map(({ label: a, value: c, svgSource: r }) => ({ label: a, value: c, icon: tm.default.createElement(La1, { dangerouslySetInnerHTML: { __html: r } }) })), value: t2.value }), MW = Ha1;
    });
    var Ot, CW, Va1, wa1, LW, HW = x(() => {
      Ot = I(G());
      c1();
      G1();
      Tt();
      iu();
      c4();
      Va1 = B.div(CW || (CW = V(["\n  ", ";\n  & > svg {\n    width: 1em;\n    height: 1em;\n    pointer-events: none;\n  }\n"])), C1), wa1 = ({ config: t2 }) => {
        let a = (0, Ot.useRef)(null), c = x2(() => {
          let r = a.current.getBoundingClientRect();
          return { debugName: "ExtensionFlyoutMenu:" + t2.label, constraints: { maxX: r.right, maxY: 8, minX: r.left, minY: 8 }, verticalGap: 2 };
        }, () => Ot.default.createElement(Eo, { items: t2.items.map((r, e) => ({ label: r.label, callback: () => {
          var l;
          try {
            (l = r.onClick) == null || l.call(r);
          } catch (i5) {
            console.error(i5);
          }
        } })), onRequestClose: () => {
          c.close("clicked");
        } }));
        return Ot.default.createElement(Va1, null, c.node, Ot.default.createElement(Y4, { ref: a, onClick: (r) => {
          c.open(r, a.current);
        } }, t2.label));
      }, LW = wa1;
    });
    function ya1(t2) {
      return VW[t2];
    }
    var qr, Ba1, VW, Sa1, wW, BW = x(() => {
      nW();
      Yp();
      qr = I(G());
      uW();
      xW();
      HW();
      Ba1 = (t2) => qr.default.createElement(qr.default.Fragment, null, t2.config.map((a, c) => qr.default.createElement(Sa1, { config: a, key: c }))), VW = { Icon: zW, Switch: MW, Flyout: LW };
      Sa1 = ({ config: t2 }) => {
        let a = ya1(t2.type);
        if (!a) throw new Error("No tool with tool.type ".concat(wh(t2.type), " exists. Did you mean ").concat(Xp(t2.type, Object.keys(VW))));
        return qr.default.createElement(a, { config: t2 });
      }, wW = Ba1;
    });
    var AW, T3, SW, ka1, kW, yW, Aa1, Ra1, yh, am = x(() => {
      AW = requireDist$2();
      M1();
      f1();
      T3 = I(G());
      c1();
      BW();
      ka1 = B.div(SW || (SW = V(["\n  height: 36px;\n  /* pointer-events: none; */\n\n  display: flex;\n  gap: 0.5rem;\n  justify-content: center;\n"]))), yW = B.div(kW || (kW = V(["\n  position: abolute;\n  height: 32px;\n  width: 1px;\n  background: #373b40;\n  opacity: 0.4;\n"]))), Aa1 = ({ extension: t2, toolbarId: a }) => {
        var l;
        let c = (0, T3.useMemo)(() => new AW.Atom([]), []), r = (l = t2.toolbars) == null ? void 0 : l[a];
        (0, T3.useLayoutEffect)(() => {
          let i5 = r == null ? void 0 : r(c.set.bind(c), T().publicApi);
          if (typeof i5 == "function") return i5;
        }, [t2, a, r]);
        let e = s1(c.prism);
        return T3.default.createElement(wW, { config: e });
      }, Ra1 = ({ toolbarId: t2, showLeftDivider: a }) => {
        var l;
        let c = [], r = s1(T().atomP.ephemeral.extensions.byId), e = false;
        for (let [, i5] of Object.entries(r)) !i5 || !((l = i5.toolbars) != null && l[t2]) || (c.push(T3.default.createElement(T3.default.Fragment, { key: "extensionToolbar-" + i5.id }, e ? T3.default.createElement(yW, null) : void 0, T3.default.createElement(Aa1, { extension: i5, toolbarId: t2 }))), e = true);
        return c.length === 0 ? null : T3.default.createElement(ka1, { "data-testid": "theatre-extensionToolbar-".concat(t2) }, a ? T3.default.createElement(yW, null) : void 0, c);
      }, yh = Ra1;
    });
    var p7, RW, ba1, Fa1, Sh, bW = x(() => {
      c1();
      p7 = I(G());
      Tt();
      ba1 = B(Y4)(RW || (RW = V(["\n  color: ", ";\n\n  border-bottom: 1px solid\n    ", ";\n"])), ({ pinned: t2 }) => t2 ? "rgba(255, 255, 255, 0.8)" : "#A8A8A9", ({ pinned: t2 }) => t2 ? "rgba(255, 255, 255, 0.7)" : "rgba(255, 255, 255, 0.08)"), Fa1 = (0, p7.forwardRef)((n, o) => {
        var h = n, { children: t2, hint: a, pinned: c, icon: r, pinHintIcon: e, unpinHintIcon: l } = h, i5 = m4(h, ["children", "hint", "pinned", "icon", "pinHintIcon", "unpinHintIcon"]);
        let [v, g] = (0, p7.useState)(false), s = v || a;
        return p7.default.createElement(ba1, D(S({}, i5), { pinned: c, ref: o, onMouseOver: () => g(true), onMouseOut: () => g(false) }), p7.default.createElement("div", { style: { pointerEvents: "none", width: "fit-content", height: "fit-content", inset: 0 } }, s && !c ? e : s && c ? l : r), t2);
      }), Sh = Fa1;
    });
    function Ia1(t2) {
      return cm.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), cm.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.732 4.048l-.792-.792L7.2 8l4.74 4.744.792-.792L8.781 8l3.951-3.952zm-3.932 0l-.792-.792L3.268 8l4.74 4.744.792-.792L4.848 8 8.8 4.048z", fill: "currentColor" }));
    }
    var cm, rm, FW = x(() => {
      cm = I(G());
      rm = Ia1;
    });
    function Pa1(t2) {
      return em.createElement("svg", S({ width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, t2), em.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M3.694 3.765l.792-.792 4.74 4.744-4.74 4.744-.792-.793 3.951-3.951-3.951-3.952zm3.932 0l.792-.792 4.74 4.744-4.74 4.744-.792-.793 3.952-3.951-3.952-3.952z", fill: "currentColor" }));
    }
    var em, lm, IW = x(() => {
      em = I(G());
      lm = Pa1;
    });
    var y2, GW, Ga1, TW, qW, ZW, m7, OW, Ta1, EW, Za1, DW, Oa1, WW, Ea1, _W, im, jW, Da1, NW, PW, Wa1, UW, KW = x(() => {
      M1();
      f1();
      y2 = I(G());
      c1();
      Ga1 = B.div(GW || (GW = V(["\n  width: 138px;\n  border-radius: 2px;\n  background-color: rgba(42, 45, 50, 0.9);\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: flex-start;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.25), 0px 2px 6px rgba(0, 0, 0, 0.15);\n  backdrop-filter: blur(14px);\n  pointer-events: auto;\n  // makes the edges of the item highlights match the rounded corners\n  overflow: hidden;\n\n  @supports not (backdrop-filter: blur()) {\n    background-color: rgba(42, 45, 50, 0.98);\n  }\n\n  color: rgba(255, 255, 255, 0.9);\n\n  & a {\n    // Fix colors of links to not be default\n    color: inherit;\n  }\n"]))), qW = B.div(TW || (TW = V(["\n  position: relative;\n  padding: 0px 12px;\n  font-weight: 400;\n  font-size: 11px;\n  height: 32px;\n  text-decoration: none;\n  user-select: none;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  cursor: default;\n"]))), m7 = B(qW)(ZW || (ZW = V(["\n  &:before {\n    position: absolute;\n    display: block;\n    content: ' ';\n    inset: 3px;\n    border-radius: 3px;\n    background: rgba(255, 255, 255, 0.1);\n    opacity: 0;\n  }\n\n  &.secondary {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  &:hover {\n    /* background-color: #398995; */\n    color: white !important;\n    &:before {\n      opacity: 1;\n    }\n  }\n"]))), Ta1 = B(qW)(OW || (OW = V(["\n  height: auto;\n  min-height: 32px;\n  padding-top: 12px;\n  padding-bottom: 10px;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 8px;\n  color: rgba(255, 255, 255, 0.5);\n"]))), Za1 = B.div(EW || (EW = V(["\n  font-weight: 600;\n"]))), Oa1 = B.div(DW || (DW = V(["\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n"]))), Ea1 = B.div(WW || (WW = V(["\n  margin-left: 2px;\n"]))), im = B.div(_W || (_W = V(["\n  height: 1px;\n  margin: 0 2px;\n  background: rgba(255, 255, 255, 0.02);\n"]))), Da1 = B.div(jW || (jW = V(["\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: #40aaa4;\n  right: 14px;\n  top: 12px;\n  border-radius: 50%;\n"]))), NW = "0.7.2", PW = NW.match(/^[^\-]+/)[0], Wa1 = y2.default.forwardRef((t2, a) => {
        let c = s1(T().atomP.ahistoric.updateChecker.result.hasUpdates);
        return y2.default.createElement(Ga1, { ref: a }, y2.default.createElement(m7, { as: "a", href: "https://www.theatrejs.com/docs/latest", className: "", target: "_blank" }, "Docs"), y2.default.createElement(m7, { as: "a", href: "https://www.theatrejs.com/docs/latest/releases", className: "", target: "_blank" }, "Changelog"), y2.default.createElement(im, null), y2.default.createElement(m7, { as: "a", href: "https://github.com/theatre-js/theatre", className: "", target: "_blank" }, "Github"), y2.default.createElement(m7, { as: "a", href: "https://twitter.com/theatre_js", className: "", target: "_blank" }, "Twitter"), y2.default.createElement(m7, { className: "", as: "a", href: "https://discord.gg/bm9f8F9Y9N", target: "_blank" }, "Discord"), y2.default.createElement(im, null), y2.default.createElement(Ta1, null, y2.default.createElement(Za1, null, "Version"), y2.default.createElement(Oa1, null, y2.default.createElement(Ea1, null, NW, " ", c === true ? "(outdated)" : c === false ? "(latest)" : ""))), c === true && y2.default.createElement(y2.default.Fragment, null, y2.default.createElement(im, null), y2.default.createElement(m7, { as: "a", href: "https://www.theatrejs.com/docs/latest/releases".concat(encodeURIComponent(PW)), className: "", target: "_blank" }, "Update", y2.default.createElement(Da1, null)), y2.default.createElement(m7, { as: "a", href: "https://www.theatrejs.com/docs/latest/releases#".concat(encodeURIComponent(PW)), className: "", target: "_blank" }, "What's new?")));
      }), UW = Wa1;
    });
    var E1, r_, YW, _a1, JW, ja1, t_, $W, a_, QW, c_, XW, qa1, e_, l_ = x(() => {
      M1();
      f1();
      E1 = I(G());
      c1();
      nt();
      aW();
      gr();
      r_ = requireDist$2();
      am();
      bW();
      b9();
      FW();
      IW();
      Tt();
      c4();
      KW();
      vt();
      _a1 = B.div(YW || (YW = V(["\n  height: 36px;\n  pointer-events: none;\n\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n"]))), ja1 = B.div(JW || (JW = V(["\n  color: white;\n  width: 14px;\n  height: 14px;\n  background: #d00;\n  border-radius: 4px;\n  text-align: center;\n  line-height: 14px;\n  font-weight: 600;\n  font-size: 8px;\n  position: relative;\n  left: -6px;\n  top: -11px;\n  margin-right: -14px;\n  box-shadow: 0 4px 6px -4px #00000059;\n"]))), $W = B.div(t_ || (t_ = V(["\n  display: flex;\n  gap: 8px;\n"]))), QW = B.div(a_ || (a_ = V(["\n  position: absolute;\n  background: ", ";\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  right: -2px;\n  top: -2px;\n"])), ({ type: t2 }) => t2 === "info" ? "#40aaa4" : "#f59e0b"), B.div(c_ || (c_ = V(["\n  position: absolute;\n  height: 32px;\n  width: 1px;\n  background: #373b40;\n  opacity: 0.4;\n"]))), XW = false, qa1 = () => {
        var s, d, z;
        let t2 = v1(() => {
          let u = (0, r_.val)(T().atomP.ephemeral.coreByProject);
          return Object.entries(u).map(([f, p]) => ({ projectId: f, state: p })).filter(({ state: f }) => f.loadingState.type === "browserStateIsNotBasedOnDiskState");
        }, []), [a, c] = R3({ enabled: t2.length > 0, enterDelay: t2.length > 0 ? 0 : 200 }, () => t2.length > 0 ? E1.default.createElement(tW, null, t2.length === 1 ? 'There is a state conflict in project "'.concat(t2[0].projectId, '". Select the project in the outline below in order to fix it.') : "There are ".concat(t2.length, " projects that have state conflicts. They are highlighted in the outline below. ")) : E1.default.createElement(w5, null, E1.default.createElement(E1.default.Fragment, null, "Outline"))), r = (s = s1(T().atomP.ahistoric.pinOutline)) != null ? s : true, e = (d = s1(T().atomP.ahistoric.pinDetails)) != null ? d : true, l = s1(T().atomP.ahistoric.updateChecker.result.hasUpdates) === true, i5 = x2(() => {
          let u = o.current.getBoundingClientRect();
          return { debugName: "More Menu", constraints: { maxX: u.right, maxY: 8, minX: u.left - 140, minY: 8 }, verticalGap: 2 };
        }, () => E1.default.createElement(UW, null)), o = (0, E1.useRef)(null), n = (0, E1.useMemo)(() => (window.__IS_VISUAL_REGRESSION_TESTING && (XW || (XW = true, console.warn("Visual regression testing enabled, so we're showing the updates badge unconditionally"))), l || window.__IS_VISUAL_REGRESSION_TESTING ? true : l), [l]), { hasNotifications: h } = Pu(), [v, g] = eP();
        return E1.default.createElement(_a1, null, E1.default.createElement($W, null, a, E1.default.createElement(Sh, { ref: c, "data-testid": "OutlinePanel-TriggerButton", onClick: () => {
          T().transaction(({ stateEditors: u, drafts: f }) => {
            var p;
            u.studio.ahistoric.setPinOutline(!((p = f.ahistoric.pinOutline) == null || p));
          });
        }, icon: E1.default.createElement(Gc, null), pinHintIcon: E1.default.createElement(lm, null), unpinHintIcon: E1.default.createElement(rm, null), pinned: r }), t2.length > 0 ? E1.default.createElement(ja1, null, t2.length) : null, E1.default.createElement(yh, { showLeftDivider: true, toolbarId: "global" })), E1.default.createElement($W, null, v, E1.default.createElement(Sh, { ref: g, onClick: () => {
          T().transaction(({ stateEditors: u, drafts: f }) => {
            var p;
            u.studio.ahistoric.setPinNotifications(!((p = f.ahistoric.pinNotifications) != null && p));
          });
        }, icon: E1.default.createElement(Zc, null), pinHintIcon: E1.default.createElement(Zc, null), unpinHintIcon: E1.default.createElement(Zc, null), pinned: (z = s1(T().atomP.ahistoric.pinNotifications)) != null ? z : false }, h && E1.default.createElement(QW, { type: "warning" })), i5.node, E1.default.createElement(Y4, { ref: o, onClick: (u) => {
          i5.toggle(u, o.current);
        } }, E1.default.createElement(wz, null), n && E1.default.createElement(QW, { type: "info" })), E1.default.createElement(Sh, { ref: c, onClick: () => {
          T().transaction(({ stateEditors: u, drafts: f }) => {
            var p;
            u.studio.ahistoric.setPinDetails(!((p = f.ahistoric.pinDetails) == null || p));
          });
        }, icon: E1.default.createElement(Hz, null), pinHintIcon: E1.default.createElement(rm, null), unpinHintIcon: E1.default.createElement(lm, null), pinned: e })));
      }, e_ = qa1;
    });
    var i_, Nr, o_, kh, Na1, n_, h_, Ua1, om = x(() => {
      i_ = requireDist$2();
      M1();
      Nr = I(G()), o_ = I(B4()), kh = new i_.Atom({ set: {}, byId: {} }), Na1 = 1, n_ = () => {
        let t2 = Na1++;
        function a(r, e, l) {
          kh.reduce((i5) => ({ byId: D(S({}, i5.byId), { [t2]: { comp: r, props: e, portalNode: l } }), set: D(S({}, i5.set), { [t2]: true }) }));
        }
        function c() {
          kh.reduce((r) => {
            let e = S({}, r.set), l = S({}, r.byId);
            return delete e[t2], { byId: l, set: e };
          });
        }
        return { mountOrRender: a, unmount: c };
      }, h_ = () => {
        let t2 = Object.keys(s1(kh.pointer.set));
        return Nr.default.createElement(Nr.default.Fragment, null, t2.map((a) => Nr.default.createElement(Ua1, { key: "id-" + a, id: a })));
      }, Ua1 = ({ id: t2 }) => {
        let { comp: a, portalNode: c, props: r } = s1(kh.pointer.byId[t2]);
        return (0, o_.createPortal)(Nr.default.createElement(a, S({}, r)), c);
      };
    });
    function hm(t2) {
      let a = T(), [c, r] = z1(void 0), e = Wr();
      e.configureLogging({ min: 128, dev: v_, internal: v_ });
      let l = e.getLogger().named("Theatre.js UIRoot");
      Up();
      let i5 = s1(a.atomP.ahistoric.visibilityState);
      return (0, W2.useEffect)(() => (i5 === "everythingIsHidden" && console.warn("Theatre.js Studio is hidden. Use the keyboard shortcut 'alt + \\' to restore the studio, or call studio.ui.restore()."), () => {
      }), [i5]), v1(() => {
        let n = (0, nm.val)(a.atomP.ahistoric.visibilityState);
        return (0, nm.val)(a.atomP.ephemeral.initialised) ? W2.default.createElement(uo, { logger: l }, W2.default.createElement(MI, null, W2.default.createElement(vA, null, W2.default.createElement(Qa1, null), W2.default.createElement(a3.Provider, { value: r }, W2.default.createElement(fz, { target: window.__IS_VISUAL_REGRESSION_TESTING === true ? void 0 : t2.containerShadow }, W2.default.createElement(W2.default.Fragment, null, W2.default.createElement(Ka1, null), W2.default.createElement($a1, { className: n === "everythingIsHidden" ? "invisible" : "" }, W2.default.createElement(mz, { ref: c }), W2.default.createElement(e_, null), W2.default.createElement(XD, null), W2.default.createElement(lP, null)))))))) : null;
      }, [a, c, r]);
    }
    var nm, W2, g_, Ka1, d_, $a1, s_, v_, Qa1, z_ = x(() => {
      f1();
      M1();
      nm = requireDist$2(), W2 = I(G());
      c1();
      YD();
      l_();
      P1();
      T6();
      xh();
      I0();
      Su();
      mo();
      om();
      G1();
      _r();
      L5();
      vt();
      Ka1 = typeof window != "undefined" ? Zi(g_ || (g_ = V(["\n  :host {\n    contain: strict;\n  }\n"]))) : {}, $a1 = B(oA)(d_ || (d_ = V(["\n  z-index: 50;\n  position: fixed;\n  inset: 0;\n\n  &.invisible {\n    pointer-events: none !important;\n    opacity: 0;\n    transform: translateX(1000000px);\n  }\n"]))), v_ = /Playground.+Theatre\.js/.test((s_ = typeof document != "undefined" ? document == null ? void 0 : document.title : null) != null ? s_ : "");
      Qa1 = () => W2.default.createElement(h_, null);
    });
    var p_ = L1((vm) => {
      var u_ = B4();
      vm.createRoot = u_.createRoot, vm.hydrateRoot = u_.hydrateRoot;
    });
    var M_ = {};
    Lf(M_, { default: () => Ah });
    var m_, f_, Ah, x_ = x(() => {
      z_();
      m_ = I(G()), f_ = I(p_());
      om();
      G1();
      am();
      Ah = class {
        constructor() {
          y1(this, "containerEl", document.createElement("div"));
          y1(this, "_renderTimeout");
          y1(this, "_documentBodyUIIsRenderedIn");
          y1(this, "containerShadow");
          this.containerEl.id = "theatrejs-studio-root", this.containerEl.style.cssText = "\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      pointer-events: none;\n      z-index: 100;\n    ";
          let a = () => {
            if (window.__IS_VISUAL_REGRESSION_TESTING === true) {
              let c = document.createElement("div");
              return c.id = "theatrejs-faux-shadow-root", document.body.appendChild(c), c;
            } else return this.containerEl.attachShadow({ mode: "open" });
          };
          this.containerShadow = a();
        }
        render() {
          let a = () => {
            if (!document.body) {
              this._renderTimeout = setTimeout(a, 5);
              return;
            }
            this._renderTimeout = void 0, this._documentBodyUIIsRenderedIn = document.body, this._documentBodyUIIsRenderedIn.appendChild(this.containerEl), f_.default.createRoot(this.containerShadow).render(m_.default.createElement(hm, { containerShadow: this.containerShadow }));
          };
          this._renderTimeout = setTimeout(a, 10);
        }
        renderToolset(a, c) {
          let r = n_();
          return r.mountOrRender(US(yh), { toolbarId: a }, c), r.unmount;
        }
      };
    });
    var H_ = L1((Dt) => {
      Dt.compare = ac1;
      Dt.reduce = cc1;
      var Rh, bh, Et;
      Dt.REMOVE = Rh = -1;
      Dt.ADD = bh = 1;
      Dt.EQUAL = Et = 0;
      function ac1(t2, a) {
        var c = t2.length, r = a.length, e = rc1(t2, a), l = e < c && e < r ? ec1(t2, a) : 0, i5 = l + e - 1;
        c -= i5, r -= i5;
        for (var o = ic1(c, r), n = c - 1; n >= 0; --n) for (var h = r - 1; h >= 0; --h) o[h][n] = lc1(o, t2, a, e, n, h);
        return { prefix: e, matrix: o, suffix: l };
      }
      function cc1(t2, a, c) {
        var r, e, l, i5, o = c.matrix, n = c.prefix;
        for (r = 0; r < n; ++r) a = t2(a, Et, r, r);
        for (l = r, n = o.length, r = 0, e = 0; r < n; ) switch (i5 = o[r][e].type, a = t2(a, i5, r + l, e + l), i5) {
          case Et:
            ++r, ++e;
            break;
          case Rh:
            ++e;
            break;
          case bh:
            ++r;
            break;
        }
        for (r += l, e += l, n = c.suffix, l = 0; l < n; ++l) a = t2(a, Et, r + l, e + l);
        return a;
      }
      function rc1(t2, a) {
        for (var c = 0, r = Math.min(t2.length, a.length); c < r && t2[c] === a[c]; ) ++c;
        return c;
      }
      function ec1(t2, a) {
        for (var c = t2.length - 1, r = a.length - 1, e = Math.min(c, r), l = 0; l < e && t2[c - l] === a[r - l]; ) ++l;
        return l;
      }
      function lc1(t2, a, c, r, e, l) {
        return a[e + r] === c[l + r] ? { value: t2[l + 1][e + 1].value, type: Et } : t2[l][e + 1].value < t2[l + 1][e].value ? { value: t2[l][e + 1].value + 1, type: Rh } : { value: t2[l + 1][e].value + 1, type: bh };
      }
      function ic1(t2, a) {
        var c = [], r, e, l;
        for (l = c[a] = [], e = 0; e < t2; ++e) l[e] = { value: t2 - e, type: Rh };
        for (r = 0; r < a; ++r) c[r] = [], c[r][t2] = { value: a - r, type: bh };
        return c[a][t2] = { value: 0, type: Et }, c;
      }
    });
    var gm = L1((Fh) => {
      Fh.cons = oc1;
      Fh.tail = nc1;
      Fh.map = hc1;
      function oc1(t2, a) {
        var c = a.length, r = new Array(c + 1);
        r[0] = t2;
        for (var e = 0; e < c; ++e) r[e + 1] = a[e];
        return r;
      }
      function nc1(t2) {
        for (var a = t2.length - 1, c = new Array(a), r = 0; r < a; ++r) c[r] = t2[r + 1];
        return c;
      }
      function hc1(t2, a) {
        for (var c = new Array(a.length), r = 0; r < a.length; ++r) c[r] = t2(a[r]);
        return c;
      }
    });
    var w_ = L1((tj1, V_) => {
      V_.exports = dc1;
      var Ih = /\/|~1|~0/g, dm = "/", vc1 = "~", gc1 = "~1";
      function dc1(t2, a) {
        var c, r, e, l;
        for (c = t2.charAt(0) === dm ? 1 : 0, r = "", Ih.lastIndex = c; e = Ih.exec(t2); ) if (l = e[0], r += t2.slice(c, Ih.lastIndex - l.length), c = Ih.lastIndex, l === dm) {
          if (a(r) === false) return t2;
          r = "";
        } else r += l === gc1 ? dm : vc1;
        return r += t2.slice(c), a(r), t2;
      }
    });
    var Ph = L1((J4) => {
      var B_ = w_();
      J4.find = xc1;
      J4.join = Lc1;
      J4.absolute = Cc1;
      J4.parse = Hc1;
      J4.contains = Vc1;
      J4.encodeSegment = Bc1;
      J4.decodeSegment = wc1;
      J4.parseArrayIndex = sm;
      J4.isValidArrayIndex = y_;
      var Wt = "/", sc1 = /\//g, zc1 = "~1", uc1 = /~1/g, pc1 = "~", mc1 = /~/g, fc1 = "~0", Mc1 = /~0/g;
      function xc1(t2, a, c, r) {
        if (typeof a == "string") {
          if (a === "") return { target: t2, key: void 0 };
          if (a === Wt) return { target: t2, key: "" };
          var e = t2, l, i5 = r !== void 0;
          return B_(a, function(o) {
            if (t2 == null) return e = null, false;
            Array.isArray(t2) ? l = i5 ? Sc1(c, sm(o), t2, r) : o === "-" ? o : sm(o) : l = o, e = t2, t2 = t2[l];
          }), e === null ? void 0 : { target: e, key: l };
        }
      }
      function Cc1(t2) {
        return t2[0] === Wt ? t2 : Wt + t2;
      }
      function Lc1(t2) {
        return t2.join(Wt);
      }
      function Hc1(t2) {
        var a = [];
        return B_(t2, a.push.bind(a)), a;
      }
      function Vc1(t2, a) {
        return a.indexOf(t2) === 0 && a[t2.length] === Wt;
      }
      function wc1(t2) {
        return t2.replace(uc1, Wt).replace(Mc1, pc1);
      }
      function Bc1(t2) {
        return t2.replace(mc1, fc1).replace(sc1, zc1);
      }
      var yc1 = /^(0|[1-9]\d*)$/;
      function y_(t2) {
        return yc1.test(t2);
      }
      function sm(t2) {
        if (y_(t2)) return +t2;
        throw new SyntaxError("invalid array index " + t2);
      }
      function Sc1(t2, a, c, r) {
        var e = a;
        if (e < 0) throw new Error("array index out of bounds " + e);
        if (r !== void 0 && typeof t2 == "function" && (e = t2(a, c, r), e < 0)) throw new Error("could not find patch context " + r);
        return e;
      }
    });
    var um = L1((cj1, S_) => {
      S_.exports = zm;
      function zm(t2) {
        return t2 == null || typeof t2 != "object" ? t2 : Array.isArray(t2) ? kc1(t2) : Ac1(t2);
      }
      function kc1(t2) {
        for (var a = t2.length, c = new Array(a), r = 0; r < a; ++r) c[r] = zm(t2[r]);
        return c;
      }
      function Ac1(t2) {
        for (var a = Object.keys(t2), c = {}, r, e = 0, l = a.length; e < l; ++e) r = a[e], c[r] = zm(t2[r]);
        return c;
      }
    });
    var A_ = L1((rj1, k_) => {
      k_.exports = pm;
      function pm(t2, a) {
        return t2 === a ? true : Array.isArray(t2) && Array.isArray(a) ? Rc1(t2, a) : typeof t2 == "object" && typeof a == "object" ? bc1(t2, a) : false;
      }
      function Rc1(t2, a) {
        if (t2.length !== a.length) return false;
        for (var c = 0; c < t2.length; ++c) if (!pm(t2[c], a[c])) return false;
        return true;
      }
      function bc1(t2, a) {
        if (t2 === null && a !== null || t2 !== null && a === null) return false;
        var c = Object.keys(t2), r = Object.keys(a);
        if (c.length !== r.length) return false;
        for (var e = 0, l; e < c.length; ++e) if (l = c[e], !(l in a && pm(t2[l], a[l]))) return false;
        return true;
      }
    });
    var I_ = L1((ej1, F_) => {
      var u0 = Ph();
      F_.exports = function(a, c) {
        var r = u0.parse(a.path), e = u0.parse(c.path), l = Tc1(r, e), i5 = Pc1(r, e, l.length), o = b_(a), n = b_(c);
        return l.length === 0 && !i5 ? [n, o] : i5 ? Ic1(o, r, n, e) : Fc1(o, r, n);
      };
      function Fc1(t2, a, c, r) {
        if (t2.path === c.path) throw new TypeError("cannot commute " + t2.op + "," + c.op + " with identical object paths");
        return [c, t2];
      }
      function Ic1(t2, a, c, r) {
        return a.length === r.length ? Gc1(t2, a, c, r) : (a.length > r.length ? (a = R_(c, r, t2, a, -1), t2.path = u0.absolute(u0.join(a))) : (r = R_(t2, a, c, r, 1), c.path = u0.absolute(u0.join(r))), [c, t2]);
      }
      function Pc1(t2, a, c) {
        return u0.isValidArrayIndex(t2[c]) && u0.isValidArrayIndex(a[c]);
      }
      function Gc1(t2, a, c, r) {
        var e = a.length - 1, l = +a[e], i5 = +r[e], o;
        return l < i5 ? t2.op === "add" || t2.op === "copy" ? (o = r.slice(), o[e] = Math.max(0, i5 - 1), c.path = u0.absolute(u0.join(o))) : t2.op === "remove" && (o = r.slice(), o[e] = i5 + 1, c.path = u0.absolute(u0.join(o))) : c.op === "add" || c.op === "copy" ? (o = a.slice(), o[e] = l + 1, t2.path = u0.absolute(u0.join(o))) : l > i5 && c.op === "remove" && (o = a.slice(), o[e] = Math.max(0, l - 1), t2.path = u0.absolute(u0.join(o))), [c, t2];
      }
      function R_(t2, a, c, r, e) {
        var l = a.length - 1, i5 = +a[l], o = +r[l], n = r.slice();
        return i5 > o || (t2.op === "add" || t2.op === "copy" ? n[l] = Math.max(0, o - e) : t2.op === "remove" && (n[l] = Math.max(0, o + e))), n;
      }
      function Tc1(t2, a) {
        var c = t2.length, r = a.length;
        if (c === 0 || r === 0 || c < 2 && r < 2) return [];
        for (var e = c === r ? c - 1 : Math.min(c, r), l = 0; l < e && t2[l] === a[l]; ) ++l;
        return t2.slice(0, l);
      }
      function b_(t2) {
        return t2.op === "remove" ? { op: t2.op, path: t2.path } : t2.op === "copy" || t2.op === "move" ? { op: t2.op, path: t2.path, from: t2.from } : { op: t2.op, path: t2.path, value: t2.value };
      }
    });
    var mm = L1((lj1, P_) => {
      P_.exports = Gh;
      function Gh(t2) {
        Error.call(this), this.name = this.constructor.name, this.message = t2, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
      }
      Gh.prototype = Object.create(Error.prototype);
      Gh.prototype.constructor = Gh;
    });
    var Zh = L1((ij1, G_) => {
      G_.exports = Th;
      function Th(t2) {
        Error.call(this), this.name = this.constructor.name, this.message = t2, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
      }
      Th.prototype = Object.create(Error.prototype);
      Th.prototype.constructor = Th;
    });
    var fm = L1((oj1, T_) => {
      T_.exports = Oh;
      function Oh(t2) {
        Error.call(this), this.name = this.constructor.name, this.message = t2, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
      }
      Oh.prototype = Object.create(Error.prototype);
      Oh.prototype.constructor = Oh;
    });
    var Hm = L1((f7) => {
      var Mm = Ph(), xm = um(), Zc1 = A_(), Kr = I_(), Eh = gm(), Oc1 = mm(), t5 = Zh(), Cm = fm(), d8 = Mm.find, Dh = Mm.parseArrayIndex;
      f7.test = { apply: Ec1, inverse: Dc1, commute: Wc1 };
      f7.add = { apply: _c1, inverse: jc1, commute: Z_ };
      f7.remove = { apply: Kc1, inverse: $c1, commute: Qc1 };
      f7.replace = { apply: qc1, inverse: Nc1, commute: Uc1 };
      f7.move = { apply: Xc1, inverse: Yc1, commute: Jc1 };
      f7.copy = { apply: tr1, inverse: ar1, commute: Z_ };
      function Ec1(t2, a, c) {
        var r = d8(t2, a.path, c.findContext, a.context), e = r.target, l, i5;
        if (Array.isArray(e) ? (l = Dh(r.key), i5 = e[l]) : i5 = r.key === void 0 ? r.target : r.target[r.key], !Zc1(i5, a.value)) throw new Oc1("test failed " + JSON.stringify(a));
        return t2;
      }
      function Dc1(t2, a) {
        return t2.push(a), 1;
      }
      function Wc1(t2, a) {
        if (t2.path === a.path && a.op === "remove") throw new TypeError("Can't commute test,remove -> remove,test for same path");
        return a.op === "test" || a.op === "replace" ? [a, t2] : Kr(t2, a);
      }
      function _c1(t2, a, c) {
        var r = d8(t2, a.path, c.findContext, a.context);
        if (Wh(r)) throw new t5("path does not exist " + a.path);
        if (a.value === void 0) throw new t5("missing value");
        var e = xm(a.value);
        return r.key === void 0 ? e : (Lm(r, e), t2);
      }
      function Lm(t2, a) {
        var c = t2.target;
        if (Array.isArray(c)) if (t2.key === "-") c.push(a);
        else {
          if (t2.key > c.length) throw new t5("target of add outside of array bounds");
          c.splice(t2.key, 0, a);
        }
        else if (D_(c)) c[t2.key] = a;
        else throw new t5("target of add must be an object or array " + t2.key);
      }
      function jc1(t2, a) {
        var c = a.context;
        return c !== void 0 && (c = { before: c.before, after: Eh.cons(a.value, c.after) }), t2.push({ op: "test", path: a.path, value: a.value, context: c }), t2.push({ op: "remove", path: a.path, context: c }), 1;
      }
      function Z_(t2, a) {
        if (t2.path === a.path && a.op === "remove") throw new TypeError("Can't commute add,remove -> remove,add for same path");
        return Kr(t2, a);
      }
      function qc1(t2, a, c) {
        var r = d8(t2, a.path, c.findContext, a.context);
        if (Wh(r) || E_(r)) throw new t5("path does not exist " + a.path);
        if (a.value === void 0) throw new t5("missing value");
        var e = xm(a.value);
        if (r.key === void 0) return e;
        var l = r.target;
        return Array.isArray(l) ? l[Dh(r.key)] = e : l[r.key] = e, t2;
      }
      function Nc1(t2, a, c, r) {
        var e = r[c - 1];
        if (e === void 0 || e.op !== "test" || e.path !== a.path) throw new Cm("cannot invert replace w/o test");
        var l = e.context;
        return l !== void 0 && (l = { before: l.before, after: Eh.cons(e.value, Eh.tail(l.after)) }), t2.push({ op: "test", path: e.path, value: a.value }), t2.push({ op: "replace", path: e.path, value: e.value }), 2;
      }
      function Uc1(t2, a) {
        if (t2.path === a.path && a.op === "remove") throw new TypeError("Can't commute replace,remove -> remove,replace for same path");
        return a.op === "test" || a.op === "replace" ? [a, t2] : Kr(t2, a);
      }
      function Kc1(t2, a, c) {
        var r = d8(t2, a.path, c.findContext, a.context);
        if (Wh(r) || r.target[r.key] === void 0) throw new t5("path does not exist " + a.path);
        return O_(r), t2;
      }
      function O_(t2) {
        var a = t2.target, c;
        if (Array.isArray(a)) return c = a.splice(Dh(t2.key), 1), c[0];
        if (D_(a)) return c = a[t2.key], delete a[t2.key], c;
        throw new t5("target of remove must be an object or array");
      }
      function $c1(t2, a, c, r) {
        var e = r[c - 1];
        if (e === void 0 || e.op !== "test" || e.path !== a.path) throw new Cm("cannot invert remove w/o test");
        var l = e.context;
        return l !== void 0 && (l = { before: l.before, after: Eh.tail(l.after) }), t2.push({ op: "add", path: e.path, value: e.value, context: l }), 2;
      }
      function Qc1(t2, a) {
        return t2.path === a.path && a.op === "remove" ? [a, t2] : Kr(t2, a);
      }
      function Xc1(t2, a, c) {
        if (Mm.contains(a.path, a.from)) throw new t5("move.from cannot be ancestor of move.path");
        var r = d8(t2, a.path, c.findContext, a.context), e = d8(t2, a.from, c.findContext, a.fromContext);
        return Lm(r, O_(e)), t2;
      }
      function Yc1(t2, a) {
        return t2.push({ op: "move", path: a.from, context: a.fromContext, from: a.path, fromContext: a.context }), 1;
      }
      function Jc1(t2, a) {
        if (t2.path === a.path && a.op === "remove") throw new TypeError("Can't commute move,remove -> move,replace for same path");
        return Kr(t2, a);
      }
      function tr1(t2, a, c) {
        var r = d8(t2, a.path, c.findContext, a.context), e = d8(t2, a.from, c.findContext, a.fromContext);
        if (Wh(e) || E_(e)) throw new t5("copy.from must exist");
        var l = e.target, i5;
        return Array.isArray(l) ? i5 = l[Dh(e.key)] : i5 = l[e.key], Lm(r, xm(i5)), t2;
      }
      function ar1(t2, a) {
        throw new Cm("cannot invert " + a.op);
      }
      function Wh(t2) {
        return t2 === void 0 || t2.target == null && t2.key !== void 0;
      }
      function E_(t2) {
        return t2.key !== void 0 && t2.target[t2.key] === void 0;
      }
      function D_(t2) {
        return t2 !== null && typeof t2 == "object";
      }
    });
    var q_ = L1((_t) => {
      var cr1 = Hm(), W_ = um(), rr1 = Zh();
      _t.apply = lr1;
      _t.applyInPlace = __;
      _t.clone = W_;
      _t.isValidObject = j_;
      _t.defaultHash = ir1;
      var er1 = {};
      function lr1(t2, a, c) {
        return __(t2, W_(a), c);
      }
      function __(t2, a, c) {
        if (c || (c = er1), !Array.isArray(t2)) return a;
        for (var r, e, l = 0; l < t2.length; ++l) {
          if (e = t2[l], r = cr1[e.op], r === void 0) throw new rr1("invalid op " + JSON.stringify(e));
          a = r.apply(a, e, c);
        }
        return a;
      }
      function ir1(t2) {
        return j_(t2) || or1(t2) ? JSON.stringify(t2) : t2;
      }
      function j_(t2) {
        return t2 !== null && Object.prototype.toString.call(t2) === "[object Object]";
      }
      function or1(t2) {
        return Object.prototype.toString.call(t2) === "[object Array]";
      }
    });
    var U_ = L1((vj1, N_) => {
      var nr1 = Hm();
      N_.exports = function(a) {
        var c = [], r, e;
        for (r = a.length - 1; r >= 0; r -= e) e = hr1(c, a[r], r, a);
        return c;
      };
      function hr1(t2, a, c, r) {
        var e = nr1[a.op];
        return e !== void 0 && typeof e.inverse == "function" ? e.inverse(t2, a, c, r) : 1;
      }
    });
    var J_ = L1((O5) => {
      var _h = H_(), K_ = gm(), $r = q_(), vr1 = U_(), gr1 = Ph(), $_ = gr1.encodeSegment;
      O5.diff = dr1;
      O5.patch = $r.apply;
      O5.patchInPlace = $r.applyInPlace;
      O5.inverse = vr1;
      O5.clone = $r.clone;
      O5.InvalidPatchOperationError = Zh();
      O5.TestFailedError = mm();
      O5.PatchNotInvertibleError = fm();
      var Q_ = $r.isValidObject, X_ = $r.defaultHash;
      function dr1(t2, a, c) {
        return Bm(t2, a, "", sr1(c, [])).patch;
      }
      function sr1(t2, a) {
        return typeof t2 == "object" ? { patch: a, hash: Vm(wm, t2.hash, X_), makeContext: Vm(wm, t2.makeContext, Y_), invertible: t2.invertible !== false } : { patch: a, hash: Vm(wm, t2, X_), makeContext: Y_, invertible: true };
      }
      function Bm(t2, a, c, r) {
        return Array.isArray(t2) && Array.isArray(a) ? ur1(t2, a, c, r) : Q_(t2) && Q_(a) ? zr1(t2, a, c, r) : mr1(t2, a, c, r);
      }
      function zr1(t2, a, c, r) {
        var e = Object.keys(a), l = r.patch, i5, o;
        for (i5 = e.length - 1; i5 >= 0; --i5) {
          o = e[i5];
          var n = c + "/" + $_(o);
          t2[o] !== void 0 ? Bm(t2[o], a[o], n, r) : l.push({ op: "add", path: n, value: a[o] });
        }
        for (e = Object.keys(t2), i5 = e.length - 1; i5 >= 0; --i5) if (o = e[i5], a[o] === void 0) {
          var h = c + "/" + $_(o);
          r.invertible && l.push({ op: "test", path: h, value: t2[o] }), l.push({ op: "remove", path: h });
        }
        return r;
      }
      function ur1(t2, a, c, r) {
        var e = K_.map(r.hash, t2), l = K_.map(r.hash, a), i5 = _h.compare(e, l);
        return pr1(t2, a, c, r, i5);
      }
      function pr1(t2, a, c, r, e) {
        var l = 0;
        return _h.reduce(function(i5, o, n, h) {
          var v, g, s = i5.patch, d = c + "/" + (h + l);
          return o === _h.REMOVE ? (v = s[s.length - 1], g = i5.makeContext(h, t2), i5.invertible && s.push({ op: "test", path: d, value: t2[h], context: g }), v !== void 0 && v.op === "add" && v.path === d ? (v.op = "replace", v.context = g) : s.push({ op: "remove", path: d, context: g }), l -= 1) : o === _h.ADD ? (s.push({ op: "add", path: d, value: a[n], context: i5.makeContext(h, t2) }), l += 1) : Bm(t2[h], a[n], d, i5), i5;
        }, r, e);
      }
      function mr1(t2, a, c, r) {
        return t2 !== a && (r.invertible && r.patch.push({ op: "test", path: c, value: t2 }), r.patch.push({ op: "replace", path: c, value: a })), r;
      }
      function Vm(t2, a, c) {
        return t2(a) ? a : c;
      }
      function Y_() {
      }
      function wm(t2) {
        return typeof t2 == "function";
      }
    });
    var s8 = L1((dj1, tj) => {
      function fr1(t2, a) {
        for (var c = 0, r = a.length - 1; c < r; c++) {
          if (!t2[a[c]]) return null;
          t2 = t2[a[c]];
        }
        return t2;
      }
      tj.exports = fr1;
    });
    var E5 = L1((sj1, aj) => {
      function Mr1(t2) {
        return t2 === "~0" ? "~" : "/";
      }
      function xr1(t2) {
        var a = t2.split("/");
        if (t2.indexOf("~") === -1) return a;
        for (var c = 0, r = a.length; c < r; c++) a[c].indexOf("~") !== -1 && (a[c] = a[c].replace(/~[01]/g, Mr1));
        return a;
      }
      aj.exports = xr1;
    });
    var rj = L1((zj1, cj) => {
      var Cr1 = s8(), Lr1 = E5();
      function Hr1(t2, a) {
        var c = Lr1(a), r = c[c.length - 1], e = Cr1(t2, c);
        return e ? e[r] : void 0;
      }
      cj.exports = Hr1;
    });
    var Qr = L1((uj1, ej) => {
      function ym(t2, a) {
        if (t2 === a) return true;
        if (!(t2 && a) || typeof t2 != "object" || typeof a != "object" || t2.length !== a.length) return false;
        if (Array.isArray(t2)) {
          if (!Array.isArray(a)) return false;
          for (var c = 0, r = t2.length; c < r; c++) if (!ym(t2[c], a[c])) return false;
          return true;
        }
        var e = Object.keys(t2);
        if (e.length !== Object.keys(a).length) return false;
        for (var l = 0, i5 = e.length; l < i5; l++) {
          var o = e[l];
          if (!ym(t2[o], a[o])) return false;
        }
        return true;
      }
      ej.exports = ym;
    });
    var Xr = L1((pj1, lj) => {
      function Vr1(t2, a) {
        if (a === "-") return t2.length;
        for (var c = 0, r = a.length; c < r; c++) {
          var e = a.charCodeAt(c);
          if (57 < e || e < 48) return 1 / 0;
        }
        return +a;
      }
      lj.exports = Vr1;
    });
    var Yr = L1((mj1, ij) => {
      var wr1 = Qr(), Br1 = s8(), yr1 = Xr(), Sr1 = E5();
      function kr1(t2, a, c, r) {
        if (typeof c == "undefined") return "[op:add] require value, but got undefined";
        var e = Sr1(a), l = e[e.length - 1], i5 = Br1(t2, e);
        if (i5 === null) return "[op:add] path not found: " + a;
        if (Array.isArray(i5)) {
          var o = yr1(i5, l);
          if (i5.length < o) return "[op:add] invalid array index: " + a;
          r(t2, e).splice(o, 0, c);
        } else wr1(i5[l], c) || (r(t2, e)[l] = c);
      }
      ij.exports = kr1;
    });
    var Sm = L1((fj1, oj) => {
      var Ar1 = s8(), Rr1 = Xr(), br1 = E5();
      function Fr1(t2, a, c) {
        var r = br1(a), e = r[r.length - 1], l = Ar1(t2, r);
        if (l === null) return "[op:remove] path not found: " + a;
        if (Array.isArray(l)) {
          var i5 = Rr1(l, e);
          if (l.length <= i5) return "[op:remove] invalid array index: " + a;
          c(t2, r).splice(i5, 1);
        } else delete c(t2, r)[e];
      }
      oj.exports = Fr1;
    });
    var km = L1((Mj1, hj) => {
      var nj = Qr(), Ir1 = s8(), Pr1 = Xr(), Gr1 = E5();
      function Tr1(t2, a, c, r) {
        if (typeof c == "undefined") return "[op:replace] require value, but got undefined";
        var e = Gr1(a), l = e[e.length - 1], i5 = Ir1(t2, e);
        if (i5 === null) return "[op:replace] path not found: " + a;
        if (Array.isArray(i5)) {
          var o = Pr1(i5, l);
          if (i5.length <= o) return "[op:replace] invalid array index: " + a;
          nj(i5[o], c) || r(t2, e).splice(o, 1, c);
        } else nj(i5[l], c) || (r(t2, e)[l] = c);
      }
      hj.exports = Tr1;
    });
    var Am = L1((xj1, vj) => {
      var Zr1 = Yr(), Or1 = s8(), Er1 = Xr(), Dr1 = E5();
      function Wr1(t2, a, c, r) {
        if (c !== a) {
          var e = Dr1(a), l = e[e.length - 1], i5 = Or1(t2, e);
          if (i5 === null) return "[op:move] path not found: " + a;
          var o = void 0;
          if (Array.isArray(i5)) {
            var n = Er1(i5, l);
            if (i5.length <= n) return "[op:move] invalid array index: " + c;
            o = i5[n], r(t2, e).splice(n, 1);
          } else o = i5[l], delete r(t2, e)[l];
          return Zr1(t2, c, o, r);
        }
      }
      vj.exports = Wr1;
    });
    var Rm = L1((Cj1, gj) => {
      var _r1 = s8(), jr1 = E5(), qr1 = Yr();
      function Nr1(t2, a, c, r) {
        var e = jr1(a), l = e[e.length - 1], i5 = _r1(t2, e);
        return i5 === null ? "[op:copy] path not found: " + a : qr1(t2, c, i5[l], r);
      }
      gj.exports = Nr1;
    });
    var bm = L1((Lj1, dj) => {
      var Ur1 = Qr(), Kr1 = s8(), $r1 = E5();
      function Qr1(t2, a, c) {
        var r = $r1(a), e = r[r.length - 1], l = Kr1(t2, r);
        if (l === null) return "[op:test] path not found: " + a;
        if (!Ur1(l[e], c)) {
          var i5 = JSON.stringify(l[e]), o = JSON.stringify(c);
          return "[op:test] not matched: " + i5 + " " + o;
        }
      }
      dj.exports = Qr1;
    });
    var jh = L1((Hj1, sj) => {
      function Xr1(t2) {
        if (!t2 || typeof t2 != "object") return t2;
        if (Array.isArray(t2)) {
          for (var a = t2.length, c = new Array(a), r = 0; r < a; r++) c[r] = t2[r];
          return c;
        }
        for (var e = Object.keys(t2), l = {}, i5 = 0, o = e.length; i5 < o; i5++) {
          var n = e[i5];
          l[n] = t2[n];
        }
        return l;
      }
      sj.exports = Xr1;
    });
    var uj = L1((Vj1, zj) => {
      var Yr1 = rj(), Jr1 = Yr(), te1 = Sm(), ae1 = km(), ce1 = Am(), re1 = Rm(), ee1 = bm(), le1 = Qr(), ie1 = jh(), oe1 = E5();
      function ne1(t2, a) {
        return { get: function(c) {
          return Yr1(t2, c);
        }, add: function(c, r) {
          return Jr1(t2, c, r, a);
        }, remove: function(c) {
          return te1(t2, c, a);
        }, replace: function(c, r) {
          return ae1(t2, c, r, a);
        }, move: function(c, r) {
          return ce1(t2, c, r, a);
        }, copy: function(c, r) {
          return re1(t2, c, r, a);
        }, test: function(c, r) {
          return ee1(t2, c, r);
        }, deepEqual: le1, shallowCopy: ie1, toKeys: oe1 };
      }
      zj.exports = ne1;
    });
    var mj = L1((wj1, pj) => {
      function he1(t2, a, c, r) {
        return r.error = c, r.partial ? a[""] : t2;
      }
      pj.exports = he1;
    });
    var Mj = L1((Bj1, fj) => {
      function ve1(t2) {
        return !!t2;
      }
      fj.exports = ve1;
    });
    var Cj = L1((yj1, xj) => {
      function ge1(t2) {
        if (t2) throw new TypeError(t2);
      }
      xj.exports = ge1;
    });
    var Hj = L1((Sj1, Lj) => {
      var de1 = jh();
      function se1(t2, a) {
        for (var c = 0, r = a.length - 1; c < r; c++) t2 = t2[a[c]] = de1(t2[a[c]]);
        return t2;
      }
      Lj.exports = se1;
    });
    var wj = L1((kj1, Vj) => {
      var ze1 = jh();
      function ue1(t2, a, c) {
        var r = t2[a];
        return c.has(r) || (r = ze1(r), c.add(r)), r;
      }
      function pe1(t2, a, c) {
        for (var r = 0, e = a.length - 1; r < e; r++) t2 = t2[a[r]] = ue1(t2, a[r], c);
        return t2;
      }
      Vj.exports = pe1;
    });
    var yj = L1((Aj1, Bj) => {
      var me1 = uj(), z8 = mj(), fe1 = Mj(), Me1 = Cj(), xe1 = Hj(), Ce1 = wj(), Le1 = Yr(), He1 = Sm(), Ve1 = km(), we1 = Am(), Be1 = Rm(), ye1 = bm(), Se1 = Set || function() {
        var t2 = [];
        return t2.has = function(a) {
          return this.indexOf(a) !== -1;
        }, t2.add = function(a) {
          this.push(a);
        }, t2;
      };
      function ke1(t2, a, c) {
        if (a.length === 0) return t2;
        c = c || {};
        for (var r = c.strict ? Me1 : fe1, e = a.length === 1 ? xe1 : /* @__PURE__ */ function(v) {
          return function(g, s) {
            return Ce1(g, s, v);
          };
        }(new Se1()), l = { "": t2 }, i5, o = 0, n = a.length; o < n; o++) {
          var h = a[o];
          switch (h.op) {
            case "add":
              if (r(Le1(l, "" + h.path, h.value, e))) return z8(t2, l, h, c);
              break;
            case "remove":
              if (r(He1(l, "" + h.path, e))) return z8(t2, l, h, c);
              break;
            case "replace":
              if (r(Ve1(l, "" + h.path, h.value, e))) return z8(t2, l, h, c);
              break;
            case "move":
              if (r(we1(l, "" + h.from, "" + h.path, e))) return z8(t2, l, h, c);
              break;
            case "copy":
              if (r(Be1(l, "" + h.from, "" + h.path, e))) return z8(t2, l, h, c);
              break;
            case "test":
              if (r(ye1(l, "" + h.path, h.value))) return z8(t2, l, h, c);
              break;
            default:
              if (c.custom && c.custom[h.op]) {
                if (i5 = i5 || me1(l, e), r(c.custom[h.op](i5, h, o, a))) return z8(t2, l, h, c);
              } else return r("[op:" + h.op + "] unknown"), z8(t2, l, h, c);
              break;
          }
        }
        return l[""];
      }
      Bj.exports = ke1;
    });
    var kj = L1((Rj1, Sj) => {
      Sj.exports = yj();
    });
    var zq = L1((rv, pf) => {
      (function(t2, a) {
        typeof rv == "object" && typeof pf == "object" ? pf.exports = a() : typeof rv == "object" ? rv.blobCompare = a() : t2.blobCompare = a();
      })(window, function() {
        return function(t2) {
          var a = {};
          function c(r) {
            if (a[r]) return a[r].exports;
            var e = a[r] = { i: r, l: false, exports: {} };
            return t2[r].call(e.exports, e, e.exports, c), e.l = true, e.exports;
          }
          return c.m = t2, c.c = a, c.d = function(r, e, l) {
            c.o(r, e) || Object.defineProperty(r, e, { enumerable: true, get: l });
          }, c.r = function(r) {
            typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(r, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(r, "__esModule", { value: true });
          }, c.t = function(r, e) {
            if (1 & e && (r = c(r)), 8 & e || 4 & e && typeof r == "object" && r && r.__esModule) return r;
            var l = /* @__PURE__ */ Object.create(null);
            if (c.r(l), Object.defineProperty(l, "default", { enumerable: true, value: r }), 2 & e && typeof r != "string") for (var i5 in r) c.d(l, i5, (function(o) {
              return r[o];
            }).bind(null, i5));
            return l;
          }, c.n = function(r) {
            var e = r && r.__esModule ? function() {
              return r.default;
            } : function() {
              return r;
            };
            return c.d(e, "a", e), e;
          }, c.o = function(r, e) {
            return Object.prototype.hasOwnProperty.call(r, e);
          }, c.p = "", c(c.s = 4);
        }([function(t2, a, c) {
          var r = function(n, h) {
            if (Array.isArray(n)) return n;
            if (Symbol.iterator in Object(n)) return function(v, g) {
              var s = [], d = true, z = false, u = void 0;
              try {
                for (var f, p = v[Symbol.iterator](); !(d = (f = p.next()).done) && (s.push(f.value), !g || s.length !== g); d = true) ;
              } catch (m) {
                z = true, u = m;
              } finally {
                try {
                  !d && p.return && p.return();
                } finally {
                  if (z) throw u;
                }
              }
              return s;
            }(n, h);
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }, e = /* @__PURE__ */ function() {
            function n(h, v) {
              for (var g = 0; g < v.length; g++) {
                var s = v[g];
                s.enumerable = s.enumerable || false, s.configurable = true, "value" in s && (s.writable = true), Object.defineProperty(h, s.key, s);
              }
            }
            return function(h, v, g) {
              return v && n(h.prototype, v), g && n(h, g), h;
            };
          }();
          function l(n) {
            if (Array.isArray(n)) {
              for (var h = 0, v = Array(n.length); h < n.length; h++) v[h] = n[h];
              return v;
            }
            return Array.from(n);
          }
          var i5 = c(2), o = function(n) {
            function h(v) {
              (function(s, d) {
                if (!(s instanceof d)) throw new TypeError("Cannot call a class as a function");
              })(this, h);
              var g = function(s, d) {
                if (!s) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !d || typeof d != "object" && typeof d != "function" ? s : d;
              }(this, (h.__proto__ || Object.getPrototypeOf(h)).call(this));
              return g._messageId = 1, g._messages = /* @__PURE__ */ new Map(), g._worker = v, g._worker.onmessage = g._onMessage.bind(g), g._id = Math.ceil(1e7 * Math.random()), g;
            }
            return function(v, g) {
              if (typeof g != "function" && g !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof g);
              v.prototype = Object.create(g && g.prototype, { constructor: { value: v, enumerable: false, writable: true, configurable: true } }), g && (Object.setPrototypeOf ? Object.setPrototypeOf(v, g) : v.__proto__ = g);
            }(h, n), e(h, [{ key: "terminate", value: function() {
              this._worker.terminate();
            } }, { key: "isFree", value: function() {
              return this._messages.size === 0;
            } }, { key: "jobsLength", value: function() {
              return this._messages.size;
            } }, { key: "exec", value: function(v) {
              var g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, s = this, d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], z = arguments[3];
              return new Promise(function(u, f) {
                var p = s._messageId++;
                s._messages.set(p, [u, f, z]), s._worker.postMessage([p, g, v], d || []);
              });
            } }, { key: "postMessage", value: function() {
              var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, g = this, s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], d = arguments[2];
              return new Promise(function(z, u) {
                var f = g._messageId++;
                g._messages.set(f, [z, u, d]), g._worker.postMessage([f, v], s || []);
              });
            } }, { key: "emit", value: function(v) {
              for (var g = arguments.length, s = Array(g > 1 ? g - 1 : 0), d = 1; d < g; d++) s[d - 1] = arguments[d];
              this._worker.postMessage({ eventName: v, args: s });
            } }, { key: "_onMessage", value: function(v) {
              var g;
              if (!Array.isArray(v.data) && v.data.eventName) return (g = function f(p, m, M) {
                p === null && (p = Function.prototype);
                var w = Object.getOwnPropertyDescriptor(p, m);
                if (w === void 0) {
                  var H = Object.getPrototypeOf(p);
                  return H === null ? void 0 : f(H, m, M);
                }
                if ("value" in w) return w.value;
                var y = w.get;
                return y !== void 0 ? y.call(M) : void 0;
              }(h.prototype.__proto__ || Object.getPrototypeOf(h.prototype), "emit", this)).call.apply(g, [this, v.data.eventName].concat(l(v.data.args)));
              var s, d = (s = v.data, Array.isArray(s) ? s : Array.from(s)), z = d[0], u = d.slice(1);
              if (z === 1) this._onEvent.apply(this, l(u));
              else {
                if (z !== 0) throw new Error("Wrong message type '" + z + "'");
                this._onResult.apply(this, l(u));
              }
            } }, { key: "_onResult", value: function(v, g, s) {
              var d = this._messages.get(v), z = r(d, 2), u = z[0], f = z[1];
              return this._messages.delete(v), g === 1 ? u(s) : f(s);
            } }, { key: "_onEvent", value: function(v, g, s) {
              var d = this._messages.get(v), z = r(d, 3)[2];
              z && z(g, s);
            } }]), h;
          }(i5);
          t2.exports = o;
        }, function(t2, a, c) {
          t2.exports = function() {
            return c(3)(`!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function a(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var f=r(1),c=0,l=1,s=0,y=1,p="main",b=function(e){return"object"===(void 0===e?"undefined":i(e))&&"function"==typeof e.then&&"function"==typeof e.catch};var v=function e(t,r){u(this,e),this.payload=t,this.transferable=r};e.exports=function(e){var t,r,i,h=(i=e,(r=p)in(t={})?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t),d=self.postMessage.bind(self),m=new(function(e){function t(){return u(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"emit",value:function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return d({eventName:e,args:r}),this}},{key:"emitLocally",value:function(e){for(var r,n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];(r=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"emit",this)).call.apply(r,[this,e].concat(i))}},{key:"operation",value:function(e,t){return h[e]=t,this}}]),t}(f)),g=function(e,t,r){var n=function(t){t&&t instanceof v?w(e,y,t.payload,t.transferable):w(e,y,t)},o=function(t){w(e,s,{message:t.message,stack:t.stack})};try{var i=_(e,t,r);b(i)?i.then(n).catch(o):n(i)}catch(e){o(e)}},_=function(e,t,r){var n=h[r||p];if(!n)throw new Error("Not found handler for this request");return n(t,O.bind(null,e))},w=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];d([c,e,t,r],n)},O=function(e,t,r){if(!t)throw new Error("eventName is required");if("string"!=typeof t)throw new Error("eventName should be string");d([l,e,t,r])};return self.addEventListener("message",(function(e){var t=e.data;Array.isArray(t)?g.apply(void 0,a(t)):t&&t.eventName&&m.emitLocally.apply(m,[t.eventName].concat(a(t.args)))})),m},e.exports.TransferableResponse=v},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Object.defineProperty(this,"__listeners",{value:{},enumerable:!1,writable:!1})}return n(e,[{key:"emit",value:function(e){if(!this.__listeners[e])return this;for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o=!0,i=!1,a=void 0;try{for(var u,f=this.__listeners[e][Symbol.iterator]();!(o=(u=f.next()).done);o=!0){var c=u.value;c.apply(void 0,r)}}catch(e){i=!0,a=e}finally{try{!o&&f.return&&f.return()}finally{if(i)throw a}}return this}},{key:"once",value:function(e,t){var r=this,n=function n(){r.off(e,n),t.apply(void 0,arguments)};return this.on(e,n)}},{key:"on",value:function(e,t){return this.__listeners[e]||(this.__listeners[e]=[]),this.__listeners[e].push(t),this}},{key:"off",value:function(e,t){return this.__listeners[e]=t?this.__listeners[e].filter((function(e){return e!==t})):[],this}}]),e}();e.exports=o},function(e,t,r){"use strict";r.r(t);var n=r(0);r.n(n)()().operation("binary",async({blob:e,chunk:t})=>await function(e,t){return new Promise((r,n)=>{const o=new FileReader,i=t?Math.min(t,e.size):e.size,a=e.slice(0,i);o.onload=()=>r(o.result),o.onerror=n,o.readAsBinaryString(a)})}(e,t)).operation("buffer",async({blob:e,chunk:t})=>await function(e,t){return new Promise((r,n)=>{const o=new FileReader,i=t?Math.min(t,e.size):e.size,a=e.slice(0,i);o.onload=()=>r(o.result),o.onerror=n,o.readAsArrayBuffer(a)})}(e,t)).operation("compare",({buf1:e,buf2:t})=>(function(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;const r=new DataView(e),n=new DataView(t);for(var o=e.byteLength;o--;)if(r.getUint8(o)!==n.getUint8(o))return!1;return!0})(e,t))}]);`, null);
          };
        }, function(t2, a, c) {
          var r = /* @__PURE__ */ function() {
            function l(i5, o) {
              for (var n = 0; n < o.length; n++) {
                var h = o[n];
                h.enumerable = h.enumerable || false, h.configurable = true, "value" in h && (h.writable = true), Object.defineProperty(i5, h.key, h);
              }
            }
            return function(i5, o, n) {
              return o && l(i5.prototype, o), n && l(i5, n), i5;
            };
          }(), e = function() {
            function l() {
              (function(i5, o) {
                if (!(i5 instanceof o)) throw new TypeError("Cannot call a class as a function");
              })(this, l), Object.defineProperty(this, "__listeners", { value: {}, enumerable: false, writable: false });
            }
            return r(l, [{ key: "emit", value: function(i5) {
              if (!this.__listeners[i5]) return this;
              for (var o = arguments.length, n = Array(o > 1 ? o - 1 : 0), h = 1; h < o; h++) n[h - 1] = arguments[h];
              var v = true, g = false, s = void 0;
              try {
                for (var d, z = this.__listeners[i5][Symbol.iterator](); !(v = (d = z.next()).done); v = true) {
                  var u = d.value;
                  u.apply(void 0, n);
                }
              } catch (f) {
                g = true, s = f;
              } finally {
                try {
                  !v && z.return && z.return();
                } finally {
                  if (g) throw s;
                }
              }
              return this;
            } }, { key: "once", value: function(i5, o) {
              var n = this, h = function v() {
                n.off(i5, v), o.apply(void 0, arguments);
              };
              return this.on(i5, h);
            } }, { key: "on", value: function(i5, o) {
              return this.__listeners[i5] || (this.__listeners[i5] = []), this.__listeners[i5].push(o), this;
            } }, { key: "off", value: function(i5, o) {
              return this.__listeners[i5] = o ? this.__listeners[i5].filter(function(n) {
                return n !== o;
              }) : [], this;
            } }]), l;
          }();
          t2.exports = e;
        }, function(t2, a, c) {
          var r = window.URL || window.webkitURL;
          t2.exports = function(e, l) {
            try {
              try {
                var i5;
                try {
                  (i5 = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder)()).append(e), i5 = i5.getBlob();
                } catch (o) {
                  i5 = new Blob([e]);
                }
                return new Worker(r.createObjectURL(i5));
              } catch (o) {
                return new Worker("data:application/javascript," + encodeURIComponent(e));
              }
            } catch (o) {
              if (!l) throw Error("Inline worker is not supported");
              return new Worker(l);
            }
          };
        }, function(t2, a, c) {
          c.r(a);
          var r = c(0), e = c.n(r), l = c(1), i5 = c.n(l);
          c.d(a, "workersEnabled", function() {
            return o;
          }), c.d(a, "default", function() {
            return n;
          });
          let o = !!window.Worker;
          class n {
            static toBinaryStringWithWorker(v, g) {
              return e2(this, null, function* () {
                let s = new e.a(new i5.a()), d = yield s.exec("binary", { blob: v, chunk: g });
                return s.terminate(), d;
              });
            }
            static toBinaryStringWithoutWorker(v, g) {
              return function(s, d) {
                return new Promise((z, u) => {
                  let f = new FileReader(), p = d ? Math.min(d, s.size) : s.size, m = s.slice(0, p);
                  f.onload = () => z(f.result), f.onerror = u, f.readAsBinaryString(m);
                });
              }(v, g);
            }
            static toBinaryString(v, g, s = true) {
              return s && o ? this.toBinaryStringWithWorker(v, g) : this.toBinaryStringWithoutWorker(v, g);
            }
            static toArrayBufferWithWorker(v, g) {
              return e2(this, null, function* () {
                let s = new e.a(new i5.a()), d = yield s.exec("buffer", { blob: v, chunk: g });
                return s.terminate(), d;
              });
            }
            static toArrayBufferWithoutWorker(v, g) {
              return function(s, d) {
                return new Promise((z, u) => {
                  let f = new FileReader(), p = d ? Math.min(d, s.size) : s.size, m = s.slice(0, p);
                  f.onload = () => z(f.result), f.onerror = u, f.readAsArrayBuffer(m);
                });
              }(v, g);
            }
            static toArrayBuffer(v, g, s = true) {
              return s && o ? this.toArrayBufferWithWorker(v, g) : this.toArrayBufferWithoutWorker(v, g);
            }
            static compareBuffersWithWorker(v, g) {
              return e2(this, null, function* () {
                if (v === g) return true;
                let s = new e.a(new i5.a()), d = yield s.exec("compare", { buf1: v, buf2: g }, [v, g]);
                return s.terminate(), d;
              });
            }
            static compareBuffersWithoutWorker(v, g) {
              return function(s, d) {
                if (s === d) return true;
                if (s.byteLength !== d.byteLength) return false;
                let z = new DataView(s), u = new DataView(d);
                for (var f = s.byteLength; f--; ) if (z.getUint8(f) !== u.getUint8(f)) return false;
                return true;
              }(v, g);
            }
            static compareBuffers(v, g, s = true) {
              return s && o ? this.compareBuffersWithWorker(v, g) : this.compareBuffersWithoutWorker(v, g);
            }
            static sizeEqual(v, g) {
              return v.size === g.size;
            }
            static typeEqual(v, g) {
              return v.type === g.type;
            }
            static magicNumbersEqual(v, g, s = true) {
              return e2(this, null, function* () {
                if (v === g) return true;
                let d = [24, 16, 14, 12, 8, 6, 4], [z, u] = yield Promise.all([this.toBinaryString(v, 24, s), this.toBinaryString(g, 24, s)]);
                for (let f of d) if (z.substring(0, f) === u.substring(0, f)) return true;
                return false;
              });
            }
            static bytesEqualWithBinaryString(v, g, s, d = true) {
              return e2(this, null, function* () {
                if (v === g) return true;
                let [z, u] = yield Promise.all([this.toBinaryString(v, s, d), this.toBinaryString(g, s, d)]);
                return z === u;
              });
            }
            static bytesEqualWithArrayBuffer(v, g, s, d = true) {
              return e2(this, null, function* () {
                if (v === g) return true;
                let [z, u] = yield Promise.all([this.toArrayBuffer(v, s, d), this.toArrayBuffer(g, s, d)]);
                return this.compareBuffers(z, u, d);
              });
            }
            static isEqual(p, m) {
              return e2(this, arguments, function* (v, g, { methods: s = ["size", "type", "magic", "byte"], byte: d = "buffer", partial: z = false, chunks: u = null, worker: f = true } = {}) {
                let M = null;
                for (let w of s) {
                  if (M === false || z && M === true) break;
                  switch (w) {
                    case "byte":
                    case "bytes":
                    case "content":
                      u = u instanceof Array ? u : [v.size], M = true;
                      for (let H of u) {
                        let y = false;
                        y = d === "buffer" ? yield this.bytesEqualWithArrayBuffer(v, g, H, f) : yield this.bytesEqualWithBinaryString(v, g, H, f), y || (M = false);
                      }
                      break;
                    case "magic":
                    case "headers":
                    case "numbers":
                    case "mime":
                      M = yield this.magicNumbersEqual(v, g, f);
                      break;
                    case "size":
                    case "sizes":
                      M = this.sizeEqual(v, g);
                      break;
                    case "type":
                    case "types":
                      M = this.typeEqual(v, g);
                      break;
                    default:
                      throw new Error("Blob-compare : Unknown comparison method");
                  }
                }
                return M;
              });
            }
          }
        }]);
      });
    });
    var gl1 = {};
    Lf(gl1, { ToolbarDropdownSelect: () => Cq, default: () => hl1 });
    module.exports = Rq(gl1);
    f1();
    de();
    var sv = requireDist$2();
    N5();
    var Pq = 0, Jt = class {
      constructor(a) {
        this._studio = a;
        y1(this, "_id");
        y1(this, "_state", { type: "Ready" });
        this._id = String(Pq++);
      }
      get status() {
        return this._state.type;
      }
      reset() {
        let { _state: a } = this;
        if (a.type !== "Ready") if (a.type === "Captured") this._state = { type: "Ready" }, a.transaction.discard(), a.flagsTransaction.discard();
        else throw a.type === "Committed" ? new Error("This scrub is already committed and can't be reset.") : new Error("This scrub is already discarded and can't be reset.");
      }
      commit() {
        let { _state: a } = this;
        if (a.type === "Captured") a.transaction.commit(), a.flagsTransaction.discard(), this._state = { type: "Committed" };
        else if (a.type === "Ready") {
          console.warn("Scrub is empty. Nothing to commit.");
          return;
        } else throw a.type === "Committed" ? new Error("This scrub is already committed.") : new Error("This scrub is already discarded and can't be comitted.");
      }
      capture(a) {
        if (this._state.type === "Captured" && this.reset(), this._state.type === "Ready") {
          let c = true;
          try {
            this._state = S({ type: "Captured" }, this._capture(a)), c = false;
          } finally {
            c && (console.error("This scrub's callback threw an error. We're undo-ing all of the changes made by this scrub, and marking it as discarded."), this._state = { type: "Discarded" });
          }
        } else throw this._state.type === "Committed" ? new Error("This scrub is already committed and cannot capture again. If you wish to capture more, you can start a new studio.scrub() or do so before scrub.commit()") : new Error("This scrub is already discarded and cannot capture again. If you wish to capture more, you can start a new studio.scrub() or do so before scrub.discard()");
      }
      _capture(a) {
        let c = [], r = this._studio.tempTransaction((l) => {
          let i5 = true, o = { set: (n, h) => {
            if (!i5) throw new Error("You seem to have called the scrub api after scrub.capture()");
            let { root: v, path: g } = (0, sv.getPointerParts)(n);
            if (!c0(v)) throw new Error("We can only scrub props of Sheet Objects for now");
            l.set(n, h), c.push(n);
          } };
          try {
            a(o);
          } finally {
            i5 = false;
          }
        }), e = this._studio.tempTransaction(({ stateEditors: l }) => {
          c.forEach((i5) => {
            let { root: o, path: n } = (0, sv.getPointerParts)(i5);
            if (!c0(o)) return;
            let h = o.template.getDefaultsAtPointer(i5);
            q5(h, (v, g) => {
              l.studio.ephemeral.projects.stateByProjectId.stateBySheetId.stateByObjectKey.propsBeingScrubbed.flag(D(S({}, o.address), { pathToProp: g }));
            }, n);
          });
        });
        return { transaction: r, flagsTransaction: e };
      }
      discard() {
        let { _state: a } = this;
        if (a.type === "Captured" || a.type === "Ready") a.type === "Captured" && (a.transaction.discard(), a.flagsTransaction.discard()), this._state = { type: "Discarded" };
        else throw a.type === "Committed" ? new Error("This scrub is already committed and can't be discarded.") : new Error("This scrub is already discarded");
      }
    };
    var L_ = requireDist$2();
    var C_ = typeof window != "undefined" ? Promise.resolve().then(() => (x_(), M_)).then((t2) => t2.default) : null, Ur = class {
      constructor(a) {
        this.studio = a;
        y1(this, "_rendered", false);
        y1(this, "_nonSSRBits", C_ ? C_.then((a2) => new a2()) : Promise.reject());
        y1(this, "ready", this._nonSSRBits.then(() => {
        }, () => {
        }));
      }
      render() {
        this._rendered || (this._rendered = true, this._nonSSRBits.then((a) => {
          a.render();
        }).catch((a) => {
          throw console.error(a), a;
        }));
      }
      hide() {
        this.studio.transaction(({ drafts: a }) => {
          a.ahistoric.visibilityState = "everythingIsHidden";
        });
      }
      restore() {
        this.render(), this.studio.transaction(({ drafts: a }) => {
          a.ahistoric.visibilityState = "everythingIsVisible";
        });
      }
      get isHidden() {
        return (0, L_.val)(this.studio.atomP.ahistoric.visibilityState) === "everythingIsHidden";
      }
      renderToolset(a, c) {
        let r = false, e = null;
        return this._nonSSRBits.then((l) => {
          r || (e = l.renderToolset(a, c));
        }).catch((l) => {
          console.error(l);
        }), () => {
          if (e) {
            e();
            return;
          }
          r || (r = true);
        };
      }
    };
    var C7 = requireDist$2();
    function Xa1(t2) {
      return t2;
    }
    var Ya1 = (t2, a = Xa1) => {
      let c = (r) => ({ type: t2, payload: a(r) });
      return c.type = t2, c.is = (r) => r && r.type && r.type === t2, c;
    }, Z3 = Ya1;
    var Gm = I(J_()), Tm = I(kj());
    ma();
    var qh, Ae1 = new Uint8Array(16);
    function Fm() {
      if (!qh && (qh = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !qh)) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      return qh(Ae1);
    }
    var Aj = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function Re1(t2) {
      return typeof t2 == "string" && Aj.test(t2);
    }
    var Rj = Re1;
    var J2 = [];
    for (Nh = 0; Nh < 256; ++Nh) J2.push((Nh + 256).toString(16).substr(1));
    var Nh;
    function be1(t2) {
      var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, c = (J2[t2[a + 0]] + J2[t2[a + 1]] + J2[t2[a + 2]] + J2[t2[a + 3]] + "-" + J2[t2[a + 4]] + J2[t2[a + 5]] + "-" + J2[t2[a + 6]] + J2[t2[a + 7]] + "-" + J2[t2[a + 8]] + J2[t2[a + 9]] + "-" + J2[t2[a + 10]] + J2[t2[a + 11]] + J2[t2[a + 12]] + J2[t2[a + 13]] + J2[t2[a + 14]] + J2[t2[a + 15]]).toLowerCase();
      if (!Rj(c)) throw TypeError("Stringified UUID is invalid");
      return c;
    }
    var bj = be1;
    function Fe1(t2, a, c) {
      t2 = t2 || {};
      var r = t2.random || (t2.rng || Fm)();
      if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, a) {
        c = c || 0;
        for (var e = 0; e < 16; ++e) a[c + e] = r[e];
        return a;
      }
      return bj(r);
    }
    var Im = Fe1;
    var jt = { replaceHistory: Z3("@history/replaceHistory"), startHistoryFromScratch: Z3("@history/startHistoryFromScratch"), undo: Z3("@history/undo"), redo: Z3("@history/redo") };
    var Ie1 = { type: "@history/unknownAction", payload: "" }, Pe1 = { maxNumberOfCommits: 100 }, Fj = (t2, a = Pe1) => {
      let c = Pm(t2(void 0, Ie1));
      return function(e, l) {
        return jt.startHistoryFromScratch.is(l) ? Pm(t2(void 0, l.payload)) : jt.replaceHistory.is(l) ? l.payload : jt.undo.is(l) ? e ? Ze1(e) : c : jt.redo.is(l) ? e ? Oe1(e) : c : e ? Ge1(e, t2(e.innerState, l), a) : Pm(t2(void 0, l));
      };
    };
    function Pm(t2) {
      return { currentCommitHash: void 0, commitsByHash: {}, listOfCommitHashes: [], innerState: t2 };
    }
    function Ge1(t2, a, c) {
      if (a === t2.innerState) return t2;
      let r = Te1(t2.innerState, a);
      if (r.forwardDiff.length === 0) return t2;
      let e = M3(t2.listOfCommitHashes), l = { currentCommitHash: r.hash, commitsByHash: S({}, t2.commitsByHash), listOfCommitHashes: [...t2.listOfCommitHashes], innerState: a };
      if (t2.currentCommitHash !== e) {
        let i5 = t2.listOfCommitHashes.findIndex((n) => n === t2.currentCommitHash);
        t2.listOfCommitHashes.slice(i5 + 1).forEach((n) => {
          delete l.commitsByHash[n];
        }), l.listOfCommitHashes.splice(i5 + 1, l.listOfCommitHashes.length);
      }
      if (l.listOfCommitHashes.push(r.hash), l.commitsByHash[r.hash] = r, l.listOfCommitHashes.length > c.maxNumberOfCommits) {
        let i5 = l.listOfCommitHashes.length - c.maxNumberOfCommits;
        l.listOfCommitHashes.slice(0, i5).forEach((n) => {
          delete l.commitsByHash[n];
        }), l.listOfCommitHashes.splice(0, i5);
      }
      return l;
    }
    function Te1(t2, a) {
      let c = Gm.default.diff(t2, a, { invertible: false }), r = Gm.default.diff(a, t2, { invertible: false }), e = Date.now(), l = Im();
      return { forwardDiff: c, backwardDiff: r, timestamp: e, hash: l };
    }
    function Ze1(t2) {
      if (t2.currentCommitHash === void 0) return t2;
      let a = t2.listOfCommitHashes.findIndex((o) => o === t2.currentCommitHash);
      if (a === -1) throw new Error("This should never happen");
      let c = t2.commitsByHash[t2.currentCommitHash], r = (0, Tm.default)(t2.innerState, c.backwardDiff), e = a - 1, l = e === -1 ? void 0 : t2.listOfCommitHashes[e];
      return D(S({}, t2), { currentCommitHash: l, innerState: r });
    }
    function Oe1(t2) {
      if (t2.listOfCommitHashes.length === 0) return t2;
      let a = t2.listOfCommitHashes.findIndex((o) => o === t2.currentCommitHash);
      if (a === t2.listOfCommitHashes.length - 1) return t2;
      let c = a + 1, r = t2.listOfCommitHashes[c], e = t2.commitsByHash[r], l = (0, Tm.default)(t2.innerState, e.forwardDiff);
      return D(S({}, t2), { currentCommitHash: r, innerState: l });
    }
    _r();
    var Uh = { ahistoric: { visibilityState: "everythingIsVisible", theTrigger: { position: { closestCorner: "bottomLeft", distanceFromHorizontalEdge: 0.02, distanceFromVerticalEdge: 0.02 } }, coreByProject: {}, projects: { stateByProjectId: {} } }, historic: { projects: { stateByProjectId: {} }, autoKey: true, coreByProject: {}, panelInstanceDesceriptors: {} }, ephemeral: { initialised: false, coreByProject: {}, projects: { stateByProjectId: {} }, extensions: { byId: {}, paneClasses: {} }, showOutline: false } }, Pj = Z3("@storeBundle/replacePersistentState", (t2) => t2), Gj = Z3("@storeBundle/reduceParts", (t2) => t2), u8 = { historic: jt, replacePersistentState: Pj, reduceParts: Gj }, Tj = Z3("@storeBundle/setInnerHistoricState", (t2) => t2), Ee1 = (t2 = Uh.historic, a) => Tj.is(a) ? a.payload : t2, Zm = Fj(Ee1), Ij = (t2, a) => {
      if (Pj.is(a)) {
        let { historic: c, ahistoric: r } = a.payload, e = (t2 == null ? void 0 : t2.ephemeral) || Uh.ephemeral;
        return { $persistent: { historic: c, ahistoric: r }, ephemeral: e };
      } else if (t2) {
        let { historic: c, ahistoric: r } = t2.$persistent, { ephemeral: e } = t2;
        if (Gj.is(a)) {
          let i5 = { historic: t2.$persistent.historic.innerState, ahistoric: t2.$persistent.ahistoric, ephemeral: t2.ephemeral }, o = a.payload(i5);
          if (o === i5) return t2;
          c.innerState !== o.historic && (c = Zm(c, Tj(o.historic))), r = o.ahistoric, e = o.ephemeral;
        } else {
          let i5 = Zm(c, a);
          if (i5 === c) return t2;
          c = i5;
        }
        return { $persistent: c === t2.$persistent.historic && r === t2.$persistent.ahistoric ? t2.$persistent : { historic: c, ahistoric: r }, ephemeral: e };
      } else {
        let c = Zm(void 0, {}), r = Uh.ahistoric, e = Uh.ephemeral;
        return { $persistent: { historic: c, ahistoric: r }, ephemeral: e };
      }
    }, Zj = Z3("@history/pushTempAction", (t2) => t2), Oj = Z3("@history/discardTempAction", (t2) => t2), Ej = Z3("@history/commitTempAction", (t2) => t2), De1 = 0, Dj = () => {
      let t2 = De1++;
      return { push: (e) => Zj({ id: t2, originalAction: e }), discard: () => Oj(t2), commit: () => Ej(t2) };
    }, Wj = (t2, a) => {
      if (t2) {
        let { tempActions: c, permanent: r } = t2.$temps, e;
        if (Zj.is(a)) c = [...c, a];
        else if (Ej.is(a)) {
          let i5 = c.find((o) => o.payload.id === a.payload);
          i5 ? (e = i5.payload.originalAction, c = c.filter((o) => o.payload.id !== a.payload)) : kt.error("Comitting temp action group ".concat(a.payload, " isn't possible as this group doesn't exist"));
        } else Oj.is(a) ? c = c.filter((i5) => i5.payload.id !== a.payload) : e = a;
        e && (r = Ij(t2.$temps.permanent, e));
        let l = { historic: r.$persistent.historic.innerState, ahistoric: r.$persistent.ahistoric, ephemeral: r.ephemeral };
        for (let i5 of c) l = i5.payload.originalAction.payload(l);
        return S({ $temps: { tempActions: c, permanent: r }, $persistent: r.$persistent }, l);
      } else {
        let c = Ij(void 0, a);
        return { $temps: { permanent: c, tempActions: [] }, $persistent: c.$persistent, historic: c.$persistent.historic.innerState, ahistoric: c.$persistent.ahistoric, ephemeral: c.ephemeral };
      }
    };
    o4();
    o4();
    O4();
    function Kh(t2, a) {
      if (typeof t2 != "object" || t2 === null) return;
      if (a.length === 0) {
        for (let i5 of Object.keys(t2)) delete t2[i5];
        return;
      }
      let c = a.slice(0, a.length - 1), r = t2, e = /* @__PURE__ */ new WeakMap();
      for (let i5 of c) {
        let o = r, n = o[i5];
        if (typeof n != "object" || n === null) return;
        e.set(n, o), r = n;
      }
      let l = a.slice().reverse();
      for (let i5 of l) {
        if (delete r[i5], Object.keys(r).length > 0) return;
        r = e.get(r);
      }
    }
    function _j(t2, { scale: a, origin: c, translate: r }) {
      let e = c + (t2 - c) * a;
      return r + e;
    }
    function u4(t2) {
      for (var a = arguments.length, c = Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) c[r - 1] = arguments[r];
      throw Error("[Immer] minified error nr: " + t2 + (c.length ? " " + c.map(function(i5) {
        return "'" + i5 + "'";
      }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
    }
    function qt(t2) {
      return !!t2 && !!t2[u3];
    }
    function x7(t2) {
      return !!t2 && (function(a) {
        if (!a || typeof a != "object") return false;
        var c = Object.getPrototypeOf(a);
        if (c === null) return true;
        var r = Object.hasOwnProperty.call(c, "constructor") && c.constructor;
        return r === Object || typeof r == "function" && Function.toString.call(r) === Ke1;
      }(t2) || Array.isArray(t2) || !!t2[Xj] || !!t2.constructor[Xj] || Um(t2) || Km(t2));
    }
    function Jr(t2, a, c) {
      c === void 0 && (c = false), Nt(t2) === 0 ? (c ? Object.keys : Jm)(t2).forEach(function(r) {
        c && typeof r == "symbol" || a(r, t2[r], t2);
      }) : t2.forEach(function(r, e) {
        return a(e, r, t2);
      });
    }
    function Nt(t2) {
      var a = t2[u3];
      return a ? a.i > 3 ? a.i - 4 : a.i : Array.isArray(t2) ? 1 : Um(t2) ? 2 : Km(t2) ? 3 : 0;
    }
    function _m(t2, a) {
      return Nt(t2) === 2 ? t2.has(a) : Object.prototype.hasOwnProperty.call(t2, a);
    }
    function We1(t2, a) {
      return Nt(t2) === 2 ? t2.get(a) : t2[a];
    }
    function Yj(t2, a, c) {
      var r = Nt(t2);
      r === 2 ? t2.set(a, c) : r === 3 ? (t2.delete(a), t2.add(c)) : t2[a] = c;
    }
    function _e12(t2, a) {
      return t2 === a ? t2 !== 0 || 1 / t2 == 1 / a : t2 != t2 && a != a;
    }
    function Um(t2) {
      return Ne1 && t2 instanceof Map;
    }
    function Km(t2) {
      return Ue1 && t2 instanceof Set;
    }
    function M7(t2) {
      return t2.o || t2.t;
    }
    function $m(t2) {
      if (Array.isArray(t2)) return Array.prototype.slice.call(t2);
      var a = $e1(t2);
      delete a[u3];
      for (var c = Jm(a), r = 0; r < c.length; r++) {
        var e = c[r], l = a[e];
        l.writable === false && (l.writable = true, l.configurable = true), (l.get || l.set) && (a[e] = { configurable: true, writable: true, enumerable: l.enumerable, value: t2[e] });
      }
      return Object.create(Object.getPrototypeOf(t2), a);
    }
    function Qm(t2, a) {
      return a === void 0 && (a = false), Xm(t2) || qt(t2) || !x7(t2) || (Nt(t2) > 1 && (t2.set = t2.add = t2.clear = t2.delete = je1), Object.freeze(t2), a && Jr(t2, function(c, r) {
        return Qm(r, true);
      }, true)), t2;
    }
    function je1() {
      u4(2);
    }
    function Xm(t2) {
      return t2 == null || typeof t2 != "object" || Object.isFrozen(t2);
    }
    function D5(t2) {
      var a = Qe1[t2];
      return a || u4(18, t2), a;
    }
    function jj() {
      return te;
    }
    function Om(t2, a) {
      a && (D5("Patches"), t2.u = [], t2.s = [], t2.v = a);
    }
    function Xh(t2) {
      jm(t2), t2.p.forEach(qe1), t2.p = null;
    }
    function jm(t2) {
      t2 === te && (te = t2.l);
    }
    function qj(t2) {
      return te = { p: [], l: te, h: t2, m: true, _: 0 };
    }
    function qe1(t2) {
      var a = t2[u3];
      a.i === 0 || a.i === 1 ? a.j() : a.O = true;
    }
    function Em(t2, a) {
      a._ = a.p.length;
      var c = a.p[0], r = t2 !== void 0 && t2 !== c;
      return a.h.g || D5("ES5").S(a, t2, r), r ? (c[u3].P && (Xh(a), u4(4)), x7(t2) && (t2 = Yh(a, t2), a.l || Jh(a, t2)), a.u && D5("Patches").M(c[u3], t2, a.u, a.s)) : t2 = Yh(a, c, []), Xh(a), a.u && a.v(a.u, a.s), t2 !== Jj ? t2 : void 0;
    }
    function Yh(t2, a, c) {
      if (Xm(a)) return a;
      var r = a[u3];
      if (!r) return Jr(a, function(l, i5) {
        return Nj(t2, r, a, l, i5, c);
      }, true), a;
      if (r.A !== t2) return a;
      if (!r.P) return Jh(t2, r.t, true), r.t;
      if (!r.I) {
        r.I = true, r.A._--;
        var e = r.i === 4 || r.i === 5 ? r.o = $m(r.k) : r.o;
        Jr(r.i === 3 ? new Set(e) : e, function(l, i5) {
          return Nj(t2, r, e, l, i5, c);
        }), Jh(t2, e, false), c && t2.u && D5("Patches").R(r, c, t2.u, t2.s);
      }
      return r.o;
    }
    function Nj(t2, a, c, r, e, l) {
      if (qt(e)) {
        var i5 = Yh(t2, e, l && a && a.i !== 3 && !_m(a.D, r) ? l.concat(r) : void 0);
        if (Yj(c, r, i5), !qt(i5)) return;
        t2.m = false;
      }
      if (x7(e) && !Xm(e)) {
        if (!t2.h.F && t2._ < 1) return;
        Yh(t2, e), a && a.A.l || Jh(t2, e);
      }
    }
    function Jh(t2, a, c) {
      c === void 0 && (c = false), t2.h.F && t2.m && Qm(a, c);
    }
    function Dm(t2, a) {
      var c = t2[u3];
      return (c ? M7(c) : t2)[a];
    }
    function Uj(t2, a) {
      if (a in t2) for (var c = Object.getPrototypeOf(t2); c; ) {
        var r = Object.getOwnPropertyDescriptor(c, a);
        if (r) return r;
        c = Object.getPrototypeOf(c);
      }
    }
    function qm(t2) {
      t2.P || (t2.P = true, t2.l && qm(t2.l));
    }
    function Wm(t2) {
      t2.o || (t2.o = $m(t2.t));
    }
    function Nm(t2, a, c) {
      var r = Um(a) ? D5("MapSet").N(a, c) : Km(a) ? D5("MapSet").T(a, c) : t2.g ? function(e, l) {
        var i5 = Array.isArray(e), o = { i: i5 ? 1 : 0, A: l ? l.A : jj(), P: false, I: false, D: {}, l, t: e, k: null, o: null, j: null, C: false }, n = o, h = $h;
        i5 && (n = [o], h = Qh);
        var v = Proxy.revocable(n, h), g = v.revoke, s = v.proxy;
        return o.k = s, o.j = g, s;
      }(a, c) : D5("ES5").J(a, c);
      return (c ? c.A : jj()).p.push(r), r;
    }
    function ae(t2) {
      return qt(t2) || u4(22, t2), function a(c) {
        if (!x7(c)) return c;
        var r, e = c[u3], l = Nt(c);
        if (e) {
          if (!e.P && (e.i < 4 || !D5("ES5").K(e))) return e.t;
          e.I = true, r = Kj(c, l), e.I = false;
        } else r = Kj(c, l);
        return Jr(r, function(i5, o) {
          e && We1(e.t, i5) === o || Yj(r, i5, a(o));
        }), l === 3 ? new Set(r) : r;
      }(t2);
    }
    function Kj(t2, a) {
      switch (a) {
        case 2:
          return new Map(t2);
        case 3:
          return Array.from(t2);
      }
      return $m(t2);
    }
    var $j, te, Ym = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol", Ne1 = typeof Map != "undefined", Ue1 = typeof Set != "undefined", Qj = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined", Jj = Ym ? Symbol.for("immer-nothing") : (($j = {})["immer-nothing"] = true, $j), Xj = Ym ? Symbol.for("immer-draftable") : "__$immer_draftable", u3 = Ym ? Symbol.for("immer-state") : "__$immer_state";
    var Ke1 = "" + Object.prototype.constructor, Jm = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(t2) {
      return Object.getOwnPropertyNames(t2).concat(Object.getOwnPropertySymbols(t2));
    } : Object.getOwnPropertyNames, $e1 = Object.getOwnPropertyDescriptors || function(t2) {
      var a = {};
      return Jm(t2).forEach(function(c) {
        a[c] = Object.getOwnPropertyDescriptor(t2, c);
      }), a;
    }, Qe1 = {}, $h = { get: function(t2, a) {
      if (a === u3) return t2;
      var c = M7(t2);
      if (!_m(c, a)) return function(e, l, i5) {
        var o, n = Uj(l, i5);
        return n ? "value" in n ? n.value : (o = n.get) === null || o === void 0 ? void 0 : o.call(e.k) : void 0;
      }(t2, c, a);
      var r = c[a];
      return t2.I || !x7(r) ? r : r === Dm(t2.t, a) ? (Wm(t2), t2.o[a] = Nm(t2.A.h, r, t2)) : r;
    }, has: function(t2, a) {
      return a in M7(t2);
    }, ownKeys: function(t2) {
      return Reflect.ownKeys(M7(t2));
    }, set: function(t2, a, c) {
      var r = Uj(M7(t2), a);
      if (r != null && r.set) return r.set.call(t2.k, c), true;
      if (!t2.P) {
        var e = Dm(M7(t2), a), l = e == null ? void 0 : e[u3];
        if (l && l.t === c) return t2.o[a] = c, t2.D[a] = false, true;
        if (_e12(c, e) && (c !== void 0 || _m(t2.t, a))) return true;
        Wm(t2), qm(t2);
      }
      return t2.o[a] === c && typeof c != "number" && (c !== void 0 || a in t2.o) || (t2.o[a] = c, t2.D[a] = true, true);
    }, deleteProperty: function(t2, a) {
      return Dm(t2.t, a) !== void 0 || a in t2.t ? (t2.D[a] = false, Wm(t2), qm(t2)) : delete t2.D[a], t2.o && delete t2.o[a], true;
    }, getOwnPropertyDescriptor: function(t2, a) {
      var c = M7(t2), r = Reflect.getOwnPropertyDescriptor(c, a);
      return r && { writable: true, configurable: t2.i !== 1 || a !== "length", enumerable: r.enumerable, value: c[a] };
    }, defineProperty: function() {
      u4(11);
    }, getPrototypeOf: function(t2) {
      return Object.getPrototypeOf(t2.t);
    }, setPrototypeOf: function() {
      u4(12);
    } }, Qh = {};
    Jr($h, function(t2, a) {
      Qh[t2] = function() {
        return arguments[0] = arguments[0][0], a.apply(this, arguments);
      };
    }), Qh.deleteProperty = function(t2, a) {
      return $h.deleteProperty.call(this, t2[0], a);
    }, Qh.set = function(t2, a, c) {
      return $h.set.call(this, t2[0], a, c, t2[0]);
    };
    var Xe1 = function() {
      function t2(c) {
        var r = this;
        this.g = Qj, this.F = true, this.produce = function(e, l, i5) {
          if (typeof e == "function" && typeof l != "function") {
            var o = l;
            l = e;
            var n = r;
            return function(d) {
              var z = this;
              d === void 0 && (d = o);
              for (var u = arguments.length, f = Array(u > 1 ? u - 1 : 0), p = 1; p < u; p++) f[p - 1] = arguments[p];
              return n.produce(d, function(m) {
                var M;
                return (M = l).call.apply(M, [z, m].concat(f));
              });
            };
          }
          var h;
          if (typeof l != "function" && u4(6), i5 !== void 0 && typeof i5 != "function" && u4(7), x7(e)) {
            var v = qj(r), g = Nm(r, e, void 0), s = true;
            try {
              h = l(g), s = false;
            } finally {
              s ? Xh(v) : jm(v);
            }
            return typeof Promise != "undefined" && h instanceof Promise ? h.then(function(d) {
              return Om(v, i5), Em(d, v);
            }, function(d) {
              throw Xh(v), d;
            }) : (Om(v, i5), Em(h, v));
          }
          if (!e || typeof e != "object") return (h = l(e)) === Jj ? void 0 : (h === void 0 && (h = e), r.F && Qm(h, true), h);
          u4(21, e);
        }, this.produceWithPatches = function(e, l) {
          return typeof e == "function" ? function(n) {
            for (var h = arguments.length, v = Array(h > 1 ? h - 1 : 0), g = 1; g < h; g++) v[g - 1] = arguments[g];
            return r.produceWithPatches(n, function(s) {
              return e.apply(void 0, [s].concat(v));
            });
          } : [r.produce(e, l, function(n, h) {
            i5 = n, o = h;
          }), i5, o];
          var i5, o;
        }, typeof (c == null ? void 0 : c.useProxies) == "boolean" && this.setUseProxies(c.useProxies), typeof (c == null ? void 0 : c.autoFreeze) == "boolean" && this.setAutoFreeze(c.autoFreeze);
      }
      var a = t2.prototype;
      return a.createDraft = function(c) {
        x7(c) || u4(8), qt(c) && (c = ae(c));
        var r = qj(this), e = Nm(this, c, void 0);
        return e[u3].C = true, jm(r), e;
      }, a.finishDraft = function(c, r) {
        var e = c && c[u3], l = e.A;
        return Om(l, r), Em(void 0, l);
      }, a.setAutoFreeze = function(c) {
        this.F = c;
      }, a.setUseProxies = function(c) {
        c && !Qj && u4(20), this.g = c;
      }, a.applyPatches = function(c, r) {
        var e;
        for (e = r.length - 1; e >= 0; e--) {
          var l = r[e];
          if (l.path.length === 0 && l.op === "replace") {
            c = l.value;
            break;
          }
        }
        var i5 = D5("Patches").$;
        return qt(c) ? i5(c, r) : this.produce(c, function(o) {
          return i5(o, r.slice(e + 1));
        });
      }, t2;
    }(), p3 = new Xe1();
    p3.produce;
    p3.produceWithPatches.bind(p3);
    p3.setAutoFreeze.bind(p3);
    p3.setUseProxies.bind(p3);
    p3.applyPatches.bind(p3);
    var tv = p3.createDraft.bind(p3), av = p3.finishDraft.bind(p3);
    HL();
    kL();
    KL();
    Xe();
    XL();
    Er();
    H2();
    N5();
    var O3 = { create(t2) {
      let a = { byId: {}, allIds: {} };
      if (t2) for (let [c, r] of t2) a.byId[c] = r, a.allIds[c] = true;
      return a;
    }, shallowCopy(t2) {
      return { byId: S({}, t2 == null ? void 0 : t2.byId), allIds: S({}, t2 == null ? void 0 : t2.allIds) };
    }, add(t2, a, c) {
      return { byId: D(S({}, t2 == null ? void 0 : t2.byId), { [a]: c }), allIds: D(S({}, t2 == null ? void 0 : t2.allIds), { [a]: true }) };
    }, merge(t2) {
      let a = O3.create();
      for (let c = 0; c < t2.length; c++) a.byId = S(S({}, a.byId), t2[c].byId), a.allIds = S(S({}, a.allIds), t2[c].allIds);
      return a;
    }, remove(t2, a) {
      let c = O3.shallowCopy(t2);
      return delete c.allIds[a], delete c.byId[a], c;
    }, filter(t2, a) {
      let c = O3.shallowCopy(t2);
      for (let [r, e] of Object.entries(c.byId)) a(e) || (delete c.allIds[r], delete c.byId[r]);
      return c;
    } };
    var cf = (t2) => (tf = t2, af), tf, t0 = () => {
      if (tf === void 0) throw new Error("Calling stateEditors outside of a transaction is not allowed.");
      return tf;
    }, af;
    ((c) => {
      ((i5) => {
        ((v) => {
          ((s) => {
            function g(d) {
              let z = t0().historic;
              z.panelPositions != null || (z.panelPositions = {}), z.panelPositions[d.panelId] = d.position;
            }
            s.setPanelPosition = g;
          })(v.panelPositions || (v.panelPositions = {}));
          ((z) => {
            function g() {
              var u;
              return (u = t0().historic).panels != null || (u.panels = {}), t0().historic.panels;
            }
            z._ensure = g;
            ((p) => {
              function u() {
                let m = c.studio.historic.panels._ensure();
                return m.outlinePanel != null || (m.outlinePanel = {}), m.outlinePanel;
              }
              p._ensure = u;
              ((w) => {
                function m(H) {
                  let y = [];
                  for (let k of x3(H)) se(k) ? y.push(S({ type: "Project" }, k.address)) : H7(k) ? (y.push(S({ type: "Sheet" }, k.template.address)), c.studio.historic.projects.stateByProjectId.stateBySheetId.setSelectedInstanceId(k.address)) : yf(k) ? y.push(S({ type: "Sheet" }, k.address)) : c0(k) ? (y.push(S({ type: "SheetObject" }, k.template.address)), c.studio.historic.projects.stateByProjectId.stateBySheetId.setSelectedInstanceId(k.sheet.address)) : kf(k) && y.push(S({ type: "SheetObject" }, k.address));
                  p._ensure().selection = y;
                }
                w.set = m;
                function M() {
                  p._ensure().selection = [];
                }
                w.unset = M;
              })(p.selection || (p.selection = {}));
            })(z.outline || (z.outline = {}));
            ((p) => {
              function u() {
                let m = c.studio.historic.panels._ensure();
                return m.sequenceEditor != null || (m.sequenceEditor = {}), m.sequenceEditor;
              }
              p._ensure = u;
              ((w) => {
                function m() {
                  let H = p._ensure();
                  return H.graphEditor != null || (H.graphEditor = { height: 0.5, isOpen: false }), H.graphEditor;
                }
                function M(H) {
                  m().isOpen = H.isOpen;
                }
                w.setIsOpen = M;
              })(p.graphEditor || (p.graphEditor = {}));
            })(z.sequenceEditor || (z.sequenceEditor = {}));
          })(v.panels || (v.panels = {}));
          ((s) => {
            ((u) => {
              function d(f) {
                let p = t0().historic;
                return p.projects.stateByProjectId[f.projectId] || (p.projects.stateByProjectId[f.projectId] = { stateBySheetId: {} }), p.projects.stateByProjectId[f.projectId];
              }
              u._ensure = d;
              ((M) => {
                function f(w) {
                  let H = c.studio.historic.projects.stateByProjectId._ensure(w);
                  return H.stateBySheetId[w.sheetId] || (H.stateBySheetId[w.sheetId] = { selectedInstanceId: void 0, sequenceEditor: { selectedPropsByObject: {} } }), H.stateBySheetId[w.sheetId];
                }
                M._ensure = f;
                function p(w) {
                  c.studio.historic.projects.stateByProjectId.stateBySheetId._ensure(w).selectedInstanceId = w.sheetInstanceId;
                }
                M.setSelectedInstanceId = p;
                ((A) => {
                  function w(P) {
                    let { selectedPropsByObject: C } = M._ensure(P).sequenceEditor;
                    C[P.objectKey] || (C[P.objectKey] = {});
                    let E = C[P.objectKey], a1 = h3(P.pathToProp), j = new Set(Object.keys(v7));
                    for (let [Z, J] of Object.entries(ae(C))) for (let [W, _] of Object.entries(J)) j.delete(_);
                    let K = j.size > 0 ? j.values().next().value : Object.keys(v7)[0];
                    E[a1] = K;
                  }
                  A.addPropToGraphEditor = w;
                  function H(P) {
                    let { selectedPropsByObject: C } = M._ensure(P).sequenceEditor;
                    if (!C[P.objectKey]) return;
                    let E = C[P.objectKey], a1 = h3(P.pathToProp);
                    E[a1] && Kh(C, [P.objectKey, a1]);
                  }
                  A.removePropFromGraphEditor = H;
                  function y(P) {
                    let C = c.studio.historic.projects.stateByProjectId.stateBySheetId._ensure(P).sequenceEditor;
                    return C.markerSet || (C.markerSet = O3.create()), C.markerSet;
                  }
                  function k(P) {
                    let C = y(P.sheetAddress), E = P.markers.filter((Z) => !!isFinite(Z.position)).map((Z) => D(S({}, Z), { position: P.snappingFunction(Z.position) })), a1 = Ma(E, "id"), j = O3.filter(C, (Z) => Z && !a1[Z.id]), K = Ma(Object.values(j.byId), "position");
                    E.forEach(({ position: Z }) => {
                      let J = K[Z];
                      J && (j = O3.remove(j, J.id));
                    }), Object.assign(C, O3.merge([j, O3.create(E.map((Z) => [Z.id, Z]))]));
                  }
                  A.replaceMarkers = k;
                  function F(P) {
                    let C = y(P.sheetAddress);
                    Object.assign(C, O3.remove(C, P.markerId));
                  }
                  A.removeMarker = F;
                  function U(P) {
                    let E = y(P.sheetAddress).byId[P.markerId];
                    E !== void 0 && (E.label = P.label);
                  }
                  A.updateMarker = U;
                })(M.sequenceEditor || (M.sequenceEditor = {}));
              })(u.stateBySheetId || (u.stateBySheetId = {}));
            })(s.stateByProjectId || (s.stateByProjectId = {}));
          })(v.projects || (v.projects = {}));
        })(i5.historic || (i5.historic = {}));
        ((h) => {
          function o(v) {
            t0().ephemeral.showOutline = v;
          }
          h.setShowOutline = o;
          ((g) => {
            ((z) => {
              function s(u) {
                let f = t0().ephemeral;
                return f.projects.stateByProjectId[u.projectId] || (f.projects.stateByProjectId[u.projectId] = { stateBySheetId: {} }), f.projects.stateByProjectId[u.projectId];
              }
              z._ensure = s;
              ((p) => {
                function u(m) {
                  let M = c.studio.ephemeral.projects.stateByProjectId._ensure(m);
                  return M.stateBySheetId[m.sheetId] || (M.stateBySheetId[m.sheetId] = { stateByObjectKey: {} }), M.stateBySheetId[m.sheetId];
                }
                p._ensure = u;
                ((w) => {
                  function m(H) {
                    var k;
                    let y = c.studio.ephemeral.projects.stateByProjectId.stateBySheetId._ensure(H).stateByObjectKey;
                    return y[k = H.objectKey] != null || (y[k] = {}), y[H.objectKey];
                  }
                  w._ensure = m;
                  ((k) => {
                    function H(F) {
                      let U = c.studio.ephemeral.projects.stateByProjectId.stateBySheetId.stateByObjectKey._ensure(F);
                      return U.valuesBeingScrubbed != null || (U.valuesBeingScrubbed = {}), U.valuesBeingScrubbed;
                    }
                    k._ensure = H;
                    function y(F) {
                      i6(H(F), F.pathToProp, true);
                    }
                    k.flag = y;
                  })(w.propsBeingScrubbed || (w.propsBeingScrubbed = {}));
                })(p.stateByObjectKey || (p.stateByObjectKey = {}));
              })(z.stateBySheetId || (z.stateBySheetId = {}));
            })(g.stateByProjectId || (g.stateByProjectId = {}));
          })(h.projects || (h.projects = {}));
        })(i5.ephemeral || (i5.ephemeral = {}));
        ((d) => {
          function o(z) {
            t0().ahistoric.pinOutline = z;
          }
          d.setPinOutline = o;
          function n(z) {
            t0().ahistoric.pinDetails = z;
          }
          d.setPinDetails = n;
          function h(z) {
            t0().ahistoric.pinNotifications = z;
          }
          d.setPinNotifications = h;
          function v(z) {
            t0().ahistoric.visibilityState = z;
          }
          d.setVisibilityState = v;
          function g(z) {
            let u = J6(z.map((m) => m.pathToProp)), f = z.map(({ keyframe: m, pathToProp: M }) => ({ keyframe: m, pathToProp: M.slice(u.length) })), p = t0();
            p.ahistoric.clipboard ? p.ahistoric.clipboard.keyframesWithRelativePaths = f : p.ahistoric.clipboard = { keyframesWithRelativePaths: f };
          }
          d.setClipboardKeyframes = g;
          ((u) => {
            ((M) => {
              function f(w) {
                let H = t0().ahistoric;
                return H.projects.stateByProjectId[w.projectId] || (H.projects.stateByProjectId[w.projectId] = { stateBySheetId: {} }), H.projects.stateByProjectId[w.projectId];
              }
              M._ensure = f;
              ((y) => {
                function w(k) {
                  let F = c.studio.ahistoric.projects.stateByProjectId._ensure(k);
                  return F.collapsedItemsInOutline || (F.collapsedItemsInOutline = {}), F.collapsedItemsInOutline;
                }
                y._ensure = w;
                function H(k) {
                  let F = c.studio.ahistoric.projects.stateByProjectId.collapsedItemsInOutline._ensure(k);
                  k.isCollapsed ? F[k.itemKey] = true : delete F[k.itemKey];
                }
                y.set = H;
              })(M.collapsedItemsInOutline || (M.collapsedItemsInOutline = {}));
              ((y) => {
                function w(k) {
                  let F = c.studio.ahistoric.projects.stateByProjectId._ensure(k);
                  return F.stateBySheetId[k.sheetId] || (F.stateBySheetId[k.sheetId] = {}), F.stateBySheetId[k.sheetId];
                }
                y._ensure = w;
                ((P) => {
                  function k(C) {
                    let E = c.studio.ahistoric.projects.stateByProjectId.stateBySheetId._ensure(C);
                    return E.sequence || (E.sequence = {}), E.sequence;
                  }
                  P._ensure = k;
                  ((a1) => {
                    function C(j) {
                      c.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence._ensure(j).focusRange = { range: j.range, enabled: j.enabled };
                    }
                    a1.set = C;
                    function E(j) {
                      c.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence._ensure(j).focusRange = void 0;
                    }
                    a1.unset = E;
                  })(P.focusRange || (P.focusRange = {}));
                  ((E) => {
                    function C(a1) {
                      c.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence._ensure(a1).clippedSpaceRange = S({}, a1.range);
                    }
                    E.set = C;
                  })(P.clippedSpaceRange || (P.clippedSpaceRange = {}));
                  ((a1) => {
                    function C(j) {
                      let K = c.studio.ahistoric.projects.stateByProjectId.stateBySheetId.sequence._ensure(j), Z = K.collapsableItems;
                      return Z || (Z = K.collapsableItems = O3.create()), Z;
                    }
                    function E(j) {
                      let K = C(j);
                      Object.assign(K, O3.add(K, j.studioSheetItemKey, { isCollapsed: j.isCollapsed }));
                    }
                    a1.set = E;
                  })(P.sequenceEditorCollapsableItems || (P.sequenceEditorCollapsableItems = {}));
                })(y.sequence || (y.sequence = {}));
              })(M.stateBySheetId || (M.stateBySheetId = {}));
            })(u.stateByProjectId || (u.stateByProjectId = {}));
          })(d.projects || (d.projects = {}));
        })(i5.ahistoric || (i5.ahistoric = {}));
      })(c.studio || (c.studio = {}));
      ((e) => {
        ((o) => {
          ((h) => {
            function n(v) {
              let g = t0().historic.coreByProject[v.projectId].revisionHistory, s = 50;
              g.unshift(v.revision), g.length > s && (g.length = s);
            }
            h.add = n;
          })(o.revisionHistory || (o.revisionHistory = {}));
          ((d) => {
            function n(z) {
              let u = t0().historic.coreByProject[z.projectId].sheetsById;
              return u[z.sheetId] || (u[z.sheetId] = { staticOverrides: { byObject: {} } }), u[z.sheetId];
            }
            d._ensure = n;
            function h(z) {
              let u = t0().historic.coreByProject[z.projectId].sheetsById[z.sheetId];
              if (!u) return;
              delete u.staticOverrides.byObject[z.objectKey];
              let f = u.sequence;
              f && delete f.tracksByObject[z.objectKey];
            }
            d.forgetObject = h;
            function v(z) {
              t0().historic.coreByProject[z.projectId].sheetsById[z.sheetId] && delete t0().historic.coreByProject[z.projectId].sheetsById[z.sheetId];
            }
            d.forgetSheet = v;
            ((j) => {
              function z(K) {
                let Z = c.coreByProject.historic.sheetsById._ensure(K);
                return Z.sequence != null || (Z.sequence = { subUnitsPerUnit: 30, length: 10, type: "PositionalSequence", tracksByObject: {} }), Z.sequence;
              }
              j._ensure = z;
              function u(K) {
                z(K).length = b1(parseFloat(K.length.toFixed(2)), 0.01, 1 / 0);
              }
              j.setLength = u;
              function f(K) {
                z(K).subUnitsPerUnit = b1(K.subUnitsPerUnit, 1, vv(2, 12));
              }
              j.setSubUnitsPerUnit = f;
              function p(K) {
                var J;
                let Z = c.coreByProject.historic.sheetsById.sequence._ensure(K).tracksByObject;
                return Z[J = K.objectKey] != null || (Z[J] = { trackData: {}, trackIdByPropPath: {} }), Z[K.objectKey];
              }
              function m(K, Z) {
                let J = p(K), W = h3(K.pathToProp);
                if (typeof J.trackIdByPropPath[W] == "string") return;
                let g1 = HF(), X = { type: "BasicKeyframedTrack", __debugName: "".concat(K.objectKey, ":").concat(W), keyframes: [] };
                J.trackData[g1] = X, J.trackIdByPropPath[W] = g1;
              }
              j.setPrimitivePropAsSequenced = m;
              function M(K) {
                let Z = p(K), J = h3(K.pathToProp), W = Z.trackIdByPropPath[J];
                typeof W == "string" && (delete Z.trackIdByPropPath[J], delete Z.trackData[W], c.coreByProject.historic.sheetsById.staticOverrides.byObject.setValueOfPrimitiveProp(K));
              }
              j.setPrimitivePropAsStatic = M;
              function w(K) {
                let Z = p(K);
                for (let J of Object.keys(Z.trackIdByPropPath)) {
                  let W = JSON.parse(J);
                  if (K.pathToProp.every((g1, X) => W[X] === g1)) {
                    let g1 = Z.trackIdByPropPath[J];
                    if (typeof g1 != "string") continue;
                    delete Z.trackIdByPropPath[J], delete Z.trackData[g1];
                  }
                }
                c.coreByProject.historic.sheetsById.staticOverrides.byObject.setValueOfCompoundProp(K);
              }
              j.setCompoundPropAsStatic = w;
              function H(K) {
                return p(K).trackData[K.trackId];
              }
              function y(K) {
                let Z = H(K);
                if (Z) return Z.keyframes.find((J) => J.id === K.keyframeId);
              }
              function k(K) {
                let Z = K.snappingFunction(K.position), J = H(K);
                if (!J) return;
                let { keyframes: W } = J, _ = W.findIndex(($) => $.position === Z);
                if (_ !== -1) {
                  let $ = W[_];
                  $.value = K.value;
                  return;
                }
                let g1 = LL(W, ($) => $.position < Z);
                if (g1 === -1) {
                  W.unshift({ id: zu(), position: Z, connectedRight: true, handles: K.handles || [0.5, 1, 0.5, 0], type: K.type || "bezier", value: K.value });
                  return;
                }
                let X = W[g1];
                W.splice(g1 + 1, 0, { id: zu(), position: Z, connectedRight: X.connectedRight, handles: K.handles || [0.5, 1, 0.5, 0], type: K.type || "bezier", value: K.value });
              }
              j.setKeyframeAtPosition = k;
              function F(K) {
                let Z = H(K);
                if (!Z) return;
                let { keyframes: J } = Z, W = J.findIndex((_) => _.position === K.position);
                W !== -1 && J.splice(W, 1);
              }
              j.unsetKeyframeAtPosition = F;
              function U(K) {
                let Z = H(K);
                if (!Z) return;
                let _ = ae(Z.keyframes).filter((g1) => K.keyframeIds.includes(g1.id)).map((g1) => {
                  let X = g1.position, $ = K.snappingFunction(_j(X, K));
                  return D(S({}, g1), { position: $ });
                });
                a1(D(S({}, K), { keyframes: _ }));
              }
              j.transformKeyframes = U;
              function A(K) {
                let Z = H(K);
                Z && (Z.keyframes = Z.keyframes.map((J, W) => {
                  let _ = Z.keyframes[W - 1], g1 = K.keyframeIds.includes(J.id), X = K.keyframeIds.includes(_ == null ? void 0 : _.id);
                  return g1 && !X ? D(S({}, J), { handles: [J.handles[0], J.handles[1], K.handles[0], K.handles[1]] }) : g1 && X ? D(S({}, J), { handles: [K.handles[2], K.handles[3], K.handles[0], K.handles[1]] }) : X ? D(S({}, J), { handles: [K.handles[2], K.handles[3], J.handles[2], J.handles[3]] }) : J;
                }));
              }
              j.setTweenBetweenKeyframes = A;
              function P(K) {
                var J, W, _, g1, X, $, o1, u1;
                let Z = y(K);
                Z && (Z.handles = [(W = (J = K.end) == null ? void 0 : J[0]) != null ? W : Z.handles[0], (g1 = (_ = K.end) == null ? void 0 : _[1]) != null ? g1 : Z.handles[1], ($ = (X = K.start) == null ? void 0 : X[0]) != null ? $ : Z.handles[2], (u1 = (o1 = K.start) == null ? void 0 : o1[1]) != null ? u1 : Z.handles[3]]);
              }
              j.setHandlesForKeyframe = P;
              function C(K) {
                let Z = H(K);
                Z && (Z.keyframes = Z.keyframes.filter((J) => K.keyframeIds.indexOf(J.id) === -1));
              }
              j.deleteKeyframes = C;
              function E(K) {
                let Z = y(K);
                Z && (Z.type = K.keyframeType);
              }
              j.setKeyframeType = E;
              function a1(K) {
                let Z = H(K);
                if (!Z) return;
                let J = ae(Z.keyframes), W = K.keyframes.filter((o1) => !(typeof o1.value == "number" && !isFinite(o1.value) || !o1.handles.every((u1) => isFinite(u1)))).map((o1) => D(S({}, o1), { position: K.snappingFunction(o1.position) })), _ = Ma(W, "id"), g1 = J.filter((o1) => !_[o1.id]), X = Ma(g1, "position");
                W.forEach(({ position: o1 }) => {
                  let u1 = X[o1];
                  u1 && UL(g1, u1);
                });
                let $ = QL([...g1, ...W], "position");
                Z.keyframes = $;
              }
              j.replaceKeyframes = a1;
            })(d.sequence || (d.sequence = {}));
            ((u) => {
              ((w) => {
                function f(H) {
                  var k;
                  let y = c.coreByProject.historic.sheetsById._ensure(H).staticOverrides.byObject;
                  return y[k = H.objectKey] != null || (y[k] = {}), y[H.objectKey];
                }
                function p(H) {
                  let y = f(H);
                  i6(y, H.pathToProp, H.value);
                }
                w.setValueOfCompoundProp = p;
                function m(H) {
                  let y = f(H);
                  i6(y, H.pathToProp, H.value);
                }
                w.setValueOfPrimitiveProp = m;
                function M(H) {
                  let y = c.coreByProject.historic.sheetsById._ensure(H).staticOverrides.byObject[H.objectKey];
                  y && Kh(y, H.pathToProp);
                }
                w.unsetValueOfPrimitiveProp = M;
              })(u.byObject || (u.byObject = {}));
            })(d.staticOverrides || (d.staticOverrides = {}));
          })(o.sheetsById || (o.sheetsById = {}));
        })(e.historic || (e.historic = {}));
      })(c.coreByProject || (c.coreByProject = {}));
    })(af || (af = {}));
    function Ut() {
      let t2, a, c = new Promise((e, l) => {
        t2 = (i5) => {
          e(i5), r.status = "resolved";
        }, a = (i5) => {
          l(i5), r.status = "rejected";
        };
      }), r = { resolve: t2, reject: a, promise: c, status: "pending" };
      return r;
    }
    var tq = requireDist$2();
    function rf(t2) {
      let a = t2.getState(), c = new tq.Atom(a);
      return t2.subscribe(() => {
        let r = t2.getState();
        c.set(r), a = r;
      }), c;
    }
    Fv();
    function ef(t2) {
      var a, c = t2.Symbol;
      return typeof c == "function" ? c.observable ? a = c.observable : (a = c("observable"), c.observable = a) : a = "@@observable", a;
    }
    var Kt;
    typeof self != "undefined" ? Kt = self : typeof window != "undefined" ? Kt = window : typeof commonjsGlobal != "undefined" ? Kt = commonjsGlobal : Kt = module;
    var Ye1 = ef(Kt), lf = Ye1;
    var of = { INIT: "@@redux/INIT" };
    function ce(t2, a, c) {
      var r;
      if (typeof a == "function" && typeof c == "undefined" && (c = a, a = void 0), typeof c != "undefined") {
        if (typeof c != "function") throw new Error("Expected the enhancer to be a function.");
        return c(ce)(t2, a);
      }
      if (typeof t2 != "function") throw new Error("Expected the reducer to be a function.");
      var e = t2, l = a, i5 = [], o = i5, n = false;
      function h() {
        o === i5 && (o = i5.slice());
      }
      function v() {
        return l;
      }
      function g(u) {
        if (typeof u != "function") throw new Error("Expected listener to be a function.");
        var f = true;
        return h(), o.push(u), function() {
          if (f) {
            f = false, h();
            var m = o.indexOf(u);
            o.splice(m, 1);
          }
        };
      }
      function s(u) {
        if (!M8(u)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
        if (typeof u.type == "undefined") throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
        if (n) throw new Error("Reducers may not dispatch actions.");
        try {
          n = true, l = e(l, u);
        } finally {
          n = false;
        }
        for (var f = i5 = o, p = 0; p < f.length; p++) {
          var m = f[p];
          m();
        }
        return u;
      }
      function d(u) {
        if (typeof u != "function") throw new Error("Expected the nextReducer to be a function.");
        e = u, s({ type: of.INIT });
      }
      function z() {
        var u, f = g;
        return u = { subscribe: function(m) {
          if (typeof m != "object") throw new TypeError("Expected the observer to be an object.");
          function M() {
            m.next && m.next(v());
          }
          M();
          var w = f(M);
          return { unsubscribe: w };
        } }, u[lf] = function() {
          return this;
        }, u;
      }
      return s({ type: of.INIT }), r = { dispatch: s, subscribe: g, getState: v, replaceReducer: d }, r[lf] = z, r;
    }
    function re() {
      for (var t2 = arguments.length, a = Array(t2), c = 0; c < t2; c++) a[c] = arguments[c];
      return a.length === 0 ? function(r) {
        return r;
      } : a.length === 1 ? a[0] : a.reduce(function(r, e) {
        return function() {
          return r(e.apply(void 0, arguments));
        };
      });
    }
    function nf(t2) {
      let c = re(...[]);
      return ce(t2.rootReducer, void 0, c);
    }
    _r();
    Kv();
    var hf = /* @__PURE__ */ new WeakMap(), aq = (t2, a, c) => {
      let r = (n) => {
        t2.dispatch(u8.replacePersistentState(n));
      }, e = rq(c), l = () => t2.getState().$persistent;
      o();
      let i5 = () => {
        let n = l(), h = hf.get(t2);
        n !== h && (hf.set(t2, n), localStorage.setItem(e, JSON.stringify(n)));
      };
      t2.subscribe(pa(i5, 1e3)), window && window.addEventListener("beforeunload", i5);
      function o() {
        let n = localStorage.getItem(e);
        if (n) {
          let h, v = true;
          try {
            h = JSON.parse(n), v = false;
          } catch (g) {
            kt.warn("Could not parse Theatre's persisted state. This must be a bug. Please report it.");
          } finally {
            v || r(h), a();
          }
        } else a();
      }
    }, cq = (t2, a) => {
      let c = rq(a), r = t2.getState().$persistent;
      localStorage.removeItem(c), hf.set(t2, r);
    };
    function rq(t2) {
      return t2 + ".persistent";
    }
    yu();
    N5();
    D7();
    $v();
    de();
    rr();
    var ee = requireDist$2();
    H5();
    H2();
    Yp();
    function vf(t2) {
      if (typeof t2 == "boolean" || typeof t2 == "string" || typeof t2 == "number") return t2;
      if (M8(t2)) {
        let a = {}, c = false;
        for (let [r, e] of Object.entries(t2)) vf(e) !== void 0 && (a[r] = e, c = true);
        if (c) return a;
      } else return;
    }
    function eq(t2, a, c) {
      for (let [r, e] of Object.entries(t2.props)) if (e.type === "compound") eq(e, [...a, r], c);
      else {
        if (e.type === "enum") throw new Error("Not yet implemented");
        c(e, [...a, r]);
      }
    }
    function gf(t2, a, c) {
      return { set: (r, e) => {
        t2();
        let l = vf(e);
        if (typeof l == "undefined") return;
        let { root: i5, path: o } = (0, ee.getPointerParts)(r);
        if (c0(i5)) {
          let n = i5.template.getMapOfValidSequenceTracks_forStudio().getValue(), h = U9(i5.template.staticConfig, o);
          if (!h) throw new Error("Object ".concat(i5.address.objectKey, " does not have a prop at ").concat(JSON.stringify(o)));
          let v = (g, s, d) => {
            if (g == null) return;
            if (vf(s.deserializeAndSanitize(g)) === void 0) throw new Error("Invalid value ".concat(wh(g), " for object.props").concat(d.map((p) => "[".concat(JSON.stringify(p), "]")).join(""), " is invalid"));
            let u = D(S({}, i5.address), { pathToProp: d }), f = D3(n, d);
            if (typeof f == "string") {
              let p = i5.sheet.getSequence();
              p.position = p.closestGridPosition(p.position), a.coreByProject.historic.sheetsById.sequence.setKeyframeAtPosition(D(S({}, u), { trackId: f, position: p.position, value: g, snappingFunction: p.closestGridPosition, type: "bezier" }));
            } else a.coreByProject.historic.sheetsById.staticOverrides.byObject.setValueOfPrimitiveProp(D(S({}, u), { value: g }));
          };
          if (h.type === "compound") {
            let g = (0, ee.getPointerParts)(r).path, s = g.length;
            eq(h, g, (d, z) => {
              let u = z.slice(s), f = l3(l, u);
              if (typeof f != "undefined") v(f, d, z);
              else throw new Error("Property object.props".concat(z.map((p) => "[".concat(JSON.stringify(p), "]")).join(""), " is required but not provided"));
            });
          } else {
            if (h.type === "enum") throw new Error("Enums aren't implemented yet");
            v(l, h, o);
          }
        } else if (Sf(i5)) {
          let [n] = o;
          if (n === "subUnitsPerUnit") {
            if (typeof l != "number" || !fa(l) || l < 1) throw new Error("Value ".concat(l, " is not an integer, which is required for setting sequence prop ").concat(n));
            a.coreByProject.historic.sheetsById.sequence.setSubUnitsPerUnit(D(S({}, i5.address), { subUnitsPerUnit: l }));
          } else if (n === "length") {
            if (typeof l != "number" || l <= 1e-3) throw new Error("Value ".concat(l, " is not a positive number, which is required for setting sequence prop ").concat(n));
            a.coreByProject.historic.sheetsById.sequence.setLength(D(S({}, i5.address), { length: l }));
          } else throw new Error("Setting sequence prop ".concat(n, " is not supported"));
        } else throw new Error("Only setting props of SheetObject-s and sequences is supported in a transaction so far");
      }, unset: (r) => {
        t2();
        let { root: e, path: l } = (0, ee.getPointerParts)(r);
        if (c0(e)) {
          let i5 = e.template.getMapOfValidSequenceTracks_forStudio().getValue(), o = l3(e.template.getDefaultValues().getValue(), l), n = U9(e.template.staticConfig, l), h = (v, g) => {
            let s = D(S({}, e.address), { pathToProp: g }), d = D3(i5, g);
            typeof d == "string" ? a.coreByProject.historic.sheetsById.sequence.unsetKeyframeAtPosition(D(S({}, s), { trackId: d, position: e.sheet.getSequence().positionSnappedToGrid })) : n !== void 0 && a.coreByProject.historic.sheetsById.staticOverrides.byObject.unsetValueOfPrimitiveProp(s);
          };
          n.type === "compound" ? q5(o, (v, g) => {
            h(v, g);
          }, (0, ee.getPointerParts)(r).path) : h(o, l);
        } else throw new Error("Only setting props of SheetObject-s is supported in a transaction so far");
      }, get drafts() {
        return t2(), c;
      }, get stateEditors() {
        return a;
      } };
    }
    var le = class {
      constructor() {
        y1(this, "_reduxStore");
        y1(this, "_atom");
        y1(this, "atomP");
        this._reduxStore = nf({ rootReducer: Wj }), this._atom = rf(this._reduxStore), this.atomP = this._atom.pointer;
      }
      initialize(a) {
        let c = Ut();
        return a.usePersistentStorage === true ? aq(this._reduxStore, () => {
          this.tempTransaction(({ drafts: r }) => {
            r.ephemeral.initialised = true;
          }).commit(), c.resolve();
        }, a.persistenceKey) : (this.tempTransaction(({ drafts: r }) => {
          r.ephemeral.initialised = true;
        }).commit(), c.resolve()), c.promise;
      }
      getState() {
        return this._reduxStore.getState();
      }
      __experimental_clearPersistentStorage(a) {
        return cq(this._reduxStore, a), this.getState();
      }
      __dev_startHistoryFromScratch(a) {
        this._reduxStore.dispatch(u8.historic.startHistoryFromScratch(u8.reduceParts((c) => D(S({}, c), { historic: a }))));
      }
      tempTransaction(a) {
        let c = Dj(), r, e = c.push(u8.reduceParts((l) => {
          let i5 = { historic: tv(l.historic), ahistoric: tv(l.ahistoric), ephemeral: tv(l.ephemeral) }, o = true, n = () => {
            if (!o) throw new Error("You seem to have called the transaction api after studio.transaction() has finished running");
          }, h = cf(i5), v = gf(n, h, i5);
          try {
            return a(v), o = false, { historic: av(i5.historic), ahistoric: av(i5.ahistoric), ephemeral: av(i5.ephemeral) };
          } catch (g) {
            return r = g, l;
          } finally {
            cf(void 0);
          }
        }));
        if (this._reduxStore.dispatch(e), r) throw this._reduxStore.dispatch(c.discard()), r;
        return { commit: () => {
          this._reduxStore.dispatch(c.commit());
        }, discard: () => {
          this._reduxStore.dispatch(c.discard());
        } };
      }
      undo() {
        this._reduxStore.dispatch(u8.historic.undo());
      }
      redo() {
        this._reduxStore.dispatch(u8.historic.redo());
      }
      createContentOfSaveFile(a) {
        if (!this._reduxStore.getState().$persistent.historic.innerState.coreByProject[a]) throw new Error("Project ".concat(a, " has not been initialized."));
        let r = Jo();
        this.tempTransaction(({ stateEditors: i5 }) => {
          i5.coreByProject.historic.revisionHistory.add({ projectId: a, revision: r });
        }).commit();
        let e = this._reduxStore.getState().$persistent.historic.innerState.coreByProject[a];
        return S({}, e);
      }
    };
    var lq = requireDist$2();
    var W5 = class {
      constructor() {
        y1(this, "_values", {});
      }
      get(a, c) {
        if (this.has(a)) return this._values[a];
        {
          let r = c();
          return this._values[a] = r, r;
        }
      }
      has(a) {
        return this._values.hasOwnProperty(a);
      }
    };
    N5();
    C5();
    f1();
    H2();
    xh();
    var ie = class {
      constructor(a) {
        y1(this, "ui", { hide() {
          T().ui.hide();
        }, get isHidden() {
          return T().ui.isHidden;
        }, restore() {
          T().ui.restore();
        }, renderToolset(a2, c) {
          return T().ui.renderToolset(a2, c);
        } });
        y1(this, "_cache", new W5());
        y1(this, "__experimental", { __experimental_disblePlayPauseKeyboardShortcut() {
          gD();
        }, __experimental_enablePlayPauseKeyboardShortcut() {
          dD();
        }, __experimental_clearPersistentStorage(a2) {
          return T().clearPersistentStorage(a2);
        }, __experimental_createContentOfSaveFileTyped(a2) {
          return T().createContentOfSaveFile(a2);
        } });
      }
      initialize(a) {
        return T().initialize(a);
      }
      extend(a, c) {
        T().extend(a, c);
      }
      transaction(a) {
        return T().transaction(({ set: c, unset: r, stateEditors: e }) => a({ set: c, unset: r, __experimental_forgetObject: (o) => {
          if (!dv(o)) throw new Error("object in transactionApi.__experimental_forgetObject(object) must be the return type of sheet.object(...)");
          e.coreByProject.historic.sheetsById.forgetObject(o.address);
        }, __experimental_forgetSheet: (o) => {
          if (!gv(o)) throw new Error("sheet in transactionApi.__experimental_forgetSheet(sheet) must be the return type of project.sheet()");
          e.coreByProject.historic.sheetsById.forgetSheet(o.address);
        } }));
      }
      _getSelectionPrism() {
        return this._cache.get("_getSelectionPrism()", () => (0, lq.prism)(() => c3().filter((a) => a.type === "Theatre_SheetObject" || a.type === "Theatre_Sheet").map((a) => a.publicApi)));
      }
      _getSelection() {
        return this._getSelectionPrism().getValue();
      }
      setSelection(a) {
        let c = [...a].filter((r) => dv(r) || gv(r)).map((r) => T().corePrivateAPI(r));
        T().transaction(({ stateEditors: r }) => {
          r.studio.historic.panels.outline.selection.set(c);
        });
      }
      onSelectionChange(a) {
        let c = T();
        return this._getSelectionPrism().onChange(c.ticker, a, true);
      }
      get selection() {
        return this._getSelection();
      }
      scrub() {
        return T().scrub();
      }
      getStudioProject() {
        let a = T().core;
        if (!a) throw new Error("You're calling studio.getStudioProject() before `@theatre/core` is loaded. To fix this:\n1. Check if `@theatre/core` is import/required in your bundle.\n2. Check the stack trace of this error and make sure the funciton that calls getStudioProject() is run after `@theatre/core` is loaded.");
        return T().getStudioProject(a);
      }
      debouncedScrub(a = 1e3) {
        let c, r = pa(() => {
          let l = c;
          l && (c = void 0, l.commit());
        }, a);
        return { capture: (l) => {
          c || (c = this.scrub());
          let i5 = true;
          try {
            c.capture(l), i5 = false;
          } finally {
            if (i5) {
              let o = c;
              c = void 0, o.discard();
            } else r();
          }
        } };
      }
      createPane(a) {
        return T().paneManager.createPane(a);
      }
      destroyPane(a) {
        return T().paneManager.destroyPane(a);
      }
      createContentOfSaveFile(a) {
        return T().createContentOfSaveFile(a);
      }
    };
    su();
    var _5 = requireDist$2();
    var oe = class {
      constructor(a) {
        this._studio = a;
        y1(this, "_cache", new W5());
        this._instantiatePanesAsTheyComeIn();
      }
      _instantiatePanesAsTheyComeIn() {
        let a = this._getAllPanes();
        a.onStale(() => {
          a.getValue();
        });
      }
      _getAllPanes() {
        return this._cache.get("_getAllPanels()", () => (0, _5.prism)(() => {
          if (!(0, _5.val)(this._studio.coreP)) return {};
          let c = (0, _5.val)(this._studio.atomP.historic.panelInstanceDesceriptors), r = (0, _5.val)(this._studio.atomP.ephemeral.extensions.paneClasses), e = {};
          for (let l of Object.values(c)) {
            if (!l) continue;
            let i5 = r[l.paneClass];
            if (!i5) continue;
            let { instanceId: o } = l, { extensionId: n, classDefinition: h } = i5, v = _5.prism.memo("instance-".concat(l.instanceId), () => ({ extensionId: n, instanceId: o, definition: h }), [h]);
            e[o] = v;
          }
          return e;
        }));
      }
      get allPanesD() {
        return this._getAllPanes();
      }
      createPane(a) {
        if (!this._studio.core) throw new Error("Can't create a pane because @theatre/core is not yet loaded");
        let r = (0, _5.val)(this._studio.atomP.ephemeral.extensions.paneClasses[a].extensionId), e = (0, _5.val)(this._studio.atomP.historic.panelInstanceDesceriptors), l;
        for (let i5 = 1; i5 < 1e3 && (l = "".concat(a, " #").concat(i5), !!e[l]); i5++) ;
        if (!r) throw new Error('Pane class "'.concat(a, '" is not registered.'));
        return this._studio.transaction(({ drafts: i5 }) => {
          i5.historic.panelInstanceDesceriptors[l] = { instanceId: l, paneClass: a };
        }), this._getAllPanes().getValue()[l];
      }
      destroyPane(a) {
        if (!this._studio.core) throw new Error("Can't do this yet because @theatre/core is not yet loaded");
        this._studio.transaction(({ drafts: r }) => {
          delete r.historic.panelInstanceDesceriptors[a];
        });
      }
    };
    var $t = requireDist$2();
    f1();
    var iq = 30 * 60 * 1e3, Je1 = 1e3 * 60 * 60;
    function tl1() {
      return e2(this, null, function* () {
        let t2 = T().atomP.ahistoric.visibilityState;
        if ((0, $t.val)(t2) === "everythingIsVisible") return;
        let a = Ut(), c = (0, $t.pointerToPrism)(t2).onStale(() => {
          (0, $t.val)(t2) === "everythingIsVisible" && (c(), a.resolve(void 0));
        });
        return a.promise;
      });
    }
    function df() {
      return e2(this, null, function* () {
        if (!"0.7.2".match(/COMPAT/)) for (yield cv(500), yield tl1(); ; ) {
          let t2 = (0, $t.val)(T().atomP.ahistoric.updateChecker);
          if (t2 && t2.result !== "error") {
            let a = t2.lastChecked, c = Date.now(), r = Math.abs(c - a);
            r < iq && (yield cv(iq - r));
          }
          try {
            let a = yield fetch(new Request("https://updates.theatrejs.com/updates/0.7.2"));
            if (a.ok) {
              let c = yield a.json();
              if (!al1(c)) throw new Error("Bad response");
              T().transaction(({ drafts: r }) => {
                r.ahistoric.updateChecker = { lastChecked: Date.now(), result: S({}, c) };
              }), yield cv(1e3);
            } else throw new Error("HTTP Error ".concat(a.statusText));
          } catch (a) {
            yield cv(Je1);
          }
        }
      });
    }
    var cv = (t2) => new Promise((a) => setTimeout(a, t2));
    function al1(t2) {
      if (typeof t2 != "object") return false;
      let a = t2;
      return typeof a.hasUpdates != "boolean" ? false : a.hasUpdates === true && typeof a.newVersion == "string" && typeof a.releasePage == "string" || a.hasUpdates === false;
    }
    var pq = I(fs());
    function j5(t2) {
      return new Promise((a, c) => {
        t2.oncomplete = t2.onsuccess = () => a(t2.result), t2.onabort = t2.onerror = () => c(t2.error);
      });
    }
    function zf(t2, a) {
      let c = indexedDB.open(t2);
      c.onupgradeneeded = () => c.result.createObjectStore(a);
      let r = j5(c);
      return (e, l) => r.then((i5) => l(i5.transaction(a, e).objectStore(a)));
    }
    var sf;
    function Qt() {
      return sf || (sf = zf("keyval-store", "keyval")), sf;
    }
    function oq(t2, a = Qt()) {
      return a("readonly", (c) => j5(c.get(t2)));
    }
    function nq(t2, a, c = Qt()) {
      return c("readwrite", (r) => (r.put(a, t2), j5(r.transaction)));
    }
    function hq(t2, a = Qt()) {
      return a("readwrite", (c) => (c.delete(t2), j5(c.transaction)));
    }
    function uf(t2, a) {
      return t2.openCursor().onsuccess = function() {
        this.result && (a(this.result), this.result.continue());
      }, j5(t2.transaction);
    }
    function vq(t2 = Qt()) {
      return t2("readonly", (a) => {
        if (a.getAllKeys) return j5(a.getAllKeys());
        let c = [];
        return uf(a, (r) => c.push(r.key)).then(() => c);
      });
    }
    function gq(t2 = Qt()) {
      return t2("readonly", (a) => {
        if (a.getAll) return j5(a.getAll());
        let c = [];
        return uf(a, (r) => c.push(r.value)).then(() => c);
      });
    }
    function dq(t2 = Qt()) {
      return t2("readonly", (a) => {
        if (a.getAll && a.getAllKeys) return Promise.all([j5(a.getAllKeys()), j5(a.getAll())]).then(([r, e]) => r.map((l, i5) => [l, e[i5]]));
        let c = [];
        return t2("readonly", (r) => uf(r, (e) => c.push([e.key, e.value])).then(() => c));
      });
    }
    var sq = (t2) => {
      let a = zf("theatrejs-".concat(t2), "default-store");
      return { set: (c, r) => nq(c, r, a), get: (c) => oq(c, a), del: (c) => hq(c, a), keys: () => vq(a), entries: () => dq(a), values: () => gq(a) };
    };
    Gu();
    vt();
    var uq = "theatre-0.4", rl1 = "You seem to have imported '@theatre/studio' but haven't initialized it. You can initialize the studio by:\n```\nimport studio from '@theatre/studio'\nstudio.initialize()\n```\n\n* If you didn't mean to import '@theatre/studio', this means that your bundler is not tree-shaking it. This is most likely a bundler misconfiguration.\n\n* If you meant to import '@theatre/studio' without showing its UI, you can do that by running:\n\n```\nimport studio from '@theatre/studio'\nstudio.initialize()\nstudio.ui.hide()\n```\n", el1 = "You seem to have imported '@theatre/studio' but called `studio.initialize()` after some delay.\nTheatre.js projects remain in pending mode (won't play their sequences) until the studio is initialized, so you should place the `studio.initialize()` line right after the import line:\n\n```\nimport studio from '@theatre/studio'\n// ... and other imports\n\nstudio.initialize()\n```\n", ev = class {
      constructor() {
        y1(this, "ui");
        y1(this, "publicApi");
        y1(this, "address");
        y1(this, "_projectsProxy", new C7.PointerProxy(new C7.Atom({}).pointer));
        y1(this, "projectsP", this._projectsProxy.pointer);
        y1(this, "_store", new le());
        y1(this, "_corePrivateApi");
        y1(this, "_cache", new W5());
        y1(this, "paneManager");
        y1(this, "_coreAtom", new C7.Atom({}));
        y1(this, "_initializedDeferred", Ut());
        y1(this, "_initializeFnCalled", false);
        y1(this, "_didWarnAboutNotInitializing", false);
        y1(this, "_coreBits");
        y1(this, "_rafDriver");
        this.address = { studioId: J9(10) }, this.publicApi = new ie(this), this.ui = new Ur(this), this._attachToIncomingProjects(), this.paneManager = new oe(this), typeof window != "undefined" && setTimeout(() => {
          this._initializeFnCalled || (console.error(rl1), this._didWarnAboutNotInitializing = true);
        }, 100);
      }
      get ticker() {
        if (!this._rafDriver) throw new Error("`studio.ticker` was read before studio.initialize() was called.");
        return this._rafDriver.ticker;
      }
      get atomP() {
        return this._store.atomP;
      }
      initialize(a) {
        return e2(this, null, function* () {
          if (!this._coreBits) throw new Error("You seem to have imported `@theatre/studio` without importing `@theatre/core`. Make sure to include an import of `@theatre/core` before calling `studio.initializer()`.");
          if (this._initializeFnCalled) return this._initializedDeferred.promise;
          this._initializeFnCalled = true, this._didWarnAboutNotInitializing && console.warn(el1);
          let c = { persistenceKey: uq, usePersistentStorage: true };
          if (typeof (a == null ? void 0 : a.persistenceKey) == "string" && (c.persistenceKey = a.persistenceKey), ((a == null ? void 0 : a.usePersistentStorage) === false || typeof window == "undefined") && (c.usePersistentStorage = false), a != null && a.__experimental_rafDriver) {
            if (a.__experimental_rafDriver.type !== "Theatre_RafDriver_PublicAPI") throw new Error("parameter `rafDriver` in `studio.initialize({__experimental_rafDriver})` must be either be undefined, or the return type of core.createRafDriver()");
            let r = this._coreBits.privateAPI(a.__experimental_rafDriver);
            if (!r) throw new Error("parameter `rafDriver` in `studio.initialize({__experimental_rafDriver})` seems to come from a different version of `@theatre/core` than the version that is attached to `@theatre/studio`");
            this._rafDriver = r;
          } else this._rafDriver = this._coreBits.getCoreRafDriver();
          try {
            yield this._store.initialize(c);
          } catch (r) {
            this._initializedDeferred.reject(r);
            return;
          }
          typeof window != "undefined" && (yield this.ui.ready), this._initializedDeferred.resolve(), this.ui.render(), df().catch((r) => {
            console.error(r);
          });
        });
      }
      get initialized() {
        return this._initializedDeferred.promise;
      }
      _attachToIncomingProjects() {
        let a = (0, C7.pointerToPrism)(this.projectsP), c = (r) => {
          for (let e of Object.values(r)) e.isAttachedToStudio || e.attachToStudio(this);
        };
        a.onStale(() => {
          c(a.getValue());
        }), c(a.getValue());
      }
      setCoreBits(a) {
        this._coreBits = a, this._corePrivateApi = a.privateAPI, this._coreAtom.setByPointer((c) => c.core, a.coreExports), this._setProjectsP(a.projectsP);
      }
      _setProjectsP(a) {
        this._projectsProxy.setPointer(a);
      }
      scrub() {
        return new Jt(this);
      }
      tempTransaction(a) {
        return this._store.tempTransaction(a);
      }
      transaction(a) {
        return this.tempTransaction(a).commit();
      }
      __dev_startHistoryFromScratch(a) {
        return this._store.__dev_startHistoryFromScratch(a);
      }
      get corePrivateAPI() {
        return this._corePrivateApi;
      }
      get core() {
        return this._coreAtom.get().core;
      }
      get coreP() {
        return this._coreAtom.pointer.core;
      }
      extend(a, c) {
        if (!a || typeof a != "object") throw new Error("Extensions must be JS objects");
        if (typeof a.id != "string") throw new Error("extension.id must be a string");
        let r = (c == null ? void 0 : c.__experimental_reconfigure) === true, e = a.id, l = this._store.getState().ephemeral.extensions.byId[e];
        if (l && !r) {
          if (a === l || (0, pq.default)(a, l)) return;
          throw new Error('Extension id "'.concat(a.id, '" is already defined. If you mean to re-configure the extension, do it like this: studio.extend(extension, {__experimental_reconfigure: true})})'));
        }
        this.transaction(({ drafts: i5 }) => {
          var n, h;
          i5.ephemeral.extensions.byId[a.id] = a;
          let o = i5.ephemeral.extensions.paneClasses;
          r && l && ((n = l.panes) == null || n.forEach((v) => {
            delete o[v.class];
          })), (h = a.panes) == null || h.forEach((v) => {
            if (typeof v.class != "string") throw new Error("pane.class must be a string");
            if (v.class.length < 3) throw new Error("pane.class should be a string with 3 or more characters");
            let g = o[v.class];
            if (g) if (r && g.extensionId === a.id) console.warn('Pane class "'.concat(v.class, '" already exists. This is a bug in Theatre.js. Please report it at https://github.com/theatre-js/theatre/issues/new'));
            else throw new Error('Pane class "'.concat(v.class, '" already exists and is supplied by extension ').concat(g));
            o[v.class] = { extensionId: a.id, classDefinition: v };
          });
        });
      }
      getStudioProject(a) {
        return this._cache.get("getStudioProject", () => a.getProject("Studio"));
      }
      getExtensionSheet(a, c) {
        return this._cache.get("extensionSheet-" + a, () => this.getStudioProject(c).sheet("Extension " + a));
      }
      undo() {
        this._store.undo();
      }
      redo() {
        this._store.redo();
      }
      createContentOfSaveFile(a) {
        return this._store.createContentOfSaveFile(a);
      }
      createAssetStorage(a, c) {
        return e2(this, null, function* () {
          if (typeof window == "undefined") return { getAssetUrl: () => "", createAsset: () => Promise.resolve(null) };
          if (!("indexedDB" in window)) return console.log("This browser doesn't support IndexedDB."), { getAssetUrl: (v) => {
            throw new Error("IndexedDB is required by the default asset manager, but it's not supported by this browser. To use assets, please provide your own asset manager to the project config.");
          }, createAsset: (v) => {
            throw new Error("IndexedDB is required by the default asset manager, but it's not supported by this browser. To use assets, please provide your own asset manager to the project config.");
          } };
          let r = sq("".concat(a.address.projectId, "-assets")), e = pr(a), l = yield r.keys();
          yield Promise.all(l.map((v) => e2(this, null, function* () {
            e.includes(v) || (yield r.del(v));
          }))), yield Promise.all(l.map((v) => e2(this, null, function* () {
            var s, d;
            let g = "".concat(c, "/").concat(v);
            try {
              (yield fetch(g, { method: "HEAD" })).ok && (yield r.del(v));
            } catch (z) {
              c7.error("Failed to access assets", "Failed to access assets at ".concat((d = (s = a.config.assets) == null ? void 0 : s.baseUrl) != null ? d : "/", ". This is likely due to a CORS issue."));
            }
          })));
          let i5 = new Map(yield r.entries()), o = /* @__PURE__ */ new Map(), n = (v) => {
            if (o.has(v)) return o.get(v);
            {
              let g = URL.createObjectURL(v);
              return o.set(v, g), g;
            }
          }, h = (v) => {
            let g = i5.get(v);
            if (!g) throw new Error("Asset with id ".concat(v, " not found"));
            return n(g);
          };
          return { getAssetUrl: (v) => i5.has(v) ? h(v) : "".concat(c, "/").concat(v), createAsset: (v) => e2(this, null, function* () {
            var d, z, u;
            let g = pr(a), s = false;
            if (g.includes(v.name)) {
              let f;
              try {
                f = (d = i5.get(v.name)) != null ? d : yield fetch("".concat(c, "/").concat(v.name)).then((p) => p.ok ? p.blob() : void 0);
              } catch (p) {
                return c7.error("Failed to access assets", "Failed to access assets at ".concat((u = (z = a.config.assets) == null ? void 0 : z.baseUrl) != null ? u : "/", ". This is likely due to a CORS issue.")), Promise.resolve(null);
              }
              if (f) {
                if (s = yield (yield Promise.resolve().then(() => I(zq()))).default.isEqual(v, f), s) return v.name;
                {
                  let m = (w) => {
                    let H = prompt(w, v.name);
                    return H === null ? false : H === "" ? m("Asset name cannot be empty. Please choose a different file name for this asset.") : g.includes(H) ? (console.log(g), m("An asset with this name already exists. Please choose a different file name for this asset.")) : (v = new File([v], H, { type: v.type }), true);
                  };
                  if (!m("An asset with this name already exists. Please choose a different file name for this asset.")) return null;
                }
              }
            }
            return i5.set(v.name, v), yield r.set(v.name, v), v.name;
          }) };
        });
      }
      clearPersistentStorage(a = uq) {
        this._store.__experimental_clearPersistentStorage(a);
      }
    };
    var lv = "__TheatreJS_StudioBundle", mq = "__TheatreJS_CoreBundle", fq = "__TheatreJS_Notifications";
    var ne = class {
      constructor(a) {
        this._studio = a;
        y1(this, "_coreBundle");
      }
      get type() {
        return "Theatre_StudioBundle";
      }
      registerCoreBundle(a) {
        if (this._coreBundle) throw new Error("StudioBundle.coreBundle is already registered. This is a bug.");
        this._coreBundle = a;
        let c;
        a.getBitsForStudio(this._studio, (r) => {
          c = r;
        }), this._studio.setCoreBits(c);
      }
    };
    var xq = I(G());
    c1();
    var Mq, il1 = B.div(Mq || (Mq = V([""]))), ol1 = (t2) => xq.default.createElement(il1, null), Cq = ol1;
    vt();
    var mf = new ev();
    Bf(mf);
    var nl1 = mf.publicApi, hl1 = nl1;
    vl1();
    function vl1() {
      if (typeof window == "undefined") return;
      let t2 = window[lv];
      if (typeof t2 != "undefined") throw typeof t2 == "object" && t2 && typeof t2.version == "string" ? new Error("It seems that the module '@theatre/studio' is loaded more than once. This could have two possible causes:\n1. You might have two separate versions of Theatre.js in node_modules.\n2. Or this might be a bundling misconfiguration, in case you're using a bundler like Webpack/ESBuild/Rollup.\n\nNote that it **is okay** to import '@theatre/studio' multiple times. But those imports should point to the same module.") : new Error("The variable window.".concat(lv, " seems to be already set by a module other than @theatre/core."));
      let a = new ne(mf);
      window[lv] = a;
      let c = window[mq];
      c && c !== null && c.type === "Theatre_CoreBundle" && a.registerCoreBundle(c);
    }
    typeof window != "undefined" && (window[fq] = { notify: c7 });
    /*! Bundled license information:
    
    		lodash-es/lodash.js:
    		  (**
    		   * @license
    		   * Lodash (Custom Build) <https://lodash.com/>
    		   * Build: `lodash modularize exports="es" -o ./`
    		   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
    		   * Released under MIT license <https://lodash.com/license>
    		   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
    		   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    		   *)
    
    		queue-microtask/index.js:
    		  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
    
    		react/cjs/react.production.min.js:
    		  (**
    		   * @license React
    		   * react.production.min.js
    		   *
    		   * Copyright (c) Facebook, Inc. and its affiliates.
    		   *
    		   * This source code is licensed under the MIT license found in the
    		   * LICENSE file in the root directory of this source tree.
    		   *)
    
    		scheduler/cjs/scheduler.production.min.js:
    		  (**
    		   * @license React
    		   * scheduler.production.min.js
    		   *
    		   * Copyright (c) Facebook, Inc. and its affiliates.
    		   *
    		   * This source code is licensed under the MIT license found in the
    		   * LICENSE file in the root directory of this source tree.
    		   *)
    
    		react-dom/cjs/react-dom.production.min.js:
    		  (**
    		   * @license React
    		   * react-dom.production.min.js
    		   *
    		   * Copyright (c) Facebook, Inc. and its affiliates.
    		   *
    		   * This source code is licensed under the MIT license found in the
    		   * LICENSE file in the root directory of this source tree.
    		   *)
    
    		react-is/cjs/react-is.production.min.js:
    		  (** @license React v17.0.2
    		   * react-is.production.min.js
    		   *
    		   * Copyright (c) Facebook, Inc. and its affiliates.
    		   *
    		   * This source code is licensed under the MIT license found in the
    		   * LICENSE file in the root directory of this source tree.
    		   *)
    
    		react-is/cjs/react-is.production.min.js:
    		  (** @license React v16.13.1
    		   * react-is.production.min.js
    		   *
    		   * Copyright (c) Facebook, Inc. and its affiliates.
    		   *
    		   * This source code is licensed under the MIT license found in the
    		   * LICENSE file in the root directory of this source tree.
    		   *)
    
    		jszip/dist/jszip.min.js:
    		  (*!
    		  
    		  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
    		  <http://stuartk.com/jszip>
    		  
    		  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
    		  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
    		  
    		  JSZip uses the library pako released under the MIT license :
    		  https://github.com/nodeca/pako/blob/main/LICENSE
    		  *)
    
    		jiff/lib/lcs.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/lib/array.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/lib/jsonPointerParse.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/lib/jsonPointer.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/lib/clone.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/lib/jsonPatch.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    
    		jiff/jiff.js:
    		  (** @license MIT License (c) copyright 2010-2014 original author or authors *)
    		*/
  })(dist$2, dist$2.exports);
  return dist$2.exports;
}
var distExports$1 = /* @__PURE__ */ requireDist$1();
const studio = /* @__PURE__ */ getDefaultExportFromCjs(distExports$1);
var dist = { exports: {} };
dist.exports;
var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist) return dist.exports;
  hasRequiredDist = 1;
  (function(module, exports) {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a2, b2) => {
      for (var prop in b2 || (b2 = {}))
        if (__hasOwnProp.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b2)) {
          if (__propIsEnum.call(b2, prop))
            __defNormalProp(a2, prop, b2[prop]);
        }
      return a2;
    };
    var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    var require_UnitBezier = __commonJS({
      "../node_modules/timing-function/lib/UnitBezier.js"(exports2, module2) {
        module2.exports = function() {
          function UnitBezier3(p1x, p1y, p2x, p2y) {
            this.set(p1x, p1y, p2x, p2y);
          }
          UnitBezier3.prototype.set = function(p1x, p1y, p2x, p2y) {
            this._cx = 3 * p1x;
            this._bx = 3 * (p2x - p1x) - this._cx;
            this._ax = 1 - this._cx - this._bx;
            this._cy = 3 * p1y;
            this._by = 3 * (p2y - p1y) - this._cy;
            this._ay = 1 - this._cy - this._by;
          };
          UnitBezier3.epsilon = 1e-6;
          UnitBezier3.prototype._sampleCurveX = function(t22) {
            return ((this._ax * t22 + this._bx) * t22 + this._cx) * t22;
          };
          UnitBezier3.prototype._sampleCurveY = function(t22) {
            return ((this._ay * t22 + this._by) * t22 + this._cy) * t22;
          };
          UnitBezier3.prototype._sampleCurveDerivativeX = function(t22) {
            return (3 * this._ax * t22 + 2 * this._bx) * t22 + this._cx;
          };
          UnitBezier3.prototype._solveCurveX = function(x2, epsilon) {
            var d2, i22, t0, t1, t22, x22;
            t0 = void 0;
            t1 = void 0;
            t22 = void 0;
            x22 = void 0;
            d2 = void 0;
            i22 = void 0;
            t22 = x2;
            i22 = 0;
            while (i22 < 8) {
              x22 = this._sampleCurveX(t22) - x2;
              if (Math.abs(x22) < epsilon) {
                return t22;
              }
              d2 = this._sampleCurveDerivativeX(t22);
              if (Math.abs(d2) < epsilon) {
                break;
              }
              t22 = t22 - x22 / d2;
              i22++;
            }
            t0 = 0;
            t1 = 1;
            t22 = x2;
            if (t22 < t0) {
              return t0;
            }
            if (t22 > t1) {
              return t1;
            }
            while (t0 < t1) {
              x22 = this._sampleCurveX(t22);
              if (Math.abs(x22 - x2) < epsilon) {
                return t22;
              }
              if (x2 > x22) {
                t0 = t22;
              } else {
                t1 = t22;
              }
              t22 = (t1 - t0) * 0.5 + t0;
            }
            return t22;
          };
          UnitBezier3.prototype.solve = function(x2, epsilon) {
            return this._sampleCurveY(this._solveCurveX(x2, epsilon));
          };
          UnitBezier3.prototype.solveSimple = function(x2) {
            return this._sampleCurveY(this._solveCurveX(x2, 1e-6));
          };
          return UnitBezier3;
        }();
      }
    });
    var require_levenshtein_edit_distance = __commonJS({
      "../node_modules/levenshtein-edit-distance/index.js"(exports2, module2) {
        var cache2;
        var codes;
        cache2 = [];
        codes = [];
        function levenshtein(value, other, insensitive) {
          var length, lengthOther, code, result, distance, distanceOther, index, indexOther;
          if (value === other) {
            return 0;
          }
          length = value.length;
          lengthOther = other.length;
          if (length === 0) {
            return lengthOther;
          }
          if (lengthOther === 0) {
            return length;
          }
          if (insensitive) {
            value = value.toLowerCase();
            other = other.toLowerCase();
          }
          index = 0;
          while (index < length) {
            codes[index] = value.charCodeAt(index);
            cache2[index] = ++index;
          }
          indexOther = 0;
          while (indexOther < lengthOther) {
            code = other.charCodeAt(indexOther);
            result = distance = indexOther++;
            index = -1;
            while (++index < length) {
              distanceOther = code === codes[index] ? distance : distance + 1;
              distance = cache2[index];
              cache2[index] = result = distance > result ? distanceOther > result ? result + 1 : distanceOther : distanceOther > distance ? distance + 1 : distanceOther;
            }
          }
          return result;
        }
        module2.exports = levenshtein;
      }
    });
    var require_propose = __commonJS({
      "../node_modules/propose/propose.js"(exports2, module2) {
        var levenshtein = require_levenshtein_edit_distance();
        function propose2() {
          var ratio;
          var distance;
          var proposed;
          var threshold;
          var ignoreCase;
          var max_ratio = 0;
          var word = arguments[0];
          var dictionary = arguments[1];
          var len = dictionary.length;
          var options = arguments[2];
          if (options) {
            threshold = options.threshold;
            ignoreCase = options.ignoreCase;
          }
          if (threshold === void 0)
            threshold = 0;
          for (var i22 = 0; i22 < len; ++i22) {
            if (ignoreCase)
              distance = levenshtein(word, dictionary[i22], true);
            else
              distance = levenshtein(word, dictionary[i22]);
            if (distance > word.length)
              ratio = 1 - distance / dictionary[i22].length;
            else
              ratio = 1 - distance / word.length;
            if (ratio > max_ratio) {
              max_ratio = ratio;
              proposed = dictionary[i22];
            }
          }
          if (max_ratio >= threshold)
            return proposed;
          return null;
        }
        module2.exports = propose2;
      }
    });
    var require_fast_deep_equal = __commonJS({
      "../node_modules/fast-deep-equal/index.js"(exports2, module2) {
        module2.exports = function equal(a2, b2) {
          if (a2 === b2)
            return true;
          if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
            if (a2.constructor !== b2.constructor)
              return false;
            var length, i22, keys2;
            if (Array.isArray(a2)) {
              length = a2.length;
              if (length != b2.length)
                return false;
              for (i22 = length; i22-- !== 0; )
                if (!equal(a2[i22], b2[i22]))
                  return false;
              return true;
            }
            if (a2.constructor === RegExp)
              return a2.source === b2.source && a2.flags === b2.flags;
            if (a2.valueOf !== Object.prototype.valueOf)
              return a2.valueOf() === b2.valueOf();
            if (a2.toString !== Object.prototype.toString)
              return a2.toString() === b2.toString();
            keys2 = Object.keys(a2);
            length = keys2.length;
            if (length !== Object.keys(b2).length)
              return false;
            for (i22 = length; i22-- !== 0; )
              if (!Object.prototype.hasOwnProperty.call(b2, keys2[i22]))
                return false;
            for (i22 = length; i22-- !== 0; ) {
              var key = keys2[i22];
              if (!equal(a2[key], b2[key]))
                return false;
            }
            return true;
          }
          return a2 !== a2 && b2 !== b2;
        };
      }
    });
    var src_exports = {};
    __export(src_exports, {
      createRafDriver: () => createRafDriver,
      getProject: () => getProject,
      notify: () => notify,
      onChange: () => onChange,
      types: () => propTypes_exports,
      val: () => val7
    });
    module.exports = __toCommonJS(src_exports);
    var coreExports_exports = {};
    __export(coreExports_exports, {
      createRafDriver: () => createRafDriver,
      getProject: () => getProject,
      notify: () => notify,
      onChange: () => onChange,
      types: () => propTypes_exports,
      val: () => val7
    });
    var import_dataverse = requireDist$2();
    var ProjectsSingleton = class {
      constructor() {
        __publicField(this, "atom", new import_dataverse.Atom({ projects: {} }));
      }
      /**
       * We're trusting here that each project id is unique
       */
      add(id, project2) {
        this.atom.setByPointer((p2) => p2.projects[id], project2);
      }
      get(id) {
        return this.atom.get().projects[id];
      }
      has(id) {
        return !!this.get(id);
      }
    };
    var singleton = new ProjectsSingleton();
    var projectsSingleton_default = singleton;
    var publicAPIToPrivateAPIMap = /* @__PURE__ */ new WeakMap();
    function privateAPI(pub) {
      return publicAPIToPrivateAPIMap.get(pub);
    }
    function setPrivateAPI(pub, priv) {
      publicAPIToPrivateAPIMap.set(pub, priv);
    }
    var emptyArray = [];
    var isArray = Array.isArray;
    var isArray_default = isArray;
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeGlobal_default = freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal_default || freeSelf || Function("return this")();
    var root_default = root;
    var Symbol2 = root_default.Symbol;
    var Symbol_default = Symbol2;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getRawTag_default = getRawTag;
    var objectProto2 = Object.prototype;
    var nativeObjectToString2 = objectProto2.toString;
    function objectToString(value) {
      return nativeObjectToString2.call(value);
    }
    var objectToString_default = objectToString;
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
    }
    var baseGetTag_default = baseGetTag;
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isObjectLike_default = isObjectLike;
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
    }
    var isSymbol_default = isSymbol;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray_default(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    var isKey_default = isKey;
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    var isObject_default = isObject2;
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject_default(value)) {
        return false;
      }
      var tag = baseGetTag_default(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_default = isFunction;
    var coreJsData = root_default["__core-js_shared__"];
    var coreJsData_default = coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var isMasked_default = isMasked;
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    var toSource_default = toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto2 = Function.prototype;
    var objectProto3 = Object.prototype;
    var funcToString2 = funcProto2.toString;
    var hasOwnProperty2 = objectProto3.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject_default(value) || isMasked_default(value)) {
        return false;
      }
      var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource_default(value));
    }
    var baseIsNative_default = baseIsNative;
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    var getValue_default = getValue;
    function getNative(object, key) {
      var value = getValue_default(object, key);
      return baseIsNative_default(value) ? value : void 0;
    }
    var getNative_default = getNative;
    var nativeCreate = getNative_default(Object, "create");
    var nativeCreate_default = nativeCreate;
    function hashClear() {
      this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
      this.size = 0;
    }
    var hashClear_default = hashClear;
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var hashDelete_default = hashDelete;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto4 = Object.prototype;
    var hasOwnProperty3 = objectProto4.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate_default) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    var hashGet_default = hashGet;
    var objectProto5 = Object.prototype;
    var hasOwnProperty4 = objectProto5.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
    }
    var hashHas_default = hashHas;
    var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
      return this;
    }
    var hashSet_default = hashSet;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear_default;
    Hash.prototype["delete"] = hashDelete_default;
    Hash.prototype.get = hashGet_default;
    Hash.prototype.has = hashHas_default;
    Hash.prototype.set = hashSet_default;
    var Hash_default = Hash;
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    var listCacheClear_default = listCacheClear;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var eq_default = eq;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq_default(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var assocIndexOf_default = assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var listCacheDelete_default = listCacheDelete;
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var listCacheGet_default = listCacheGet;
    function listCacheHas(key) {
      return assocIndexOf_default(this.__data__, key) > -1;
    }
    var listCacheHas_default = listCacheHas;
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf_default(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    var listCacheSet_default = listCacheSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear_default;
    ListCache.prototype["delete"] = listCacheDelete_default;
    ListCache.prototype.get = listCacheGet_default;
    ListCache.prototype.has = listCacheHas_default;
    ListCache.prototype.set = listCacheSet_default;
    var ListCache_default = ListCache;
    var Map2 = getNative_default(root_default, "Map");
    var Map_default = Map2;
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash_default(),
        "map": new (Map_default || ListCache_default)(),
        "string": new Hash_default()
      };
    }
    var mapCacheClear_default = mapCacheClear;
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    var isKeyable_default = isKeyable;
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var getMapData_default = getMapData;
    function mapCacheDelete(key) {
      var result = getMapData_default(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var mapCacheDelete_default = mapCacheDelete;
    function mapCacheGet(key) {
      return getMapData_default(this, key).get(key);
    }
    var mapCacheGet_default = mapCacheGet;
    function mapCacheHas(key) {
      return getMapData_default(this, key).has(key);
    }
    var mapCacheHas_default = mapCacheHas;
    function mapCacheSet(key, value) {
      var data = getMapData_default(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var mapCacheSet_default = mapCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear_default;
    MapCache.prototype["delete"] = mapCacheDelete_default;
    MapCache.prototype.get = mapCacheGet_default;
    MapCache.prototype.has = mapCacheHas_default;
    MapCache.prototype.set = mapCacheSet_default;
    var MapCache_default = MapCache;
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
        if (cache2.has(key)) {
          return cache2.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache2.set(key, result) || cache2;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache_default)();
      return memoized;
    }
    memoize.Cache = MapCache_default;
    var memoize_default = memoize;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize_default(func, function(key) {
        if (cache2.size === MAX_MEMOIZE_SIZE) {
          cache2.clear();
        }
        return key;
      });
      var cache2 = result.cache;
      return result;
    }
    var memoizeCapped_default = memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped_default(function(string2) {
      var result = [];
      if (string2.charCodeAt(0) === 46) {
        result.push("");
      }
      string2.replace(rePropName, function(match, number2, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    var stringToPath_default = stringToPath;
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var arrayMap_default = arrayMap;
    var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray_default(value)) {
        return arrayMap_default(value, baseToString) + "";
      }
      if (isSymbol_default(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    var baseToString_default = baseToString;
    function toString(value) {
      return value == null ? "" : baseToString_default(value);
    }
    var toString_default = toString;
    function castPath(value, object) {
      if (isArray_default(value)) {
        return value;
      }
      return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
    }
    var castPath_default = castPath;
    function toKey(value) {
      if (typeof value == "string" || isSymbol_default(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    var toKey_default = toKey;
    function baseGet(object, path) {
      path = castPath_default(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey_default(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    var baseGet_default = baseGet;
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet_default(object, path);
      return result === void 0 ? defaultValue : result;
    }
    var get_default = get;
    function getDeep(v2, path) {
      if (path.length === 0)
        return v2;
      return get_default(v2, path);
    }
    var SimpleCache = class {
      constructor() {
        __publicField(this, "_values", {});
      }
      /**
       * get the cache item at `key` or produce it using `producer` and cache _that_.
       *
       * Note that this won't work if you change the producer, like `get(key, producer1); get(key, producer2)`.
       */
      get(key, producer) {
        if (this.has(key)) {
          return this._values[key];
        } else {
          const cachedValue = producer();
          this._values[key] = cachedValue;
          return cachedValue;
        }
      }
      /**
       * Returns true if the cache has an item at `key`.
       */
      has(key) {
        return this._values.hasOwnProperty(key);
      }
    };
    var import_dataverse6 = requireDist$2();
    var defineProperty = function() {
      try {
        var func = getNative_default(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    var defineProperty_default = defineProperty;
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty_default) {
        defineProperty_default(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseAssignValue_default = baseAssignValue;
    var objectProto6 = Object.prototype;
    var hasOwnProperty5 = objectProto6.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty5.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue_default(object, key, value);
      }
    }
    var assignValue_default = assignValue;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    var isIndex_default = isIndex;
    function baseSet(object, path, value, customizer) {
      if (!isObject_default(object)) {
        return object;
      }
      path = castPath_default(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey_default(path[index]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject_default(objValue) ? objValue : isIndex_default(path[index + 1]) ? [] : {};
          }
        }
        assignValue_default(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    var baseSet_default = baseSet;
    function set(object, path, value) {
      return object == null ? object : baseSet_default(object, path, value);
    }
    var set_default = set;
    var cachedDefaults = /* @__PURE__ */ new WeakMap();
    function getPropDefaultsOfSheetObject(config) {
      return getDefaultsOfPropTypeConfig(config);
    }
    function getDefaultsOfPropTypeConfig(config) {
      if (cachedDefaults.has(config)) {
        return cachedDefaults.get(config);
      }
      const generated = config.type === "compound" ? generateDefaultsForCompound(config) : config.type === "enum" ? generateDefaultsForEnum(config) : config.default;
      cachedDefaults.set(config, generated);
      return generated;
    }
    function generateDefaultsForEnum(config) {
      const defaults2 = {
        $case: config.defaultCase
      };
      for (const [case_, caseConf] of Object.entries(config.cases)) {
        defaults2[case_] = getDefaultsOfPropTypeConfig(caseConf);
      }
      return defaults2;
    }
    function generateDefaultsForCompound(config) {
      const defaults2 = {};
      for (const [key, propConf] of Object.entries(config.props)) {
        defaults2[key] = getDefaultsOfPropTypeConfig(propConf);
      }
      return defaults2;
    }
    var import_dataverse2 = requireDist$2();
    var import_UnitBezier = __toESM(require_UnitBezier());
    function interpolationTripleAtPosition(ctx, trackP, timeD) {
      return (0, import_dataverse2.prism)(() => {
        const track = (0, import_dataverse2.val)(trackP);
        const driverD = import_dataverse2.prism.memo(
          "driver",
          () => {
            if (!track) {
              return (0, import_dataverse2.prism)(() => void 0);
            } else if (track.type === "BasicKeyframedTrack") {
              return _forKeyframedTrack(ctx, track, timeD);
            } else {
              ctx.logger.error("Track type not yet supported.");
              return (0, import_dataverse2.prism)(() => void 0);
            }
          },
          [track]
        );
        return driverD.getValue();
      });
    }
    function _forKeyframedTrack(ctx, track, timeD) {
      return (0, import_dataverse2.prism)(() => {
        let stateRef = import_dataverse2.prism.ref("state", { started: false });
        let state = stateRef.current;
        const time = timeD.getValue();
        if (!state.started || time < state.validFrom || state.validTo <= time) {
          stateRef.current = state = updateState(ctx, timeD, track);
        }
        return state.der.getValue();
      });
    }
    var undefinedConstD = (0, import_dataverse2.prism)(() => void 0);
    function updateState(ctx, progressionD, track) {
      const progression = progressionD.getValue();
      if (track.keyframes.length === 0) {
        return {
          started: true,
          validFrom: -Infinity,
          validTo: Infinity,
          der: undefinedConstD
        };
      }
      let currentKeyframeIndex = 0;
      while (true) {
        const currentKeyframe = track.keyframes[currentKeyframeIndex];
        if (!currentKeyframe) {
          return states.error;
        }
        const isLastKeyframe = currentKeyframeIndex === track.keyframes.length - 1;
        if (progression < currentKeyframe.position) {
          if (currentKeyframeIndex === 0) {
            return states.beforeFirstKeyframe(currentKeyframe);
          } else {
            return states.error;
          }
        } else if (currentKeyframe.position === progression) {
          if (isLastKeyframe) {
            return states.lastKeyframe(currentKeyframe);
          } else {
            return states.between(
              currentKeyframe,
              track.keyframes[currentKeyframeIndex + 1],
              progressionD
            );
          }
        } else {
          if (currentKeyframeIndex === track.keyframes.length - 1) {
            return states.lastKeyframe(currentKeyframe);
          } else {
            const nextKeyframeIndex = currentKeyframeIndex + 1;
            if (track.keyframes[nextKeyframeIndex].position <= progression) {
              currentKeyframeIndex = nextKeyframeIndex;
              continue;
            } else {
              return states.between(
                currentKeyframe,
                track.keyframes[currentKeyframeIndex + 1],
                progressionD
              );
            }
          }
        }
      }
    }
    var states = {
      beforeFirstKeyframe(kf) {
        return {
          started: true,
          validFrom: -Infinity,
          validTo: kf.position,
          der: (0, import_dataverse2.prism)(() => ({ left: kf.value, progression: 0 }))
        };
      },
      lastKeyframe(kf) {
        return {
          started: true,
          validFrom: kf.position,
          validTo: Infinity,
          der: (0, import_dataverse2.prism)(() => ({ left: kf.value, progression: 0 }))
        };
      },
      between(left, right, progressionD) {
        if (!left.connectedRight) {
          return {
            started: true,
            validFrom: left.position,
            validTo: right.position,
            der: (0, import_dataverse2.prism)(() => ({ left: left.value, progression: 0 }))
          };
        }
        const globalProgressionToLocalProgression = (globalProgression) => {
          return (globalProgression - left.position) / (right.position - left.position);
        };
        if (!left.type || left.type === "bezier") {
          const solver = new import_UnitBezier.default(
            left.handles[2],
            left.handles[3],
            right.handles[0],
            right.handles[1]
          );
          const bezierDer = (0, import_dataverse2.prism)(() => {
            const progression = globalProgressionToLocalProgression(
              progressionD.getValue()
            );
            const valueProgression = solver.solveSimple(progression);
            return {
              left: left.value,
              right: right.value,
              progression: valueProgression
            };
          });
          return {
            started: true,
            validFrom: left.position,
            validTo: right.position,
            der: bezierDer
          };
        }
        const holdDer = (0, import_dataverse2.prism)(() => {
          const progression = globalProgressionToLocalProgression(
            progressionD.getValue()
          );
          const valueProgression = Math.floor(progression);
          return {
            left: left.value,
            right: right.value,
            progression: valueProgression
          };
        });
        return {
          started: true,
          validFrom: left.position,
          validTo: right.position,
          der: holdDer
        };
      },
      error: {
        started: true,
        validFrom: -Infinity,
        validTo: Infinity,
        der: undefinedConstD
      }
    };
    function deepMergeWithCache(base, override, cache2) {
      const _cache2 = cache2;
      const possibleCachedValue = _cache2.get(base);
      if (possibleCachedValue && possibleCachedValue.override === override) {
        return possibleCachedValue.merged;
      }
      const merged = __spreadValues({}, base);
      for (const key of Object.keys(override)) {
        const valueInOverride = override[key];
        const valueInBase = base[key];
        merged[key] = typeof valueInOverride === "object" && typeof valueInBase === "object" ? deepMergeWithCache(
          valueInBase,
          valueInOverride,
          cache2
        ) : valueInOverride === void 0 ? valueInBase : valueInOverride;
      }
      cache2.set(base, { override, merged });
      return merged;
    }
    function pointerDeep(base, toAppend) {
      let p2 = base;
      for (const k2 of toAppend) {
        p2 = p2[k2];
      }
      return p2;
    }
    var import_dataverse3 = requireDist$2();
    var valToAtom = (key, vals) => {
      const a2 = import_dataverse3.prism.memo(key, () => new import_dataverse3.Atom(vals), []);
      a2.set(vals);
      return a2;
    };
    var import_dataverse5 = requireDist$2();
    var import_dataverse4 = requireDist$2();
    var reWhitespace = /\s/;
    function trimmedEndIndex(string2) {
      var index = string2.length;
      while (index-- && reWhitespace.test(string2.charAt(index))) {
      }
      return index;
    }
    var trimmedEndIndex_default = trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim(string2) {
      return string2 ? string2.slice(0, trimmedEndIndex_default(string2) + 1).replace(reTrimStart, "") : string2;
    }
    var baseTrim_default = baseTrim;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol_default(value)) {
        return NAN;
      }
      if (isObject_default(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject_default(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim_default(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    var toNumber_default = toNumber;
    var INFINITY3 = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber_default(value);
      if (value === INFINITY3 || value === -Infinity) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    var toFinite_default = toFinite;
    function toInteger(value) {
      var result = toFinite_default(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_default = toInteger;
    function identity(value) {
      return value;
    }
    var identity_default = identity;
    var WeakMap2 = getNative_default(root_default, "WeakMap");
    var WeakMap_default = WeakMap2;
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject_default(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    var baseCreate_default = baseCreate;
    function copyArray2(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    var copyArray_default = copyArray2;
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var arrayEach_default = arrayEach;
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue_default(object, key, newValue);
        } else {
          assignValue_default(object, key, newValue);
        }
      }
      return object;
    }
    var copyObject_default = copyObject;
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
    }
    var isLength_default = isLength;
    function isArrayLike(value) {
      return value != null && isLength_default(value.length) && !isFunction_default(value);
    }
    var isArrayLike_default = isArrayLike;
    var objectProto7 = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto7;
      return value === proto;
    }
    var isPrototype_default = isPrototype;
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var baseTimes_default = baseTimes;
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
    }
    var baseIsArguments_default = baseIsArguments;
    var objectProto8 = Object.prototype;
    var hasOwnProperty6 = objectProto8.hasOwnProperty;
    var propertyIsEnumerable = objectProto8.propertyIsEnumerable;
    var isArguments = baseIsArguments_default(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments_default : function(value) {
      return isObjectLike_default(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArguments_default = isArguments;
    function stubFalse() {
      return false;
    }
    var stubFalse_default = stubFalse;
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root_default.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse_default;
    var isBuffer_default = isBuffer;
    var argsTag2 = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag2 = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
    }
    var baseIsTypedArray_default = baseIsTypedArray;
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    var baseUnary_default = baseUnary;
    var freeExports2 = exports && !exports.nodeType && exports;
    var freeModule2 = freeExports2 && true && module && !module.nodeType && module;
    var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
    var freeProcess = moduleExports2 && freeGlobal_default.process;
    var nodeUtil = function() {
      try {
        var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    var nodeUtil_default = nodeUtil;
    var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
    var isTypedArray2 = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
    var isTypedArray_default = isTypedArray2;
    var objectProto9 = Object.prototype;
    var hasOwnProperty7 = objectProto9.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty7.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex_default(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var arrayLikeKeys_default = arrayLikeKeys;
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var overArg_default = overArg;
    var nativeKeys = overArg_default(Object.keys, Object);
    var nativeKeys_default = nativeKeys;
    var objectProto10 = Object.prototype;
    var hasOwnProperty8 = objectProto10.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype_default(object)) {
        return nativeKeys_default(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty8.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var baseKeys_default = baseKeys;
    function keys(object) {
      return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
    }
    var keys_default = keys;
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var nativeKeysIn_default = nativeKeysIn;
    var objectProto11 = Object.prototype;
    var hasOwnProperty9 = objectProto11.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject_default(object)) {
        return nativeKeysIn_default(object);
      }
      var isProto = isPrototype_default(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty9.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    var baseKeysIn_default = baseKeysIn;
    function keysIn(object) {
      return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
    }
    var keysIn_default = keysIn;
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    var arrayPush_default = arrayPush;
    var getPrototype = overArg_default(Object.getPrototypeOf, Object);
    var getPrototype_default = getPrototype;
    var objectTag2 = "[object Object]";
    var funcProto3 = Function.prototype;
    var objectProto12 = Object.prototype;
    var funcToString3 = funcProto3.toString;
    var hasOwnProperty10 = objectProto12.hasOwnProperty;
    var objectCtorString = funcToString3.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag2) {
        return false;
      }
      var proto = getPrototype_default(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty10.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
    }
    var isPlainObject_default = isPlainObject;
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    var baseSlice_default = baseSlice;
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice_default(array, start, end);
    }
    var castSlice_default = castSlice;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string2) {
      return reHasUnicode.test(string2);
    }
    var hasUnicode_default = hasUnicode;
    function asciiToArray(string2) {
      return string2.split("");
    }
    var asciiToArray_default = asciiToArray;
    var rsAstralRange2 = "\\ud800-\\udfff";
    var rsComboMarksRange2 = "\\u0300-\\u036f";
    var reComboHalfMarksRange2 = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange2 = "\\u20d0-\\u20ff";
    var rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2;
    var rsVarRange2 = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange2 + "]";
    var rsCombo = "[" + rsComboRange2 + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange2 + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ2 = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange2 + "]?";
    var rsOptJoin = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string2) {
      return string2.match(reUnicode) || [];
    }
    var unicodeToArray_default = unicodeToArray;
    function stringToArray(string2) {
      return hasUnicode_default(string2) ? unicodeToArray_default(string2) : asciiToArray_default(string2);
    }
    var stringToArray_default = stringToArray;
    function baseClamp(number2, lower, upper) {
      if (number2 === number2) {
        if (upper !== void 0) {
          number2 = number2 <= upper ? number2 : upper;
        }
        if (lower !== void 0) {
          number2 = number2 >= lower ? number2 : lower;
        }
      }
      return number2;
    }
    var baseClamp_default = baseClamp;
    function clamp2(number2, lower, upper) {
      if (upper === void 0) {
        upper = lower;
        lower = void 0;
      }
      if (upper !== void 0) {
        upper = toNumber_default(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== void 0) {
        lower = toNumber_default(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp_default(toNumber_default(number2), lower, upper);
    }
    var clamp_default = clamp2;
    function stackClear() {
      this.__data__ = new ListCache_default();
      this.size = 0;
    }
    var stackClear_default = stackClear;
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var stackDelete_default = stackDelete;
    function stackGet(key) {
      return this.__data__.get(key);
    }
    var stackGet_default = stackGet;
    function stackHas(key) {
      return this.__data__.has(key);
    }
    var stackHas_default = stackHas;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache_default) {
        var pairs = data.__data__;
        if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache_default(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    var stackSet_default = stackSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache_default(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear_default;
    Stack.prototype["delete"] = stackDelete_default;
    Stack.prototype.get = stackGet_default;
    Stack.prototype.has = stackHas_default;
    Stack.prototype.set = stackSet_default;
    var Stack_default = Stack;
    function baseAssign(object, source) {
      return object && copyObject_default(source, keys_default(source), object);
    }
    var baseAssign_default = baseAssign;
    function baseAssignIn(object, source) {
      return object && copyObject_default(source, keysIn_default(source), object);
    }
    var baseAssignIn_default = baseAssignIn;
    var freeExports3 = exports && !exports.nodeType && exports;
    var freeModule3 = freeExports3 && true && module && !module.nodeType && module;
    var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
    var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
    var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    var cloneBuffer_default = cloneBuffer;
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    var arrayFilter_default = arrayFilter;
    function stubArray() {
      return [];
    }
    var stubArray_default = stubArray;
    var objectProto13 = Object.prototype;
    var propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable2.call(object, symbol);
      });
    };
    var getSymbols_default = getSymbols;
    function copySymbols(source, object) {
      return copyObject_default(source, getSymbols_default(source), object);
    }
    var copySymbols_default = copySymbols;
    var nativeGetSymbols2 = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
      var result = [];
      while (object) {
        arrayPush_default(result, getSymbols_default(object));
        object = getPrototype_default(object);
      }
      return result;
    };
    var getSymbolsIn_default = getSymbolsIn;
    function copySymbolsIn(source, object) {
      return copyObject_default(source, getSymbolsIn_default(source), object);
    }
    var copySymbolsIn_default = copySymbolsIn;
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
    }
    var baseGetAllKeys_default = baseGetAllKeys;
    function getAllKeys(object) {
      return baseGetAllKeys_default(object, keys_default, getSymbols_default);
    }
    var getAllKeys_default = getAllKeys;
    function getAllKeysIn(object) {
      return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
    }
    var getAllKeysIn_default = getAllKeysIn;
    var DataView2 = getNative_default(root_default, "DataView");
    var DataView_default = DataView2;
    var Promise2 = getNative_default(root_default, "Promise");
    var Promise_default = Promise2;
    var Set2 = getNative_default(root_default, "Set");
    var Set_default = Set2;
    var mapTag2 = "[object Map]";
    var objectTag3 = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag2 = "[object Set]";
    var weakMapTag2 = "[object WeakMap]";
    var dataViewTag2 = "[object DataView]";
    var dataViewCtorString = toSource_default(DataView_default);
    var mapCtorString = toSource_default(Map_default);
    var promiseCtorString = toSource_default(Promise_default);
    var setCtorString = toSource_default(Set_default);
    var weakMapCtorString = toSource_default(WeakMap_default);
    var getTag = baseGetTag_default;
    if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
      getTag = function(value) {
        var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag2;
            case mapCtorString:
              return mapTag2;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag2;
            case weakMapCtorString:
              return weakMapTag2;
          }
        }
        return result;
      };
    }
    var getTag_default = getTag;
    var objectProto14 = Object.prototype;
    var hasOwnProperty11 = objectProto14.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty11.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var initCloneArray_default = initCloneArray;
    var Uint8Array2 = root_default.Uint8Array;
    var Uint8Array_default = Uint8Array2;
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
      return result;
    }
    var cloneArrayBuffer_default = cloneArrayBuffer;
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var cloneDataView_default = cloneDataView;
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var cloneRegExp_default = cloneRegExp;
    var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
    var symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    var cloneSymbol_default = cloneSymbol;
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var cloneTypedArray_default = cloneTypedArray;
    var boolTag2 = "[object Boolean]";
    var dateTag2 = "[object Date]";
    var mapTag3 = "[object Map]";
    var numberTag2 = "[object Number]";
    var regexpTag2 = "[object RegExp]";
    var setTag3 = "[object Set]";
    var stringTag2 = "[object String]";
    var symbolTag2 = "[object Symbol]";
    var arrayBufferTag2 = "[object ArrayBuffer]";
    var dataViewTag3 = "[object DataView]";
    var float32Tag2 = "[object Float32Array]";
    var float64Tag2 = "[object Float64Array]";
    var int8Tag2 = "[object Int8Array]";
    var int16Tag2 = "[object Int16Array]";
    var int32Tag2 = "[object Int32Array]";
    var uint8Tag2 = "[object Uint8Array]";
    var uint8ClampedTag2 = "[object Uint8ClampedArray]";
    var uint16Tag2 = "[object Uint16Array]";
    var uint32Tag2 = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag2:
          return cloneArrayBuffer_default(object);
        case boolTag2:
        case dateTag2:
          return new Ctor(+object);
        case dataViewTag3:
          return cloneDataView_default(object, isDeep);
        case float32Tag2:
        case float64Tag2:
        case int8Tag2:
        case int16Tag2:
        case int32Tag2:
        case uint8Tag2:
        case uint8ClampedTag2:
        case uint16Tag2:
        case uint32Tag2:
          return cloneTypedArray_default(object, isDeep);
        case mapTag3:
          return new Ctor();
        case numberTag2:
        case stringTag2:
          return new Ctor(object);
        case regexpTag2:
          return cloneRegExp_default(object);
        case setTag3:
          return new Ctor();
        case symbolTag2:
          return cloneSymbol_default(object);
      }
    }
    var initCloneByTag_default = initCloneByTag;
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
    }
    var initCloneObject_default = initCloneObject;
    var mapTag4 = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike_default(value) && getTag_default(value) == mapTag4;
    }
    var baseIsMap_default = baseIsMap;
    var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
    var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
    var isMap_default = isMap;
    var setTag4 = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike_default(value) && getTag_default(value) == setTag4;
    }
    var baseIsSet_default = baseIsSet;
    var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
    var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
    var isSet_default = isSet;
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag3 = "[object Arguments]";
    var arrayTag2 = "[object Array]";
    var boolTag3 = "[object Boolean]";
    var dateTag3 = "[object Date]";
    var errorTag2 = "[object Error]";
    var funcTag3 = "[object Function]";
    var genTag2 = "[object GeneratorFunction]";
    var mapTag5 = "[object Map]";
    var numberTag3 = "[object Number]";
    var objectTag4 = "[object Object]";
    var regexpTag3 = "[object RegExp]";
    var setTag5 = "[object Set]";
    var stringTag3 = "[object String]";
    var symbolTag3 = "[object Symbol]";
    var weakMapTag3 = "[object WeakMap]";
    var arrayBufferTag3 = "[object ArrayBuffer]";
    var dataViewTag4 = "[object DataView]";
    var float32Tag3 = "[object Float32Array]";
    var float64Tag3 = "[object Float64Array]";
    var int8Tag3 = "[object Int8Array]";
    var int16Tag3 = "[object Int16Array]";
    var int32Tag3 = "[object Int32Array]";
    var uint8Tag3 = "[object Uint8Array]";
    var uint8ClampedTag3 = "[object Uint8ClampedArray]";
    var uint16Tag3 = "[object Uint16Array]";
    var uint32Tag3 = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag4] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
    cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject_default(value)) {
        return value;
      }
      var isArr = isArray_default(value);
      if (isArr) {
        result = initCloneArray_default(value);
        if (!isDeep) {
          return copyArray_default(value, result);
        }
      } else {
        var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
        if (isBuffer_default(value)) {
          return cloneBuffer_default(value, isDeep);
        }
        if (tag == objectTag4 || tag == argsTag3 || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject_default(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag_default(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack_default());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet_default(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap_default(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach_default(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    var baseClone_default = baseClone;
    var CLONE_DEEP_FLAG2 = 1;
    var CLONE_SYMBOLS_FLAG2 = 4;
    function cloneDeep(value) {
      return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
    }
    var cloneDeep_default = cloneDeep;
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED3);
      return this;
    }
    var setCacheAdd_default = setCacheAdd;
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    var setCacheHas_default = setCacheHas;
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache_default();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
    SetCache.prototype.has = setCacheHas_default;
    var SetCache_default = SetCache;
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var arraySome_default = arraySome;
    function cacheHas(cache2, key) {
      return cache2.has(key);
    }
    var cacheHas_default = cacheHas;
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome_default(other, function(othValue2, othIndex) {
            if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    var equalArrays_default = equalArrays;
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    var mapToArray_default = mapToArray;
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var setToArray_default = setToArray;
    var COMPARE_PARTIAL_FLAG2 = 1;
    var COMPARE_UNORDERED_FLAG2 = 2;
    var boolTag4 = "[object Boolean]";
    var dateTag4 = "[object Date]";
    var errorTag3 = "[object Error]";
    var mapTag6 = "[object Map]";
    var numberTag4 = "[object Number]";
    var regexpTag4 = "[object RegExp]";
    var setTag6 = "[object Set]";
    var stringTag4 = "[object String]";
    var symbolTag4 = "[object Symbol]";
    var arrayBufferTag4 = "[object ArrayBuffer]";
    var dataViewTag5 = "[object DataView]";
    var symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
    var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag5:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag4:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
            return false;
          }
          return true;
        case boolTag4:
        case dateTag4:
        case numberTag4:
          return eq_default(+object, +other);
        case errorTag3:
          return object.name == other.name && object.message == other.message;
        case regexpTag4:
        case stringTag4:
          return object == other + "";
        case mapTag6:
          var convert = mapToArray_default;
        case setTag6:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
          convert || (convert = setToArray_default);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG2;
          stack.set(object, other);
          var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag4:
          if (symbolValueOf2) {
            return symbolValueOf2.call(object) == symbolValueOf2.call(other);
          }
      }
      return false;
    }
    var equalByTag_default = equalByTag;
    var COMPARE_PARTIAL_FLAG3 = 1;
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty12.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    var equalObjects_default = equalObjects;
    var COMPARE_PARTIAL_FLAG4 = 1;
    var argsTag4 = "[object Arguments]";
    var arrayTag3 = "[object Array]";
    var objectTag5 = "[object Object]";
    var objectProto16 = Object.prototype;
    var hasOwnProperty13 = objectProto16.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag3 : getTag_default(object), othTag = othIsArr ? arrayTag3 : getTag_default(other);
      objTag = objTag == argsTag4 ? objectTag5 : objTag;
      othTag = othTag == argsTag4 ? objectTag5 : othTag;
      var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer_default(object)) {
        if (!isBuffer_default(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack_default());
        return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
        var objIsWrapped = objIsObj && hasOwnProperty13.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty13.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack_default());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack_default());
      return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
    }
    var baseIsEqualDeep_default = baseIsEqualDeep;
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    var baseIsEqual_default = baseIsEqual;
    var COMPARE_PARTIAL_FLAG5 = 1;
    var COMPARE_UNORDERED_FLAG3 = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack_default();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var baseIsMatch_default = baseIsMatch;
    function isStrictComparable(value) {
      return value === value && !isObject_default(value);
    }
    var isStrictComparable_default = isStrictComparable;
    function getMatchData(object) {
      var result = keys_default(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable_default(value)];
      }
      return result;
    }
    var getMatchData_default = getMatchData;
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var matchesStrictComparable_default = matchesStrictComparable;
    function baseMatches(source) {
      var matchData = getMatchData_default(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch_default(object, source, matchData);
      };
    }
    var baseMatches_default = baseMatches;
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    var baseHasIn_default = baseHasIn;
    function hasPath(object, path, hasFunc) {
      path = castPath_default(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey_default(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object) || isArguments_default(object));
    }
    var hasPath_default = hasPath;
    function hasIn(object, path) {
      return object != null && hasPath_default(object, path, baseHasIn_default);
    }
    var hasIn_default = hasIn;
    var COMPARE_PARTIAL_FLAG6 = 1;
    var COMPARE_UNORDERED_FLAG4 = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey_default(path) && isStrictComparable_default(srcValue)) {
        return matchesStrictComparable_default(toKey_default(path), srcValue);
      }
      return function(object) {
        var objValue = get_default(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
      };
    }
    var baseMatchesProperty_default = baseMatchesProperty;
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var baseProperty_default = baseProperty;
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet_default(object, path);
      };
    }
    var basePropertyDeep_default = basePropertyDeep;
    function property(path) {
      return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
    }
    var property_default = property;
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity_default;
      }
      if (typeof value == "object") {
        return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
      }
      return property_default(value);
    }
    var baseIteratee_default = baseIteratee;
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var createBaseFor_default = createBaseFor;
    var baseFor = createBaseFor_default();
    var baseFor_default = baseFor;
    function baseForOwn(object, iteratee) {
      return object && baseFor_default(object, iteratee, keys_default);
    }
    var baseForOwn_default = baseForOwn;
    var now2 = function() {
      return root_default.Date.now();
    };
    var now_default = now2;
    var FUNC_ERROR_TEXT2 = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT2);
      }
      wait = toNumber_default(wait) || 0;
      if (isObject_default(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now_default();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now_default());
      }
      function debounced() {
        var time = now_default(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var debounce_default = debounce;
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    var last_default = last;
    function parent2(object, path) {
      return path.length < 2 ? object : baseGet_default(object, baseSlice_default(path, 0, -1));
    }
    var parent_default = parent2;
    function isInteger(value) {
      return typeof value == "number" && value == toInteger_default(value);
    }
    var isInteger_default = isInteger;
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee_default(iteratee);
      baseForOwn_default(object, function(value, key, object2) {
        baseAssignValue_default(result, key, iteratee(value, key, object2));
      });
      return result;
    }
    var mapValues_default = mapValues;
    function baseUnset(object, path) {
      path = castPath_default(path, object);
      object = parent_default(object, path);
      return object == null || delete object[toKey_default(last_default(path))];
    }
    var baseUnset_default = baseUnset;
    var MAX_SAFE_INTEGER3 = 9007199254740991;
    var nativeFloor = Math.floor;
    function baseRepeat(string2, n2) {
      var result = "";
      if (!string2 || n2 < 1 || n2 > MAX_SAFE_INTEGER3) {
        return result;
      }
      do {
        if (n2 % 2) {
          result += string2;
        }
        n2 = nativeFloor(n2 / 2);
        if (n2) {
          string2 += string2;
        }
      } while (n2);
      return result;
    }
    var baseRepeat_default = baseRepeat;
    var asciiSize = baseProperty_default("length");
    var asciiSize_default = asciiSize;
    var rsAstralRange3 = "\\ud800-\\udfff";
    var rsComboMarksRange3 = "\\u0300-\\u036f";
    var reComboHalfMarksRange3 = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange3 = "\\u20d0-\\u20ff";
    var rsComboRange3 = rsComboMarksRange3 + reComboHalfMarksRange3 + rsComboSymbolsRange3;
    var rsVarRange3 = "\\ufe0e\\ufe0f";
    var rsAstral2 = "[" + rsAstralRange3 + "]";
    var rsCombo2 = "[" + rsComboRange3 + "]";
    var rsFitz2 = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier2 = "(?:" + rsCombo2 + "|" + rsFitz2 + ")";
    var rsNonAstral2 = "[^" + rsAstralRange3 + "]";
    var rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ3 = "\\u200d";
    var reOptMod2 = rsModifier2 + "?";
    var rsOptVar2 = "[" + rsVarRange3 + "]?";
    var rsOptJoin2 = "(?:" + rsZWJ3 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*";
    var rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2;
    var rsSymbol2 = "(?:" + [rsNonAstral2 + rsCombo2 + "?", rsCombo2, rsRegional2, rsSurrPair2, rsAstral2].join("|") + ")";
    var reUnicode2 = RegExp(rsFitz2 + "(?=" + rsFitz2 + ")|" + rsSymbol2 + rsSeq2, "g");
    function unicodeSize(string2) {
      var result = reUnicode2.lastIndex = 0;
      while (reUnicode2.test(string2)) {
        ++result;
      }
      return result;
    }
    var unicodeSize_default = unicodeSize;
    function stringSize(string2) {
      return hasUnicode_default(string2) ? unicodeSize_default(string2) : asciiSize_default(string2);
    }
    var stringSize_default = stringSize;
    var nativeCeil = Math.ceil;
    function createPadding(length, chars) {
      chars = chars === void 0 ? " " : baseToString_default(chars);
      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat_default(chars, length) : chars;
      }
      var result = baseRepeat_default(chars, nativeCeil(length / stringSize_default(chars)));
      return hasUnicode_default(chars) ? castSlice_default(stringToArray_default(result), 0, length).join("") : result.slice(0, length);
    }
    var createPadding_default = createPadding;
    function padStart(string2, length, chars) {
      string2 = toString_default(string2);
      length = toInteger_default(length);
      var strLength = length ? stringSize_default(string2) : 0;
      return length && strLength < length ? createPadding_default(length - strLength, chars) + string2 : string2;
    }
    var padStart_default = padStart;
    function unset(object, path) {
      return object == null ? true : baseUnset_default(object, path);
    }
    var unset_default = unset;
    var KEEP_HOT_FOR_MS = 5 * 1e3;
    var TheatreSheetObject = class {
      /**
       * @internal
       */
      constructor(internals) {
        __publicField(this, "_cache", new SimpleCache());
        __publicField(this, "_keepHotUntapDebounce");
        setPrivateAPI(this, internals);
      }
      get type() {
        return "Theatre_SheetObject_PublicAPI";
      }
      get props() {
        return privateAPI(this).propsP;
      }
      get sheet() {
        return privateAPI(this).sheet.publicApi;
      }
      get project() {
        return privateAPI(this).sheet.project.publicApi;
      }
      get address() {
        return __spreadValues({}, privateAPI(this).address);
      }
      _valuesPrism() {
        return this._cache.get("_valuesPrism", () => {
          const sheetObject = privateAPI(this);
          const d2 = (0, import_dataverse4.prism)(() => {
            return (0, import_dataverse4.val)(sheetObject.getValues().getValue());
          });
          return d2;
        });
      }
      onValuesChange(fn2, rafDriver) {
        return onChange(this._valuesPrism(), fn2, rafDriver);
      }
      // internal: Make the deviration keepHot if directly read
      get value() {
        const der = this._valuesPrism();
        {
          if (!der.isHot) {
            if (this._keepHotUntapDebounce != null) {
              this._keepHotUntapDebounce.flush();
            }
            const untap = der.keepHot();
            this._keepHotUntapDebounce = debounce_default(() => {
              untap();
              this._keepHotUntapDebounce = void 0;
            }, KEEP_HOT_FOR_MS);
          }
          if (this._keepHotUntapDebounce) {
            this._keepHotUntapDebounce();
          }
        }
        return der.getValue();
      }
      set initialValue(val8) {
        privateAPI(this).setInitialValue(val8);
      }
    };
    function memoizeFn(producer) {
      const cache2 = /* @__PURE__ */ new WeakMap();
      return (k2) => {
        if (!cache2.has(k2)) {
          cache2.set(k2, producer(k2));
        }
        return cache2.get(k2);
      };
    }
    function isPropConfigComposite(c2) {
      return c2.type === "compound" || c2.type === "enum";
    }
    function getPropConfigByPath(parentConf, path) {
      if (!parentConf)
        return void 0;
      const [key, ...rest] = path;
      if (key === void 0)
        return parentConf;
      if (!isPropConfigComposite(parentConf))
        return void 0;
      const sub = parentConf.type === "enum" ? parentConf.cases[key] : parentConf.props[key];
      return getPropConfigByPath(sub, rest);
    }
    function isPropConfSequencable(conf) {
      return !isPropConfigComposite(conf);
    }
    var SheetObject = class {
      constructor(sheet2, template, nativeObject) {
        this.sheet = sheet2;
        this.template = template;
        this.nativeObject = nativeObject;
        __publicField(this, "$$isPointerToPrismProvider", true);
        __publicField(this, "address");
        __publicField(this, "publicApi");
        __publicField(this, "_initialValue", new import_dataverse5.Atom({}));
        __publicField(this, "_cache", new SimpleCache());
        __publicField(this, "_logger");
        __publicField(this, "_internalUtilCtx");
        this._logger = sheet2._logger.named(
          "SheetObject",
          template.address.objectKey
        );
        this._logger._trace("creating object");
        this._internalUtilCtx = { logger: this._logger.utilFor.internal() };
        this.address = __spreadProps(__spreadValues({}, template.address), {
          sheetInstanceId: sheet2.address.sheetInstanceId
        });
        this.publicApi = new TheatreSheetObject(this);
      }
      get type() {
        return "Theatre_SheetObject";
      }
      getValues() {
        return this._cache.get(
          "getValues()",
          () => (0, import_dataverse5.prism)(() => {
            const defaults2 = (0, import_dataverse5.val)(this.template.getDefaultValues());
            const initial = (0, import_dataverse5.val)(this._initialValue.pointer);
            const withInitialCache = import_dataverse5.prism.memo(
              "withInitialCache",
              () => /* @__PURE__ */ new WeakMap(),
              []
            );
            const withInitial = deepMergeWithCache(
              defaults2,
              initial,
              withInitialCache
            );
            const statics = (0, import_dataverse5.val)(this.template.getStaticValues());
            const withStaticsCache = import_dataverse5.prism.memo(
              "withStatics",
              () => /* @__PURE__ */ new WeakMap(),
              []
            );
            const withStatics = deepMergeWithCache(
              withInitial,
              statics,
              withStaticsCache
            );
            let final = withStatics;
            let sequenced;
            {
              const pointerToSequencedValuesD = import_dataverse5.prism.memo(
                "seq",
                () => this.getSequencedValues(),
                []
              );
              const withSeqsCache = import_dataverse5.prism.memo(
                "withSeqsCache",
                () => /* @__PURE__ */ new WeakMap(),
                []
              );
              sequenced = (0, import_dataverse5.val)((0, import_dataverse5.val)(pointerToSequencedValuesD));
              const withSeqs = deepMergeWithCache(final, sequenced, withSeqsCache);
              final = withSeqs;
            }
            const a2 = valToAtom("finalAtom", final);
            return a2.pointer;
          })
        );
      }
      getValueByPointer(pointer3) {
        const allValuesP = (0, import_dataverse5.val)(this.getValues());
        const { path } = (0, import_dataverse5.getPointerParts)(pointer3);
        return (0, import_dataverse5.val)(
          pointerDeep(allValuesP, path)
        );
      }
      pointerToPrism(pointer3) {
        const { path } = (0, import_dataverse5.getPointerParts)(pointer3);
        return (0, import_dataverse5.prism)(() => {
          const allValuesP = (0, import_dataverse5.val)(this.getValues());
          return (0, import_dataverse5.val)(pointerDeep(allValuesP, path));
        });
      }
      /**
       * Returns values of props that are sequenced.
       */
      getSequencedValues() {
        return (0, import_dataverse5.prism)(() => {
          const tracksToProcessD = import_dataverse5.prism.memo(
            "tracksToProcess",
            () => this.template.getArrayOfValidSequenceTracks(),
            []
          );
          const tracksToProcess = (0, import_dataverse5.val)(tracksToProcessD);
          const valsAtom = new import_dataverse5.Atom({});
          const config = (0, import_dataverse5.val)(this.template.configPointer);
          import_dataverse5.prism.effect(
            "processTracks",
            () => {
              const untaps = [];
              for (const { trackId, pathToProp } of tracksToProcess) {
                const pr = this._trackIdToPrism(trackId);
                const propConfig = getPropConfigByPath(
                  config,
                  pathToProp
                );
                const deserializeAndSanitize = propConfig.deserializeAndSanitize;
                const interpolate = propConfig.interpolate;
                const updateSequenceValueFromItsPrism = () => {
                  const triple = pr.getValue();
                  if (!triple)
                    return valsAtom.setByPointer(
                      (p2) => pointerDeep(p2, pathToProp),
                      void 0
                    );
                  const leftDeserialized = deserializeAndSanitize(triple.left);
                  const left = leftDeserialized === void 0 ? propConfig.default : leftDeserialized;
                  if (triple.right === void 0)
                    return valsAtom.setByPointer(
                      (p2) => pointerDeep(p2, pathToProp),
                      left
                    );
                  const rightDeserialized = deserializeAndSanitize(triple.right);
                  const right = rightDeserialized === void 0 ? propConfig.default : rightDeserialized;
                  return valsAtom.setByPointer(
                    (p2) => pointerDeep(p2, pathToProp),
                    interpolate(left, right, triple.progression)
                  );
                };
                const untap = pr.onStale(updateSequenceValueFromItsPrism);
                updateSequenceValueFromItsPrism();
                untaps.push(untap);
              }
              return () => {
                for (const untap of untaps) {
                  untap();
                }
              };
            },
            [config, ...tracksToProcess]
          );
          return valsAtom.pointer;
        });
      }
      _trackIdToPrism(trackId) {
        const trackP = this.template.project.pointers.historic.sheetsById[this.address.sheetId].sequence.tracksByObject[this.address.objectKey].trackData[trackId];
        const timeD = this.sheet.getSequence().positionPrism;
        return interpolationTripleAtPosition(this._internalUtilCtx, trackP, timeD);
      }
      get propsP() {
        return this._cache.get(
          "propsP",
          () => (0, import_dataverse5.pointer)({ root: this, path: [] })
        );
      }
      validateValue(pointer3, value) {
      }
      setInitialValue(val8) {
        this.validateValue(this.propsP, val8);
        this._initialValue.set(val8);
      }
    };
    function lazy(f2) {
      return function lazyLogIncluded(m, lazyArg) {
        return f2(m, lazyArg());
      };
    }
    var LEVELS = {
      _hmm: getLogMeta(
        524
        /* _HMM */
      ),
      _todo: getLogMeta(
        522
        /* _TODO */
      ),
      _error: getLogMeta(
        521
        /* _ERROR */
      ),
      errorDev: getLogMeta(
        529
        /* ERROR_DEV */
      ),
      errorPublic: getLogMeta(
        545
        /* ERROR_PUBLIC */
      ),
      _kapow: getLogMeta(
        268
        /* _KAPOW */
      ),
      _warn: getLogMeta(
        265
        /* _WARN */
      ),
      warnDev: getLogMeta(
        273
        /* WARN_DEV */
      ),
      warnPublic: getLogMeta(
        289
        /* WARN_PUBLIC */
      ),
      _debug: getLogMeta(
        137
        /* _DEBUG */
      ),
      debugDev: getLogMeta(
        145
        /* DEBUG_DEV */
      ),
      _trace: getLogMeta(
        73
        /* _TRACE */
      ),
      traceDev: getLogMeta(
        81
        /* TRACE_DEV */
      )
    };
    function getLogMeta(level) {
      return Object.freeze({
        audience: hasFlag(
          level,
          8
          /* INTERNAL */
        ) ? "internal" : hasFlag(
          level,
          16
          /* DEV */
        ) ? "dev" : "public",
        category: hasFlag(
          level,
          4
          /* TROUBLESHOOTING */
        ) ? "troubleshooting" : hasFlag(
          level,
          2
          /* TODO */
        ) ? "todo" : "general",
        level: (
          // I think this is equivalent... but I'm not using it until we have tests.
          // this code won't really impact performance much anyway, since it's just computed once
          // up front.
          // level &
          // (TheatreLoggerLevel.TRACE |
          //   TheatreLoggerLevel.DEBUG |
          //   TheatreLoggerLevel.WARN |
          //   TheatreLoggerLevel.ERROR),
          hasFlag(
            level,
            512
            /* ERROR */
          ) ? 512 : hasFlag(
            level,
            256
            /* WARN */
          ) ? 256 : hasFlag(
            level,
            128
            /* DEBUG */
          ) ? 128 : (
            // no other option
            64
          )
        )
      });
    }
    function hasFlag(level, flag) {
      return (level & flag) === flag;
    }
    function shouldLog(includes, level) {
      return ((level & 32) === 32 ? true : (level & 16) === 16 ? includes.dev : (level & 8) === 8 ? includes.internal : false) && includes.min <= level;
    }
    var DEFAULTS = {
      loggingConsoleStyle: true,
      loggerConsoleStyle: true,
      includes: Object.freeze({
        internal: false,
        dev: false,
        min: 256
        /* WARN */
      }),
      filtered: function defaultFiltered() {
      },
      include: function defaultInclude() {
        return {};
      },
      create: null,
      creatExt: null,
      named(parent22, name, key) {
        return this.create({
          names: [...parent22.names, { name, key }]
        });
      },
      style: {
        bold: void 0,
        // /Service$/
        italic: void 0,
        // /Model$/
        cssMemo: /* @__PURE__ */ new Map([
          // handle empty names so we don't have to check for
          // name.length > 0 during this.css('')
          ["", ""]
          // bring a specific override
          // ["Marker", "color:#aea9ff;font-size:0.75em;text-transform:uppercase"]
        ]),
        collapseOnRE: /[a-z- ]+/g,
        color: void 0,
        // create collapsed name
        // insert collapsed name into cssMemo with original's style
        collapsed(name) {
          if (name.length < 5)
            return name;
          const collapsed = name.replace(this.collapseOnRE, "");
          if (!this.cssMemo.has(collapsed)) {
            this.cssMemo.set(collapsed, this.css(name));
          }
          return collapsed;
        },
        css(name) {
          var _a, _b, _c, _d;
          const found = this.cssMemo.get(name);
          if (found)
            return found;
          let css = "color:".concat((_b = (_a = this.color) == null ? void 0 : _a.call(this, name)) != null ? _b : "hsl(".concat((name.charCodeAt(0) + name.charCodeAt(name.length - 1)) % 360, ", 100%, 60%)"));
          if ((_c = this.bold) == null ? void 0 : _c.test(name)) {
            css += ";font-weight:600";
          }
          if ((_d = this.italic) == null ? void 0 : _d.test(name)) {
            css += ";font-style:italic";
          }
          this.cssMemo.set(name, css);
          return css;
        }
      }
    };
    function createTheatreInternalLogger(useConsole = console, _options = {}) {
      const ref = __spreadProps(__spreadValues({}, DEFAULTS), { includes: __spreadValues({}, DEFAULTS.includes) });
      const createConsole = {
        styled: createConsoleLoggerStyled.bind(ref, useConsole),
        noStyle: createConsoleLoggerNoStyle.bind(ref, useConsole)
      };
      const createExtBound = createExtLogger.bind(ref);
      function getConCreate() {
        return ref.loggingConsoleStyle && ref.loggerConsoleStyle ? createConsole.styled : createConsole.noStyle;
      }
      ref.create = getConCreate();
      return {
        configureLogger(config) {
          var _a;
          if (config === "console") {
            ref.loggerConsoleStyle = DEFAULTS.loggerConsoleStyle;
            ref.create = getConCreate();
          } else if (config.type === "console") {
            ref.loggerConsoleStyle = (_a = config.style) != null ? _a : DEFAULTS.loggerConsoleStyle;
            ref.create = getConCreate();
          } else if (config.type === "keyed") {
            ref.creatExt = (source) => config.keyed(source.names);
            ref.create = createExtBound;
          } else if (config.type === "named") {
            ref.creatExt = configNamedToKeyed.bind(null, config.named);
            ref.create = createExtBound;
          }
        },
        configureLogging(config) {
          var _a, _b, _c, _d, _e;
          ref.includes.dev = (_a = config.dev) != null ? _a : DEFAULTS.includes.dev;
          ref.includes.internal = (_b = config.internal) != null ? _b : DEFAULTS.includes.internal;
          ref.includes.min = (_c = config.min) != null ? _c : DEFAULTS.includes.min;
          ref.include = (_d = config.include) != null ? _d : DEFAULTS.include;
          ref.loggingConsoleStyle = (_e = config.consoleStyle) != null ? _e : DEFAULTS.loggingConsoleStyle;
          ref.create = getConCreate();
        },
        getLogger() {
          return ref.create({ names: [] });
        }
      };
    }
    function configNamedToKeyed(namedFn, source) {
      const names = [];
      for (let { name, key } of source.names) {
        names.push(key == null ? name : "".concat(name, " (").concat(key, ")"));
      }
      return namedFn(names);
    }
    function createExtLogger(source) {
      const includes = __spreadValues(__spreadValues({}, this.includes), this.include(source));
      const f2 = this.filtered;
      const named = this.named.bind(this, source);
      const ext = this.creatExt(source);
      const _HMM = shouldLog(
        includes,
        524
        /* _HMM */
      );
      const _TODO = shouldLog(
        includes,
        522
        /* _TODO */
      );
      const _ERROR = shouldLog(
        includes,
        521
        /* _ERROR */
      );
      const ERROR_DEV = shouldLog(
        includes,
        529
        /* ERROR_DEV */
      );
      const ERROR_PUBLIC = shouldLog(
        includes,
        545
        /* ERROR_PUBLIC */
      );
      const _WARN = shouldLog(
        includes,
        265
        /* _WARN */
      );
      const _KAPOW = shouldLog(
        includes,
        268
        /* _KAPOW */
      );
      const WARN_DEV = shouldLog(
        includes,
        273
        /* WARN_DEV */
      );
      const WARN_PUBLIC = shouldLog(
        includes,
        289
        /* WARN_PUBLIC */
      );
      const _DEBUG = shouldLog(
        includes,
        137
        /* _DEBUG */
      );
      const DEBUG_DEV = shouldLog(
        includes,
        145
        /* DEBUG_DEV */
      );
      const _TRACE = shouldLog(
        includes,
        73
        /* _TRACE */
      );
      const TRACE_DEV = shouldLog(
        includes,
        81
        /* TRACE_DEV */
      );
      const _hmm = _HMM ? ext.error.bind(ext, LEVELS._hmm) : f2.bind(
        source,
        524
        /* _HMM */
      );
      const _todo = _TODO ? ext.error.bind(ext, LEVELS._todo) : f2.bind(
        source,
        522
        /* _TODO */
      );
      const _error = _ERROR ? ext.error.bind(ext, LEVELS._error) : f2.bind(
        source,
        521
        /* _ERROR */
      );
      const errorDev = ERROR_DEV ? ext.error.bind(ext, LEVELS.errorDev) : f2.bind(
        source,
        529
        /* ERROR_DEV */
      );
      const errorPublic = ERROR_PUBLIC ? ext.error.bind(ext, LEVELS.errorPublic) : f2.bind(
        source,
        545
        /* ERROR_PUBLIC */
      );
      const _kapow = _KAPOW ? ext.warn.bind(ext, LEVELS._kapow) : f2.bind(
        source,
        268
        /* _KAPOW */
      );
      const _warn = _WARN ? ext.warn.bind(ext, LEVELS._warn) : f2.bind(
        source,
        265
        /* _WARN */
      );
      const warnDev = WARN_DEV ? ext.warn.bind(ext, LEVELS.warnDev) : f2.bind(
        source,
        273
        /* WARN_DEV */
      );
      const warnPublic = WARN_PUBLIC ? ext.warn.bind(ext, LEVELS.warnPublic) : f2.bind(
        source,
        273
        /* WARN_DEV */
      );
      const _debug = _DEBUG ? ext.debug.bind(ext, LEVELS._debug) : f2.bind(
        source,
        137
        /* _DEBUG */
      );
      const debugDev = DEBUG_DEV ? ext.debug.bind(ext, LEVELS.debugDev) : f2.bind(
        source,
        145
        /* DEBUG_DEV */
      );
      const _trace = _TRACE ? ext.trace.bind(ext, LEVELS._trace) : f2.bind(
        source,
        73
        /* _TRACE */
      );
      const traceDev = TRACE_DEV ? ext.trace.bind(ext, LEVELS.traceDev) : f2.bind(
        source,
        81
        /* TRACE_DEV */
      );
      const logger = {
        _hmm,
        _todo,
        _error,
        errorDev,
        errorPublic,
        _kapow,
        _warn,
        warnDev,
        warnPublic,
        _debug,
        debugDev,
        _trace,
        traceDev,
        lazy: {
          _hmm: _HMM ? lazy(_hmm) : _hmm,
          _todo: _TODO ? lazy(_todo) : _todo,
          _error: _ERROR ? lazy(_error) : _error,
          errorDev: ERROR_DEV ? lazy(errorDev) : errorDev,
          errorPublic: ERROR_PUBLIC ? lazy(errorPublic) : errorPublic,
          _kapow: _KAPOW ? lazy(_kapow) : _kapow,
          _warn: _WARN ? lazy(_warn) : _warn,
          warnDev: WARN_DEV ? lazy(warnDev) : warnDev,
          warnPublic: WARN_PUBLIC ? lazy(warnPublic) : warnPublic,
          _debug: _DEBUG ? lazy(_debug) : _debug,
          debugDev: DEBUG_DEV ? lazy(debugDev) : debugDev,
          _trace: _TRACE ? lazy(_trace) : _trace,
          traceDev: TRACE_DEV ? lazy(traceDev) : traceDev
        },
        //
        named,
        utilFor: {
          internal() {
            return {
              debug: logger._debug,
              error: logger._error,
              warn: logger._warn,
              trace: logger._trace,
              named(name, key) {
                return logger.named(name, key).utilFor.internal();
              }
            };
          },
          dev() {
            return {
              debug: logger.debugDev,
              error: logger.errorDev,
              warn: logger.warnDev,
              trace: logger.traceDev,
              named(name, key) {
                return logger.named(name, key).utilFor.dev();
              }
            };
          },
          public() {
            return {
              error: logger.errorPublic,
              warn: logger.warnPublic,
              debug(message, obj) {
                logger._warn('(public "debug" filtered out) '.concat(message), obj);
              },
              trace(message, obj) {
                logger._warn('(public "trace" filtered out) '.concat(message), obj);
              },
              named(name, key) {
                return logger.named(name, key).utilFor.public();
              }
            };
          }
        }
      };
      return logger;
    }
    function createConsoleLoggerStyled(con, source) {
      const includes = __spreadValues(__spreadValues({}, this.includes), this.include(source));
      const styleArgs = [];
      let prefix = "";
      for (let i22 = 0; i22 < source.names.length; i22++) {
        const { name, key } = source.names[i22];
        prefix += " %c".concat(name);
        styleArgs.push(this.style.css(name));
        if (key != null) {
          const keyStr = "%c#".concat(key);
          prefix += keyStr;
          styleArgs.push(this.style.css(keyStr));
        }
      }
      const f2 = this.filtered;
      const named = this.named.bind(this, source);
      const prefixArr = [prefix, ...styleArgs];
      return _createConsoleLogger(
        f2,
        source,
        includes,
        con,
        prefixArr,
        styledKapowPrefix(prefixArr),
        named
      );
    }
    function styledKapowPrefix(args) {
      const start = args.slice(0);
      for (let i22 = 1; i22 < start.length; i22++)
        start[i22] += ";background-color:#e0005a;padding:2px;color:white";
      return start;
    }
    function createConsoleLoggerNoStyle(con, source) {
      const includes = __spreadValues(__spreadValues({}, this.includes), this.include(source));
      let prefix = "";
      for (let i22 = 0; i22 < source.names.length; i22++) {
        const { name, key } = source.names[i22];
        prefix += " ".concat(name);
        if (key != null) {
          prefix += "#".concat(key);
        }
      }
      const f2 = this.filtered;
      const named = this.named.bind(this, source);
      const prefixArr = [prefix];
      return _createConsoleLogger(
        f2,
        source,
        includes,
        con,
        prefixArr,
        prefixArr,
        named
      );
    }
    function _createConsoleLogger(f2, source, includes, con, prefix, kapowPrefix, named) {
      const _HMM = shouldLog(
        includes,
        524
        /* _HMM */
      );
      const _TODO = shouldLog(
        includes,
        522
        /* _TODO */
      );
      const _ERROR = shouldLog(
        includes,
        521
        /* _ERROR */
      );
      const ERROR_DEV = shouldLog(
        includes,
        529
        /* ERROR_DEV */
      );
      const ERROR_PUBLIC = shouldLog(
        includes,
        545
        /* ERROR_PUBLIC */
      );
      const _WARN = shouldLog(
        includes,
        265
        /* _WARN */
      );
      const _KAPOW = shouldLog(
        includes,
        268
        /* _KAPOW */
      );
      const WARN_DEV = shouldLog(
        includes,
        273
        /* WARN_DEV */
      );
      const WARN_PUBLIC = shouldLog(
        includes,
        289
        /* WARN_PUBLIC */
      );
      const _DEBUG = shouldLog(
        includes,
        137
        /* _DEBUG */
      );
      const DEBUG_DEV = shouldLog(
        includes,
        145
        /* DEBUG_DEV */
      );
      const _TRACE = shouldLog(
        includes,
        73
        /* _TRACE */
      );
      const TRACE_DEV = shouldLog(
        includes,
        81
        /* TRACE_DEV */
      );
      const _hmm = _HMM ? con.error.bind(con, ...prefix) : f2.bind(
        source,
        524
        /* _HMM */
      );
      const _todo = _TODO ? con.error.bind(con, ...prefix) : f2.bind(
        source,
        522
        /* _TODO */
      );
      const _error = _ERROR ? con.error.bind(con, ...prefix) : f2.bind(
        source,
        521
        /* _ERROR */
      );
      const errorDev = ERROR_DEV ? con.error.bind(con, ...prefix) : f2.bind(
        source,
        529
        /* ERROR_DEV */
      );
      const errorPublic = ERROR_PUBLIC ? con.error.bind(con, ...prefix) : f2.bind(
        source,
        545
        /* ERROR_PUBLIC */
      );
      const _kapow = _KAPOW ? con.warn.bind(con, ...kapowPrefix) : f2.bind(
        source,
        268
        /* _KAPOW */
      );
      const _warn = _WARN ? con.warn.bind(con, ...prefix) : f2.bind(
        source,
        265
        /* _WARN */
      );
      const warnDev = WARN_DEV ? con.warn.bind(con, ...prefix) : f2.bind(
        source,
        273
        /* WARN_DEV */
      );
      const warnPublic = WARN_PUBLIC ? con.warn.bind(con, ...prefix) : f2.bind(
        source,
        273
        /* WARN_DEV */
      );
      const _debug = _DEBUG ? con.info.bind(con, ...prefix) : f2.bind(
        source,
        137
        /* _DEBUG */
      );
      const debugDev = DEBUG_DEV ? con.info.bind(con, ...prefix) : f2.bind(
        source,
        145
        /* DEBUG_DEV */
      );
      const _trace = _TRACE ? con.debug.bind(con, ...prefix) : f2.bind(
        source,
        73
        /* _TRACE */
      );
      const traceDev = TRACE_DEV ? con.debug.bind(con, ...prefix) : f2.bind(
        source,
        81
        /* TRACE_DEV */
      );
      const logger = {
        _hmm,
        _todo,
        _error,
        errorDev,
        errorPublic,
        _kapow,
        _warn,
        warnDev,
        warnPublic,
        _debug,
        debugDev,
        _trace,
        traceDev,
        lazy: {
          _hmm: _HMM ? lazy(_hmm) : _hmm,
          _todo: _TODO ? lazy(_todo) : _todo,
          _error: _ERROR ? lazy(_error) : _error,
          errorDev: ERROR_DEV ? lazy(errorDev) : errorDev,
          errorPublic: ERROR_PUBLIC ? lazy(errorPublic) : errorPublic,
          _kapow: _KAPOW ? lazy(_kapow) : _kapow,
          _warn: _WARN ? lazy(_warn) : _warn,
          warnDev: WARN_DEV ? lazy(warnDev) : warnDev,
          warnPublic: WARN_PUBLIC ? lazy(warnPublic) : warnPublic,
          _debug: _DEBUG ? lazy(_debug) : _debug,
          debugDev: DEBUG_DEV ? lazy(debugDev) : debugDev,
          _trace: _TRACE ? lazy(_trace) : _trace,
          traceDev: TRACE_DEV ? lazy(traceDev) : traceDev
        },
        //
        named,
        utilFor: {
          internal() {
            return {
              debug: logger._debug,
              error: logger._error,
              warn: logger._warn,
              trace: logger._trace,
              named(name, key) {
                return logger.named(name, key).utilFor.internal();
              }
            };
          },
          dev() {
            return {
              debug: logger.debugDev,
              error: logger.errorDev,
              warn: logger.warnDev,
              trace: logger.traceDev,
              named(name, key) {
                return logger.named(name, key).utilFor.dev();
              }
            };
          },
          public() {
            return {
              error: logger.errorPublic,
              warn: logger.warnPublic,
              debug(message, obj) {
                logger._warn('(public "debug" filtered out) '.concat(message), obj);
              },
              trace(message, obj) {
                logger._warn('(public "trace" filtered out) '.concat(message), obj);
              },
              named(name, key) {
                return logger.named(name, key).utilFor.public();
              }
            };
          }
        }
      };
      return logger;
    }
    var internal = createTheatreInternalLogger(console, {});
    internal.configureLogging({
      dev: true,
      min: 64
      /* TRACE */
    });
    var logger_default = internal.getLogger().named("Theatre.js (default logger)").utilFor.dev();
    var cache = /* @__PURE__ */ new WeakMap();
    function getOrderingOfPropTypeConfig(config) {
      const existing = cache.get(config);
      if (existing)
        return existing;
      const map = /* @__PURE__ */ new Map();
      cache.set(config, map);
      iterateOnCompound([], config, map);
      return map;
    }
    function iterateOnCompound(path, config, map) {
      for (const [key, subConf] of Object.entries(config.props)) {
        if (!isPropConfigComposite(subConf)) {
          const subPath = [...path, key];
          map.set(JSON.stringify(subPath), map.size);
          iterateOnAny(subPath, subConf, map);
        }
      }
      for (const [key, subConf] of Object.entries(config.props)) {
        if (isPropConfigComposite(subConf)) {
          const subPath = [...path, key];
          map.set(JSON.stringify(subPath), map.size);
          iterateOnAny(subPath, subConf, map);
        }
      }
    }
    function iterateOnAny(path, config, map) {
      if (config.type === "compound") {
        iterateOnCompound(path, config, map);
      } else if (config.type === "enum") {
        throw new Error("Enums aren't supported yet");
      } else {
        map.set(JSON.stringify(path), map.size);
      }
    }
    function isObjectEmpty(obj) {
      return typeof obj === "object" && obj !== null && Object.keys(obj).length === 0;
    }
    var SheetObjectTemplate = class {
      constructor(sheetTemplate, objectKey, nativeObject, config, _temp_actions) {
        this.sheetTemplate = sheetTemplate;
        __publicField(this, "address");
        __publicField(this, "type", "Theatre_SheetObjectTemplate");
        __publicField(this, "_config");
        __publicField(this, "_temp_actions_atom");
        __publicField(this, "_cache", new SimpleCache());
        __publicField(this, "project");
        __publicField(this, "pointerToSheetState");
        __publicField(this, "pointerToStaticOverrides");
        this.address = __spreadProps(__spreadValues({}, sheetTemplate.address), { objectKey });
        this._config = new import_dataverse6.Atom(config);
        this._temp_actions_atom = new import_dataverse6.Atom(_temp_actions);
        this.project = sheetTemplate.project;
        this.pointerToSheetState = this.sheetTemplate.project.pointers.historic.sheetsById[this.address.sheetId];
        this.pointerToStaticOverrides = this.pointerToSheetState.staticOverrides.byObject[this.address.objectKey];
      }
      get staticConfig() {
        return this._config.get();
      }
      get configPointer() {
        return this._config.pointer;
      }
      get _temp_actions() {
        return this._temp_actions_atom.get();
      }
      get _temp_actionsPointer() {
        return this._temp_actions_atom.pointer;
      }
      createInstance(sheet2, nativeObject, config) {
        this._config.set(config);
        return new SheetObject(sheet2, this, nativeObject);
      }
      reconfigure(config) {
        this._config.set(config);
      }
      /**
       * The `actions` api is temporary until we implement events.
       */
      _temp_setActions(actions) {
        this._temp_actions_atom.set(actions);
      }
      /**
       * Returns the default values (all defaults are read from the config)
       */
      getDefaultValues() {
        return this._cache.get(
          "getDefaultValues()",
          () => (0, import_dataverse6.prism)(() => {
            const config = (0, import_dataverse6.val)(this.configPointer);
            return getPropDefaultsOfSheetObject(config);
          })
        );
      }
      /**
       * Returns values that are set statically (ie, not sequenced, and not defaults)
       */
      getStaticValues() {
        return this._cache.get(
          "getStaticValues",
          () => (0, import_dataverse6.prism)(() => {
            var _a;
            const json = (_a = (0, import_dataverse6.val)(this.pointerToStaticOverrides)) != null ? _a : {};
            const config = (0, import_dataverse6.val)(this.configPointer);
            const deserialized = config.deserializeAndSanitize(json) || {};
            return deserialized;
          })
        );
      }
      /**
       * Filters through the sequenced tracks and returns those tracks who are valid
       * according to the object's prop types, then sorted in the same order as the config
       *
       * Returns an array.
       */
      getArrayOfValidSequenceTracks() {
        return this._cache.get(
          "getArrayOfValidSequenceTracks",
          () => (0, import_dataverse6.prism)(() => {
            const pointerToSheetState = this.project.pointers.historic.sheetsById[this.address.sheetId];
            const trackIdByPropPath = (0, import_dataverse6.val)(
              pointerToSheetState.sequence.tracksByObject[this.address.objectKey].trackIdByPropPath
            );
            if (!trackIdByPropPath)
              return emptyArray;
            const arrayOfIds = [];
            if (!trackIdByPropPath)
              return emptyArray;
            const objectConfig = (0, import_dataverse6.val)(this.configPointer);
            const _entries = Object.entries(trackIdByPropPath);
            for (const [pathToPropInString, trackId] of _entries) {
              const pathToProp = parsePathToProp(pathToPropInString);
              if (!pathToProp)
                continue;
              const propConfig = getPropConfigByPath(objectConfig, pathToProp);
              const isSequencable = propConfig && isPropConfSequencable(propConfig);
              if (!isSequencable)
                continue;
              arrayOfIds.push({ pathToProp, trackId });
            }
            const mapping = getOrderingOfPropTypeConfig(objectConfig);
            arrayOfIds.sort((a2, b2) => {
              const pathToPropA = a2.pathToProp;
              const pathToPropB = b2.pathToProp;
              const indexA = mapping.get(JSON.stringify(pathToPropA));
              const indexB = mapping.get(JSON.stringify(pathToPropB));
              if (indexA > indexB) {
                return 1;
              }
              return -1;
            });
            if (arrayOfIds.length === 0) {
              return emptyArray;
            } else {
              return arrayOfIds;
            }
          })
        );
      }
      /**
       * Filters through the sequenced tracks those tracks that are valid
       * according to the object's prop types.
       *
       * Returns a map.
       *
       * Not available in core.
       */
      getMapOfValidSequenceTracks_forStudio() {
        return this._cache.get(
          "getMapOfValidSequenceTracks_forStudio",
          () => (0, import_dataverse6.prism)(() => {
            const arr = (0, import_dataverse6.val)(this.getArrayOfValidSequenceTracks());
            let map = {};
            for (const { pathToProp, trackId } of arr) {
              set_default(map, pathToProp, trackId);
            }
            return map;
          })
        );
      }
      /**
       * @returns The static overrides that are not sequenced. Returns undefined if there are no static overrides,
       * or if all those static overrides are sequenced.
       */
      getStaticButNotSequencedOverrides() {
        return this._cache.get(
          "getStaticButNotSequencedOverrides",
          () => (0, import_dataverse6.prism)(() => {
            const staticOverrides = (0, import_dataverse6.val)(this.getStaticValues());
            const arrayOfValidSequenceTracks = (0, import_dataverse6.val)(
              this.getArrayOfValidSequenceTracks()
            );
            const staticButNotSequencedOverrides = cloneDeep_default(staticOverrides);
            for (const { pathToProp } of arrayOfValidSequenceTracks) {
              unset_default(staticButNotSequencedOverrides, pathToProp);
              let parentPath = pathToProp.slice(0, -1);
              while (parentPath.length > 0) {
                const parentValue = getDeep(
                  staticButNotSequencedOverrides,
                  parentPath
                );
                if (!isObjectEmpty(parentValue))
                  break;
                unset_default(staticButNotSequencedOverrides, parentPath);
                parentPath = parentPath.slice(0, -1);
              }
            }
            if (isObjectEmpty(staticButNotSequencedOverrides)) {
              return void 0;
            } else {
              return staticButNotSequencedOverrides;
            }
          })
        );
      }
      getDefaultsAtPointer(pointer3) {
        const { path } = (0, import_dataverse6.getPointerParts)(pointer3);
        const defaults2 = this.getDefaultValues().getValue();
        const defaultsAtPath = getDeep(defaults2, path);
        return defaultsAtPath;
      }
    };
    function parsePathToProp(pathToPropInString) {
      try {
        const pathToProp = JSON.parse(pathToPropInString);
        return pathToProp;
      } catch (e2) {
        logger_default.warn(
          "property ".concat(JSON.stringify(
            pathToPropInString
          ), " cannot be parsed. Skipping.")
        );
        return void 0;
      }
    }
    var import_dataverse15 = requireDist$2();
    var encodePathToProp = memoizeFn(
      (p2) => (
        // we're using JSON.stringify here, but we could use a faster alternative.
        // If you happen to do that, first make sure no `PathToProp_Encoded` is ever
        // used in the store, otherwise you'll have to write a migration.
        JSON.stringify(p2)
      )
    );
    __toESM(require_propose());
    var TheatreError = class extends Error {
    };
    var InvalidArgumentError = class extends TheatreError {
    };
    var import_dataverse10 = requireDist$2();
    var import_dataverse11 = requireDist$2();
    var import_dataverse12 = requireDist$2();
    var import_dataverse13 = requireDist$2();
    function defer() {
      let resolve;
      let reject;
      const promise = new Promise((rs, rj) => {
        resolve = (v2) => {
          rs(v2);
          deferred.status = "resolved";
        };
        reject = (v2) => {
          rj(v2);
          deferred.status = "rejected";
        };
      });
      const deferred = {
        resolve,
        reject,
        promise,
        status: "pending"
      };
      return deferred;
    }
    var noop = () => {
    };
    var noop_default = noop;
    var import_dataverse7 = requireDist$2();
    var DefaultPlaybackController = class {
      constructor() {
        __publicField(this, "_stopPlayCallback", noop_default);
        __publicField(this, "_state", new import_dataverse7.Atom({
          position: 0,
          playing: false
        }));
        __publicField(this, "statePointer");
        this.statePointer = this._state.pointer;
      }
      destroy() {
      }
      pause() {
        this._stopPlayCallback();
        this.playing = false;
        this._stopPlayCallback = noop_default;
      }
      gotoPosition(time) {
        this._updatePositionInState(time);
      }
      _updatePositionInState(time) {
        this._state.setByPointer((p2) => p2.position, time);
      }
      getCurrentPosition() {
        return this._state.get().position;
      }
      get playing() {
        return this._state.get().playing;
      }
      set playing(playing) {
        this._state.setByPointer((p2) => p2.playing, playing);
      }
      play(iterationCount, range, rate, direction, ticker) {
        if (this.playing) {
          this.pause();
        }
        this.playing = true;
        const iterationLength = range[1] - range[0];
        {
          const startPos = this.getCurrentPosition();
          if (startPos < range[0] || startPos > range[1]) {
            if (direction === "normal" || direction === "alternate") {
              this._updatePositionInState(range[0]);
            } else if (direction === "reverse" || direction === "alternateReverse") {
              this._updatePositionInState(range[1]);
            }
          } else if (direction === "normal" || direction === "alternate") {
            if (startPos === range[1]) {
              this._updatePositionInState(range[0]);
            }
          } else {
            if (startPos === range[0]) {
              this._updatePositionInState(range[1]);
            }
          }
        }
        const deferred = defer();
        const initialTickerTime = ticker.time;
        const totalPlaybackLength = iterationLength * iterationCount;
        let initialElapsedPos = this.getCurrentPosition() - range[0];
        if (direction === "reverse" || direction === "alternateReverse") {
          initialElapsedPos = range[1] - this.getCurrentPosition();
        }
        const tick = (currentTickerTime) => {
          const elapsedTickerTime = Math.max(
            currentTickerTime - initialTickerTime,
            0
          );
          const elapsedTickerTimeInSeconds = elapsedTickerTime / 1e3;
          const elapsedPos = Math.min(
            elapsedTickerTimeInSeconds * rate + initialElapsedPos,
            totalPlaybackLength
          );
          if (elapsedPos !== totalPlaybackLength) {
            const iterationNumber = Math.floor(elapsedPos / iterationLength);
            let currentIterationPos = elapsedPos / iterationLength % 1 * iterationLength;
            if (direction !== "normal") {
              if (direction === "reverse") {
                currentIterationPos = iterationLength - currentIterationPos;
              } else {
                const isCurrentIterationNumberEven = iterationNumber % 2 === 0;
                if (direction === "alternate") {
                  if (!isCurrentIterationNumberEven) {
                    currentIterationPos = iterationLength - currentIterationPos;
                  }
                } else {
                  if (isCurrentIterationNumberEven) {
                    currentIterationPos = iterationLength - currentIterationPos;
                  }
                }
              }
            }
            this._updatePositionInState(currentIterationPos + range[0]);
            requestNextTick();
          } else {
            if (direction === "normal") {
              this._updatePositionInState(range[1]);
            } else if (direction === "reverse") {
              this._updatePositionInState(range[0]);
            } else {
              const isLastIterationEven = (iterationCount - 1) % 2 === 0;
              if (direction === "alternate") {
                if (isLastIterationEven) {
                  this._updatePositionInState(range[1]);
                } else {
                  this._updatePositionInState(range[0]);
                }
              } else {
                if (isLastIterationEven) {
                  this._updatePositionInState(range[0]);
                } else {
                  this._updatePositionInState(range[1]);
                }
              }
            }
            this.playing = false;
            deferred.resolve(true);
          }
        };
        this._stopPlayCallback = () => {
          ticker.offThisOrNextTick(tick);
          ticker.offNextTick(tick);
          if (this.playing)
            deferred.resolve(false);
        };
        const requestNextTick = () => ticker.onNextTick(tick);
        ticker.onThisOrNextTick(tick);
        return deferred.promise;
      }
      playDynamicRange(rangeD, ticker) {
        if (this.playing) {
          this.pause();
        }
        this.playing = true;
        const deferred = defer();
        const untapFromRangeD = rangeD.keepHot();
        void deferred.promise.then(untapFromRangeD, untapFromRangeD);
        let lastTickerTime = ticker.time;
        const tick = (currentTickerTime) => {
          const elapsedSinceLastTick = Math.max(
            currentTickerTime - lastTickerTime,
            0
          );
          lastTickerTime = currentTickerTime;
          const elapsedSinceLastTickInSeconds = elapsedSinceLastTick / 1e3;
          const lastPosition = this.getCurrentPosition();
          const range = rangeD.getValue();
          if (lastPosition < range[0] || lastPosition > range[1]) {
            this.gotoPosition(range[0]);
          } else {
            let newPosition = lastPosition + elapsedSinceLastTickInSeconds;
            if (newPosition > range[1]) {
              newPosition = range[0] + (newPosition - range[1]);
            }
            this.gotoPosition(newPosition);
          }
          requestNextTick();
        };
        this._stopPlayCallback = () => {
          ticker.offThisOrNextTick(tick);
          ticker.offNextTick(tick);
          deferred.resolve(false);
        };
        const requestNextTick = () => ticker.onNextTick(tick);
        ticker.onThisOrNextTick(tick);
        return deferred.promise;
      }
    };
    var import_dataverse8 = requireDist$2();
    var studioBundle = "__TheatreJS_StudioBundle";
    var coreBundle = "__TheatreJS_CoreBundle";
    var notifications = "__TheatreJS_Notifications";
    var createHandler = (type) => (...args) => {
      var _a;
      switch (type) {
        case "success": {
          logger_default.debug(args.slice(0, 2).join("\n"));
          break;
        }
        case "info": {
          logger_default.debug(args.slice(0, 2).join("\n"));
          break;
        }
        case "warning": {
          logger_default.warn(args.slice(0, 2).join("\n"));
          break;
        }
      }
      return typeof window !== "undefined" ? (
        // @ts-ignore
        (_a = window[notifications]) == null ? void 0 : _a.notify[type](...args)
      ) : void 0;
    };
    var notify = {
      warning: createHandler("warning"),
      success: createHandler("success"),
      info: createHandler("info"),
      error: createHandler("error")
    };
    if (typeof window !== "undefined") {
      window.addEventListener("error", (e2) => {
        notify.error(
          "An error occurred",
          "<pre>".concat(e2.message, "</pre>\n\nSee **console** for details.")
        );
      });
      window.addEventListener("unhandledrejection", (e2) => {
        notify.error(
          "An error occurred",
          "<pre>".concat(e2.reason, "</pre>\n\nSee **console** for details.")
        );
      });
    }
    var AudioPlaybackController = class {
      constructor(_decodedBuffer, _audioContext, _nodeDestination) {
        this._decodedBuffer = _decodedBuffer;
        this._audioContext = _audioContext;
        this._nodeDestination = _nodeDestination;
        __publicField(this, "_mainGain");
        __publicField(this, "_state", new import_dataverse8.Atom({
          position: 0,
          playing: false
        }));
        __publicField(this, "statePointer");
        __publicField(this, "_stopPlayCallback", noop_default);
        this.statePointer = this._state.pointer;
        this._mainGain = this._audioContext.createGain();
        this._mainGain.connect(this._nodeDestination);
      }
      playDynamicRange(rangeD, ticker) {
        const deferred = defer();
        if (this._playing)
          this.pause();
        this._playing = true;
        let stop = void 0;
        const play = () => {
          stop == null ? void 0 : stop();
          stop = this._loopInRange(rangeD.getValue(), ticker).stop;
        };
        const untapFromRangeD = rangeD.onStale(play);
        play();
        this._stopPlayCallback = () => {
          stop == null ? void 0 : stop();
          untapFromRangeD();
          deferred.resolve(false);
        };
        return deferred.promise;
      }
      _loopInRange(range, ticker) {
        const rate = 1;
        let startPos = this.getCurrentPosition();
        const iterationLength = range[1] - range[0];
        if (startPos < range[0] || startPos > range[1]) {
          this._updatePositionInState(range[0]);
        } else if (startPos === range[1]) {
          this._updatePositionInState(range[0]);
        }
        startPos = this.getCurrentPosition();
        const currentSource = this._audioContext.createBufferSource();
        currentSource.buffer = this._decodedBuffer;
        currentSource.connect(this._mainGain);
        currentSource.playbackRate.value = rate;
        currentSource.loop = true;
        currentSource.loopStart = range[0];
        currentSource.loopEnd = range[1];
        const initialTickerTime = ticker.time;
        let initialElapsedPos = startPos - range[0];
        currentSource.start(0, startPos);
        const tick = (currentTickerTime) => {
          const elapsedTickerTime = Math.max(
            currentTickerTime - initialTickerTime,
            0
          );
          const elapsedTickerTimeInSeconds = elapsedTickerTime / 1e3;
          const elapsedPos = elapsedTickerTimeInSeconds * rate + initialElapsedPos;
          let currentIterationPos = elapsedPos / iterationLength % 1 * iterationLength;
          this._updatePositionInState(currentIterationPos + range[0]);
          requestNextTick();
        };
        const requestNextTick = () => ticker.onNextTick(tick);
        ticker.onThisOrNextTick(tick);
        const stop = () => {
          currentSource.stop();
          currentSource.disconnect();
          ticker.offThisOrNextTick(tick);
          ticker.offNextTick(tick);
        };
        return { stop };
      }
      get _playing() {
        return this._state.get().playing;
      }
      set _playing(playing) {
        this._state.setByPointer((p2) => p2.playing, playing);
      }
      destroy() {
      }
      pause() {
        this._stopPlayCallback();
        this._playing = false;
        this._stopPlayCallback = noop_default;
      }
      gotoPosition(time) {
        this._updatePositionInState(time);
      }
      _updatePositionInState(time) {
        this._state.reduce((s2) => __spreadProps(__spreadValues({}, s2), { position: time }));
      }
      getCurrentPosition() {
        return this._state.get().position;
      }
      play(iterationCount, range, rate, direction, ticker) {
        if (this._playing) {
          this.pause();
        }
        this._playing = true;
        let startPos = this.getCurrentPosition();
        const iterationLength = range[1] - range[0];
        if (direction !== "normal") {
          throw new InvalidArgumentError(
            'Audio-controlled sequences can only be played in the "normal" direction. ' + "'".concat(direction, "' given.")
          );
        }
        if (startPos < range[0] || startPos > range[1]) {
          this._updatePositionInState(range[0]);
        } else if (startPos === range[1]) {
          this._updatePositionInState(range[0]);
        }
        startPos = this.getCurrentPosition();
        const deferred = defer();
        const currentSource = this._audioContext.createBufferSource();
        currentSource.buffer = this._decodedBuffer;
        currentSource.connect(this._mainGain);
        currentSource.playbackRate.value = rate;
        if (iterationCount > 1e3) {
          notify.warning(
            "Can't play sequences with audio more than 1000 times",
            "The sequence will still play, but only 1000 times. The `iterationCount: ".concat(iterationCount, "` provided to `sequence.play()`\nis too high for a sequence with audio.\n\nTo fix this, either set `iterationCount` to a lower value, or remove the audio from the sequence."),
            [
              {
                url: "https://www.theatrejs.com/docs/latest/manual/audio",
                title: "Using Audio"
              },
              {
                url: "https://www.theatrejs.com/docs/latest/api/core#sequence.attachaudio",
                title: "Audio API"
              }
            ]
          );
          iterationCount = 1e3;
        }
        if (iterationCount > 1) {
          currentSource.loop = true;
          currentSource.loopStart = range[0];
          currentSource.loopEnd = range[1];
        }
        const initialTickerTime = ticker.time;
        let initialElapsedPos = startPos - range[0];
        const totalPlaybackLength = iterationLength * iterationCount;
        currentSource.start(0, startPos, totalPlaybackLength - initialElapsedPos);
        const tick = (currentTickerTime) => {
          const elapsedTickerTime = Math.max(
            currentTickerTime - initialTickerTime,
            0
          );
          const elapsedTickerTimeInSeconds = elapsedTickerTime / 1e3;
          const elapsedPos = Math.min(
            elapsedTickerTimeInSeconds * rate + initialElapsedPos,
            totalPlaybackLength
          );
          if (elapsedPos !== totalPlaybackLength) {
            let currentIterationPos = elapsedPos / iterationLength % 1 * iterationLength;
            this._updatePositionInState(currentIterationPos + range[0]);
            requestNextTick();
          } else {
            this._updatePositionInState(range[1]);
            this._playing = false;
            cleanup();
            deferred.resolve(true);
          }
        };
        const cleanup = () => {
          currentSource.stop();
          currentSource.disconnect();
        };
        this._stopPlayCallback = () => {
          cleanup();
          ticker.offThisOrNextTick(tick);
          ticker.offNextTick(tick);
          if (this._playing)
            deferred.resolve(false);
        };
        const requestNextTick = () => ticker.onNextTick(tick);
        ticker.onThisOrNextTick(tick);
        return deferred.promise;
      }
    };
    var import_dataverse9 = requireDist$2();
    var lastDriverId = 0;
    function createRafDriver(conf) {
      var _a;
      const tick = (time) => {
        ticker.tick(time);
      };
      const ticker = new import_dataverse9.Ticker({
        onActive() {
          var _a2;
          (_a2 = conf == null ? void 0 : conf.start) == null ? void 0 : _a2.call(conf);
        },
        onDormant() {
          var _a2;
          (_a2 = conf == null ? void 0 : conf.stop) == null ? void 0 : _a2.call(conf);
        }
      });
      const driverPublicApi = {
        tick,
        id: lastDriverId++,
        name: (_a = conf == null ? void 0 : conf.name) != null ? _a : "CustomRafDriver-".concat(lastDriverId),
        type: "Theatre_RafDriver_PublicAPI"
      };
      const driverPrivateApi = {
        type: "Theatre_RafDriver_PrivateAPI",
        publicApi: driverPublicApi,
        ticker,
        start: conf == null ? void 0 : conf.start,
        stop: conf == null ? void 0 : conf.stop
      };
      setPrivateAPI(driverPublicApi, driverPrivateApi);
      return driverPublicApi;
    }
    function createBasicRafDriver() {
      let rafId = null;
      const start = () => {
        if (typeof window !== "undefined") {
          const onAnimationFrame = (t22) => {
            driver.tick(t22);
            rafId = window.requestAnimationFrame(onAnimationFrame);
          };
          rafId = window.requestAnimationFrame(onAnimationFrame);
        } else {
          driver.tick(0);
          setTimeout(() => driver.tick(1), 0);
        }
      };
      const stop = () => {
        if (typeof window !== "undefined") {
          if (rafId !== null) {
            window.cancelAnimationFrame(rafId);
          }
        }
      };
      const driver = createRafDriver({ name: "DefaultCoreRafDriver", start, stop });
      return driver;
    }
    var coreRafDriver;
    function getCoreRafDriver() {
      if (!coreRafDriver) {
        setCoreRafDriver(createBasicRafDriver());
      }
      return coreRafDriver;
    }
    function getCoreTicker() {
      return getCoreRafDriver().ticker;
    }
    function setCoreRafDriver(driver) {
      if (coreRafDriver) {
        throw new Error("`setCoreRafDriver()` is already called.");
      }
      const driverPrivateApi = privateAPI(driver);
      coreRafDriver = driverPrivateApi;
    }
    var TheatreSequence = class {
      get type() {
        return "Theatre_Sequence_PublicAPI";
      }
      /**
       * @internal
       */
      constructor(sheet2) {
        setPrivateAPI(this, sheet2);
      }
      play(conf) {
        const priv = privateAPI(this);
        if (priv._project.isReady()) {
          const ticker = (conf == null ? void 0 : conf.rafDriver) ? privateAPI(conf.rafDriver).ticker : getCoreTicker();
          return priv.play(conf != null ? conf : {}, ticker);
        } else {
          const d2 = defer();
          d2.resolve(true);
          return d2.promise;
        }
      }
      pause() {
        privateAPI(this).pause();
      }
      get position() {
        return privateAPI(this).position;
      }
      set position(position) {
        privateAPI(this).position = position;
      }
      __experimental_getKeyframes(prop) {
        return privateAPI(this).getKeyframesOfSimpleProp(prop);
      }
      async attachAudio(args) {
        const { audioContext, destinationNode, decodedBuffer, gainNode } = await resolveAudioBuffer(args);
        const playbackController = new AudioPlaybackController(
          decodedBuffer,
          audioContext,
          gainNode
        );
        privateAPI(this).replacePlaybackController(playbackController);
        return { audioContext, destinationNode, decodedBuffer, gainNode };
      }
      get pointer() {
        return privateAPI(this).pointer;
      }
    };
    async function resolveAudioBuffer(args) {
      function getAudioContext() {
        if (args.audioContext)
          return Promise.resolve(args.audioContext);
        const ctx = new AudioContext();
        if (ctx.state === "running")
          return Promise.resolve(ctx);
        if (typeof window === "undefined") {
          return Promise.resolve(ctx);
        }
        return new Promise((resolve) => {
          const listener = () => {
            ctx.resume().catch((err) => {
              console.error(err);
            });
          };
          const eventsToHookInto = [
            "mousedown",
            "keydown",
            "touchstart"
          ];
          const eventListenerOpts = { capture: true, passive: false };
          eventsToHookInto.forEach((eventName) => {
            window.addEventListener(eventName, listener, eventListenerOpts);
          });
          ctx.addEventListener("statechange", () => {
            if (ctx.state === "running") {
              eventsToHookInto.forEach((eventName) => {
                window.removeEventListener(eventName, listener, eventListenerOpts);
              });
              resolve(ctx);
            }
          });
        });
      }
      async function getAudioBuffer() {
        if (args.source instanceof AudioBuffer) {
          return args.source;
        }
        const decodedBufferDeferred = defer();
        if (typeof args.source !== "string") {
          throw new Error(
            "Error validating arguments to sequence.attachAudio(). args.source must either be a string or an instance of AudioBuffer."
          );
        }
        let fetchResponse;
        try {
          fetchResponse = await fetch(args.source);
        } catch (e2) {
          console.error(e2);
          throw new Error(
            "Could not fetch '".concat(args.source, "'. Network error logged above.")
          );
        }
        let arrayBuffer;
        try {
          arrayBuffer = await fetchResponse.arrayBuffer();
        } catch (e2) {
          console.error(e2);
          throw new Error("Could not read '".concat(args.source, "' as an arrayBuffer."));
        }
        const audioContext2 = await audioContextPromise;
        audioContext2.decodeAudioData(
          arrayBuffer,
          decodedBufferDeferred.resolve,
          decodedBufferDeferred.reject
        );
        let decodedBuffer2;
        try {
          decodedBuffer2 = await decodedBufferDeferred.promise;
        } catch (e2) {
          console.error(e2);
          throw new Error("Could not decode ".concat(args.source, " as an audio file."));
        }
        return decodedBuffer2;
      }
      const audioContextPromise = getAudioContext();
      const audioBufferPromise = getAudioBuffer();
      const [audioContext, decodedBuffer] = await Promise.all([
        audioContextPromise,
        audioBufferPromise
      ]);
      const destinationNode = args.destinationNode || audioContext.destination;
      const gainNode = audioContext.createGain();
      gainNode.connect(destinationNode);
      return {
        audioContext,
        decodedBuffer,
        gainNode,
        destinationNode
      };
    }
    var isSheetObject = typeAsserter("Theatre_SheetObject");
    function typeAsserter(t22) {
      return (v2) => typeof v2 === "object" && !!v2 && v2.type === t22;
    }
    var Sequence = class {
      constructor(_project, _sheet, _lengthD, _subUnitsPerUnitD, playbackController) {
        this._project = _project;
        this._sheet = _sheet;
        this._lengthD = _lengthD;
        this._subUnitsPerUnitD = _subUnitsPerUnitD;
        __publicField(this, "address");
        __publicField(this, "publicApi");
        __publicField(this, "_playbackControllerBox");
        __publicField(this, "_prismOfStatePointer");
        __publicField(this, "_positionD");
        __publicField(this, "_positionFormatterD");
        __publicField(this, "_playableRangeD");
        __publicField(this, "pointer", (0, import_dataverse12.pointer)({ root: this, path: [] }));
        __publicField(this, "$$isPointerToPrismProvider", true);
        __publicField(this, "_logger");
        __publicField(this, "closestGridPosition", (posInUnitSpace) => {
          const subUnitsPerUnit = this.subUnitsPerUnit;
          const gridLength = 1 / subUnitsPerUnit;
          return parseFloat(
            (Math.round(posInUnitSpace / gridLength) * gridLength).toFixed(3)
          );
        });
        this._logger = _project._logger.named("Sheet", _sheet.address.sheetId).named("Instance", _sheet.address.sheetInstanceId);
        this.address = __spreadProps(__spreadValues({}, this._sheet.address), { sequenceName: "default" });
        this.publicApi = new TheatreSequence(this);
        this._playbackControllerBox = new import_dataverse11.Atom(
          playbackController != null ? playbackController : new DefaultPlaybackController()
        );
        this._prismOfStatePointer = (0, import_dataverse13.prism)(
          () => this._playbackControllerBox.prism.getValue().statePointer
        );
        this._positionD = (0, import_dataverse13.prism)(() => {
          const statePointer = this._prismOfStatePointer.getValue();
          return (0, import_dataverse13.val)(statePointer.position);
        });
        this._positionFormatterD = (0, import_dataverse13.prism)(() => {
          const subUnitsPerUnit = (0, import_dataverse13.val)(this._subUnitsPerUnitD);
          return new TimeBasedPositionFormatter(subUnitsPerUnit);
        });
      }
      get type() {
        return "Theatre_Sequence";
      }
      pointerToPrism(pointer3) {
        const { path } = (0, import_dataverse10.getPointerParts)(pointer3);
        if (path.length === 0) {
          return (0, import_dataverse13.prism)(() => ({
            length: (0, import_dataverse13.val)(this.pointer.length),
            playing: (0, import_dataverse13.val)(this.pointer.playing),
            position: (0, import_dataverse13.val)(this.pointer.position),
            subUnitsPerUnit: (0, import_dataverse13.val)(this.pointer.subUnitsPerUnit)
          }));
        }
        if (path.length > 1) {
          return (0, import_dataverse13.prism)(() => void 0);
        }
        const [prop] = path;
        if (prop === "length") {
          return this._lengthD;
        } else if (prop === "subUnitsPerUnit") {
          return this._subUnitsPerUnitD;
        } else if (prop === "position") {
          return this._positionD;
        } else if (prop === "playing") {
          return (0, import_dataverse13.prism)(() => {
            return (0, import_dataverse13.val)(this._prismOfStatePointer.getValue().playing);
          });
        } else {
          return (0, import_dataverse13.prism)(() => void 0);
        }
      }
      /**
       * Takes a pointer to a property of a SheetObject and returns the keyframes of that property.
       *
       * Theoretically, this method can be called from inside a prism so it can be reactive.
       */
      getKeyframesOfSimpleProp(prop) {
        const { path, root: root2 } = (0, import_dataverse10.getPointerParts)(prop);
        if (!isSheetObject(root2)) {
          throw new InvalidArgumentError(
            "Argument prop must be a pointer to a SheetObject property"
          );
        }
        const trackP = (0, import_dataverse13.val)(
          this._project.pointers.historic.sheetsById[this._sheet.address.sheetId].sequence.tracksByObject[root2.address.objectKey]
        );
        if (!trackP) {
          return [];
        }
        const { trackData, trackIdByPropPath } = trackP;
        const objectAddress = encodePathToProp(path);
        const id = trackIdByPropPath[objectAddress];
        if (!id) {
          return [];
        }
        const track = trackData[id];
        if (!track) {
          return [];
        }
        return track.keyframes;
      }
      get positionFormatter() {
        return this._positionFormatterD.getValue();
      }
      get prismOfStatePointer() {
        return this._prismOfStatePointer;
      }
      get length() {
        return this._lengthD.getValue();
      }
      get positionPrism() {
        return this._positionD;
      }
      get position() {
        return this._playbackControllerBox.get().getCurrentPosition();
      }
      get subUnitsPerUnit() {
        return this._subUnitsPerUnitD.getValue();
      }
      get positionSnappedToGrid() {
        return this.closestGridPosition(this.position);
      }
      set position(requestedPosition) {
        let position = requestedPosition;
        this.pause();
        if (position > this.length) {
          position = this.length;
        }
        const dur = this.length;
        this._playbackControllerBox.get().gotoPosition(position > dur ? dur : position);
      }
      getDurationCold() {
        return this._lengthD.getValue();
      }
      get playing() {
        return (0, import_dataverse13.val)(this._playbackControllerBox.get().statePointer.playing);
      }
      _makeRangeFromSequenceTemplate() {
        return (0, import_dataverse13.prism)(() => {
          return [0, (0, import_dataverse13.val)(this._lengthD)];
        });
      }
      /**
       * Controls the playback within a range. Repeats infinitely unless stopped.
       *
       * @remarks
       *   One use case for this is to play the playback within the focus range.
       *
       * @param rangeD - The prism that contains the range that will be used for the playback
       *
       * @returns  a promise that gets rejected if the playback stopped for whatever reason
       *
       */
      playDynamicRange(rangeD, ticker) {
        return this._playbackControllerBox.get().playDynamicRange(rangeD, ticker);
      }
      async play(conf, ticker) {
        const sequenceDuration = this.length;
        const range = conf && conf.range ? conf.range : [0, sequenceDuration];
        const iterationCount = conf && typeof conf.iterationCount === "number" ? conf.iterationCount : 1;
        const rate = conf && typeof conf.rate !== "undefined" ? conf.rate : 1;
        const direction = conf && conf.direction ? conf.direction : "normal";
        return await this._play(
          iterationCount,
          [range[0], range[1]],
          rate,
          direction,
          ticker
        );
      }
      _play(iterationCount, range, rate, direction, ticker) {
        return this._playbackControllerBox.get().play(iterationCount, range, rate, direction, ticker);
      }
      pause() {
        this._playbackControllerBox.get().pause();
      }
      replacePlaybackController(playbackController) {
        this.pause();
        const oldController = this._playbackControllerBox.get();
        this._playbackControllerBox.set(playbackController);
        const time = oldController.getCurrentPosition();
        oldController.destroy();
        playbackController.gotoPosition(time);
      }
    };
    var TimeBasedPositionFormatter = class {
      constructor(_fps) {
        this._fps = _fps;
      }
      formatSubUnitForGrid(posInUnitSpace) {
        const subSecondPos = posInUnitSpace % 1;
        const frame = 1 / this._fps;
        const frames = Math.round(subSecondPos / frame);
        return frames + "f";
      }
      formatFullUnitForGrid(posInUnitSpace) {
        let p2 = posInUnitSpace;
        let s2 = "";
        if (p2 >= hour) {
          const hours = Math.floor(p2 / hour);
          s2 += hours + "h";
          p2 = p2 % hour;
        }
        if (p2 >= minute) {
          const minutes = Math.floor(p2 / minute);
          s2 += minutes + "m";
          p2 = p2 % minute;
        }
        if (p2 >= second) {
          const seconds = Math.floor(p2 / second);
          s2 += seconds + "s";
          p2 = p2 % second;
        }
        const frame = 1 / this._fps;
        if (p2 >= frame) {
          const frames = Math.floor(p2 / frame);
          s2 += frames + "f";
          p2 = p2 % frame;
        }
        return s2.length === 0 ? "0s" : s2;
      }
      formatForPlayhead(posInUnitSpace) {
        let p2 = posInUnitSpace;
        let s2 = "";
        if (p2 >= hour) {
          const hours = Math.floor(p2 / hour);
          s2 += padStart_default(hours.toString(), 2, "0") + "h";
          p2 = p2 % hour;
        }
        if (p2 >= minute) {
          const minutes = Math.floor(p2 / minute);
          s2 += padStart_default(minutes.toString(), 2, "0") + "m";
          p2 = p2 % minute;
        } else if (s2.length > 0) {
          s2 += "00m";
        }
        if (p2 >= second) {
          const seconds = Math.floor(p2 / second);
          s2 += padStart_default(seconds.toString(), 2, "0") + "s";
          p2 = p2 % second;
        } else {
          s2 += "00s";
        }
        const frameLength = 1 / this._fps;
        if (p2 >= frameLength) {
          const frames = Math.round(p2 / frameLength);
          s2 += padStart_default(frames.toString(), 2, "0") + "f";
          p2 = p2 % frameLength;
        } else if (p2 / frameLength > 0.98) {
          const frames = 1;
          s2 += padStart_default(frames.toString(), 2, "0") + "f";
          p2 = p2 % frameLength;
        } else {
          s2 += "00f";
        }
        return s2.length === 0 ? "00s00f" : s2;
      }
      formatBasic(posInUnitSpace) {
        return posInUnitSpace.toFixed(2) + "s";
      }
    };
    var second = 1;
    var minute = second * 60;
    var hour = minute * 60;
    var propTypes_exports = {};
    __export(propTypes_exports, {
      boolean: () => boolean,
      compound: () => compound,
      file: () => file,
      image: () => image,
      number: () => number,
      rgba: () => rgba,
      string: () => string,
      stringLiteral: () => stringLiteral
    });
    function ellipsify(str, maxLength) {
      if (str.length <= maxLength)
        return str;
      return str.substr(0, maxLength - 3) + "...";
    }
    var userReadableTypeOfValue = (v2) => {
      if (typeof v2 === "string") {
        return 'string("'.concat(ellipsify(v2, 10), '")');
      } else if (typeof v2 === "number") {
        return "number(".concat(ellipsify(String(v2), 10), ")");
      } else if (v2 === null) {
        return "null";
      } else if (v2 === void 0) {
        return "undefined";
      } else if (typeof v2 === "boolean") {
        return String(v2);
      } else if (Array.isArray(v2)) {
        return "array";
      } else if (typeof v2 === "object") {
        return "object";
      } else {
        return "unknown";
      }
    };
    var userReadableTypeOfValue_default = userReadableTypeOfValue;
    function rgba2hex(rgba2, {
      /** Alpha is usually an optional value for most hex inputs, so if it's opaque, we can omit its value. */
      removeAlphaIfOpaque = false
    } = {}) {
      const alpha = (rgba2.a * 255 | 1 << 8).toString(16).slice(1);
      const hex = (rgba2.r * 255 | 1 << 8).toString(16).slice(1) + (rgba2.g * 255 | 1 << 8).toString(16).slice(1) + (rgba2.b * 255 | 1 << 8).toString(16).slice(1) + (removeAlphaIfOpaque && alpha === "ff" ? "" : alpha);
      return "#".concat(hex);
    }
    function decorateRgba(rgba2) {
      return __spreadProps(__spreadValues({}, rgba2), {
        toString() {
          return rgba2hex(this, { removeAlphaIfOpaque: true });
        }
      });
    }
    function clampRgba(rgba2) {
      return Object.fromEntries(
        Object.entries(rgba2).map(([key, value]) => [key, clamp_default(value, 0, 1)])
      );
    }
    function linearSrgbToSrgb(rgba2) {
      function compress(x2) {
        if (x2 >= 31308e-7)
          return 1.055 * x2 ** (1 / 2.4) - 0.055;
        else
          return 12.92 * x2;
      }
      return clampRgba({
        r: compress(rgba2.r),
        g: compress(rgba2.g),
        b: compress(rgba2.b),
        a: rgba2.a
      });
    }
    function srgbToLinearSrgb(rgba2) {
      function expand(x2) {
        if (x2 >= 0.04045)
          return ((x2 + 0.055) / (1 + 0.055)) ** 2.4;
        else
          return x2 / 12.92;
      }
      return {
        r: expand(rgba2.r),
        g: expand(rgba2.g),
        b: expand(rgba2.b),
        a: rgba2.a
      };
    }
    function linearSrgbToOklab(rgba2) {
      let l2 = 0.4122214708 * rgba2.r + 0.5363325363 * rgba2.g + 0.0514459929 * rgba2.b;
      let m = 0.2119034982 * rgba2.r + 0.6806995451 * rgba2.g + 0.1073969566 * rgba2.b;
      let s2 = 0.0883024619 * rgba2.r + 0.2817188376 * rgba2.g + 0.6299787005 * rgba2.b;
      let l_ = Math.cbrt(l2);
      let m_ = Math.cbrt(m);
      let s_ = Math.cbrt(s2);
      return {
        L: 0.2104542553 * l_ + 0.793617785 * m_ - 0.0040720468 * s_,
        a: 1.9779984951 * l_ - 2.428592205 * m_ + 0.4505937099 * s_,
        b: 0.0259040371 * l_ + 0.7827717662 * m_ - 0.808675766 * s_,
        alpha: rgba2.a
      };
    }
    function oklabToLinearSrgb(laba) {
      let l_ = laba.L + 0.3963377774 * laba.a + 0.2158037573 * laba.b;
      let m_ = laba.L - 0.1055613458 * laba.a - 0.0638541728 * laba.b;
      let s_ = laba.L - 0.0894841775 * laba.a - 1.291485548 * laba.b;
      let l2 = l_ * l_ * l_;
      let m = m_ * m_ * m_;
      let s2 = s_ * s_ * s_;
      return {
        r: 4.0767416621 * l2 - 3.3077115913 * m + 0.2309699292 * s2,
        g: -1.2684380046 * l2 + 2.6097574011 * m - 0.3413193965 * s2,
        b: -0.0041960863 * l2 - 0.7034186147 * m + 1.707614701 * s2,
        a: laba.alpha
      };
    }
    var propTypeSymbol = Symbol("TheatrePropType_Basic");
    function isLonghandPropType(t22) {
      return typeof t22 === "object" && !!t22 && t22[propTypeSymbol] === "TheatrePropType";
    }
    function toLonghandProp(p2) {
      if (typeof p2 === "number") {
        return number(p2);
      } else if (typeof p2 === "boolean") {
        return boolean(p2);
      } else if (typeof p2 === "string") {
        return string(p2);
      } else if (typeof p2 === "object" && !!p2) {
        if (isLonghandPropType(p2))
          return p2;
        if (isPlainObject_default(p2)) {
          return compound(p2);
        } else {
          throw new InvalidArgumentError(
            "This value is not a valid prop type: ".concat(userReadableTypeOfValue_default(p2))
          );
        }
      } else {
        throw new InvalidArgumentError(
          "This value is not a valid prop type: ".concat(userReadableTypeOfValue_default(p2))
        );
      }
    }
    function sanitizeCompoundProps(props) {
      const sanitizedProps = {};
      for (const key of Object.keys(props)) {
        const val8 = props[key];
        if (isLonghandPropType(val8)) {
          sanitizedProps[key] = val8;
        } else {
          sanitizedProps[key] = toLonghandProp(val8);
        }
      }
      return sanitizedProps;
    }
    var compound = (props, opts = {}) => {
      const sanitizedProps = sanitizeCompoundProps(props);
      const deserializationCache = /* @__PURE__ */ new WeakMap();
      const config = {
        type: "compound",
        props: sanitizedProps,
        valueType: null,
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        default: mapValues_default(sanitizedProps, (p2) => p2.default),
        deserializeAndSanitize: (json) => {
          if (typeof json !== "object" || !json)
            return void 0;
          if (deserializationCache.has(json)) {
            return deserializationCache.get(json);
          }
          const deserialized = {};
          let atLeastOnePropWasDeserialized = false;
          for (const [key, propConfig] of Object.entries(sanitizedProps)) {
            if (Object.prototype.hasOwnProperty.call(json, key)) {
              const deserializedSub = propConfig.deserializeAndSanitize(
                json[key]
              );
              if (deserializedSub != null) {
                atLeastOnePropWasDeserialized = true;
                deserialized[key] = deserializedSub;
              }
            }
          }
          deserializationCache.set(json, deserialized);
          if (atLeastOnePropWasDeserialized) {
            return deserialized;
          }
        }
      };
      return config;
    };
    var file = (defaultValue, opts = {}) => {
      const interpolate = (left, right, progression) => {
        var _a;
        const stringInterpolate = (_a = opts.interpolate) != null ? _a : leftInterpolate;
        return {
          type: "file",
          id: stringInterpolate(left.id, right.id, progression)
        };
      };
      return {
        type: "file",
        default: { type: "file", id: defaultValue },
        valueType: null,
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        interpolate,
        deserializeAndSanitize: _ensureFile
      };
    };
    var _ensureFile = (val8) => {
      if (!val8)
        return void 0;
      let valid = true;
      if (typeof val8.id !== "string" && ![null, void 0].includes(val8.id)) {
        valid = false;
      }
      if (val8.type !== "file")
        valid = false;
      if (!valid)
        return void 0;
      return val8;
    };
    var image = (defaultValue, opts = {}) => {
      const interpolate = (left, right, progression) => {
        var _a;
        const stringInterpolate = (_a = opts.interpolate) != null ? _a : leftInterpolate;
        return {
          type: "image",
          id: stringInterpolate(left.id, right.id, progression)
        };
      };
      return {
        type: "image",
        default: { type: "image", id: defaultValue },
        valueType: null,
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        interpolate,
        deserializeAndSanitize: _ensureImage
      };
    };
    var _ensureImage = (val8) => {
      if (!val8)
        return void 0;
      let valid = true;
      if (typeof val8.id !== "string" && ![null, void 0].includes(val8.id)) {
        valid = false;
      }
      if (val8.type !== "image")
        valid = false;
      if (!valid)
        return void 0;
      return val8;
    };
    var number = (defaultValue, opts = {}) => {
      var _a;
      return __spreadProps(__spreadValues({
        type: "number",
        valueType: 0,
        default: defaultValue,
        [propTypeSymbol]: "TheatrePropType"
      }, opts ? opts : {}), {
        label: opts.label,
        nudgeFn: (_a = opts.nudgeFn) != null ? _a : defaultNumberNudgeFn,
        nudgeMultiplier: typeof opts.nudgeMultiplier === "number" ? opts.nudgeMultiplier : void 0,
        interpolate: _interpolateNumber,
        deserializeAndSanitize: numberDeserializer(opts.range)
      });
    };
    var numberDeserializer = (range) => range ? (json) => {
      if (!(typeof json === "number" && isFinite(json)))
        return void 0;
      return clamp_default(json, range[0], range[1]);
    } : _ensureNumber;
    var _ensureNumber = (value) => typeof value === "number" && isFinite(value) ? value : void 0;
    var _interpolateNumber = (left, right, progression) => {
      return left + progression * (right - left);
    };
    var rgba = (defaultValue = { r: 0, g: 0, b: 0, a: 1 }, opts = {}) => {
      const sanitized = {};
      for (const component of ["r", "g", "b", "a"]) {
        sanitized[component] = Math.min(
          Math.max(defaultValue[component], 0),
          1
        );
      }
      return {
        type: "rgba",
        valueType: null,
        default: decorateRgba(sanitized),
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        interpolate: _interpolateRgba,
        deserializeAndSanitize: _sanitizeRgba
      };
    };
    var _sanitizeRgba = (val8) => {
      if (!val8)
        return void 0;
      let valid = true;
      for (const c2 of ["r", "g", "b", "a"]) {
        if (!Object.prototype.hasOwnProperty.call(val8, c2) || typeof val8[c2] !== "number") {
          valid = false;
        }
      }
      if (!valid)
        return void 0;
      const sanitized = {};
      for (const c2 of ["r", "g", "b", "a"]) {
        sanitized[c2] = Math.min(
          Math.max(val8[c2], 0),
          1
        );
      }
      return decorateRgba(sanitized);
    };
    var _interpolateRgba = (left, right, progression) => {
      const leftLab = linearSrgbToOklab(srgbToLinearSrgb(left));
      const rightLab = linearSrgbToOklab(srgbToLinearSrgb(right));
      const interpolatedLab = {
        L: (1 - progression) * leftLab.L + progression * rightLab.L,
        a: (1 - progression) * leftLab.a + progression * rightLab.a,
        b: (1 - progression) * leftLab.b + progression * rightLab.b,
        alpha: (1 - progression) * leftLab.alpha + progression * rightLab.alpha
      };
      const interpolatedRgba = linearSrgbToSrgb(oklabToLinearSrgb(interpolatedLab));
      return decorateRgba(interpolatedRgba);
    };
    var boolean = (defaultValue, opts = {}) => {
      var _a;
      return {
        type: "boolean",
        default: defaultValue,
        valueType: null,
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        interpolate: (_a = opts.interpolate) != null ? _a : leftInterpolate,
        deserializeAndSanitize: _ensureBoolean
      };
    };
    var _ensureBoolean = (val8) => {
      return typeof val8 === "boolean" ? val8 : void 0;
    };
    function leftInterpolate(left) {
      return left;
    }
    var string = (defaultValue, opts = {}) => {
      var _a;
      return {
        type: "string",
        default: defaultValue,
        valueType: null,
        [propTypeSymbol]: "TheatrePropType",
        label: opts.label,
        interpolate: (_a = opts.interpolate) != null ? _a : leftInterpolate,
        deserializeAndSanitize: _ensureString
      };
    };
    function _ensureString(s2) {
      return typeof s2 === "string" ? s2 : void 0;
    }
    function stringLiteral(defaultValue, valuesAndLabels, opts = {}) {
      var _a, _b;
      return {
        type: "stringLiteral",
        default: defaultValue,
        valuesAndLabels: __spreadValues({}, valuesAndLabels),
        [propTypeSymbol]: "TheatrePropType",
        valueType: null,
        as: (_a = opts.as) != null ? _a : "menu",
        label: opts.label,
        interpolate: (_b = opts.interpolate) != null ? _b : leftInterpolate,
        deserializeAndSanitize(json) {
          if (typeof json !== "string")
            return void 0;
          if (Object.prototype.hasOwnProperty.call(valuesAndLabels, json)) {
            return json;
          } else {
            return void 0;
          }
        }
      };
    }
    var defaultNumberNudgeFn = ({
      config,
      deltaX,
      deltaFraction,
      magnitude
    }) => {
      var _a;
      const { range } = config;
      if (!config.nudgeMultiplier && range && !range.includes(Infinity) && !range.includes(-Infinity)) {
        return deltaFraction * (range[1] - range[0]) * magnitude;
      }
      return deltaX * magnitude * ((_a = config.nudgeMultiplier) != null ? _a : 1);
    };
    var normalizeSlashedPath = (p2) => p2.replace(/^[\s\/]*/, "").replace(/[\s\/]*$/, "").replace(/\s*\/\s*/g, " / ");
    function validateAndSanitiseSlashedPathOrThrow(unsanitisedPath, fnName) {
      const sanitisedPath = normalizeSlashedPath(unsanitisedPath);
      {
        return sanitisedPath;
      }
    }
    __toESM(require_fast_deep_equal());
    var TheatreSheet = class {
      get type() {
        return "Theatre_Sheet_PublicAPI";
      }
      /**
       * @internal
       */
      constructor(sheet2) {
        setPrivateAPI(this, sheet2);
      }
      object(key, config, opts) {
        const internal2 = privateAPI(this);
        const sanitizedPath = validateAndSanitiseSlashedPathOrThrow(
          key
        );
        const existingObject = internal2.getObject(sanitizedPath);
        const nativeObject = null;
        const actions = opts == null ? void 0 : opts.__actions__THIS_API_IS_UNSTABLE_AND_WILL_CHANGE_IN_THE_NEXT_VERSION;
        if (existingObject) {
          if (actions) {
            existingObject.template._temp_setActions(actions);
          }
          return existingObject.publicApi;
        } else {
          const sanitizedConfig = compound(config);
          const object = internal2.createObject(
            sanitizedPath,
            nativeObject,
            sanitizedConfig,
            actions
          );
          return object.publicApi;
        }
      }
      __experimental_getExistingObject(key) {
        const internal2 = privateAPI(this);
        const sanitizedPath = validateAndSanitiseSlashedPathOrThrow(
          key
        );
        const existingObject = internal2.getObject(sanitizedPath);
        return existingObject == null ? void 0 : existingObject.publicApi;
      }
      get sequence() {
        return privateAPI(this).getSequence().publicApi;
      }
      get project() {
        return privateAPI(this).project.publicApi;
      }
      get address() {
        return __spreadValues({}, privateAPI(this).address);
      }
      detachObject(key) {
        const internal2 = privateAPI(this);
        const sanitizedPath = validateAndSanitiseSlashedPathOrThrow(
          key
        );
        const obj = internal2.getObject(sanitizedPath);
        if (!obj) {
          notify.warning(
            `Couldn't delete object "`.concat(sanitizedPath, '"'),
            'There is no object with key "'.concat(sanitizedPath, '".\n\nTo fix this, make sure you are calling `sheet.deleteObject("').concat(sanitizedPath, '")` with the correct key.')
          );
          console.warn('Object key "'.concat(sanitizedPath, '" does not exist.'));
          return;
        }
        internal2.deleteObject(sanitizedPath);
      }
    };
    var import_dataverse14 = requireDist$2();
    var Sheet = class {
      constructor(template, instanceId) {
        this.template = template;
        this.instanceId = instanceId;
        __publicField(this, "_objects", new import_dataverse14.Atom({}));
        __publicField(this, "_sequence");
        __publicField(this, "address");
        __publicField(this, "publicApi");
        __publicField(this, "project");
        __publicField(this, "objectsP", this._objects.pointer);
        __publicField(this, "type", "Theatre_Sheet");
        __publicField(this, "_logger");
        this._logger = template.project._logger.named("Sheet", instanceId);
        this._logger._trace("creating sheet");
        this.project = template.project;
        this.address = __spreadProps(__spreadValues({}, template.address), {
          sheetInstanceId: this.instanceId
        });
        this.publicApi = new TheatreSheet(this);
      }
      /**
       * @remarks At some point, we have to reconcile the concept of "an object"
       * with that of "an element."
       */
      createObject(objectKey, nativeObject, config, actions = {}) {
        const objTemplate = this.template.getObjectTemplate(
          objectKey,
          nativeObject,
          config,
          actions
        );
        const object = objTemplate.createInstance(this, nativeObject, config);
        this._objects.setByPointer((p2) => p2[objectKey], object);
        return object;
      }
      getObject(key) {
        return this._objects.get()[key];
      }
      deleteObject(objectKey) {
        this._objects.reduce((state) => {
          const newState = __spreadValues({}, state);
          delete newState[objectKey];
          return newState;
        });
      }
      getSequence() {
        if (!this._sequence) {
          const lengthD = (0, import_dataverse14.prism)(() => {
            const unsanitized = (0, import_dataverse14.val)(
              this.project.pointers.historic.sheetsById[this.address.sheetId].sequence.length
            );
            return sanitizeSequenceLength(unsanitized);
          });
          const subUnitsPerUnitD = (0, import_dataverse14.prism)(() => {
            const unsanitized = (0, import_dataverse14.val)(
              this.project.pointers.historic.sheetsById[this.address.sheetId].sequence.subUnitsPerUnit
            );
            return sanitizeSequenceSubUnitsPerUnit(unsanitized);
          });
          this._sequence = new Sequence(
            this.template.project,
            this,
            lengthD,
            subUnitsPerUnitD
          );
        }
        return this._sequence;
      }
    };
    var sanitizeSequenceLength = (len) => typeof len === "number" && isFinite(len) && len > 0 ? len : 10;
    var sanitizeSequenceSubUnitsPerUnit = (subs) => typeof subs === "number" && isInteger_default(subs) && subs >= 1 && subs <= 1e3 ? subs : 30;
    var SheetTemplate = class {
      constructor(project2, sheetId) {
        this.project = project2;
        __publicField(this, "type", "Theatre_SheetTemplate");
        __publicField(this, "address");
        __publicField(this, "_instances", new import_dataverse15.Atom({}));
        __publicField(this, "instancesP", this._instances.pointer);
        __publicField(this, "_objectTemplates", new import_dataverse15.Atom({}));
        __publicField(this, "objectTemplatesP", this._objectTemplates.pointer);
        this.address = __spreadProps(__spreadValues({}, project2.address), { sheetId });
      }
      getInstance(instanceId) {
        let inst = this._instances.get()[instanceId];
        if (!inst) {
          inst = new Sheet(this, instanceId);
          this._instances.setByPointer((p2) => p2[instanceId], inst);
        }
        return inst;
      }
      getObjectTemplate(objectKey, nativeObject, config, actions) {
        let template = this._objectTemplates.get()[objectKey];
        if (!template) {
          template = new SheetObjectTemplate(
            this,
            objectKey,
            nativeObject,
            config,
            actions
          );
          this._objectTemplates.setByPointer((p2) => p2[objectKey], template);
        }
        return template;
      }
    };
    var import_dataverse16 = requireDist$2();
    var import_dataverse17 = requireDist$2();
    var delay = (dur) => new Promise((resolve) => setTimeout(resolve, dur));
    var delay_default = delay;
    function n(n2) {
      for (var t22 = arguments.length, r2 = Array(t22 > 1 ? t22 - 1 : 0), e2 = 1; e2 < t22; e2++)
        r2[e2 - 1] = arguments[e2];
      throw Error("[Immer] minified error nr: " + n2 + (r2.length ? " " + r2.map(function(n3) {
        return "'" + n3 + "'";
      }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
    }
    function t2(n2) {
      return !!n2 && !!n2[Q];
    }
    function r(n2) {
      return !!n2 && (function(n3) {
        if (!n3 || "object" != typeof n3)
          return false;
        var t22 = Object.getPrototypeOf(n3);
        if (null === t22)
          return true;
        var r2 = Object.hasOwnProperty.call(t22, "constructor") && t22.constructor;
        return r2 === Object || "function" == typeof r2 && Function.toString.call(r2) === Z;
      }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s(n2) || v(n2));
    }
    function e(r2) {
      return t2(r2) || n(23, r2), r2[Q].t;
    }
    function i2(n2, t22, r2) {
      void 0 === r2 && (r2 = false), 0 === o(n2) ? (r2 ? Object.keys : nn)(n2).forEach(function(e2) {
        r2 && "symbol" == typeof e2 || t22(e2, n2[e2], n2);
      }) : n2.forEach(function(r3, e2) {
        return t22(e2, r3, n2);
      });
    }
    function o(n2) {
      var t22 = n2[Q];
      return t22 ? t22.i > 3 ? t22.i - 4 : t22.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
    }
    function u(n2, t22) {
      return 2 === o(n2) ? n2.has(t22) : Object.prototype.hasOwnProperty.call(n2, t22);
    }
    function a(n2, t22) {
      return 2 === o(n2) ? n2.get(t22) : n2[t22];
    }
    function f(n2, t22, r2) {
      var e2 = o(n2);
      2 === e2 ? n2.set(t22, r2) : 3 === e2 ? (n2.delete(t22), n2.add(r2)) : n2[t22] = r2;
    }
    function c(n2, t22) {
      return n2 === t22 ? 0 !== n2 || 1 / n2 == 1 / t22 : n2 != n2 && t22 != t22;
    }
    function s(n2) {
      return X && n2 instanceof Map;
    }
    function v(n2) {
      return q && n2 instanceof Set;
    }
    function p(n2) {
      return n2.o || n2.t;
    }
    function l(n2) {
      if (Array.isArray(n2))
        return Array.prototype.slice.call(n2);
      var t22 = tn(n2);
      delete t22[Q];
      for (var r2 = nn(t22), e2 = 0; e2 < r2.length; e2++) {
        var i22 = r2[e2], o2 = t22[i22];
        false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (t22[i22] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i22] });
      }
      return Object.create(Object.getPrototypeOf(n2), t22);
    }
    function d(n2, e2) {
      return void 0 === e2 && (e2 = false), y(n2) || t2(n2) || !r(n2) ? n2 : (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e2 && i2(n2, function(n3, t22) {
        return d(t22, true);
      }, true), n2);
    }
    function h() {
      n(2);
    }
    function y(n2) {
      return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
    }
    function b(t22) {
      var r2 = rn[t22];
      return r2 || n(18, t22), r2;
    }
    function _() {
      return U;
    }
    function j(n2, t22) {
      t22 && (b("Patches"), n2.u = [], n2.s = [], n2.v = t22);
    }
    function O(n2) {
      g(n2), n2.p.forEach(S), n2.p = null;
    }
    function g(n2) {
      n2 === U && (U = n2.l);
    }
    function w(n2) {
      return U = { p: [], l: U, h: n2, m: true, _: 0 };
    }
    function S(n2) {
      var t22 = n2[Q];
      0 === t22.i || 1 === t22.i ? t22.j() : t22.O = true;
    }
    function P(t22, e2) {
      e2._ = e2.p.length;
      var i22 = e2.p[0], o2 = void 0 !== t22 && t22 !== i22;
      return e2.h.g || b("ES5").S(e2, t22, o2), o2 ? (i22[Q].P && (O(e2), n(4)), r(t22) && (t22 = M(e2, t22), e2.l || x(e2, t22)), e2.u && b("Patches").M(i22[Q], t22, e2.u, e2.s)) : t22 = M(e2, i22, []), O(e2), e2.u && e2.v(e2.u, e2.s), t22 !== H ? t22 : void 0;
    }
    function M(n2, t22, r2) {
      if (y(t22))
        return t22;
      var e2 = t22[Q];
      if (!e2)
        return i2(t22, function(i22, o3) {
          return A(n2, e2, t22, i22, o3, r2);
        }, true), t22;
      if (e2.A !== n2)
        return t22;
      if (!e2.P)
        return x(n2, e2.t, true), e2.t;
      if (!e2.I) {
        e2.I = true, e2.A._--;
        var o2 = 4 === e2.i || 5 === e2.i ? e2.o = l(e2.k) : e2.o;
        i2(3 === e2.i ? new Set(o2) : o2, function(t3, i22) {
          return A(n2, e2, o2, t3, i22, r2);
        }), x(n2, o2, false), r2 && n2.u && b("Patches").R(e2, r2, n2.u, n2.s);
      }
      return e2.o;
    }
    function A(e2, i22, o2, a2, c2, s2) {
      if (t2(c2)) {
        var v2 = M(e2, c2, s2 && i22 && 3 !== i22.i && !u(i22.D, a2) ? s2.concat(a2) : void 0);
        if (f(o2, a2, v2), !t2(v2))
          return;
        e2.m = false;
      }
      if (r(c2) && !y(c2)) {
        if (!e2.h.F && e2._ < 1)
          return;
        M(e2, c2), i22 && i22.A.l || x(e2, c2);
      }
    }
    function x(n2, t22, r2) {
      void 0 === r2 && (r2 = false), n2.h.F && n2.m && d(t22, r2);
    }
    function z(n2, t22) {
      var r2 = n2[Q];
      return (r2 ? p(r2) : n2)[t22];
    }
    function I(n2, t22) {
      if (t22 in n2)
        for (var r2 = Object.getPrototypeOf(n2); r2; ) {
          var e2 = Object.getOwnPropertyDescriptor(r2, t22);
          if (e2)
            return e2;
          r2 = Object.getPrototypeOf(r2);
        }
    }
    function k(n2) {
      n2.P || (n2.P = true, n2.l && k(n2.l));
    }
    function E(n2) {
      n2.o || (n2.o = l(n2.t));
    }
    function R(n2, t22, r2) {
      var e2 = s(t22) ? b("MapSet").N(t22, r2) : v(t22) ? b("MapSet").T(t22, r2) : n2.g ? function(n3, t3) {
        var r3 = Array.isArray(n3), e3 = { i: r3 ? 1 : 0, A: t3 ? t3.A : _(), P: false, I: false, D: {}, l: t3, t: n3, k: null, o: null, j: null, C: false }, i22 = e3, o2 = en;
        r3 && (i22 = [e3], o2 = on);
        var u2 = Proxy.revocable(i22, o2), a2 = u2.revoke, f2 = u2.proxy;
        return e3.k = f2, e3.j = a2, f2;
      }(t22, r2) : b("ES5").J(t22, r2);
      return (r2 ? r2.A : _()).p.push(e2), e2;
    }
    function D(e2) {
      return t2(e2) || n(22, e2), function n2(t22) {
        if (!r(t22))
          return t22;
        var e3, u2 = t22[Q], c2 = o(t22);
        if (u2) {
          if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
            return u2.t;
          u2.I = true, e3 = F(t22, c2), u2.I = false;
        } else
          e3 = F(t22, c2);
        return i2(e3, function(t3, r2) {
          u2 && a(u2.t, t3) === r2 || f(e3, t3, n2(r2));
        }), 3 === c2 ? new Set(e3) : e3;
      }(e2);
    }
    function F(n2, t22) {
      switch (t22) {
        case 2:
          return new Map(n2);
        case 3:
          return Array.from(n2);
      }
      return l(n2);
    }
    var G;
    var U;
    var W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
    var X = "undefined" != typeof Map;
    var q = "undefined" != typeof Set;
    var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
    var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
    var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
    var Q = W ? Symbol.for("immer-state") : "__$immer_state";
    var Z = "" + Object.prototype.constructor;
    var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n2) {
      return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
    } : Object.getOwnPropertyNames;
    var tn = Object.getOwnPropertyDescriptors || function(n2) {
      var t22 = {};
      return nn(n2).forEach(function(r2) {
        t22[r2] = Object.getOwnPropertyDescriptor(n2, r2);
      }), t22;
    };
    var rn = {};
    var en = { get: function(n2, t22) {
      if (t22 === Q)
        return n2;
      var e2 = p(n2);
      if (!u(e2, t22))
        return function(n3, t3, r2) {
          var e3, i3 = I(t3, r2);
          return i3 ? "value" in i3 ? i3.value : null === (e3 = i3.get) || void 0 === e3 ? void 0 : e3.call(n3.k) : void 0;
        }(n2, e2, t22);
      var i22 = e2[t22];
      return n2.I || !r(i22) ? i22 : i22 === z(n2.t, t22) ? (E(n2), n2.o[t22] = R(n2.A.h, i22, n2)) : i22;
    }, has: function(n2, t22) {
      return t22 in p(n2);
    }, ownKeys: function(n2) {
      return Reflect.ownKeys(p(n2));
    }, set: function(n2, t22, r2) {
      var e2 = I(p(n2), t22);
      if (null == e2 ? void 0 : e2.set)
        return e2.set.call(n2.k, r2), true;
      if (!n2.P) {
        var i22 = z(p(n2), t22), o2 = null == i22 ? void 0 : i22[Q];
        if (o2 && o2.t === r2)
          return n2.o[t22] = r2, n2.D[t22] = false, true;
        if (c(r2, i22) && (void 0 !== r2 || u(n2.t, t22)))
          return true;
        E(n2), k(n2);
      }
      return n2.o[t22] === r2 && "number" != typeof r2 && (void 0 !== r2 || t22 in n2.o) || (n2.o[t22] = r2, n2.D[t22] = true, true);
    }, deleteProperty: function(n2, t22) {
      return void 0 !== z(n2.t, t22) || t22 in n2.t ? (n2.D[t22] = false, E(n2), k(n2)) : delete n2.D[t22], n2.o && delete n2.o[t22], true;
    }, getOwnPropertyDescriptor: function(n2, t22) {
      var r2 = p(n2), e2 = Reflect.getOwnPropertyDescriptor(r2, t22);
      return e2 ? { writable: true, configurable: 1 !== n2.i || "length" !== t22, enumerable: e2.enumerable, value: r2[t22] } : e2;
    }, defineProperty: function() {
      n(11);
    }, getPrototypeOf: function(n2) {
      return Object.getPrototypeOf(n2.t);
    }, setPrototypeOf: function() {
      n(12);
    } };
    var on = {};
    i2(en, function(n2, t22) {
      on[n2] = function() {
        return arguments[0] = arguments[0][0], t22.apply(this, arguments);
      };
    }), on.deleteProperty = function(t22, r2) {
      return en.deleteProperty.call(this, t22[0], r2);
    }, on.set = function(t22, r2, e2) {
      return en.set.call(this, t22[0], r2, e2, t22[0]);
    };
    var un = function() {
      function e2(t22) {
        var e3 = this;
        this.g = B, this.F = true, this.produce = function(t3, i3, o2) {
          if ("function" == typeof t3 && "function" != typeof i3) {
            var u2 = i3;
            i3 = t3;
            var a2 = e3;
            return function(n2) {
              var t4 = this;
              void 0 === n2 && (n2 = u2);
              for (var r2 = arguments.length, e4 = Array(r2 > 1 ? r2 - 1 : 0), o3 = 1; o3 < r2; o3++)
                e4[o3 - 1] = arguments[o3];
              return a2.produce(n2, function(n3) {
                var r3;
                return (r3 = i3).call.apply(r3, [t4, n3].concat(e4));
              });
            };
          }
          var f2;
          if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), r(t3)) {
            var c2 = w(e3), s2 = R(e3, t3, void 0), v2 = true;
            try {
              f2 = i3(s2), v2 = false;
            } finally {
              v2 ? O(c2) : g(c2);
            }
            return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n2) {
              return j(c2, o2), P(n2, c2);
            }, function(n2) {
              throw O(c2), n2;
            }) : (j(c2, o2), P(f2, c2));
          }
          if (!t3 || "object" != typeof t3) {
            if ((f2 = i3(t3)) === H)
              return;
            return void 0 === f2 && (f2 = t3), e3.F && d(f2, true), f2;
          }
          n(21, t3);
        }, this.produceWithPatches = function(n2, t3) {
          return "function" == typeof n2 ? function(t4) {
            for (var r3 = arguments.length, i4 = Array(r3 > 1 ? r3 - 1 : 0), o2 = 1; o2 < r3; o2++)
              i4[o2 - 1] = arguments[o2];
            return e3.produceWithPatches(t4, function(t5) {
              return n2.apply(void 0, [t5].concat(i4));
            });
          } : [e3.produce(n2, t3, function(n3, t4) {
            r2 = n3, i3 = t4;
          }), r2, i3];
          var r2, i3;
        }, "boolean" == typeof (null == t22 ? void 0 : t22.useProxies) && this.setUseProxies(t22.useProxies), "boolean" == typeof (null == t22 ? void 0 : t22.autoFreeze) && this.setAutoFreeze(t22.autoFreeze);
      }
      var i22 = e2.prototype;
      return i22.createDraft = function(e3) {
        r(e3) || n(8), t2(e3) && (e3 = D(e3));
        var i3 = w(this), o2 = R(this, e3, void 0);
        return o2[Q].C = true, g(i3), o2;
      }, i22.finishDraft = function(t22, r2) {
        var e3 = t22 && t22[Q];
        var i3 = e3.A;
        return j(i3, r2), P(void 0, i3);
      }, i22.setAutoFreeze = function(n2) {
        this.F = n2;
      }, i22.setUseProxies = function(t22) {
        t22 && !B && n(20), this.g = t22;
      }, i22.applyPatches = function(n2, r2) {
        var e3;
        for (e3 = r2.length - 1; e3 >= 0; e3--) {
          var i3 = r2[e3];
          if (0 === i3.path.length && "replace" === i3.op) {
            n2 = i3.value;
            break;
          }
        }
        var o2 = b("Patches").$;
        return t2(n2) ? o2(n2, r2) : this.produce(n2, function(n3) {
          return o2(n3, r2.slice(e3 + 1));
        });
      }, e2;
    }();
    var an = new un();
    an.produce;
    an.produceWithPatches.bind(an);
    an.setAutoFreeze.bind(an);
    an.setUseProxies.bind(an);
    an.applyPatches.bind(an);
    an.createDraft.bind(an);
    an.finishDraft.bind(an);
    var globals = {
      /**
       * If the schema of the redux store changes in a backwards-incompatible way, then this version number should be incremented.
       *
       * While this looks like semver, it is not. There are no patch numbers, so any change in this number is a breaking change.
       *
       * However, as long as the schema of the redux store is backwards-compatible, then we don't have to change this number.
       *
       * Since the 0.4.0 release, this number has not had to change.
       */
      currentProjectStateDefinitionVersion: "0.4.0"
    };
    var globals_default = globals;
    async function initialiseProjectState(studio2, project2, onDiskState) {
      await delay_default(0);
      studio2.transaction(({ drafts }) => {
        var _a;
        const projectId = project2.address.projectId;
        drafts.ephemeral.coreByProject[projectId] = {
          lastExportedObject: null,
          loadingState: { type: "loading" }
        };
        drafts.ahistoric.coreByProject[projectId] = {
          ahistoricStuff: ""
        };
        function useInitialState() {
          drafts.ephemeral.coreByProject[projectId].loadingState = {
            type: "loaded"
          };
          drafts.historic.coreByProject[projectId] = {
            sheetsById: {},
            definitionVersion: globals_default.currentProjectStateDefinitionVersion,
            revisionHistory: []
          };
        }
        function useOnDiskState(state) {
          drafts.ephemeral.coreByProject[projectId].loadingState = {
            type: "loaded"
          };
          drafts.historic.coreByProject[projectId] = state;
        }
        function useBrowserState() {
          drafts.ephemeral.coreByProject[projectId].loadingState = {
            type: "loaded"
          };
        }
        function browserStateIsNotBasedOnDiskState(onDiskState2) {
          drafts.ephemeral.coreByProject[projectId].loadingState = {
            type: "browserStateIsNotBasedOnDiskState",
            onDiskState: onDiskState2
          };
        }
        const browserState = (_a = e(drafts.historic)) == null ? void 0 : _a.coreByProject[project2.address.projectId];
        if (!browserState) {
          if (!onDiskState) {
            useInitialState();
          } else {
            useOnDiskState(onDiskState);
          }
        } else {
          if (!onDiskState) {
            useBrowserState();
          } else {
            if (browserState.revisionHistory.indexOf(
              onDiskState.revisionHistory[0]
            ) == -1) {
              browserStateIsNotBasedOnDiskState(onDiskState);
            } else {
              useBrowserState();
            }
          }
        }
      });
    }
    function noop2() {
    }
    function _coreLogger(config) {
      var _a, _b;
      const internalMin = ((_a = config == null ? void 0 : config.logging) == null ? void 0 : _a.internal) ? (_b = config.logging.min) != null ? _b : 256 : Infinity;
      const shouldDebugLogger = internalMin <= 128;
      const shouldShowLoggerErrors = internalMin <= 512;
      const internal2 = createTheatreInternalLogger(void 0, {
        _debug: shouldDebugLogger ? console.debug.bind(console, "_coreLogger(TheatreInternalLogger) debug") : noop2,
        _error: shouldShowLoggerErrors ? console.error.bind(console, "_coreLogger(TheatreInternalLogger) error") : noop2
      });
      if (config) {
        const { logger, logging } = config;
        if (logger)
          internal2.configureLogger(logger);
        if (logging)
          internal2.configureLogging(logging);
        else {
          internal2.configureLogging({
            dev: false
          });
        }
      }
      return internal2.getLogger().named("Theatre");
    }
    var Project = class {
      constructor(id, config = {}, publicApi) {
        this.config = config;
        this.publicApi = publicApi;
        __publicField(this, "pointers");
        __publicField(this, "_pointerProxies");
        __publicField(this, "address");
        __publicField(this, "_studioReadyDeferred");
        __publicField(this, "_assetStorageReadyDeferred");
        __publicField(this, "_readyPromise");
        __publicField(this, "_sheetTemplates", new import_dataverse17.Atom({}));
        __publicField(this, "sheetTemplatesP", this._sheetTemplates.pointer);
        __publicField(this, "_studio");
        __publicField(this, "assetStorage");
        __publicField(this, "type", "Theatre_Project");
        __publicField(this, "_logger");
        var _a;
        this._logger = _coreLogger({ logging: { dev: true } }).named("Project", id);
        this._logger.traceDev("creating project");
        this.address = { projectId: id };
        const onDiskStateAtom = new import_dataverse17.Atom({
          ahistoric: {
            ahistoricStuff: ""
          },
          historic: (_a = config.state) != null ? _a : {
            sheetsById: {},
            definitionVersion: globals_default.currentProjectStateDefinitionVersion,
            revisionHistory: []
          },
          ephemeral: {
            loadingState: {
              type: "loaded"
            },
            lastExportedObject: null
          }
        });
        this._assetStorageReadyDeferred = defer();
        this.assetStorage = {
          getAssetUrl: (assetId) => {
            var _a2;
            return "".concat((_a2 = config.assets) == null ? void 0 : _a2.baseUrl, "/").concat(assetId);
          },
          // Until the asset storage is ready, we'll throw an error when the user tries to use it
          createAsset: () => {
            throw new Error("Please wait for Project.ready to use assets.");
          }
        };
        this._pointerProxies = {
          historic: new import_dataverse16.PointerProxy(onDiskStateAtom.pointer.historic),
          ahistoric: new import_dataverse16.PointerProxy(onDiskStateAtom.pointer.ahistoric),
          ephemeral: new import_dataverse16.PointerProxy(onDiskStateAtom.pointer.ephemeral)
        };
        this.pointers = {
          historic: this._pointerProxies.historic.pointer,
          ahistoric: this._pointerProxies.ahistoric.pointer,
          ephemeral: this._pointerProxies.ephemeral.pointer
        };
        projectsSingleton_default.add(id, this);
        this._studioReadyDeferred = defer();
        this._readyPromise = Promise.all([
          this._studioReadyDeferred.promise,
          this._assetStorageReadyDeferred.promise
          // hide the array from the user, i.e. make it Promise<void> instead of Promise<[undefined, undefined]>
        ]).then(() => {
        });
        if (config.state) {
          setTimeout(() => {
            if (!this._studio) {
              this._studioReadyDeferred.resolve(void 0);
              this._assetStorageReadyDeferred.resolve(void 0);
              this._logger._trace("ready deferred resolved with no state");
            }
          }, 0);
        } else {
          if (typeof window === "undefined") {
            {
              console.error(
                'Argument config.state in Theatre.getProject("'.concat(id, '", config) is empty. ') + "You can safely ignore this message if you're developing a Next.js/Remix project in development mode. But if you are shipping to your end-users, then you need to set config.state, otherwise your project's state will be empty and nothing will animate. Learn more at https://www.theatrejs.com/docs/latest/manual/projects#state"
              );
            }
          } else {
            setTimeout(() => {
              if (!this._studio) {
                throw new Error(
                  'Argument config.state in Theatre.getProject("'.concat(id, '", config) is empty. This is fine ') + "while you are using @theatre/core along with @theatre/studio. But since @theatre/studio " + 'is not loaded, the state of project "'.concat(id, '" will be empty.\n\n') + "To fix this, you need to add @theatre/studio into the bundle and export the project's state. Learn how to do that at https://www.theatrejs.com/docs/latest/manual/projects#state\n"
                );
              }
            }, 1e3);
          }
        }
      }
      attachToStudio(studio2) {
        if (this._studio) {
          if (this._studio !== studio2) {
            throw new Error(
              "Project ".concat(this.address.projectId, " is already attached to studio ").concat(this._studio.address.studioId)
            );
          } else {
            console.warn(
              "Project ".concat(this.address.projectId, " is already attached to studio ").concat(this._studio.address.studioId)
            );
            return;
          }
        }
        this._studio = studio2;
        studio2.initialized.then(async () => {
          var _a;
          await initialiseProjectState(studio2, this, this.config.state);
          this._pointerProxies.historic.setPointer(
            studio2.atomP.historic.coreByProject[this.address.projectId]
          );
          this._pointerProxies.ahistoric.setPointer(
            studio2.atomP.ahistoric.coreByProject[this.address.projectId]
          );
          this._pointerProxies.ephemeral.setPointer(
            studio2.atomP.ephemeral.coreByProject[this.address.projectId]
          );
          await studio2.createAssetStorage(this, (_a = this.config.assets) == null ? void 0 : _a.baseUrl).then((assetStorage) => {
            this.assetStorage = assetStorage;
            this._assetStorageReadyDeferred.resolve(void 0);
          });
          this._studioReadyDeferred.resolve(void 0);
        }).catch((err) => {
          console.error(err);
          throw err;
        });
      }
      get isAttachedToStudio() {
        return !!this._studio;
      }
      get ready() {
        return this._readyPromise;
      }
      isReady() {
        return this._studioReadyDeferred.status === "resolved" && this._assetStorageReadyDeferred.status === "resolved";
      }
      getOrCreateSheet(sheetId, instanceId = "default") {
        let template = this._sheetTemplates.get()[sheetId];
        if (!template) {
          template = new SheetTemplate(this, sheetId);
          this._sheetTemplates.reduce((s2) => __spreadProps(__spreadValues({}, s2), { [sheetId]: template }));
        }
        return template.getInstance(instanceId);
      }
    };
    var TheatreProject = class {
      get type() {
        return "Theatre_Project_PublicAPI";
      }
      /**
       * @internal
       */
      constructor(id, config = {}) {
        setPrivateAPI(this, new Project(id, config, this));
      }
      get ready() {
        return privateAPI(this).ready;
      }
      get isReady() {
        return privateAPI(this).isReady();
      }
      get address() {
        return __spreadValues({}, privateAPI(this).address);
      }
      getAssetUrl(asset) {
        if (!this.isReady) {
          console.error(
            "Calling `project.getAssetUrl()` before `project.ready` is resolved, will always return `undefined`. Either use `project.ready.then(() => project.getAssetUrl())` or `await project.ready` before calling `project.getAssetUrl()`."
          );
          return void 0;
        }
        return asset.id ? privateAPI(this).assetStorage.getAssetUrl(asset.id) : void 0;
      }
      sheet(sheetId, instanceId = "default") {
        const sanitizedPath = validateAndSanitiseSlashedPathOrThrow(
          sheetId
        );
        return privateAPI(this).getOrCreateSheet(
          sanitizedPath,
          instanceId
        ).publicApi;
      }
    };
    __toESM(require_fast_deep_equal());
    var import_dataverse18 = requireDist$2();
    var import_dataverse19 = requireDist$2();
    function getProject(id, config = {}) {
      const existingProject = projectsSingleton_default.get(id);
      if (existingProject) {
        return existingProject.publicApi;
      }
      const rootLogger = _coreLogger();
      const plogger = rootLogger.named("Project", id);
      if (config.state) {
        {
          deepValidateOnDiskState(id, config.state);
          plogger._debug("deep validated config.state on disk");
        }
      } else {
        plogger._debug("no config.state");
      }
      return new TheatreProject(id, config);
    }
    var shallowValidateOnDiskState = (projectId, s2) => {
      if (Array.isArray(s2) || s2 == null || s2.definitionVersion !== globals_default.currentProjectStateDefinitionVersion) {
        throw new InvalidArgumentError(
          "Error validating conf.state in Theatre.getProject(".concat(JSON.stringify(
            projectId
          ), ", conf). The state seems to be formatted in a way that is unreadable to Theatre.js. Read more at https://www.theatrejs.com/docs/latest/manual/projects#state")
        );
      }
    };
    var deepValidateOnDiskState = (projectId, s2) => {
      shallowValidateOnDiskState(projectId, s2);
    };
    function onChange(pointer3, callback, rafDriver) {
      const ticker = rafDriver ? privateAPI(rafDriver).ticker : getCoreTicker();
      if ((0, import_dataverse18.isPointer)(pointer3)) {
        const pr = (0, import_dataverse19.pointerToPrism)(pointer3);
        return pr.onChange(ticker, callback, true);
      } else if ((0, import_dataverse19.isPrism)(pointer3)) {
        return pointer3.onChange(ticker, callback, true);
      } else {
        throw new Error(
          "Called onChange(p) where p is neither a pointer nor a prism."
        );
      }
    }
    function val7(pointer3) {
      if ((0, import_dataverse18.isPointer)(pointer3)) {
        return (0, import_dataverse19.pointerToPrism)(pointer3).getValue();
      } else {
        throw new Error("Called val(p) where p is not a pointer.");
      }
    }
    var CoreBundle = class {
      constructor() {
        __publicField(this, "_studio");
      }
      get type() {
        return "Theatre_CoreBundle";
      }
      get version() {
        return "0.7.2";
      }
      getBitsForStudio(studio2, callback) {
        if (this._studio) {
          throw new Error("@theatre/core is already attached to @theatre/studio");
        }
        this._studio = studio2;
        const bits = {
          projectsP: projectsSingleton_default.atom.pointer.projects,
          privateAPI,
          coreExports: coreExports_exports,
          getCoreRafDriver
        };
        callback(bits);
      }
    };
    registerCoreBundle();
    function registerCoreBundle() {
      if (typeof window == "undefined")
        return;
      const existingBundle = (
        // @ts-ignore ignore
        window[coreBundle]
      );
      if (typeof existingBundle !== "undefined") {
        if (typeof existingBundle === "object" && existingBundle && typeof existingBundle.version === "string") {
          throw new Error(
            "It seems that the module '@theatre/core' is loaded more than once. This could have two possible causes:\n1. You might have two separate versions of Theatre.js in node_modules.\n2. Or this might be a bundling misconfiguration, in case you're using a bundler like Webpack/ESBuild/Rollup.\n\nNote that it **is okay** to import '@theatre/core' multiple times. But those imports should point to the same module."
          );
        } else {
          throw new Error(
            "The variable window.".concat(coreBundle, " seems to be already set by a module other than @theatre/core.")
          );
        }
      }
      const coreBundle2 = new CoreBundle();
      window[coreBundle] = coreBundle2;
      const possibleExistingStudioBundle = (
        // @ts-ignore ignore
        window[studioBundle]
      );
      if (possibleExistingStudioBundle && possibleExistingStudioBundle !== null && possibleExistingStudioBundle.type === "Theatre_StudioBundle") {
        possibleExistingStudioBundle.registerCoreBundle(coreBundle2);
      }
    }
    /*! Bundled license information:
    
    		lodash-es/lodash.js:
    		  (**
    		   * @license
    		   * Lodash (Custom Build) <https://lodash.com/>
    		   * Build: `lodash modularize exports="es" -o ./`
    		   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
    		   * Released under MIT license <https://lodash.com/license>
    		   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
    		   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    		   *)
    		*/
  })(dist, dist.exports);
  return dist.exports;
}
var distExports = requireDist();
const sheetsById = { "Animated scene": { "staticOverrides": { "byObject": { "GLTF Model": { "scale": 7.869620253164563, "opacity": 1, "position": { "y": -47.4 } }, "Camera": { "position": { "y": 20, "x": -7.595312268209465, "z": 40 }, "rotation": { "y": -1.0737619750587277, "x": -0.11930688611763574, "z": 0 } } } }, "sequence": { "subUnitsPerUnit": 30, "length": 10, "type": "PositionalSequence", "tracksByObject": { "GLTF Model": { "trackData": { "qZ_8kUR6QI": { "type": "BasicKeyframedTrack", "__debugName": 'GLTF Model:["scale"]', "keyframes": [{ "id": "mUTtVKBhlE", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 7.8 }] }, "YyCPNb3yvK": { "type": "BasicKeyframedTrack", "__debugName": 'GLTF Model:["opacity"]', "keyframes": [{ "id": "wcGyOV7Ct7", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.1875, 0.7606837606837606], "type": "bezier", "value": 0 }, { "id": "W_CYAWzdki", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }, { "id": "48OLu53JpG", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.8918803418803419, 0.025170940170940174], "type": "bezier", "value": 0 }, { "id": "DARVlOXbmc", "position": 4, "connectedRight": true, "handles": [0.9974603174603175, 0.3847008547008547, 0.5, 0], "type": "bezier", "value": 0 }] }, "0IphT50Pya": { "type": "BasicKeyframedTrack", "__debugName": 'GLTF Model:["position","y"]', "keyframes": [{ "id": "U_HYQdhimS", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }] } }, "trackIdByPropPath": { '["scale"]': "qZ_8kUR6QI", '["opacity"]': "YyCPNb3yvK", '["position","y"]': "0IphT50Pya" } }, "Camera": { "trackData": { "FEfTjqTfAl": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["position","x"]', "keyframes": [{ "id": "69EhJ1Fi6r", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": -3.7976561341047366 }, { "id": "wuBHSh2XN2", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.476, -0.828], "type": "bezier", "value": -5.999999999999998 }, { "id": "YP1z9pHpvM", "position": 2, "connectedRight": true, "handles": [0.714, 0.975, 0.5, 0], "type": "bezier", "value": -5 }, { "id": "LjndE-FWNJ", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 1.5 }] }, "XR4c214tQG": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["position","y"]', "keyframes": [{ "id": "UJca_fMF6y", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 22.6 }, { "id": "P8c2boTdq_", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 23.79765613410473 }, { "id": "0tlxUI2nYa", "position": 2, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 23.79765613410473 }, { "id": "bycLymSyfB", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 22 }] }, "MJt8wrxqa8": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["position","z"]', "keyframes": [{ "id": "wyblRdNiCa", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 13.416407061266886 }, { "id": "gyZEgJnCkE", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 5.82109479305741 }, { "id": "dN5NmuA2Wr", "position": 2, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0.7568647554451395 }, { "id": "w0Fi0GlpU9", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.55, 0.085], "type": "bezier", "value": -2.7 }, { "id": "kuKY10YKxC", "position": 4, "connectedRight": true, "handles": [0.68, 0.53, 0.5, 0], "type": "bezier", "value": 12.49062453641893 }] }, "hmuYq9qS22": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["rotation","x"]', "keyframes": [{ "id": "YQVWfHxAAf", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": -0.11930688611763574 }, { "id": "YedILRo80r", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }, { "id": "PUrtHtqf_0", "position": 2, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }, { "id": "9t-dkfty6c", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.9140824542787611, 0.008181306035037972], "type": "bezier", "value": 0 }, { "id": "l8hrR8mgyE", "position": 3.433, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 1.4035922845503541 }, { "id": "YYDKY92mtO", "position": 3.833, "connectedRight": true, "handles": [0.355, 1, 0.5, 0], "type": "bezier", "value": 2.1076507675982143 }] }, "aU_TQn9T0r": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["rotation","y"]', "keyframes": [{ "id": "auKOvTGxlq", "position": 0, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }, { "id": "qswp6vKHxH", "position": 1, "connectedRight": true, "handles": [0.5, 1, 0.455, 0.03], "type": "bezier", "value": -0.3977230496026942 }, { "id": "hvlzHeA-PB", "position": 2, "connectedRight": true, "handles": [0.515, 0.955, 0.5, 0], "type": "bezier", "value": -1.5465770772658067 }, { "id": "uzdkZ0V1gD", "position": 3, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": -3.2 }, { "id": "BTKzLuVyf2", "position": 4, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": -3.2 }] }, "ypUeIu-DkA": { "type": "BasicKeyframedTrack", "__debugName": 'Camera:["rotation","z"]', "keyframes": [{ "id": "IqPxUPcO4a", "position": 3.267, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 0 }, { "id": "QkbnXUHEwB", "position": 4, "connectedRight": true, "handles": [0.5, 1, 0.5, 0], "type": "bezier", "value": 3.14 }] } }, "trackIdByPropPath": { '["position","x"]': "FEfTjqTfAl", '["position","y"]': "XR4c214tQG", '["position","z"]': "MJt8wrxqa8", '["rotation","x"]': "hmuYq9qS22", '["rotation","y"]': "aU_TQn9T0r", '["rotation","z"]': "ypUeIu-DkA" } }, "Animated Box": { "trackData": { "WVWT3fdc-0": { "type": "BasicKeyframedTrack", "__debugName": 'Animated Box:["y"]', "keyframes": [] }, "G3kuRv64jv": { "type": "BasicKeyframedTrack", "__debugName": 'Animated Box:["x"]', "keyframes": [] } }, "trackIdByPropPath": { '["y"]': "WVWT3fdc-0", '["x"]': "G3kuRv64jv" } } } } } };
const definitionVersion = "0.4.0";
const revisionHistory = ["XXmYV5rclyw85muN", "2M6GK2XhkZ61-r4e", "U9gtVM8vODUdGfrF", "iTOyvbbNvdfnme4F", "yGGES_oO6C9SCX5K", "GbSNKH0DwTKgM83o", "xTZmbZnCLpY5J595", "CyNzE3VWIJnbD3c4", "dE3VAjyWcIyWqJhg", "VAorr6ERsvkSvyVx", "s9KHj4o7nEBKo34g"];
const theatreState = {
  sheetsById,
  definitionVersion,
  revisionHistory
};
var t = function() {
  return t = Object.assign || function(t2) {
    for (var i2, n = 1, s = arguments.length; n < s; n++) for (var a in i2 = arguments[n]) Object.prototype.hasOwnProperty.call(i2, a) && (t2[a] = i2[a]);
    return t2;
  }, t.apply(this, arguments);
}, i = function() {
  function i2(i3, n, s) {
    var a = this;
    this.endVal = n, this.options = s, this.version = "2.8.1", this.defaults = { startVal: 0, decimalPlaces: 0, duration: 2, useEasing: true, useGrouping: true, useIndianSeparators: false, smartEasingThreshold: 999, smartEasingAmount: 333, separator: ",", decimal: ".", prefix: "", suffix: "", enableScrollSpy: false, scrollSpyDelay: 200, scrollSpyOnce: false }, this.finalEndVal = null, this.useEasing = true, this.countDown = false, this.error = "", this.startVal = 0, this.paused = true, this.once = false, this.count = function(t2) {
      a.startTime || (a.startTime = t2);
      var i4 = t2 - a.startTime;
      a.remaining = a.duration - i4, a.useEasing ? a.countDown ? a.frameVal = a.startVal - a.easingFn(i4, 0, a.startVal - a.endVal, a.duration) : a.frameVal = a.easingFn(i4, a.startVal, a.endVal - a.startVal, a.duration) : a.frameVal = a.startVal + (a.endVal - a.startVal) * (i4 / a.duration);
      var n2 = a.countDown ? a.frameVal < a.endVal : a.frameVal > a.endVal;
      a.frameVal = n2 ? a.endVal : a.frameVal, a.frameVal = Number(a.frameVal.toFixed(a.options.decimalPlaces)), a.printValue(a.frameVal), i4 < a.duration ? a.rAF = requestAnimationFrame(a.count) : null !== a.finalEndVal ? a.update(a.finalEndVal) : a.options.onCompleteCallback && a.options.onCompleteCallback();
    }, this.formatNumber = function(t2) {
      var i4, n2, s2, e, o = t2 < 0 ? "-" : "";
      i4 = Math.abs(t2).toFixed(a.options.decimalPlaces);
      var r = (i4 += "").split(".");
      if (n2 = r[0], s2 = r.length > 1 ? a.options.decimal + r[1] : "", a.options.useGrouping) {
        e = "";
        for (var l = 3, h = 0, u = 0, p = n2.length; u < p; ++u) a.options.useIndianSeparators && 4 === u && (l = 2, h = 1), 0 !== u && h % l == 0 && (e = a.options.separator + e), h++, e = n2[p - u - 1] + e;
        n2 = e;
      }
      return a.options.numerals && a.options.numerals.length && (n2 = n2.replace(/[0-9]/g, function(t3) {
        return a.options.numerals[+t3];
      }), s2 = s2.replace(/[0-9]/g, function(t3) {
        return a.options.numerals[+t3];
      })), o + a.options.prefix + n2 + s2 + a.options.suffix;
    }, this.easeOutExpo = function(t2, i4, n2, s2) {
      return n2 * (1 - Math.pow(2, -10 * t2 / s2)) * 1024 / 1023 + i4;
    }, this.options = t(t({}, this.defaults), s), this.formattingFn = this.options.formattingFn ? this.options.formattingFn : this.formatNumber, this.easingFn = this.options.easingFn ? this.options.easingFn : this.easeOutExpo, this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.endVal = this.validateValue(n), this.options.decimalPlaces = Math.max(this.options.decimalPlaces), this.resetDuration(), this.options.separator = String(this.options.separator), this.useEasing = this.options.useEasing, "" === this.options.separator && (this.options.useGrouping = false), this.el = "string" == typeof i3 ? document.getElementById(i3) : i3, this.el ? this.printValue(this.startVal) : this.error = "[CountUp] target is null or undefined", "undefined" != typeof window && this.options.enableScrollSpy && (this.error ? console.error(this.error, i3) : (window.onScrollFns = window.onScrollFns || [], window.onScrollFns.push(function() {
      return a.handleScroll(a);
    }), window.onscroll = function() {
      window.onScrollFns.forEach(function(t2) {
        return t2();
      });
    }, this.handleScroll(this)));
  }
  return i2.prototype.handleScroll = function(t2) {
    if (t2 && window && !t2.once) {
      var i3 = window.innerHeight + window.scrollY, n = t2.el.getBoundingClientRect(), s = n.top + window.pageYOffset, a = n.top + n.height + window.pageYOffset;
      a < i3 && a > window.scrollY && t2.paused ? (t2.paused = false, setTimeout(function() {
        return t2.start();
      }, t2.options.scrollSpyDelay), t2.options.scrollSpyOnce && (t2.once = true)) : (window.scrollY > a || s > i3) && !t2.paused && t2.reset();
    }
  }, i2.prototype.determineDirectionAndSmartEasing = function() {
    var t2 = this.finalEndVal ? this.finalEndVal : this.endVal;
    this.countDown = this.startVal > t2;
    var i3 = t2 - this.startVal;
    if (Math.abs(i3) > this.options.smartEasingThreshold && this.options.useEasing) {
      this.finalEndVal = t2;
      var n = this.countDown ? 1 : -1;
      this.endVal = t2 + n * this.options.smartEasingAmount, this.duration = this.duration / 2;
    } else this.endVal = t2, this.finalEndVal = null;
    null !== this.finalEndVal ? this.useEasing = false : this.useEasing = this.options.useEasing;
  }, i2.prototype.start = function(t2) {
    this.error || (this.options.onStartCallback && this.options.onStartCallback(), t2 && (this.options.onCompleteCallback = t2), this.duration > 0 ? (this.determineDirectionAndSmartEasing(), this.paused = false, this.rAF = requestAnimationFrame(this.count)) : this.printValue(this.endVal));
  }, i2.prototype.pauseResume = function() {
    this.paused ? (this.startTime = null, this.duration = this.remaining, this.startVal = this.frameVal, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count)) : cancelAnimationFrame(this.rAF), this.paused = !this.paused;
  }, i2.prototype.reset = function() {
    cancelAnimationFrame(this.rAF), this.paused = true, this.resetDuration(), this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.printValue(this.startVal);
  }, i2.prototype.update = function(t2) {
    cancelAnimationFrame(this.rAF), this.startTime = null, this.endVal = this.validateValue(t2), this.endVal !== this.frameVal && (this.startVal = this.frameVal, null == this.finalEndVal && this.resetDuration(), this.finalEndVal = null, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count));
  }, i2.prototype.printValue = function(t2) {
    var i3;
    if (this.el) {
      var n = this.formattingFn(t2);
      if (null === (i3 = this.options.plugin) || void 0 === i3 ? void 0 : i3.render) this.options.plugin.render(this.el, n);
      else if ("INPUT" === this.el.tagName) this.el.value = n;
      else "text" === this.el.tagName || "tspan" === this.el.tagName ? this.el.textContent = n : this.el.innerHTML = n;
    }
  }, i2.prototype.ensureNumber = function(t2) {
    return "number" == typeof t2 && !isNaN(t2);
  }, i2.prototype.validateValue = function(t2) {
    var i3 = Number(t2);
    return this.ensureNumber(i3) ? i3 : (this.error = "[CountUp] invalid start or end value: ".concat(t2), null);
  }, i2.prototype.resetDuration = function() {
    this.startTime = null, this.duration = 1e3 * Number(this.options.duration), this.remaining = this.duration;
  }, i2;
}();
var __assign = function() {
  return (__assign = Object.assign || function(t2) {
    for (var e, n = 1, i2 = arguments.length; n < i2; n++) for (var r in e = arguments[n]) Object.prototype.hasOwnProperty.call(e, r) && (t2[r] = e[r]);
    return t2;
  }).apply(this, arguments);
}, rAF = window.requestAnimationFrame || function(t2) {
  window.setTimeout(t2, 1e3 / 60);
}, Odometer = function() {
  function t2(t3) {
    this.version = "1.0", this.defaults = { duration: 0.8, lastDigitDelay: 0.25 }, this.cell_digits = null, this.options = __assign(__assign({}, this.defaults), t3), this.cell_digits = null;
  }
  return t2.prototype.render = function(t3, o) {
    for (var e, s = this.options, n = false, a = (this.cell_digits || (n = true, document.querySelector("style[odometer]") || ((e = document.createElement("style")).setAttribute("odometer", "odometer"), e.innerHTML = ".odometer-numbers{display:inline-flex;line-height:100%;overflow-y:hidden}.odometer-numbers>span{display:flex;flex-direction:column;justify-content:start;align-items:center;height:1em;will-change:transform;transform:translateY(0)}", document.head.appendChild(e)), t3.innerHTML = '<div class="odometer-numbers"></div>', this.cell_digits = []), '<span style="color:transparent">0</span>'), l = "transform ".concat(s.duration, "s ease-out"), d = this.cell_digits.length; d < o.length; d++) {
      var i2 = document.createElement("span");
      i2.style.transition = l, i2.innerHTML = n ? "" : a, t3.firstChild && t3.firstChild.appendChild(i2), this.cell_digits.push({ container: i2, current: void 0, position: n ? 1 : 0, new: true });
    }
    function c(t4, e2) {
      t4.position--, t4.container.appendChild(e2), t4.lastTimeAdd = +/* @__PURE__ */ new Date(), t4.new ? (t4.new = false, rAF(function() {
        t4.container.style.transform = "translateY(".concat(t4.position, "em)");
      })) : t4.container.style.transform = "translateY(".concat(t4.position, "em)");
    }
    function r() {
      u = d < o.length ? o.charAt(d) : null;
      var t4, e2, n2, i3, r2 = f.cell_digits[d];
      r2.current != u && (r2.current = u, (m = document.createElement("span")).innerHTML = null === u ? a : u, r2.container.children.length < 4 ? c(r2, m) : (e2 = m, (t4 = r2).nextToAdd && (c(t4, t4.nextToAdd), clearTimeout(t4.lastTimer), t4.nextToAdd = null), n2 = +/* @__PURE__ */ new Date(), i3 = 1e3 * s.lastDigitDelay - (n2 - t4.lastTimeAdd), s.lastDigitDelay <= 0 || n2 - t4.lastTimeAdd >= 1.05 * i3 ? (c(t4, e2), t4.nextToAdd = null) : (t4.nextToAdd = e2, t4.lastTimer = setTimeout(function() {
        c(t4, t4.nextToAdd), t4.nextToAdd = null;
      }, 1e3 * s.duration))), clearTimeout(r2.timerClean), r2.timerClean = setTimeout(function() {
        r2.timerClean = null, r2.container.children.length < 3 || (r2.container.style.transition = "none", rAF(function() {
          for (r2.position = -1; 1 < r2.container.children.length; ) r2.container.removeChild(r2.container.firstChild);
          var t5 = document.createElement("span");
          t5.innerHTML = a, r2.container.insertBefore(t5, r2.container.firstChild), r2.container.style.transform = "translateY(".concat(r2.position, "em)"), rAF(function() {
            r2.container.style.transition = l;
          });
        }));
      }, 1e3 * ((s.duration || 0.8) + (s.duration || 0.25)) + 2500));
    }
    for (var u, m, h = Math.max(o.length, this.cell_digits.length), f = this, d = 0; d < h; d++) r();
  }, t2;
}();
console.log("CountUp", i);
const counterYear = new i("counter-year", 2025, {
  plugin: new Odometer({
    duration: 0.7
    // lastDigitDelay: 1,
  }),
  duration: 4.5,
  startVal: 1906,
  separator: "",
  decimal: ""
  // doesnt work because of the way i am doing containerized scrolling
  // enableScrollSpy: true, // start on visible
});
const months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
const fromMonth = "Nov";
const toMonth = (/* @__PURE__ */ new Date()).toLocaleString("en-US", { month: "short" });
const fromIndex = months.indexOf(fromMonth);
const toIndex = months.indexOf(toMonth);
const counterMonth = new i("counter-month", toIndex, {
  plugin: new Odometer({
    duration: 0.7
    // lastDigitDelay: 1,
  }),
  startVal: fromIndex,
  duration: 4,
  formattingFn: (val) => months[Math.round(val)]
});
const fromDay = 1;
const toDay = (/* @__PURE__ */ new Date()).getDate();
console.log("toDay", toDay);
const counterDay = new i("counter-day", toDay, {
  plugin: new Odometer({
    duration: 0.7
  }),
  startVal: fromDay,
  duration: 4,
  separator: "",
  decimal: ""
});
studio.initialize();
const project = distExports.getProject("THREE.js x Theatre.js", { state: theatreState });
const sheet = project.sheet("Animated scene");
let scrollOffset = 0;
let sequencePosition = 0;
let seqPosInt = 0;
const SCROLL_STOPS = 4;
let snapMode = "mandatory";
let isSyncEnabled = true;
const scrollContent = document.getElementById("scroll-content");
const statusElement = document.getElementById("status");
const snapToggle = document.getElementById("snap-toggle");
const syncToggle = document.getElementById("sync-toggle");
const studioToggle = document.getElementById("studio-toggle");
const colorModeBtn = document.getElementById("color-mode");
const animatedBox = document.getElementById("animated-box");
const menuToggle = document.getElementById("menu-toggle");
const menuContent = document.querySelector(".menu-content");
const scrollItems = document.querySelectorAll(".scroll-item");
scrollContent.style.scrollSnapType = `y ${snapMode}`;
const boxObj = sheet.object("Animated Box", {
  x: distExports.types.number(0, { range: [0, window.innerWidth - 100] }),
  y: distExports.types.number(0, { range: [-250, window.innerHeight - 100] })
});
boxObj.onValuesChange((values) => {
  animatedBox.style.transform = `translate(${values.x}px, ${values.y}px)`;
});
animatedBox.addEventListener("click", () => {
  if (seqPosInt < 4) {
    scrollItems[seqPosInt + 1].scrollIntoView({ behavior: "smooth" });
  } else {
    scrollItems[0].scrollIntoView({ behavior: "smooth" });
  }
}, false);
function onScroll$1() {
  scrollOffset = scrollContent.scrollTop / (scrollContent.scrollHeight - scrollContent.clientHeight);
  statusElement.textContent = `Scroll: ${scrollOffset.toFixed(2)}, Sequence: ${sequencePosition.toFixed(2)}`;
  seqPosInt = Math.round(sequencePosition);
  if (seqPosInt == 2) {
    console.log("on the counter slide");
    counterYear.start();
    counterMonth.start();
    counterDay.start();
  } else {
    counterYear.reset();
    counterMonth.reset();
    counterDay.reset();
  }
  if (seqPosInt == 4) {
    console.log("on the final slide");
    animatedBox.classList.add("final-slide");
  } else {
    animatedBox.classList.remove("final-slide");
  }
}
function toggleSnapMode() {
  snapMode = snapMode === "proximity" ? "mandatory" : "proximity";
  scrollContent.style.scrollSnapType = `y ${snapMode}`;
  snapToggle.textContent = `Snap Mode: ${snapMode}`;
}
function toggleSync() {
  isSyncEnabled = !isSyncEnabled;
  syncToggle.textContent = `Sync: ${isSyncEnabled ? "ON" : "OFF"}`;
  syncToggle.style.backgroundColor = isSyncEnabled ? "#333" : "#833";
}
function toggleStudio() {
  if (studio.ui.isHidden) {
    studio.ui.restore();
    studioToggle.textContent = "Hide Studio";
  } else {
    studio.ui.hide();
    studioToggle.textContent = "Show Studio";
  }
}
function updateColorMode() {
  const vibrantColors = [
    "#73FDA6",
    // original mint
    "#FF00FF",
    // magenta
    "#00FFFF",
    // cyan
    "#FF6B6B",
    // coral
    "#4CAF50",
    // emerald
    "#9C27B0",
    // purple
    "#FF9800",
    // orange
    "#2196F3",
    // blue
    "#E91E63",
    // pink
    "#FFEB3B"
    // yellow
  ];
  const dullColors = [
    "#FF1493",
    // deep pink
    "#00FF7F",
    // spring green
    "#FF4500",
    // orange red
    "#4169E1",
    // royal blue
    "#FFD700",
    // gold
    "#FF69B4",
    // hot pink
    "#32CD32",
    // lime green
    "#FF1493",
    // deep pink
    "#00CED1",
    // dark turquoise
    "#FF4500"
    // orange red
  ];
  const root = document.documentElement;
  const currentColor = getComputedStyle(root).getPropertyValue("--c-1").trim();
  const currentIndex = vibrantColors.indexOf(currentColor);
  const nextIndex = (currentIndex + 1) % vibrantColors.length;
  root.style.setProperty("--c-1", vibrantColors[nextIndex]);
  root.style.setProperty("--c-2", dullColors[nextIndex]);
}
scrollContent.addEventListener("scroll", onScroll$1);
snapToggle.addEventListener("click", toggleSnapMode);
syncToggle.addEventListener("click", toggleSync);
studioToggle.addEventListener("click", toggleStudio);
colorModeBtn.addEventListener("click", updateColorMode);
menuToggle.addEventListener("click", () => {
  menuToggle.classList.toggle("active");
  menuContent.classList.toggle("active");
});
const scene = new Scene();
const hasAllParam = new URLSearchParams(window.location.search).has("all");
const camera = new PerspectiveCamera(
  70,
  window.innerWidth / window.innerHeight,
  0.1,
  // Near plane - reduced to allow closer viewing
  1e3
  // Far plane - increased significantly to prevent disappearing
);
camera.position.z = 50;
const cameraObj = sheet.object("Camera", {
  position: distExports.types.compound({
    x: distExports.types.number(camera.position.x, { range: [-100, 100] }),
    y: distExports.types.number(camera.position.y, { range: [-100, 100] }),
    z: distExports.types.number(camera.position.z, { range: [-100, 100] })
  }),
  rotation: distExports.types.compound({
    x: distExports.types.number(camera.rotation.x, { range: [-Math.PI, Math.PI] }),
    // y: types.number(camera.rotation.y, { range: [-Math.PI, Math.PI] }),
    y: distExports.types.number(camera.rotation.y, { range: [-6, 6] }),
    // y: types.number(camera.rotation.y, { range: [-6, 6] }),
    z: distExports.types.number(camera.rotation.z, { range: [-Math.PI, Math.PI] })
  })
});
console.log("cameraObj", cameraObj);
const floorGeometry = new PlaneGeometry(100, 100);
const floorMaterial = new MeshStandardMaterial({
  color: "#666666",
  roughness: 0.7,
  metalness: 0.1
});
const floor = new Mesh(floorGeometry, floorMaterial);
floor.rotation.x = -Math.PI / 2;
floor.position.y = 0;
floor.receiveShadow = true;
if (hasAllParam) scene.add(floor);
const cubeGeometry = new BoxGeometry(10, 10, 10);
const cubeMaterial = new MeshStandardMaterial({
  color: "#ff6b6b",
  roughness: 0.5,
  metalness: 0.1
});
const cube = new Mesh(cubeGeometry, cubeMaterial);
cube.position.set(-20, 10, -20);
cube.castShadow = true;
cube.receiveShadow = true;
if (hasAllParam) scene.add(cube);
const coneGeometry = new ConeGeometry(5, 15, 32);
const coneMaterial = new MeshStandardMaterial({
  color: "#4ecdc4",
  roughness: 0.3,
  metalness: 0.2
});
const cone = new Mesh(coneGeometry, coneMaterial);
cone.position.set(20, 8, -15);
cone.castShadow = true;
cone.receiveShadow = true;
if (hasAllParam) scene.add(cone);
const geometry = new TorusKnotGeometry(10, 3, 300, 16);
const material = new MeshStandardMaterial({ color: "#f00" });
material.color = new Color("#049ef4");
material.roughness = 0.5;
const mesh = new Mesh(geometry, material);
mesh.castShadow = true;
mesh.receiveShadow = true;
const posContainer = new Group();
posContainer.position.set(0, 15, -30);
posContainer.add(mesh);
const posContainerObj = sheet.object("Position Container", {
  position: distExports.types.compound({
    x: distExports.types.number(posContainer.position.x, { range: [-50, 50] }),
    y: distExports.types.number(posContainer.position.y, { range: [-50, 50] }),
    z: distExports.types.number(posContainer.position.z, { range: [-50, 50] })
  }),
  rotation: distExports.types.compound({
    x: distExports.types.number(posContainer.rotation.x, { range: [-Math.PI, Math.PI] }),
    y: distExports.types.number(posContainer.rotation.y, { range: [-Math.PI, Math.PI] }),
    z: distExports.types.number(posContainer.rotation.z, { range: [-Math.PI, Math.PI] })
  })
});
posContainerObj.onValuesChange((values) => {
  const { x: px, y: py, z: pz } = values.position;
  const { x: rx, y: ry, z: rz } = values.rotation;
  posContainer.position.set(px, py, pz);
  posContainer.rotation.set(rx, ry, rz);
});
const torusKnotObj = sheet.object("Torus Knot", {
  // Note that the rotation is in radians
  // (full rotation: 2 * Math.PI)
  rotation: distExports.types.compound({
    x: distExports.types.number(mesh.rotation.x, { range: [-2, 2] }),
    y: distExports.types.number(mesh.rotation.y, { range: [-2, 2] }),
    z: distExports.types.number(mesh.rotation.z, { range: [-2, 2] })
  })
});
torusKnotObj.onValuesChange((values) => {
  const { x, y, z } = values.rotation;
  mesh.rotation.set(x * Math.PI, y * Math.PI, z * Math.PI);
});
const ambientLight = new AmbientLight("#D3D3D3", 2.85);
scene.add(ambientLight);
const directionalLight = new DirectionalLight(16777215, 0.9);
directionalLight.position.set(14, 40, 14);
directionalLight.castShadow = true;
directionalLight.shadow.mapSize.width = 4096;
directionalLight.shadow.mapSize.height = 4096;
directionalLight.shadow.camera.far = 100;
directionalLight.shadow.camera.near = 1;
directionalLight.shadow.camera.top = 40;
directionalLight.shadow.camera.right = 40;
directionalLight.shadow.camera.bottom = -40;
directionalLight.shadow.camera.left = -40;
scene.add(directionalLight);
const directionalHelper = new DirectionalLightHelper(directionalLight, 5);
const lightsObj = sheet.object("Lights", {
  directional: distExports.types.compound({
    position: distExports.types.compound({
      x: distExports.types.number(directionalLight.position.x, { range: [-50, 50] }),
      y: distExports.types.number(directionalLight.position.y, { range: [-50, 50] }),
      z: distExports.types.number(directionalLight.position.z, { range: [-50, 50] })
    }),
    intensity: distExports.types.number(directionalLight.intensity, { range: [0, 10] })
  })
  // rectArea: types.compound({
  //   position: types.compound({
  //     x: types.number(rectAreaLight.position.x, { range: [-50, 50] }),
  //     y: types.number(rectAreaLight.position.y, { range: [-50, 50] }),
  //     z: types.number(rectAreaLight.position.z, { range: [-50, 50] }),
  //   }),
  //   intensity: types.number(rectAreaLight.intensity, { range: [0, 10] }),
  // }),
});
lightsObj.onValuesChange((values) => {
  const { x: dx, y: dy, z: dz } = values.directional.position;
  directionalLight.position.set(dx, dy, dz);
  directionalLight.intensity = values.directional.intensity;
  directionalHelper.update();
});
const axesHelper = new AxesHelper(100);
if (hasAllParam) scene.add(axesHelper);
const renderer = new WebGLRenderer({
  antialias: true,
  alpha: true
  // powerPreference: "high-performance"
});
renderer.setClearColor(0, 0);
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
renderer.render(scene, camera);
renderer.domElement.style.mixBlendMode = "color-dodge";
renderer.domElement.style.filter = "brightness(0.75) contrast(1)";
document.body.prepend(renderer.domElement);
console.log("camera", camera);
cameraObj.onValuesChange((values) => {
  const { x: px, y: py, z: pz } = values.position;
  const { x: rx, y: ry, z: rz } = values.rotation;
  camera.position.set(px, py, pz);
  camera.rotation.set(rx, ry, rz);
});
const transformControls = new TransformControls(camera, renderer.domElement);
const viewModeState = {
  transformableObjects: [
    {
      object: directionalLight,
      name: "Directional Light",
      helper: directionalHelper
    },
    // {
    //   object: posContainer,
    //   name: 'Position Container'
    // },
    {
      object: floor,
      name: "Floor"
    },
    {
      object: cube,
      name: "Cube"
    },
    {
      object: cone,
      name: "Cone"
    }
  ],
  currentIndex: 0,
  cycleNext() {
    this.currentIndex = (this.currentIndex + 1) % this.transformableObjects.length;
    this.updateTransformControls();
  },
  cyclePrevious() {
    this.currentIndex = (this.currentIndex - 1 + this.transformableObjects.length) % this.transformableObjects.length;
    this.updateTransformControls();
  },
  updateTransformControls() {
    const current = this.transformableObjects[this.currentIndex];
    transformControls.attach(current.object);
    this.transformableObjects.forEach((obj) => {
      if (obj.helper) {
        obj.helper.visible = obj === current;
      }
    });
    console.log(`Now controlling: ${current.name} (${transformControls.getMode()})`);
  }
};
transformControls.setMode("translate");
transformControls.addEventListener("dragging-changed", (_event) => {
});
viewModeState.updateTransformControls();
if (hasAllParam) scene.add(transformControls.getHelper());
window.addEventListener("keydown", (event) => {
  switch (event.key.toLowerCase()) {
    case "w":
      transformControls.setMode("translate");
      break;
    case "r":
      transformControls.setMode("rotate");
      break;
    case "e":
      transformControls.setMode("scale");
      break;
    case "z":
      viewModeState.cycleNext();
      break;
    case "x":
      viewModeState.cyclePrevious();
      break;
  }
  const current = viewModeState.transformableObjects[viewModeState.currentIndex];
  console.log(`Now controlling: ${current.name} (${transformControls.getMode()})`);
});
function animate() {
  directionalHelper.update();
  if (isSyncEnabled) {
    sequencePosition = scrollOffset * SCROLL_STOPS;
    sheet.sequence.position = sequencePosition;
  }
  renderer.render(scene, camera);
  window.requestAnimationFrame(animate);
}
animate();
window.addEventListener(
  "resize",
  function() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  },
  false
);
const meshPairs = [];
let isWireframe = true;
function loadModel(url) {
  const loader = new GLTFLoader();
  loader.load(url, (gltf) => {
    const model = gltf.scene;
    const modelContainer = new Group();
    scene.add(modelContainer);
    model.traverse((child) => {
      if (child instanceof Mesh) {
        child.castShadow = true;
        child.receiveShadow = true;
        const originalMesh = child.clone();
        const originalMaterial = child.material.clone();
        originalMaterial.transparent = true;
        originalMaterial.opacity = 0.5;
        originalMaterial.side = DoubleSide;
        originalMaterial.depthWrite = false;
        originalMaterial.needsUpdate = true;
        originalMesh.material = originalMaterial;
        originalMesh.visible = true;
        modelContainer.add(originalMesh);
        const wireframeMaterial = child.material.clone();
        wireframeMaterial.wireframe = true;
        wireframeMaterial.wireframeLinewidth = 1;
        wireframeMaterial.transparent = false;
        wireframeMaterial.depthWrite = true;
        wireframeMaterial.depthTest = true;
        const wireframe = new Mesh(child.geometry, wireframeMaterial);
        wireframe.visible = true;
        wireframe.position.copy(child.position);
        wireframe.rotation.copy(child.rotation);
        wireframe.scale.copy(child.scale);
        modelContainer.add(wireframe);
        meshPairs.push({
          original: originalMesh,
          wireframe
        });
      }
    });
    modelContainer.position.set(0, 0, 0);
    viewModeState.transformableObjects.push({
      object: modelContainer,
      name: "GLTF Model"
    });
    const modelObj = sheet.object("GLTF Model", {
      position: distExports.types.compound({
        x: distExports.types.number(0, { range: [-50, 50] }),
        y: distExports.types.number(0, { range: [-80, 50] }),
        z: distExports.types.number(0, { range: [-50, 50] })
      }),
      rotation: distExports.types.compound({
        x: distExports.types.number(0, { range: [-Math.PI, Math.PI] }),
        y: distExports.types.number(0, { range: [-Math.PI, Math.PI] }),
        z: distExports.types.number(0, { range: [-Math.PI, Math.PI] })
      }),
      scale: distExports.types.number(8, { range: [0.1, 40] }),
      opacity: distExports.types.number(0.5, { range: [0, 1] })
    });
    modelObj.onValuesChange((values) => {
      modelContainer.position.set(values.position.x, values.position.y, values.position.z);
      modelContainer.rotation.set(values.rotation.x, values.rotation.y, values.rotation.z);
      modelContainer.scale.setScalar(values.scale);
      meshPairs.forEach((pair) => {
        const material2 = pair.original.material;
        material2.opacity = values.opacity;
        material2.needsUpdate = true;
      });
    });
  }, void 0, (error) => {
    console.error("An error occurred loading the model:", error);
  });
}
function toggleWireframe() {
  isWireframe = !isWireframe;
  meshPairs.forEach((pair) => {
    pair.original.visible = !isWireframe;
  });
}
window.addEventListener("keydown", (event) => {
  if (event.code === "Space") {
    toggleWireframe();
  }
});
const modelUrl = new URL("" + new URL("sc-scan-DWzSNRq0.gltf", import.meta.url).href, import.meta.url).href;
loadModel(modelUrl);
window.studio = studio;
studio.ui.hide();
function isObject$1(obj) {
  return obj !== null && typeof obj === "object" && "constructor" in obj && obj.constructor === Object;
}
function extend$1(target, src) {
  if (target === void 0) {
    target = {};
  }
  if (src === void 0) {
    src = {};
  }
  const noExtend = ["__proto__", "constructor", "prototype"];
  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {
    if (typeof target[key] === "undefined") target[key] = src[key];
    else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {
      extend$1(target[key], src[key]);
    }
  });
}
const ssrDocument = {
  body: {},
  addEventListener() {
  },
  removeEventListener() {
  },
  activeElement: {
    blur() {
    },
    nodeName: ""
  },
  querySelector() {
    return null;
  },
  querySelectorAll() {
    return [];
  },
  getElementById() {
    return null;
  },
  createEvent() {
    return {
      initEvent() {
      }
    };
  },
  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute() {
      },
      getElementsByTagName() {
        return [];
      }
    };
  },
  createElementNS() {
    return {};
  },
  importNode() {
    return null;
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  }
};
function getDocument() {
  const doc = typeof document !== "undefined" ? document : {};
  extend$1(doc, ssrDocument);
  return doc;
}
const ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  },
  history: {
    replaceState() {
    },
    pushState() {
    },
    go() {
    },
    back() {
    }
  },
  CustomEvent: function CustomEvent2() {
    return this;
  },
  addEventListener() {
  },
  removeEventListener() {
  },
  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      }
    };
  },
  Image() {
  },
  Date() {
  },
  screen: {},
  setTimeout() {
  },
  clearTimeout() {
  },
  matchMedia() {
    return {};
  },
  requestAnimationFrame(callback) {
    if (typeof setTimeout === "undefined") {
      callback();
      return null;
    }
    return setTimeout(callback, 0);
  },
  cancelAnimationFrame(id) {
    if (typeof setTimeout === "undefined") {
      return;
    }
    clearTimeout(id);
  }
};
function getWindow() {
  const win = typeof window !== "undefined" ? window : {};
  extend$1(win, ssrWindow);
  return win;
}
function classesToTokens(classes2) {
  if (classes2 === void 0) {
    classes2 = "";
  }
  return classes2.trim().split(" ").filter((c) => !!c.trim());
}
function deleteProps(obj) {
  const object = obj;
  Object.keys(object).forEach((key) => {
    try {
      object[key] = null;
    } catch (e) {
    }
    try {
      delete object[key];
    } catch (e) {
    }
  });
}
function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return setTimeout(callback, delay);
}
function now() {
  return Date.now();
}
function getComputedStyle$1(el) {
  const window2 = getWindow();
  let style;
  if (window2.getComputedStyle) {
    style = window2.getComputedStyle(el, null);
  }
  if (!style && el.currentStyle) {
    style = el.currentStyle;
  }
  if (!style) {
    style = el.style;
  }
  return style;
}
function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = "x";
  }
  const window2 = getWindow();
  let matrix;
  let curTransform;
  let transformMatrix;
  const curStyle = getComputedStyle$1(el);
  if (window2.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;
    if (curTransform.split(",").length > 6) {
      curTransform = curTransform.split(", ").map((a) => a.replace(",", ".")).join(", ");
    }
    transformMatrix = new window2.WebKitCSSMatrix(curTransform === "none" ? "" : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,");
    matrix = transformMatrix.toString().split(",");
  }
  if (axis === "x") {
    if (window2.WebKitCSSMatrix) curTransform = transformMatrix.m41;
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
    else curTransform = parseFloat(matrix[4]);
  }
  if (axis === "y") {
    if (window2.WebKitCSSMatrix) curTransform = transformMatrix.m42;
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
    else curTransform = parseFloat(matrix[5]);
  }
  return curTransform || 0;
}
function isObject(o) {
  return typeof o === "object" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === "Object";
}
function isNode(node) {
  if (typeof window !== "undefined" && typeof window.HTMLElement !== "undefined") {
    return node instanceof HTMLElement;
  }
  return node && (node.nodeType === 1 || node.nodeType === 11);
}
function extend() {
  const to = Object(arguments.length <= 0 ? void 0 : arguments[0]);
  const noExtend = ["__proto__", "constructor", "prototype"];
  for (let i2 = 1; i2 < arguments.length; i2 += 1) {
    const nextSource = i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2];
    if (nextSource !== void 0 && nextSource !== null && !isNode(nextSource)) {
      const keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);
      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        const nextKey = keysArray[nextIndex];
        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== void 0 && desc.enumerable) {
          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
function setCSSProperty(el, varName, varValue) {
  el.style.setProperty(varName, varValue);
}
function animateCSSModeScroll(_ref) {
  let {
    swiper,
    targetPosition,
    side
  } = _ref;
  const window2 = getWindow();
  const startPosition = -swiper.translate;
  let startTime = null;
  let time;
  const duration = swiper.params.speed;
  swiper.wrapperEl.style.scrollSnapType = "none";
  window2.cancelAnimationFrame(swiper.cssModeFrameID);
  const dir = targetPosition > startPosition ? "next" : "prev";
  const isOutOfBound = (current, target) => {
    return dir === "next" && current >= target || dir === "prev" && current <= target;
  };
  const animate2 = () => {
    time = (/* @__PURE__ */ new Date()).getTime();
    if (startTime === null) {
      startTime = time;
    }
    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);
    if (isOutOfBound(currentPosition, targetPosition)) {
      currentPosition = targetPosition;
    }
    swiper.wrapperEl.scrollTo({
      [side]: currentPosition
    });
    if (isOutOfBound(currentPosition, targetPosition)) {
      swiper.wrapperEl.style.overflow = "hidden";
      swiper.wrapperEl.style.scrollSnapType = "";
      setTimeout(() => {
        swiper.wrapperEl.style.overflow = "";
        swiper.wrapperEl.scrollTo({
          [side]: currentPosition
        });
      });
      window2.cancelAnimationFrame(swiper.cssModeFrameID);
      return;
    }
    swiper.cssModeFrameID = window2.requestAnimationFrame(animate2);
  };
  animate2();
}
function elementChildren(element, selector) {
  if (selector === void 0) {
    selector = "";
  }
  const window2 = getWindow();
  const children = [...element.children];
  if (window2.HTMLSlotElement && element instanceof HTMLSlotElement) {
    children.push(...element.assignedElements());
  }
  if (!selector) {
    return children;
  }
  return children.filter((el) => el.matches(selector));
}
function elementIsChildOfSlot(el, slot) {
  const elementsQueue = [slot];
  while (elementsQueue.length > 0) {
    const elementToCheck = elementsQueue.shift();
    if (el === elementToCheck) {
      return true;
    }
    elementsQueue.push(...elementToCheck.children, ...elementToCheck.shadowRoot ? elementToCheck.shadowRoot.children : [], ...elementToCheck.assignedElements ? elementToCheck.assignedElements() : []);
  }
}
function elementIsChildOf(el, parent2) {
  const window2 = getWindow();
  let isChild = parent2.contains(el);
  if (!isChild && window2.HTMLSlotElement && parent2 instanceof HTMLSlotElement) {
    const children = [...parent2.assignedElements()];
    isChild = children.includes(el);
    if (!isChild) {
      isChild = elementIsChildOfSlot(el, parent2);
    }
  }
  return isChild;
}
function showWarning(text) {
  try {
    console.warn(text);
    return;
  } catch (err) {
  }
}
function createElement(tag, classes2) {
  if (classes2 === void 0) {
    classes2 = [];
  }
  const el = document.createElement(tag);
  el.classList.add(...Array.isArray(classes2) ? classes2 : classesToTokens(classes2));
  return el;
}
function elementPrevAll(el, selector) {
  const prevEls = [];
  while (el.previousElementSibling) {
    const prev = el.previousElementSibling;
    if (selector) {
      if (prev.matches(selector)) prevEls.push(prev);
    } else prevEls.push(prev);
    el = prev;
  }
  return prevEls;
}
function elementNextAll(el, selector) {
  const nextEls = [];
  while (el.nextElementSibling) {
    const next = el.nextElementSibling;
    if (selector) {
      if (next.matches(selector)) nextEls.push(next);
    } else nextEls.push(next);
    el = next;
  }
  return nextEls;
}
function elementStyle(el, prop) {
  const window2 = getWindow();
  return window2.getComputedStyle(el, null).getPropertyValue(prop);
}
function elementIndex(el) {
  let child = el;
  let i2;
  if (child) {
    i2 = 0;
    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i2 += 1;
    }
    return i2;
  }
  return void 0;
}
function elementParents(el, selector) {
  const parents = [];
  let parent2 = el.parentElement;
  while (parent2) {
    {
      parents.push(parent2);
    }
    parent2 = parent2.parentElement;
  }
  return parents;
}
function elementOuterSize(el, size, includeMargins) {
  const window2 = getWindow();
  {
    return el[size === "width" ? "offsetWidth" : "offsetHeight"] + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-right" : "margin-top")) + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-left" : "margin-bottom"));
  }
}
let support;
function calcSupport() {
  const window2 = getWindow();
  const document2 = getDocument();
  return {
    smoothScroll: document2.documentElement && document2.documentElement.style && "scrollBehavior" in document2.documentElement.style,
    touch: !!("ontouchstart" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch)
  };
}
function getSupport() {
  if (!support) {
    support = calcSupport();
  }
  return support;
}
let deviceCached;
function calcDevice(_temp) {
  let {
    userAgent
  } = _temp === void 0 ? {} : _temp;
  const support2 = getSupport();
  const window2 = getWindow();
  const platform = window2.navigator.platform;
  const ua = userAgent || window2.navigator.userAgent;
  const device = {
    ios: false,
    android: false
  };
  const screenWidth = window2.screen.width;
  const screenHeight = window2.screen.height;
  const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
  let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  const windows = platform === "Win32";
  let macos = platform === "MacIntel";
  const iPadScreens = ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"];
  if (!ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, "13_0_0"];
    macos = false;
  }
  if (android && !windows) {
    device.os = "android";
    device.android = true;
  }
  if (ipad || iphone || ipod) {
    device.os = "ios";
    device.ios = true;
  }
  return device;
}
function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }
  if (!deviceCached) {
    deviceCached = calcDevice(overrides);
  }
  return deviceCached;
}
let browser;
function calcBrowser() {
  const window2 = getWindow();
  const device = getDevice();
  let needPerspectiveFix = false;
  function isSafari() {
    const ua = window2.navigator.userAgent.toLowerCase();
    return ua.indexOf("safari") >= 0 && ua.indexOf("chrome") < 0 && ua.indexOf("android") < 0;
  }
  if (isSafari()) {
    const ua = String(window2.navigator.userAgent);
    if (ua.includes("Version/")) {
      const [major, minor] = ua.split("Version/")[1].split(" ")[0].split(".").map((num) => Number(num));
      needPerspectiveFix = major < 16 || major === 16 && minor < 2;
    }
  }
  const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent);
  const isSafariBrowser = isSafari();
  const need3dFix = isSafariBrowser || isWebView && device.ios;
  return {
    isSafari: needPerspectiveFix || isSafariBrowser,
    needPerspectiveFix,
    need3dFix,
    isWebView
  };
}
function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }
  return browser;
}
function Resize(_ref) {
  let {
    swiper,
    on,
    emit
  } = _ref;
  const window2 = getWindow();
  let observer = null;
  let animationFrame = null;
  const resizeHandler = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    emit("beforeResize");
    emit("resize");
  };
  const createObserver = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    observer = new ResizeObserver((entries) => {
      animationFrame = window2.requestAnimationFrame(() => {
        const {
          width,
          height
        } = swiper;
        let newWidth = width;
        let newHeight = height;
        entries.forEach((_ref2) => {
          let {
            contentBoxSize,
            contentRect,
            target
          } = _ref2;
          if (target && target !== swiper.el) return;
          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
        });
        if (newWidth !== width || newHeight !== height) {
          resizeHandler();
        }
      });
    });
    observer.observe(swiper.el);
  };
  const removeObserver = () => {
    if (animationFrame) {
      window2.cancelAnimationFrame(animationFrame);
    }
    if (observer && observer.unobserve && swiper.el) {
      observer.unobserve(swiper.el);
      observer = null;
    }
  };
  const orientationChangeHandler = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    emit("orientationchange");
  };
  on("init", () => {
    if (swiper.params.resizeObserver && typeof window2.ResizeObserver !== "undefined") {
      createObserver();
      return;
    }
    window2.addEventListener("resize", resizeHandler);
    window2.addEventListener("orientationchange", orientationChangeHandler);
  });
  on("destroy", () => {
    removeObserver();
    window2.removeEventListener("resize", resizeHandler);
    window2.removeEventListener("orientationchange", orientationChangeHandler);
  });
}
function Observer(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const observers = [];
  const window2 = getWindow();
  const attach = function(target, options) {
    if (options === void 0) {
      options = {};
    }
    const ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver;
    const observer = new ObserverFunc((mutations) => {
      if (swiper.__preventObserver__) return;
      if (mutations.length === 1) {
        emit("observerUpdate", mutations[0]);
        return;
      }
      const observerUpdate = function observerUpdate2() {
        emit("observerUpdate", mutations[0]);
      };
      if (window2.requestAnimationFrame) {
        window2.requestAnimationFrame(observerUpdate);
      } else {
        window2.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === "undefined" ? true : options.attributes,
      childList: swiper.isElement || (typeof options.childList === "undefined" ? true : options).childList,
      characterData: typeof options.characterData === "undefined" ? true : options.characterData
    });
    observers.push(observer);
  };
  const init = () => {
    if (!swiper.params.observer) return;
    if (swiper.params.observeParents) {
      const containerParents = elementParents(swiper.hostEl);
      for (let i2 = 0; i2 < containerParents.length; i2 += 1) {
        attach(containerParents[i2]);
      }
    }
    attach(swiper.hostEl, {
      childList: swiper.params.observeSlideChildren
    });
    attach(swiper.wrapperEl, {
      attributes: false
    });
  };
  const destroy = () => {
    observers.forEach((observer) => {
      observer.disconnect();
    });
    observers.splice(0, observers.length);
  };
  extendParams({
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  });
  on("init", init);
  on("destroy", destroy);
}
var eventsEmitter = {
  on(events2, handler, priority) {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (typeof handler !== "function") return self2;
    const method = priority ? "unshift" : "push";
    events2.split(" ").forEach((event) => {
      if (!self2.eventsListeners[event]) self2.eventsListeners[event] = [];
      self2.eventsListeners[event][method](handler);
    });
    return self2;
  },
  once(events2, handler, priority) {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (typeof handler !== "function") return self2;
    function onceHandler() {
      self2.off(events2, onceHandler);
      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      handler.apply(self2, args);
    }
    onceHandler.__emitterProxy = handler;
    return self2.on(events2, onceHandler, priority);
  },
  onAny(handler, priority) {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (typeof handler !== "function") return self2;
    const method = priority ? "unshift" : "push";
    if (self2.eventsAnyListeners.indexOf(handler) < 0) {
      self2.eventsAnyListeners[method](handler);
    }
    return self2;
  },
  offAny(handler) {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (!self2.eventsAnyListeners) return self2;
    const index = self2.eventsAnyListeners.indexOf(handler);
    if (index >= 0) {
      self2.eventsAnyListeners.splice(index, 1);
    }
    return self2;
  },
  off(events2, handler) {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (!self2.eventsListeners) return self2;
    events2.split(" ").forEach((event) => {
      if (typeof handler === "undefined") {
        self2.eventsListeners[event] = [];
      } else if (self2.eventsListeners[event]) {
        self2.eventsListeners[event].forEach((eventHandler, index) => {
          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
            self2.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self2;
  },
  emit() {
    const self2 = this;
    if (!self2.eventsListeners || self2.destroyed) return self2;
    if (!self2.eventsListeners) return self2;
    let events2;
    let data;
    let context;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === "string" || Array.isArray(args[0])) {
      events2 = args[0];
      data = args.slice(1, args.length);
      context = self2;
    } else {
      events2 = args[0].events;
      data = args[0].data;
      context = args[0].context || self2;
    }
    data.unshift(context);
    const eventsArray = Array.isArray(events2) ? events2 : events2.split(" ");
    eventsArray.forEach((event) => {
      if (self2.eventsAnyListeners && self2.eventsAnyListeners.length) {
        self2.eventsAnyListeners.forEach((eventHandler) => {
          eventHandler.apply(context, [event, ...data]);
        });
      }
      if (self2.eventsListeners && self2.eventsListeners[event]) {
        self2.eventsListeners[event].forEach((eventHandler) => {
          eventHandler.apply(context, data);
        });
      }
    });
    return self2;
  }
};
function updateSize() {
  const swiper = this;
  let width;
  let height;
  const el = swiper.el;
  if (typeof swiper.params.width !== "undefined" && swiper.params.width !== null) {
    width = swiper.params.width;
  } else {
    width = el.clientWidth;
  }
  if (typeof swiper.params.height !== "undefined" && swiper.params.height !== null) {
    height = swiper.params.height;
  } else {
    height = el.clientHeight;
  }
  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  }
  width = width - parseInt(elementStyle(el, "padding-left") || 0, 10) - parseInt(elementStyle(el, "padding-right") || 0, 10);
  height = height - parseInt(elementStyle(el, "padding-top") || 0, 10) - parseInt(elementStyle(el, "padding-bottom") || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  Object.assign(swiper, {
    width,
    height,
    size: swiper.isHorizontal() ? width : height
  });
}
function updateSlides() {
  const swiper = this;
  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);
  }
  const params = swiper.params;
  const {
    wrapperEl,
    slidesEl,
    size: swiperSize,
    rtlTranslate: rtl,
    wrongRTL
  } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  const slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);
  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  let snapGrid = [];
  const slidesGrid = [];
  const slidesSizesGrid = [];
  let offsetBefore = params.slidesOffsetBefore;
  if (typeof offsetBefore === "function") {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }
  let offsetAfter = params.slidesOffsetAfter;
  if (typeof offsetAfter === "function") {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }
  const previousSnapGridLength = swiper.snapGrid.length;
  const previousSlidesGridLength = swiper.slidesGrid.length;
  let spaceBetween = params.spaceBetween;
  let slidePosition = -offsetBefore;
  let prevSlideSize = 0;
  let index = 0;
  if (typeof swiperSize === "undefined") {
    return;
  }
  if (typeof spaceBetween === "string" && spaceBetween.indexOf("%") >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiperSize;
  } else if (typeof spaceBetween === "string") {
    spaceBetween = parseFloat(spaceBetween);
  }
  swiper.virtualSize = -spaceBetween;
  slides.forEach((slideEl) => {
    if (rtl) {
      slideEl.style.marginLeft = "";
    } else {
      slideEl.style.marginRight = "";
    }
    slideEl.style.marginBottom = "";
    slideEl.style.marginTop = "";
  });
  if (params.centeredSlides && params.cssMode) {
    setCSSProperty(wrapperEl, "--swiper-centered-offset-before", "");
    setCSSProperty(wrapperEl, "--swiper-centered-offset-after", "");
  }
  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
  if (gridEnabled) {
    swiper.grid.initSlides(slides);
  } else if (swiper.grid) {
    swiper.grid.unsetSlides();
  }
  let slideSize;
  const shouldResetSlideSize = params.slidesPerView === "auto" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => {
    return typeof params.breakpoints[key].slidesPerView !== "undefined";
  }).length > 0;
  for (let i2 = 0; i2 < slidesLength; i2 += 1) {
    slideSize = 0;
    let slide2;
    if (slides[i2]) slide2 = slides[i2];
    if (gridEnabled) {
      swiper.grid.updateSlide(i2, slide2, slides);
    }
    if (slides[i2] && elementStyle(slide2, "display") === "none") continue;
    if (params.slidesPerView === "auto") {
      if (shouldResetSlideSize) {
        slides[i2].style[swiper.getDirectionLabel("width")] = ``;
      }
      const slideStyles = getComputedStyle(slide2);
      const currentTransform = slide2.style.transform;
      const currentWebKitTransform = slide2.style.webkitTransform;
      if (currentTransform) {
        slide2.style.transform = "none";
      }
      if (currentWebKitTransform) {
        slide2.style.webkitTransform = "none";
      }
      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? elementOuterSize(slide2, "width") : elementOuterSize(slide2, "height");
      } else {
        const width = getDirectionPropertyValue(slideStyles, "width");
        const paddingLeft = getDirectionPropertyValue(slideStyles, "padding-left");
        const paddingRight = getDirectionPropertyValue(slideStyles, "padding-right");
        const marginLeft = getDirectionPropertyValue(slideStyles, "margin-left");
        const marginRight = getDirectionPropertyValue(slideStyles, "margin-right");
        const boxSizing = slideStyles.getPropertyValue("box-sizing");
        if (boxSizing && boxSizing === "border-box") {
          slideSize = width + marginLeft + marginRight;
        } else {
          const {
            clientWidth,
            offsetWidth
          } = slide2;
          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
        }
      }
      if (currentTransform) {
        slide2.style.transform = currentTransform;
      }
      if (currentWebKitTransform) {
        slide2.style.webkitTransform = currentWebKitTransform;
      }
      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);
      if (slides[i2]) {
        slides[i2].style[swiper.getDirectionLabel("width")] = `${slideSize}px`;
      }
    }
    if (slides[i2]) {
      slides[i2].swiperSlideSize = slideSize;
    }
    slidesSizesGrid.push(slideSize);
    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i2 !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i2 === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1e3) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }
    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }
  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  if (rtl && wrongRTL && (params.effect === "slide" || params.effect === "coverflow")) {
    wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;
  }
  if (params.setWrapperSize) {
    wrapperEl.style[swiper.getDirectionLabel("width")] = `${swiper.virtualSize + spaceBetween}px`;
  }
  if (gridEnabled) {
    swiper.grid.updateWrapperSize(slideSize, snapGrid);
  }
  if (!params.centeredSlides) {
    const newSlidesGrid = [];
    for (let i2 = 0; i2 < snapGrid.length; i2 += 1) {
      let slidesGridItem = snapGrid[i2];
      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
      if (snapGrid[i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(slidesGridItem);
      }
    }
    snapGrid = newSlidesGrid;
    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }
  if (isVirtual && params.loop) {
    const size = slidesSizesGrid[0] + spaceBetween;
    if (params.slidesPerGroup > 1) {
      const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);
      const groupSize = size * params.slidesPerGroup;
      for (let i2 = 0; i2 < groups; i2 += 1) {
        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
      }
    }
    for (let i2 = 0; i2 < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i2 += 1) {
      if (params.slidesPerGroup === 1) {
        snapGrid.push(snapGrid[snapGrid.length - 1] + size);
      }
      slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
      swiper.virtualSize += size;
    }
  }
  if (snapGrid.length === 0) snapGrid = [0];
  if (spaceBetween !== 0) {
    const key = swiper.isHorizontal() && rtl ? "marginLeft" : swiper.getDirectionLabel("marginRight");
    slides.filter((_, slideIndex) => {
      if (!params.cssMode || params.loop) return true;
      if (slideIndex === slides.length - 1) {
        return false;
      }
      return true;
    }).forEach((slideEl) => {
      slideEl.style[key] = `${spaceBetween}px`;
    });
  }
  if (params.centeredSlides && params.centeredSlidesBounds) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (spaceBetween || 0);
    });
    allSlidesSize -= spaceBetween;
    const maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;
    snapGrid = snapGrid.map((snap) => {
      if (snap <= 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }
  if (params.centerInsufficientSlides) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (spaceBetween || 0);
    });
    allSlidesSize -= spaceBetween;
    const offsetSize = (params.slidesOffsetBefore || 0) + (params.slidesOffsetAfter || 0);
    if (allSlidesSize + offsetSize < swiperSize) {
      const allSlidesOffset = (swiperSize - allSlidesSize - offsetSize) / 2;
      snapGrid.forEach((snap, snapIndex) => {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach((snap, snapIndex) => {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }
  Object.assign(swiper, {
    slides,
    snapGrid,
    slidesGrid,
    slidesSizesGrid
  });
  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
    setCSSProperty(wrapperEl, "--swiper-centered-offset-before", `${-snapGrid[0]}px`);
    setCSSProperty(wrapperEl, "--swiper-centered-offset-after", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);
    const addToSnapGrid = -swiper.snapGrid[0];
    const addToSlidesGrid = -swiper.slidesGrid[0];
    swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);
    swiper.slidesGrid = swiper.slidesGrid.map((v) => v + addToSlidesGrid);
  }
  if (slidesLength !== previousSlidesLength) {
    swiper.emit("slidesLengthChange");
  }
  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit("snapGridLengthChange");
  }
  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit("slidesGridLengthChange");
  }
  if (params.watchSlidesProgress) {
    swiper.updateSlidesOffset();
  }
  swiper.emit("slidesUpdated");
  if (!isVirtual && !params.cssMode && (params.effect === "slide" || params.effect === "fade")) {
    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
    const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);
    if (slidesLength <= params.maxBackfaceHiddenSlides) {
      if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);
    } else if (hasClassBackfaceClassAdded) {
      swiper.el.classList.remove(backFaceHiddenClass);
    }
  }
}
function updateAutoHeight(speed) {
  const swiper = this;
  const activeSlides = [];
  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  let newHeight = 0;
  let i2;
  if (typeof speed === "number") {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }
  const getSlideByIndex = (index) => {
    if (isVirtual) {
      return swiper.slides[swiper.getSlideIndexByData(index)];
    }
    return swiper.slides[index];
  };
  if (swiper.params.slidesPerView !== "auto" && swiper.params.slidesPerView > 1) {
    if (swiper.params.centeredSlides) {
      (swiper.visibleSlides || []).forEach((slide2) => {
        activeSlides.push(slide2);
      });
    } else {
      for (i2 = 0; i2 < Math.ceil(swiper.params.slidesPerView); i2 += 1) {
        const index = swiper.activeIndex + i2;
        if (index > swiper.slides.length && !isVirtual) break;
        activeSlides.push(getSlideByIndex(index));
      }
    }
  } else {
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  }
  for (i2 = 0; i2 < activeSlides.length; i2 += 1) {
    if (typeof activeSlides[i2] !== "undefined") {
      const height = activeSlides[i2].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  }
  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;
}
function updateSlidesOffset() {
  const swiper = this;
  const slides = swiper.slides;
  const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;
  for (let i2 = 0; i2 < slides.length; i2 += 1) {
    slides[i2].swiperSlideOffset = (swiper.isHorizontal() ? slides[i2].offsetLeft : slides[i2].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();
  }
}
const toggleSlideClasses$1 = (slideEl, condition, className) => {
  if (condition && !slideEl.classList.contains(className)) {
    slideEl.classList.add(className);
  } else if (!condition && slideEl.classList.contains(className)) {
    slideEl.classList.remove(className);
  }
};
function updateSlidesProgress(translate2) {
  if (translate2 === void 0) {
    translate2 = this && this.translate || 0;
  }
  const swiper = this;
  const params = swiper.params;
  const {
    slides,
    rtlTranslate: rtl,
    snapGrid
  } = swiper;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === "undefined") swiper.updateSlidesOffset();
  let offsetCenter = -translate2;
  if (rtl) offsetCenter = translate2;
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];
  let spaceBetween = params.spaceBetween;
  if (typeof spaceBetween === "string" && spaceBetween.indexOf("%") >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiper.size;
  } else if (typeof spaceBetween === "string") {
    spaceBetween = parseFloat(spaceBetween);
  }
  for (let i2 = 0; i2 < slides.length; i2 += 1) {
    const slide2 = slides[i2];
    let slideOffset = slide2.swiperSlideOffset;
    if (params.cssMode && params.centeredSlides) {
      slideOffset -= slides[0].swiperSlideOffset;
    }
    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide2.swiperSlideSize + spaceBetween);
    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide2.swiperSlideSize + spaceBetween);
    const slideBefore = -(offsetCenter - slideOffset);
    const slideAfter = slideBefore + swiper.slidesSizesGrid[i2];
    const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i2];
    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;
    if (isVisible) {
      swiper.visibleSlides.push(slide2);
      swiper.visibleSlidesIndexes.push(i2);
    }
    toggleSlideClasses$1(slide2, isVisible, params.slideVisibleClass);
    toggleSlideClasses$1(slide2, isFullyVisible, params.slideFullyVisibleClass);
    slide2.progress = rtl ? -slideProgress : slideProgress;
    slide2.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
  }
}
function updateProgress(translate2) {
  const swiper = this;
  if (typeof translate2 === "undefined") {
    const multiplier = swiper.rtlTranslate ? -1 : 1;
    translate2 = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }
  const params = swiper.params;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  let {
    progress,
    isBeginning,
    isEnd,
    progressLoop
  } = swiper;
  const wasBeginning = isBeginning;
  const wasEnd = isEnd;
  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate2 - swiper.minTranslate()) / translatesDiff;
    const isBeginningRounded = Math.abs(translate2 - swiper.minTranslate()) < 1;
    const isEndRounded = Math.abs(translate2 - swiper.maxTranslate()) < 1;
    isBeginning = isBeginningRounded || progress <= 0;
    isEnd = isEndRounded || progress >= 1;
    if (isBeginningRounded) progress = 0;
    if (isEndRounded) progress = 1;
  }
  if (params.loop) {
    const firstSlideIndex = swiper.getSlideIndexByData(0);
    const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);
    const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
    const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
    const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];
    const translateAbs = Math.abs(translate2);
    if (translateAbs >= firstSlideTranslate) {
      progressLoop = (translateAbs - firstSlideTranslate) / translateMax;
    } else {
      progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;
    }
    if (progressLoop > 1) progressLoop -= 1;
  }
  Object.assign(swiper, {
    progress,
    progressLoop,
    isBeginning,
    isEnd
  });
  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate2);
  if (isBeginning && !wasBeginning) {
    swiper.emit("reachBeginning toEdge");
  }
  if (isEnd && !wasEnd) {
    swiper.emit("reachEnd toEdge");
  }
  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit("fromEdge");
  }
  swiper.emit("progress", progress);
}
const toggleSlideClasses = (slideEl, condition, className) => {
  if (condition && !slideEl.classList.contains(className)) {
    slideEl.classList.add(className);
  } else if (!condition && slideEl.classList.contains(className)) {
    slideEl.classList.remove(className);
  }
};
function updateSlidesClasses() {
  const swiper = this;
  const {
    slides,
    params,
    slidesEl,
    activeIndex
  } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
  const getFilteredSlide = (selector) => {
    return elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];
  };
  let activeSlide;
  let prevSlide;
  let nextSlide;
  if (isVirtual) {
    if (params.loop) {
      let slideIndex = activeIndex - swiper.virtual.slidesBefore;
      if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;
      if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;
      activeSlide = getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`);
    } else {
      activeSlide = getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);
    }
  } else {
    if (gridEnabled) {
      activeSlide = slides.find((slideEl) => slideEl.column === activeIndex);
      nextSlide = slides.find((slideEl) => slideEl.column === activeIndex + 1);
      prevSlide = slides.find((slideEl) => slideEl.column === activeIndex - 1);
    } else {
      activeSlide = slides[activeIndex];
    }
  }
  if (activeSlide) {
    if (!gridEnabled) {
      nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
      if (params.loop && !nextSlide) {
        nextSlide = slides[0];
      }
      prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
      if (params.loop && !prevSlide === 0) {
        prevSlide = slides[slides.length - 1];
      }
    }
  }
  slides.forEach((slideEl) => {
    toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);
    toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);
    toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);
  });
  swiper.emitSlidesClasses();
}
const processLazyPreloader = (swiper, imageEl) => {
  if (!swiper || swiper.destroyed || !swiper.params) return;
  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
  const slideEl = imageEl.closest(slideSelector());
  if (slideEl) {
    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);
    if (!lazyEl && swiper.isElement) {
      if (slideEl.shadowRoot) {
        lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);
      } else {
        requestAnimationFrame(() => {
          if (slideEl.shadowRoot) {
            lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);
            if (lazyEl) lazyEl.remove();
          }
        });
      }
    }
    if (lazyEl) lazyEl.remove();
  }
};
const unlazy = (swiper, index) => {
  if (!swiper.slides[index]) return;
  const imageEl = swiper.slides[index].querySelector('[loading="lazy"]');
  if (imageEl) imageEl.removeAttribute("loading");
};
const preload = (swiper) => {
  if (!swiper || swiper.destroyed || !swiper.params) return;
  let amount = swiper.params.lazyPreloadPrevNext;
  const len = swiper.slides.length;
  if (!len || !amount || amount < 0) return;
  amount = Math.min(amount, len);
  const slidesPerView = swiper.params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);
  const activeIndex = swiper.activeIndex;
  if (swiper.params.grid && swiper.params.grid.rows > 1) {
    const activeColumn = activeIndex;
    const preloadColumns = [activeColumn - amount];
    preloadColumns.push(...Array.from({
      length: amount
    }).map((_, i2) => {
      return activeColumn + slidesPerView + i2;
    }));
    swiper.slides.forEach((slideEl, i2) => {
      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i2);
    });
    return;
  }
  const slideIndexLastInView = activeIndex + slidesPerView - 1;
  if (swiper.params.rewind || swiper.params.loop) {
    for (let i2 = activeIndex - amount; i2 <= slideIndexLastInView + amount; i2 += 1) {
      const realIndex = (i2 % len + len) % len;
      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);
    }
  } else {
    for (let i2 = Math.max(activeIndex - amount, 0); i2 <= Math.min(slideIndexLastInView + amount, len - 1); i2 += 1) {
      if (i2 !== activeIndex && (i2 > slideIndexLastInView || i2 < activeIndex)) {
        unlazy(swiper, i2);
      }
    }
  }
};
function getActiveIndexByTranslate(swiper) {
  const {
    slidesGrid,
    params
  } = swiper;
  const translate2 = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  let activeIndex;
  for (let i2 = 0; i2 < slidesGrid.length; i2 += 1) {
    if (typeof slidesGrid[i2 + 1] !== "undefined") {
      if (translate2 >= slidesGrid[i2] && translate2 < slidesGrid[i2 + 1] - (slidesGrid[i2 + 1] - slidesGrid[i2]) / 2) {
        activeIndex = i2;
      } else if (translate2 >= slidesGrid[i2] && translate2 < slidesGrid[i2 + 1]) {
        activeIndex = i2 + 1;
      }
    } else if (translate2 >= slidesGrid[i2]) {
      activeIndex = i2;
    }
  }
  if (params.normalizeSlideIndex) {
    if (activeIndex < 0 || typeof activeIndex === "undefined") activeIndex = 0;
  }
  return activeIndex;
}
function updateActiveIndex(newActiveIndex) {
  const swiper = this;
  const translate2 = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  const {
    snapGrid,
    params,
    activeIndex: previousIndex,
    realIndex: previousRealIndex,
    snapIndex: previousSnapIndex
  } = swiper;
  let activeIndex = newActiveIndex;
  let snapIndex;
  const getVirtualRealIndex = (aIndex) => {
    let realIndex2 = aIndex - swiper.virtual.slidesBefore;
    if (realIndex2 < 0) {
      realIndex2 = swiper.virtual.slides.length + realIndex2;
    }
    if (realIndex2 >= swiper.virtual.slides.length) {
      realIndex2 -= swiper.virtual.slides.length;
    }
    return realIndex2;
  };
  if (typeof activeIndex === "undefined") {
    activeIndex = getActiveIndexByTranslate(swiper);
  }
  if (snapGrid.indexOf(translate2) >= 0) {
    snapIndex = snapGrid.indexOf(translate2);
  } else {
    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
  if (activeIndex === previousIndex && !swiper.params.loop) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit("snapIndexChange");
    }
    return;
  }
  if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
    swiper.realIndex = getVirtualRealIndex(activeIndex);
    return;
  }
  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
  let realIndex;
  if (swiper.virtual && params.virtual.enabled && params.loop) {
    realIndex = getVirtualRealIndex(activeIndex);
  } else if (gridEnabled) {
    const firstSlideInColumn = swiper.slides.find((slideEl) => slideEl.column === activeIndex);
    let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute("data-swiper-slide-index"), 10);
    if (Number.isNaN(activeSlideIndex)) {
      activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);
    }
    realIndex = Math.floor(activeSlideIndex / params.grid.rows);
  } else if (swiper.slides[activeIndex]) {
    const slideIndex = swiper.slides[activeIndex].getAttribute("data-swiper-slide-index");
    if (slideIndex) {
      realIndex = parseInt(slideIndex, 10);
    } else {
      realIndex = activeIndex;
    }
  } else {
    realIndex = activeIndex;
  }
  Object.assign(swiper, {
    previousSnapIndex,
    snapIndex,
    previousRealIndex,
    realIndex,
    previousIndex,
    activeIndex
  });
  if (swiper.initialized) {
    preload(swiper);
  }
  swiper.emit("activeIndexChange");
  swiper.emit("snapIndexChange");
  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    if (previousRealIndex !== realIndex) {
      swiper.emit("realIndexChange");
    }
    swiper.emit("slideChange");
  }
}
function updateClickedSlide(el, path) {
  const swiper = this;
  const params = swiper.params;
  let slide2 = el.closest(`.${params.slideClass}, swiper-slide`);
  if (!slide2 && swiper.isElement && path && path.length > 1 && path.includes(el)) {
    [...path.slice(path.indexOf(el) + 1, path.length)].forEach((pathEl) => {
      if (!slide2 && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {
        slide2 = pathEl;
      }
    });
  }
  let slideFound = false;
  let slideIndex;
  if (slide2) {
    for (let i2 = 0; i2 < swiper.slides.length; i2 += 1) {
      if (swiper.slides[i2] === slide2) {
        slideFound = true;
        slideIndex = i2;
        break;
      }
    }
  }
  if (slide2 && slideFound) {
    swiper.clickedSlide = slide2;
    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt(slide2.getAttribute("data-swiper-slide-index"), 10);
    } else {
      swiper.clickedIndex = slideIndex;
    }
  } else {
    swiper.clickedSlide = void 0;
    swiper.clickedIndex = void 0;
    return;
  }
  if (params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}
var update = {
  updateSize,
  updateSlides,
  updateAutoHeight,
  updateSlidesOffset,
  updateSlidesProgress,
  updateProgress,
  updateSlidesClasses,
  updateActiveIndex,
  updateClickedSlide
};
function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? "x" : "y";
  }
  const swiper = this;
  const {
    params,
    rtlTranslate: rtl,
    translate: translate2,
    wrapperEl
  } = swiper;
  if (params.virtualTranslate) {
    return rtl ? -translate2 : translate2;
  }
  if (params.cssMode) {
    return translate2;
  }
  let currentTranslate = getTranslate(wrapperEl, axis);
  currentTranslate += swiper.cssOverflowAdjustment();
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}
function setTranslate(translate2, byController) {
  const swiper = this;
  const {
    rtlTranslate: rtl,
    params,
    wrapperEl,
    progress
  } = swiper;
  let x = 0;
  let y = 0;
  const z = 0;
  if (swiper.isHorizontal()) {
    x = rtl ? -translate2 : translate2;
  } else {
    y = translate2;
  }
  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }
  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y;
  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] = swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    if (swiper.isHorizontal()) {
      x -= swiper.cssOverflowAdjustment();
    } else {
      y -= swiper.cssOverflowAdjustment();
    }
    wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
  }
  let newProgress;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate2 - swiper.minTranslate()) / translatesDiff;
  }
  if (newProgress !== progress) {
    swiper.updateProgress(translate2);
  }
  swiper.emit("setTranslate", swiper.translate, byController);
}
function minTranslate() {
  return -this.snapGrid[0];
}
function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}
function translateTo(translate2, speed, runCallbacks, translateBounds, internal) {
  if (translate2 === void 0) {
    translate2 = 0;
  }
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (translateBounds === void 0) {
    translateBounds = true;
  }
  const swiper = this;
  const {
    params,
    wrapperEl
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }
  const minTranslate2 = swiper.minTranslate();
  const maxTranslate2 = swiper.maxTranslate();
  let newTranslate;
  if (translateBounds && translate2 > minTranslate2) newTranslate = minTranslate2;
  else if (translateBounds && translate2 < maxTranslate2) newTranslate = maxTranslate2;
  else newTranslate = translate2;
  swiper.updateProgress(newTranslate);
  if (params.cssMode) {
    const isH = swiper.isHorizontal();
    if (speed === 0) {
      wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
    } else {
      if (!swiper.support.smoothScroll) {
        animateCSSModeScroll({
          swiper,
          targetPosition: -newTranslate,
          side: isH ? "left" : "top"
        });
        return true;
      }
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: -newTranslate,
        behavior: "smooth"
      });
    }
    return true;
  }
  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);
    if (runCallbacks) {
      swiper.emit("beforeTransitionStart", speed, internal);
      swiper.emit("transitionEnd");
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);
    if (runCallbacks) {
      swiper.emit("beforeTransitionStart", speed, internal);
      swiper.emit("transitionStart");
    }
    if (!swiper.animating) {
      swiper.animating = true;
      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd2(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.wrapperEl.removeEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd);
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;
          swiper.animating = false;
          if (runCallbacks) {
            swiper.emit("transitionEnd");
          }
        };
      }
      swiper.wrapperEl.addEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd);
    }
  }
  return true;
}
var translate = {
  getTranslate: getSwiperTranslate,
  setTranslate,
  minTranslate,
  maxTranslate,
  translateTo
};
function setTransition(duration, byController) {
  const swiper = this;
  if (!swiper.params.cssMode) {
    swiper.wrapperEl.style.transitionDuration = `${duration}ms`;
    swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : "";
  }
  swiper.emit("setTransition", duration, byController);
}
function transitionEmit(_ref) {
  let {
    swiper,
    runCallbacks,
    direction,
    step
  } = _ref;
  const {
    activeIndex,
    previousIndex
  } = swiper;
  let dir = direction;
  if (!dir) {
    if (activeIndex > previousIndex) dir = "next";
    else if (activeIndex < previousIndex) dir = "prev";
    else dir = "reset";
  }
  swiper.emit(`transition${step}`);
  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === "reset") {
      swiper.emit(`slideResetTransition${step}`);
      return;
    }
    swiper.emit(`slideChangeTransition${step}`);
    if (dir === "next") {
      swiper.emit(`slideNextTransition${step}`);
    } else {
      swiper.emit(`slidePrevTransition${step}`);
    }
  }
}
function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const {
    params
  } = swiper;
  if (params.cssMode) return;
  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }
  transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "Start"
  });
}
function transitionEnd(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const {
    params
  } = swiper;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "End"
  });
}
var transition = {
  setTransition,
  transitionStart,
  transitionEnd
};
function slideTo(index, speed, runCallbacks, internal, initial) {
  if (index === void 0) {
    index = 0;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (typeof index === "string") {
    index = parseInt(index, 10);
  }
  const swiper = this;
  let slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  const {
    params,
    snapGrid,
    slidesGrid,
    previousIndex,
    activeIndex,
    rtlTranslate: rtl,
    wrapperEl,
    enabled
  } = swiper;
  if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
  const translate2 = -snapGrid[snapIndex];
  if (params.normalizeSlideIndex) {
    for (let i2 = 0; i2 < slidesGrid.length; i2 += 1) {
      const normalizedTranslate = -Math.floor(translate2 * 100);
      const normalizedGrid = Math.floor(slidesGrid[i2] * 100);
      const normalizedGridNext = Math.floor(slidesGrid[i2 + 1] * 100);
      if (typeof slidesGrid[i2 + 1] !== "undefined") {
        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {
          slideIndex = i2;
        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {
          slideIndex = i2 + 1;
        }
      } else if (normalizedTranslate >= normalizedGrid) {
        slideIndex = i2;
      }
    }
  }
  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && (rtl ? translate2 > swiper.translate && translate2 > swiper.minTranslate() : translate2 < swiper.translate && translate2 < swiper.minTranslate())) {
      return false;
    }
    if (!swiper.allowSlidePrev && translate2 > swiper.translate && translate2 > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) {
        return false;
      }
    }
  }
  if (slideIndex !== (previousIndex || 0) && runCallbacks) {
    swiper.emit("beforeSlideChangeStart");
  }
  swiper.updateProgress(translate2);
  let direction;
  if (slideIndex > activeIndex) direction = "next";
  else if (slideIndex < activeIndex) direction = "prev";
  else direction = "reset";
  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  const isInitialVirtual = isVirtual && initial;
  if (!isInitialVirtual && (rtl && -translate2 === swiper.translate || !rtl && translate2 === swiper.translate)) {
    swiper.updateActiveIndex(slideIndex);
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    swiper.updateSlidesClasses();
    if (params.effect !== "slide") {
      swiper.setTranslate(translate2);
    }
    if (direction !== "reset") {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }
    return false;
  }
  if (params.cssMode) {
    const isH = swiper.isHorizontal();
    const t2 = rtl ? translate2 : -translate2;
    if (speed === 0) {
      if (isVirtual) {
        swiper.wrapperEl.style.scrollSnapType = "none";
        swiper._immediateVirtual = true;
      }
      if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {
        swiper._cssModeVirtualInitialSet = true;
        requestAnimationFrame(() => {
          wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t2;
        });
      } else {
        wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t2;
      }
      if (isVirtual) {
        requestAnimationFrame(() => {
          swiper.wrapperEl.style.scrollSnapType = "";
          swiper._immediateVirtual = false;
        });
      }
    } else {
      if (!swiper.support.smoothScroll) {
        animateCSSModeScroll({
          swiper,
          targetPosition: t2,
          side: isH ? "left" : "top"
        });
        return true;
      }
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: t2,
        behavior: "smooth"
      });
    }
    return true;
  }
  const browser2 = getBrowser();
  const isSafari = browser2.isSafari;
  if (isVirtual && !initial && isSafari && swiper.isElement) {
    swiper.virtual.update(false, false, slideIndex);
  }
  swiper.setTransition(speed);
  swiper.setTranslate(translate2);
  swiper.updateActiveIndex(slideIndex);
  swiper.updateSlidesClasses();
  swiper.emit("beforeTransitionStart", speed, internal);
  swiper.transitionStart(runCallbacks, direction);
  if (speed === 0) {
    swiper.transitionEnd(runCallbacks, direction);
  } else if (!swiper.animating) {
    swiper.animating = true;
    if (!swiper.onSlideToWrapperTransitionEnd) {
      swiper.onSlideToWrapperTransitionEnd = function transitionEnd2(e) {
        if (!swiper || swiper.destroyed) return;
        if (e.target !== this) return;
        swiper.wrapperEl.removeEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd);
        swiper.onSlideToWrapperTransitionEnd = null;
        delete swiper.onSlideToWrapperTransitionEnd;
        swiper.transitionEnd(runCallbacks, direction);
      };
    }
    swiper.wrapperEl.addEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd);
  }
  return true;
}
function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (typeof index === "string") {
    const indexAsNumber = parseInt(index, 10);
    index = indexAsNumber;
  }
  const swiper = this;
  if (swiper.destroyed) return;
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
  let newIndex = index;
  if (swiper.params.loop) {
    if (swiper.virtual && swiper.params.virtual.enabled) {
      newIndex = newIndex + swiper.virtual.slidesBefore;
    } else {
      let targetSlideIndex;
      if (gridEnabled) {
        const slideIndex = newIndex * swiper.params.grid.rows;
        targetSlideIndex = swiper.slides.find((slideEl) => slideEl.getAttribute("data-swiper-slide-index") * 1 === slideIndex).column;
      } else {
        targetSlideIndex = swiper.getSlideIndexByData(newIndex);
      }
      const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;
      const {
        centeredSlides
      } = swiper.params;
      let slidesPerView = swiper.params.slidesPerView;
      if (slidesPerView === "auto") {
        slidesPerView = swiper.slidesPerViewDynamic();
      } else {
        slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));
        if (centeredSlides && slidesPerView % 2 === 0) {
          slidesPerView = slidesPerView + 1;
        }
      }
      let needLoopFix = cols - targetSlideIndex < slidesPerView;
      if (centeredSlides) {
        needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);
      }
      if (internal && centeredSlides && swiper.params.slidesPerView !== "auto" && !gridEnabled) {
        needLoopFix = false;
      }
      if (needLoopFix) {
        const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? "prev" : "next" : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? "next" : "prev";
        swiper.loopFix({
          direction,
          slideTo: true,
          activeSlideIndex: direction === "next" ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,
          slideRealIndex: direction === "next" ? swiper.realIndex : void 0
        });
      }
      if (gridEnabled) {
        const slideIndex = newIndex * swiper.params.grid.rows;
        newIndex = swiper.slides.find((slideEl) => slideEl.getAttribute("data-swiper-slide-index") * 1 === slideIndex).column;
      } else {
        newIndex = swiper.getSlideIndexByData(newIndex);
      }
    }
  }
  requestAnimationFrame(() => {
    swiper.slideTo(newIndex, speed, runCallbacks, internal);
  });
  return swiper;
}
function slideNext(speed, runCallbacks, internal) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const {
    enabled,
    params,
    animating
  } = swiper;
  if (!enabled || swiper.destroyed) return swiper;
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  let perGroup = params.slidesPerGroup;
  if (params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
    perGroup = Math.max(swiper.slidesPerViewDynamic("current", true), 1);
  }
  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding) return false;
    swiper.loopFix({
      direction: "next"
    });
    swiper._clientLeft = swiper.wrapperEl.clientLeft;
    if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {
      requestAnimationFrame(() => {
        swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
      });
      return true;
    }
  }
  if (params.rewind && swiper.isEnd) {
    return swiper.slideTo(0, speed, runCallbacks, internal);
  }
  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}
function slidePrev(speed, runCallbacks, internal) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const {
    params,
    snapGrid,
    slidesGrid,
    rtlTranslate,
    enabled,
    animating
  } = swiper;
  if (!enabled || swiper.destroyed) return swiper;
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  const isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding) return false;
    swiper.loopFix({
      direction: "prev"
    });
    swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  const translate2 = rtlTranslate ? swiper.translate : -swiper.translate;
  function normalize2(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }
  const normalizedTranslate = normalize2(translate2);
  const normalizedSnapGrid = snapGrid.map((val) => normalize2(val));
  const isFreeMode = params.freeMode && params.freeMode.enabled;
  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  if (typeof prevSnap === "undefined" && (params.cssMode || isFreeMode)) {
    let prevSnapIndex;
    snapGrid.forEach((snap, snapIndex) => {
      if (normalizedTranslate >= snap) {
        prevSnapIndex = snapIndex;
      }
    });
    if (typeof prevSnapIndex !== "undefined") {
      prevSnap = isFreeMode ? snapGrid[prevSnapIndex] : snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
    }
  }
  let prevIndex = 0;
  if (typeof prevSnap !== "undefined") {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
    if (params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
      prevIndex = prevIndex - swiper.slidesPerViewDynamic("previous", true) + 1;
      prevIndex = Math.max(prevIndex, 0);
    }
  }
  if (params.rewind && swiper.isBeginning) {
    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
  } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {
    requestAnimationFrame(() => {
      swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    });
    return true;
  }
  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}
function slideReset(speed, runCallbacks, internal) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  if (swiper.destroyed) return;
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (threshold === void 0) {
    threshold = 0.5;
  }
  const swiper = this;
  if (swiper.destroyed) return;
  if (typeof speed === "undefined") {
    speed = swiper.params.speed;
  }
  let index = swiper.activeIndex;
  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  const translate2 = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  if (translate2 >= swiper.snapGrid[snapIndex]) {
    const currentSnap = swiper.snapGrid[snapIndex];
    const nextSnap = swiper.snapGrid[snapIndex + 1];
    if (translate2 - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    const prevSnap = swiper.snapGrid[snapIndex - 1];
    const currentSnap = swiper.snapGrid[snapIndex];
    if (translate2 - prevSnap <= (currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }
  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}
function slideToClickedSlide() {
  const swiper = this;
  if (swiper.destroyed) return;
  const {
    params,
    slidesEl
  } = swiper;
  const slidesPerView = params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  let slideToIndex = swiper.clickedIndex;
  let realIndex;
  const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;
  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt(swiper.clickedSlide.getAttribute("data-swiper-slide-index"), 10);
    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]);
        nextTick(() => {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]);
      nextTick(() => {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}
var slide = {
  slideTo,
  slideToLoop,
  slideNext,
  slidePrev,
  slideReset,
  slideToClosest,
  slideToClickedSlide
};
function loopCreate(slideRealIndex, initial) {
  const swiper = this;
  const {
    params,
    slidesEl
  } = swiper;
  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;
  const initSlides = () => {
    const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
    slides.forEach((el, index) => {
      el.setAttribute("data-swiper-slide-index", index);
    });
  };
  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
  const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);
  const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;
  const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;
  const addBlankSlides = (amountOfSlides) => {
    for (let i2 = 0; i2 < amountOfSlides; i2 += 1) {
      const slideEl = swiper.isElement ? createElement("swiper-slide", [params.slideBlankClass]) : createElement("div", [params.slideClass, params.slideBlankClass]);
      swiper.slidesEl.append(slideEl);
    }
  };
  if (shouldFillGroup) {
    if (params.loopAddBlankSlides) {
      const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;
      addBlankSlides(slidesToAdd);
      swiper.recalcSlides();
      swiper.updateSlides();
    } else {
      showWarning("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
    }
    initSlides();
  } else if (shouldFillGrid) {
    if (params.loopAddBlankSlides) {
      const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;
      addBlankSlides(slidesToAdd);
      swiper.recalcSlides();
      swiper.updateSlides();
    } else {
      showWarning("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
    }
    initSlides();
  } else {
    initSlides();
  }
  swiper.loopFix({
    slideRealIndex,
    direction: params.centeredSlides ? void 0 : "next",
    initial
  });
}
function loopFix(_temp) {
  let {
    slideRealIndex,
    slideTo: slideTo2 = true,
    direction,
    setTranslate: setTranslate2,
    activeSlideIndex,
    initial,
    byController,
    byMousewheel
  } = _temp === void 0 ? {} : _temp;
  const swiper = this;
  if (!swiper.params.loop) return;
  swiper.emit("beforeLoopFix");
  const {
    slides,
    allowSlidePrev,
    allowSlideNext,
    slidesEl,
    params
  } = swiper;
  const {
    centeredSlides,
    initialSlide
  } = params;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  if (swiper.virtual && params.virtual.enabled) {
    if (slideTo2) {
      if (!params.centeredSlides && swiper.snapIndex === 0) {
        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {
        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);
      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
      }
    }
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    swiper.emit("loopFix");
    return;
  }
  let slidesPerView = params.slidesPerView;
  if (slidesPerView === "auto") {
    slidesPerView = swiper.slidesPerViewDynamic();
  } else {
    slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));
    if (centeredSlides && slidesPerView % 2 === 0) {
      slidesPerView = slidesPerView + 1;
    }
  }
  const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;
  let loopedSlides = slidesPerGroup;
  if (loopedSlides % slidesPerGroup !== 0) {
    loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;
  }
  loopedSlides += params.loopAdditionalSlides;
  swiper.loopedSlides = loopedSlides;
  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
  if (slides.length < slidesPerView + loopedSlides || swiper.params.effect === "cards" && slides.length < slidesPerView + loopedSlides * 2) {
    showWarning("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters");
  } else if (gridEnabled && params.grid.fill === "row") {
    showWarning("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");
  }
  const prependSlidesIndexes = [];
  const appendSlidesIndexes = [];
  const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;
  const isInitialOverflow = initial && cols - initialSlide < slidesPerView && !centeredSlides;
  let activeIndex = isInitialOverflow ? initialSlide : swiper.activeIndex;
  if (typeof activeSlideIndex === "undefined") {
    activeSlideIndex = swiper.getSlideIndex(slides.find((el) => el.classList.contains(params.slideActiveClass)));
  } else {
    activeIndex = activeSlideIndex;
  }
  const isNext = direction === "next" || !direction;
  const isPrev = direction === "prev" || !direction;
  let slidesPrepended = 0;
  let slidesAppended = 0;
  const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;
  const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate2 === "undefined" ? -slidesPerView / 2 + 0.5 : 0);
  if (activeColIndexWithShift < loopedSlides) {
    slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);
    for (let i2 = 0; i2 < loopedSlides - activeColIndexWithShift; i2 += 1) {
      const index = i2 - Math.floor(i2 / cols) * cols;
      if (gridEnabled) {
        const colIndexToPrepend = cols - index - 1;
        for (let i3 = slides.length - 1; i3 >= 0; i3 -= 1) {
          if (slides[i3].column === colIndexToPrepend) prependSlidesIndexes.push(i3);
        }
      } else {
        prependSlidesIndexes.push(cols - index - 1);
      }
    }
  } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {
    slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);
    if (isInitialOverflow) {
      slidesAppended = Math.max(slidesAppended, slidesPerView - cols + initialSlide + 1);
    }
    for (let i2 = 0; i2 < slidesAppended; i2 += 1) {
      const index = i2 - Math.floor(i2 / cols) * cols;
      if (gridEnabled) {
        slides.forEach((slide2, slideIndex) => {
          if (slide2.column === index) appendSlidesIndexes.push(slideIndex);
        });
      } else {
        appendSlidesIndexes.push(index);
      }
    }
  }
  swiper.__preventObserver__ = true;
  requestAnimationFrame(() => {
    swiper.__preventObserver__ = false;
  });
  if (swiper.params.effect === "cards" && slides.length < slidesPerView + loopedSlides * 2) {
    if (appendSlidesIndexes.includes(activeSlideIndex)) {
      appendSlidesIndexes.splice(appendSlidesIndexes.indexOf(activeSlideIndex), 1);
    }
    if (prependSlidesIndexes.includes(activeSlideIndex)) {
      prependSlidesIndexes.splice(prependSlidesIndexes.indexOf(activeSlideIndex), 1);
    }
  }
  if (isPrev) {
    prependSlidesIndexes.forEach((index) => {
      slides[index].swiperLoopMoveDOM = true;
      slidesEl.prepend(slides[index]);
      slides[index].swiperLoopMoveDOM = false;
    });
  }
  if (isNext) {
    appendSlidesIndexes.forEach((index) => {
      slides[index].swiperLoopMoveDOM = true;
      slidesEl.append(slides[index]);
      slides[index].swiperLoopMoveDOM = false;
    });
  }
  swiper.recalcSlides();
  if (params.slidesPerView === "auto") {
    swiper.updateSlides();
  } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {
    swiper.slides.forEach((slide2, slideIndex) => {
      swiper.grid.updateSlide(slideIndex, slide2, swiper.slides);
    });
  }
  if (params.watchSlidesProgress) {
    swiper.updateSlidesOffset();
  }
  if (slideTo2) {
    if (prependSlidesIndexes.length > 0 && isPrev) {
      if (typeof slideRealIndex === "undefined") {
        const currentSlideTranslate = swiper.slidesGrid[activeIndex];
        const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];
        const diff = newSlideTranslate - currentSlideTranslate;
        if (byMousewheel) {
          swiper.setTranslate(swiper.translate - diff);
        } else {
          swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);
          if (setTranslate2) {
            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;
            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;
          }
        }
      } else {
        if (setTranslate2) {
          const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;
          swiper.slideTo(swiper.activeIndex + shift, 0, false, true);
          swiper.touchEventsData.currentTranslate = swiper.translate;
        }
      }
    } else if (appendSlidesIndexes.length > 0 && isNext) {
      if (typeof slideRealIndex === "undefined") {
        const currentSlideTranslate = swiper.slidesGrid[activeIndex];
        const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];
        const diff = newSlideTranslate - currentSlideTranslate;
        if (byMousewheel) {
          swiper.setTranslate(swiper.translate - diff);
        } else {
          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
          if (setTranslate2) {
            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;
            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;
          }
        }
      } else {
        const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;
        swiper.slideTo(swiper.activeIndex - shift, 0, false, true);
      }
    }
  }
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  if (swiper.controller && swiper.controller.control && !byController) {
    const loopParams = {
      slideRealIndex,
      direction,
      setTranslate: setTranslate2,
      activeSlideIndex,
      byController: true
    };
    if (Array.isArray(swiper.controller.control)) {
      swiper.controller.control.forEach((c) => {
        if (!c.destroyed && c.params.loop) c.loopFix({
          ...loopParams,
          slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo2 : false
        });
      });
    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {
      swiper.controller.control.loopFix({
        ...loopParams,
        slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo2 : false
      });
    }
  }
  swiper.emit("loopFix");
}
function loopDestroy() {
  const swiper = this;
  const {
    params,
    slidesEl
  } = swiper;
  if (!params.loop || !slidesEl || swiper.virtual && swiper.params.virtual.enabled) return;
  swiper.recalcSlides();
  const newSlidesOrder = [];
  swiper.slides.forEach((slideEl) => {
    const index = typeof slideEl.swiperSlideIndex === "undefined" ? slideEl.getAttribute("data-swiper-slide-index") * 1 : slideEl.swiperSlideIndex;
    newSlidesOrder[index] = slideEl;
  });
  swiper.slides.forEach((slideEl) => {
    slideEl.removeAttribute("data-swiper-slide-index");
  });
  newSlidesOrder.forEach((slideEl) => {
    slidesEl.append(slideEl);
  });
  swiper.recalcSlides();
  swiper.slideTo(swiper.realIndex, 0);
}
var loop = {
  loopCreate,
  loopFix,
  loopDestroy
};
function setGrabCursor(moving) {
  const swiper = this;
  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
  const el = swiper.params.touchEventsTarget === "container" ? swiper.el : swiper.wrapperEl;
  if (swiper.isElement) {
    swiper.__preventObserver__ = true;
  }
  el.style.cursor = "move";
  el.style.cursor = moving ? "grabbing" : "grab";
  if (swiper.isElement) {
    requestAnimationFrame(() => {
      swiper.__preventObserver__ = false;
    });
  }
}
function unsetGrabCursor() {
  const swiper = this;
  if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
    return;
  }
  if (swiper.isElement) {
    swiper.__preventObserver__ = true;
  }
  swiper[swiper.params.touchEventsTarget === "container" ? "el" : "wrapperEl"].style.cursor = "";
  if (swiper.isElement) {
    requestAnimationFrame(() => {
      swiper.__preventObserver__ = false;
    });
  }
}
var grabCursor = {
  setGrabCursor,
  unsetGrabCursor
};
function closestElement(selector, base) {
  if (base === void 0) {
    base = this;
  }
  function __closestFrom(el) {
    if (!el || el === getDocument() || el === getWindow()) return null;
    if (el.assignedSlot) el = el.assignedSlot;
    const found = el.closest(selector);
    if (!found && !el.getRootNode) {
      return null;
    }
    return found || __closestFrom(el.getRootNode().host);
  }
  return __closestFrom(base);
}
function preventEdgeSwipe(swiper, event, startX) {
  const window2 = getWindow();
  const {
    params
  } = swiper;
  const edgeSwipeDetection = params.edgeSwipeDetection;
  const edgeSwipeThreshold = params.edgeSwipeThreshold;
  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold)) {
    if (edgeSwipeDetection === "prevent") {
      event.preventDefault();
      return true;
    }
    return false;
  }
  return true;
}
function onTouchStart(event) {
  const swiper = this;
  const document2 = getDocument();
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  const data = swiper.touchEventsData;
  if (e.type === "pointerdown") {
    if (data.pointerId !== null && data.pointerId !== e.pointerId) {
      return;
    }
    data.pointerId = e.pointerId;
  } else if (e.type === "touchstart" && e.targetTouches.length === 1) {
    data.touchId = e.targetTouches[0].identifier;
  }
  if (e.type === "touchstart") {
    preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);
    return;
  }
  const {
    params,
    touches,
    enabled
  } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && e.pointerType === "mouse") return;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }
  if (!swiper.animating && params.cssMode && params.loop) {
    swiper.loopFix();
  }
  let targetEl = e.target;
  if (params.touchEventsTarget === "wrapper") {
    if (!elementIsChildOf(targetEl, swiper.wrapperEl)) return;
  }
  if ("which" in e && e.which === 3) return;
  if ("button" in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return;
  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== "";
  const eventPath = e.composedPath ? e.composedPath() : e.path;
  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {
    targetEl = eventPath[0];
  }
  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;
  const isTargetShadow = !!(e.target && e.target.shadowRoot);
  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {
    swiper.allowClick = true;
    return;
  }
  if (params.swipeHandler) {
    if (!targetEl.closest(params.swipeHandler)) return;
  }
  touches.currentX = e.pageX;
  touches.currentY = e.pageY;
  const startX = touches.currentX;
  const startY = touches.currentY;
  if (!preventEdgeSwipe(swiper, e, startX)) {
    return;
  }
  Object.assign(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: void 0,
    startMoving: void 0
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = now();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = void 0;
  if (params.threshold > 0) data.allowThresholdMove = false;
  let preventDefault = true;
  if (targetEl.matches(data.focusableElements)) {
    preventDefault = false;
    if (targetEl.nodeName === "SELECT") {
      data.isTouched = false;
    }
  }
  if (document2.activeElement && document2.activeElement.matches(data.focusableElements) && document2.activeElement !== targetEl && (e.pointerType === "mouse" || e.pointerType !== "mouse" && !targetEl.matches(data.focusableElements))) {
    document2.activeElement.blur();
  }
  const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
  if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {
    e.preventDefault();
  }
  if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {
    swiper.freeMode.onTouchStart();
  }
  swiper.emit("touchStart", e);
}
function onTouchMove(event) {
  const document2 = getDocument();
  const swiper = this;
  const data = swiper.touchEventsData;
  const {
    params,
    touches,
    rtlTranslate: rtl,
    enabled
  } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && event.pointerType === "mouse") return;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  if (e.type === "pointermove") {
    if (data.touchId !== null) return;
    const id = e.pointerId;
    if (id !== data.pointerId) return;
  }
  let targetTouch;
  if (e.type === "touchmove") {
    targetTouch = [...e.changedTouches].find((t2) => t2.identifier === data.touchId);
    if (!targetTouch || targetTouch.identifier !== data.touchId) return;
  } else {
    targetTouch = e;
  }
  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit("touchMoveOpposite", e);
    }
    return;
  }
  const pageX = targetTouch.pageX;
  const pageY = targetTouch.pageY;
  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    if (!e.target.matches(data.focusableElements)) {
      swiper.allowClick = false;
    }
    if (data.isTouched) {
      Object.assign(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = now();
    }
    return;
  }
  if (params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (rtl && (pageX > touches.startX && -swiper.translate <= swiper.maxTranslate() || pageX < touches.startX && -swiper.translate >= swiper.minTranslate())) {
      return;
    } else if (!rtl && (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate())) {
      return;
    }
  }
  if (document2.activeElement && document2.activeElement.matches(data.focusableElements) && document2.activeElement !== e.target && e.pointerType !== "mouse") {
    document2.activeElement.blur();
  }
  if (document2.activeElement) {
    if (e.target === document2.activeElement && e.target.matches(data.focusableElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }
  if (data.allowTouchCallbacks) {
    swiper.emit("touchMove", e);
  }
  touches.previousX = touches.currentX;
  touches.previousY = touches.currentY;
  touches.currentX = pageX;
  touches.currentY = pageY;
  const diffX = touches.currentX - touches.startX;
  const diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;
  if (typeof data.isScrolling === "undefined") {
    let touchAngle;
    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }
  if (data.isScrolling) {
    swiper.emit("touchMoveOpposite", e);
  }
  if (typeof data.startMoving === "undefined") {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }
  if (data.isScrolling || e.type === "touchmove" && data.preventTouchMoveFromPointerMove) {
    data.isTouched = false;
    return;
  }
  if (!data.startMoving) {
    return;
  }
  swiper.allowClick = false;
  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }
  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }
  let diff = swiper.isHorizontal() ? diffX : diffY;
  let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;
  if (params.oneWayMovement) {
    diff = Math.abs(diff) * (rtl ? 1 : -1);
    touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
  }
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) {
    diff = -diff;
    touchesDiff = -touchesDiff;
  }
  const prevTouchesDirection = swiper.touchesDirection;
  swiper.swipeDirection = diff > 0 ? "prev" : "next";
  swiper.touchesDirection = touchesDiff > 0 ? "prev" : "next";
  const isLoop = swiper.params.loop && !params.cssMode;
  const allowLoopFix = swiper.touchesDirection === "next" && swiper.allowSlideNext || swiper.touchesDirection === "prev" && swiper.allowSlidePrev;
  if (!data.isMoved) {
    if (isLoop && allowLoopFix) {
      swiper.loopFix({
        direction: swiper.swipeDirection
      });
    }
    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);
    if (swiper.animating) {
      const evt = new window.CustomEvent("transitionend", {
        bubbles: true,
        cancelable: true,
        detail: {
          bySwiperTouchMove: true
        }
      });
      swiper.wrapperEl.dispatchEvent(evt);
    }
    data.allowMomentumBounce = false;
    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }
    swiper.emit("sliderFirstMove", e);
  }
  (/* @__PURE__ */ new Date()).getTime();
  if (params._loopSwapReset !== false && data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {
    Object.assign(touches, {
      startX: pageX,
      startY: pageY,
      currentX: pageX,
      currentY: pageY,
      startTranslate: data.currentTranslate
    });
    data.loopSwapReset = true;
    data.startTranslate = data.currentTranslate;
    return;
  }
  swiper.emit("sliderMove", e);
  data.isMoved = true;
  data.currentTranslate = diff + data.startTranslate;
  let disableParentSwiper = true;
  let resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }
  if (diff > 0) {
    if (isLoop && allowLoopFix && true && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== "auto" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {
      swiper.loopFix({
        direction: "prev",
        setTranslate: true,
        activeSlideIndex: 0
      });
    }
    if (data.currentTranslate > swiper.minTranslate()) {
      disableParentSwiper = false;
      if (params.resistance) {
        data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;
      }
    }
  } else if (diff < 0) {
    if (isLoop && allowLoopFix && true && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== "auto" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {
      swiper.loopFix({
        direction: "next",
        setTranslate: true,
        activeSlideIndex: swiper.slides.length - (params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))
      });
    }
    if (data.currentTranslate < swiper.maxTranslate()) {
      disableParentSwiper = false;
      if (params.resistance) {
        data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;
      }
    }
  }
  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  }
  if (!swiper.allowSlideNext && swiper.swipeDirection === "next" && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }
  if (!swiper.allowSlidePrev && swiper.swipeDirection === "prev" && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }
  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
    data.currentTranslate = data.startTranslate;
  }
  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }
  if (!params.followFinger || params.cssMode) return;
  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
    swiper.freeMode.onTouchMove();
  }
  swiper.updateProgress(data.currentTranslate);
  swiper.setTranslate(data.currentTranslate);
}
function onTouchEnd(event) {
  const swiper = this;
  const data = swiper.touchEventsData;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  let targetTouch;
  const isTouchEvent = e.type === "touchend" || e.type === "touchcancel";
  if (!isTouchEvent) {
    if (data.touchId !== null) return;
    if (e.pointerId !== data.pointerId) return;
    targetTouch = e;
  } else {
    targetTouch = [...e.changedTouches].find((t2) => t2.identifier === data.touchId);
    if (!targetTouch || targetTouch.identifier !== data.touchId) return;
  }
  if (["pointercancel", "pointerout", "pointerleave", "contextmenu"].includes(e.type)) {
    const proceed = ["pointercancel", "contextmenu"].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);
    if (!proceed) {
      return;
    }
  }
  data.pointerId = null;
  data.touchId = null;
  const {
    params,
    touches,
    rtlTranslate: rtl,
    slidesGrid,
    enabled
  } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && e.pointerType === "mouse") return;
  if (data.allowTouchCallbacks) {
    swiper.emit("touchEnd", e);
  }
  data.allowTouchCallbacks = false;
  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  }
  const touchEndTime = now();
  const timeDiff = touchEndTime - data.touchStartTime;
  if (swiper.allowClick) {
    const pathTree = e.path || e.composedPath && e.composedPath();
    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);
    swiper.emit("tap click", e);
    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit("doubleTap doubleClick", e);
    }
  }
  data.lastClickTime = now();
  nextTick(() => {
    if (!swiper.destroyed) swiper.allowClick = true;
  });
  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  let currentPos;
  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }
  if (params.cssMode) {
    return;
  }
  if (params.freeMode && params.freeMode.enabled) {
    swiper.freeMode.onTouchEnd({
      currentPos
    });
    return;
  }
  const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;
  let stopIndex = 0;
  let groupSize = swiper.slidesSizesGrid[0];
  for (let i2 = 0; i2 < slidesGrid.length; i2 += i2 < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    const increment2 = i2 < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    if (typeof slidesGrid[i2 + increment2] !== "undefined") {
      if (swipeToLast || currentPos >= slidesGrid[i2] && currentPos < slidesGrid[i2 + increment2]) {
        stopIndex = i2;
        groupSize = slidesGrid[i2 + increment2] - slidesGrid[i2];
      }
    } else if (swipeToLast || currentPos >= slidesGrid[i2]) {
      stopIndex = i2;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  }
  let rewindFirstIndex = null;
  let rewindLastIndex = null;
  if (params.rewind) {
    if (swiper.isBeginning) {
      rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
    } else if (swiper.isEnd) {
      rewindFirstIndex = 0;
    }
  }
  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
  if (timeDiff > params.longSwipesMs) {
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === "next") {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);
      else swiper.slideTo(stopIndex);
    }
    if (swiper.swipeDirection === "prev") {
      if (ratio > 1 - params.longSwipesRatio) {
        swiper.slideTo(stopIndex + increment);
      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {
        swiper.slideTo(rewindLastIndex);
      } else {
        swiper.slideTo(stopIndex);
      }
    }
  } else {
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);
    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === "next") {
        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);
      }
      if (swiper.swipeDirection === "prev") {
        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}
function onResize() {
  const swiper = this;
  const {
    params,
    el
  } = swiper;
  if (el && el.offsetWidth === 0) return;
  if (params.breakpoints) {
    swiper.setBreakpoint();
  }
  const {
    allowSlideNext,
    allowSlidePrev,
    snapGrid
  } = swiper;
  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();
  const isVirtualLoop = isVirtual && params.loop;
  if ((params.slidesPerView === "auto" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    if (swiper.params.loop && !isVirtual) {
      swiper.slideToLoop(swiper.realIndex, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }
  }
  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    clearTimeout(swiper.autoplay.resizeTimeout);
    swiper.autoplay.resizeTimeout = setTimeout(() => {
      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
        swiper.autoplay.resume();
      }
    }, 500);
  }
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}
function onClick(e) {
  const swiper = this;
  if (!swiper.enabled) return;
  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();
    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}
function onScroll() {
  const swiper = this;
  const {
    wrapperEl,
    rtlTranslate,
    enabled
  } = swiper;
  if (!enabled) return;
  swiper.previousTranslate = swiper.translate;
  if (swiper.isHorizontal()) {
    swiper.translate = -wrapperEl.scrollLeft;
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  }
  if (swiper.translate === 0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  let newProgress;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }
  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }
  swiper.emit("setTranslate", swiper.translate, false);
}
function onLoad(e) {
  const swiper = this;
  processLazyPreloader(swiper, e.target);
  if (swiper.params.cssMode || swiper.params.slidesPerView !== "auto" && !swiper.params.autoHeight) {
    return;
  }
  swiper.update();
}
function onDocumentTouchStart() {
  const swiper = this;
  if (swiper.documentTouchHandlerProceeded) return;
  swiper.documentTouchHandlerProceeded = true;
  if (swiper.params.touchReleaseOnEdges) {
    swiper.el.style.touchAction = "auto";
  }
}
const events = (swiper, method) => {
  const document2 = getDocument();
  const {
    params,
    el,
    wrapperEl,
    device
  } = swiper;
  const capture = !!params.nested;
  const domMethod = method === "on" ? "addEventListener" : "removeEventListener";
  const swiperMethod = method;
  if (!el || typeof el === "string") return;
  document2[domMethod]("touchstart", swiper.onDocumentTouchStart, {
    passive: false,
    capture
  });
  el[domMethod]("touchstart", swiper.onTouchStart, {
    passive: false
  });
  el[domMethod]("pointerdown", swiper.onTouchStart, {
    passive: false
  });
  document2[domMethod]("touchmove", swiper.onTouchMove, {
    passive: false,
    capture
  });
  document2[domMethod]("pointermove", swiper.onTouchMove, {
    passive: false,
    capture
  });
  document2[domMethod]("touchend", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("pointerup", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("pointercancel", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("touchcancel", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("pointerout", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("pointerleave", swiper.onTouchEnd, {
    passive: true
  });
  document2[domMethod]("contextmenu", swiper.onTouchEnd, {
    passive: true
  });
  if (params.preventClicks || params.preventClicksPropagation) {
    el[domMethod]("click", swiper.onClick, true);
  }
  if (params.cssMode) {
    wrapperEl[domMethod]("scroll", swiper.onScroll);
  }
  if (params.updateOnWindowResize) {
    swiper[swiperMethod](device.ios || device.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", onResize, true);
  } else {
    swiper[swiperMethod]("observerUpdate", onResize, true);
  }
  el[domMethod]("load", swiper.onLoad, {
    capture: true
  });
};
function attachEvents() {
  const swiper = this;
  const {
    params
  } = swiper;
  swiper.onTouchStart = onTouchStart.bind(swiper);
  swiper.onTouchMove = onTouchMove.bind(swiper);
  swiper.onTouchEnd = onTouchEnd.bind(swiper);
  swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);
  if (params.cssMode) {
    swiper.onScroll = onScroll.bind(swiper);
  }
  swiper.onClick = onClick.bind(swiper);
  swiper.onLoad = onLoad.bind(swiper);
  events(swiper, "on");
}
function detachEvents() {
  const swiper = this;
  events(swiper, "off");
}
var events$1 = {
  attachEvents,
  detachEvents
};
const isGridEnabled = (swiper, params) => {
  return swiper.grid && params.grid && params.grid.rows > 1;
};
function setBreakpoint() {
  const swiper = this;
  const {
    realIndex,
    initialized,
    params,
    el
  } = swiper;
  const breakpoints2 = params.breakpoints;
  if (!breakpoints2 || breakpoints2 && Object.keys(breakpoints2).length === 0) return;
  const document2 = getDocument();
  const breakpointsBase = params.breakpointsBase === "window" || !params.breakpointsBase ? params.breakpointsBase : "container";
  const breakpointContainer = ["window", "container"].includes(params.breakpointsBase) || !params.breakpointsBase ? swiper.el : document2.querySelector(params.breakpointsBase);
  const breakpoint = swiper.getBreakpoint(breakpoints2, breakpointsBase, breakpointContainer);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
  const breakpointOnlyParams = breakpoint in breakpoints2 ? breakpoints2[breakpoint] : void 0;
  const breakpointParams = breakpointOnlyParams || swiper.originalParams;
  const wasMultiRow = isGridEnabled(swiper, params);
  const isMultiRow = isGridEnabled(swiper, breakpointParams);
  const wasGrabCursor = swiper.params.grabCursor;
  const isGrabCursor = breakpointParams.grabCursor;
  const wasEnabled = params.enabled;
  if (wasMultiRow && !isMultiRow) {
    el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);
    swiper.emitContainerClasses();
  } else if (!wasMultiRow && isMultiRow) {
    el.classList.add(`${params.containerModifierClass}grid`);
    if (breakpointParams.grid.fill && breakpointParams.grid.fill === "column" || !breakpointParams.grid.fill && params.grid.fill === "column") {
      el.classList.add(`${params.containerModifierClass}grid-column`);
    }
    swiper.emitContainerClasses();
  }
  if (wasGrabCursor && !isGrabCursor) {
    swiper.unsetGrabCursor();
  } else if (!wasGrabCursor && isGrabCursor) {
    swiper.setGrabCursor();
  }
  ["navigation", "pagination", "scrollbar"].forEach((prop) => {
    if (typeof breakpointParams[prop] === "undefined") return;
    const wasModuleEnabled = params[prop] && params[prop].enabled;
    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;
    if (wasModuleEnabled && !isModuleEnabled) {
      swiper[prop].disable();
    }
    if (!wasModuleEnabled && isModuleEnabled) {
      swiper[prop].enable();
    }
  });
  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
  const wasLoop = params.loop;
  if (directionChanged && initialized) {
    swiper.changeDirection();
  }
  extend(swiper.params, breakpointParams);
  const isEnabled = swiper.params.enabled;
  const hasLoop = swiper.params.loop;
  Object.assign(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  });
  if (wasEnabled && !isEnabled) {
    swiper.disable();
  } else if (!wasEnabled && isEnabled) {
    swiper.enable();
  }
  swiper.currentBreakpoint = breakpoint;
  swiper.emit("_beforeBreakpoint", breakpointParams);
  if (initialized) {
    if (needsReLoop) {
      swiper.loopDestroy();
      swiper.loopCreate(realIndex);
      swiper.updateSlides();
    } else if (!wasLoop && hasLoop) {
      swiper.loopCreate(realIndex);
      swiper.updateSlides();
    } else if (wasLoop && !hasLoop) {
      swiper.loopDestroy();
    }
  }
  swiper.emit("breakpoint", breakpointParams);
}
function getBreakpoint(breakpoints2, base, containerEl) {
  if (base === void 0) {
    base = "window";
  }
  if (!breakpoints2 || base === "container" && !containerEl) return void 0;
  let breakpoint = false;
  const window2 = getWindow();
  const currentHeight = base === "window" ? window2.innerHeight : containerEl.clientHeight;
  const points = Object.keys(breakpoints2).map((point) => {
    if (typeof point === "string" && point.indexOf("@") === 0) {
      const minRatio = parseFloat(point.substr(1));
      const value = currentHeight * minRatio;
      return {
        value,
        point
      };
    }
    return {
      value: point,
      point
    };
  });
  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
  for (let i2 = 0; i2 < points.length; i2 += 1) {
    const {
      point,
      value
    } = points[i2];
    if (base === "window") {
      if (window2.matchMedia(`(min-width: ${value}px)`).matches) {
        breakpoint = point;
      }
    } else if (value <= containerEl.clientWidth) {
      breakpoint = point;
    }
  }
  return breakpoint || "max";
}
var breakpoints = {
  setBreakpoint,
  getBreakpoint
};
function prepareClasses(entries, prefix) {
  const resultClasses = [];
  entries.forEach((item) => {
    if (typeof item === "object") {
      Object.keys(item).forEach((classNames) => {
        if (item[classNames]) {
          resultClasses.push(prefix + classNames);
        }
      });
    } else if (typeof item === "string") {
      resultClasses.push(prefix + item);
    }
  });
  return resultClasses;
}
function addClasses() {
  const swiper = this;
  const {
    classNames,
    params,
    rtl,
    el,
    device
  } = swiper;
  const suffixes = prepareClasses(["initialized", params.direction, {
    "free-mode": swiper.params.freeMode && params.freeMode.enabled
  }, {
    "autoheight": params.autoHeight
  }, {
    "rtl": rtl
  }, {
    "grid": params.grid && params.grid.rows > 1
  }, {
    "grid-column": params.grid && params.grid.rows > 1 && params.grid.fill === "column"
  }, {
    "android": device.android
  }, {
    "ios": device.ios
  }, {
    "css-mode": params.cssMode
  }, {
    "centered": params.cssMode && params.centeredSlides
  }, {
    "watch-progress": params.watchSlidesProgress
  }], params.containerModifierClass);
  classNames.push(...suffixes);
  el.classList.add(...classNames);
  swiper.emitContainerClasses();
}
function removeClasses() {
  const swiper = this;
  const {
    el,
    classNames
  } = swiper;
  if (!el || typeof el === "string") return;
  el.classList.remove(...classNames);
  swiper.emitContainerClasses();
}
var classes = {
  addClasses,
  removeClasses
};
function checkOverflow() {
  const swiper = this;
  const {
    isLocked: wasLocked,
    params
  } = swiper;
  const {
    slidesOffsetBefore
  } = params;
  if (slidesOffsetBefore) {
    const lastSlideIndex = swiper.slides.length - 1;
    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
    swiper.isLocked = swiper.size > lastSlideRightEdge;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }
  if (params.allowSlideNext === true) {
    swiper.allowSlideNext = !swiper.isLocked;
  }
  if (params.allowSlidePrev === true) {
    swiper.allowSlidePrev = !swiper.isLocked;
  }
  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
  }
  if (wasLocked !== swiper.isLocked) {
    swiper.emit(swiper.isLocked ? "lock" : "unlock");
  }
}
var checkOverflow$1 = {
  checkOverflow
};
var defaults = {
  init: true,
  direction: "horizontal",
  oneWayMovement: false,
  swiperElementNodeName: "SWIPER-CONTAINER",
  touchEventsTarget: "wrapper",
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  resizeObserver: true,
  nested: false,
  createElements: false,
  eventsPrefix: "swiper",
  enabled: true,
  focusableElements: "input, select, option, textarea, button, video, label",
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: "slide",
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: void 0,
  breakpointsBase: "window",
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  slidesPerGroupAuto: false,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: true,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 5,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // loop
  loop: false,
  loopAddBlankSlides: true,
  loopAdditionalSlides: 0,
  loopPreventsSliding: true,
  // rewind
  rewind: false,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: "swiper-no-swiping",
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  maxBackfaceHiddenSlides: 10,
  // NS
  containerModifierClass: "swiper-",
  // NEW
  slideClass: "swiper-slide",
  slideBlankClass: "swiper-slide-blank",
  slideActiveClass: "swiper-slide-active",
  slideVisibleClass: "swiper-slide-visible",
  slideFullyVisibleClass: "swiper-slide-fully-visible",
  slideNextClass: "swiper-slide-next",
  slidePrevClass: "swiper-slide-prev",
  wrapperClass: "swiper-wrapper",
  lazyPreloaderClass: "swiper-lazy-preloader",
  lazyPreloadPrevNext: 0,
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false
};
function moduleExtendParams(params, allModulesParams) {
  return function extendParams(obj) {
    if (obj === void 0) {
      obj = {};
    }
    const moduleParamName = Object.keys(obj)[0];
    const moduleParams = obj[moduleParamName];
    if (typeof moduleParams !== "object" || moduleParams === null) {
      extend(allModulesParams, obj);
      return;
    }
    if (params[moduleParamName] === true) {
      params[moduleParamName] = {
        enabled: true
      };
    }
    if (moduleParamName === "navigation" && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {
      params[moduleParamName].auto = true;
    }
    if (["pagination", "scrollbar"].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {
      params[moduleParamName].auto = true;
    }
    if (!(moduleParamName in params && "enabled" in moduleParams)) {
      extend(allModulesParams, obj);
      return;
    }
    if (typeof params[moduleParamName] === "object" && !("enabled" in params[moduleParamName])) {
      params[moduleParamName].enabled = true;
    }
    if (!params[moduleParamName]) params[moduleParamName] = {
      enabled: false
    };
    extend(allModulesParams, obj);
  };
}
const prototypes = {
  eventsEmitter,
  update,
  translate,
  transition,
  slide,
  loop,
  grabCursor,
  events: events$1,
  breakpoints,
  checkOverflow: checkOverflow$1,
  classes
};
const extendedDefaults = {};
class Swiper {
  constructor() {
    let el;
    let params;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === "Object") {
      params = args[0];
    } else {
      [el, params] = args;
    }
    if (!params) params = {};
    params = extend({}, params);
    if (el && !params.el) params.el = el;
    const document2 = getDocument();
    if (params.el && typeof params.el === "string" && document2.querySelectorAll(params.el).length > 1) {
      const swipers = [];
      document2.querySelectorAll(params.el).forEach((containerEl) => {
        const newParams = extend({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    }
    const swiper = this;
    swiper.__swiper__ = true;
    swiper.support = getSupport();
    swiper.device = getDevice({
      userAgent: params.userAgent
    });
    swiper.browser = getBrowser();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];
    swiper.modules = [...swiper.__modules__];
    if (params.modules && Array.isArray(params.modules)) {
      swiper.modules.push(...params.modules);
    }
    const allModulesParams = {};
    swiper.modules.forEach((mod) => {
      mod({
        params,
        swiper,
        extendParams: moduleExtendParams(params, allModulesParams),
        on: swiper.on.bind(swiper),
        once: swiper.once.bind(swiper),
        off: swiper.off.bind(swiper),
        emit: swiper.emit.bind(swiper)
      });
    });
    const swiperParams = extend({}, defaults, allModulesParams);
    swiper.params = extend({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = extend({}, swiper.params);
    swiper.passedParams = extend({}, params);
    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach((eventName) => {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    }
    if (swiper.params && swiper.params.onAny) {
      swiper.onAny(swiper.params.onAny);
    }
    Object.assign(swiper, {
      enabled: swiper.params.enabled,
      el,
      // Classes
      classNames: [],
      // Slides
      slides: [],
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal() {
        return swiper.params.direction === "horizontal";
      },
      isVertical() {
        return swiper.params.direction === "vertical";
      },
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      cssOverflowAdjustment() {
        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;
      },
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEventsData: {
        isTouched: void 0,
        isMoved: void 0,
        allowTouchCallbacks: void 0,
        touchStartTime: void 0,
        isScrolling: void 0,
        currentTranslate: void 0,
        startTranslate: void 0,
        allowThresholdMove: void 0,
        // Form elements to match
        focusableElements: swiper.params.focusableElements,
        // Last click time
        lastClickTime: 0,
        clickTimeout: void 0,
        // Velocities
        velocities: [],
        allowMomentumBounce: void 0,
        startMoving: void 0,
        pointerId: null,
        touchId: null
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    });
    swiper.emit("_swiper");
    if (swiper.params.init) {
      swiper.init();
    }
    return swiper;
  }
  getDirectionLabel(property) {
    if (this.isHorizontal()) {
      return property;
    }
    return {
      "width": "height",
      "margin-top": "margin-left",
      "margin-bottom ": "margin-right",
      "margin-left": "margin-top",
      "margin-right": "margin-bottom",
      "padding-left": "padding-top",
      "padding-right": "padding-bottom",
      "marginRight": "marginBottom"
    }[property];
  }
  getSlideIndex(slideEl) {
    const {
      slidesEl,
      params
    } = this;
    const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
    const firstSlideIndex = elementIndex(slides[0]);
    return elementIndex(slideEl) - firstSlideIndex;
  }
  getSlideIndexByData(index) {
    return this.getSlideIndex(this.slides.find((slideEl) => slideEl.getAttribute("data-swiper-slide-index") * 1 === index));
  }
  recalcSlides() {
    const swiper = this;
    const {
      slidesEl,
      params
    } = swiper;
    swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
  }
  enable() {
    const swiper = this;
    if (swiper.enabled) return;
    swiper.enabled = true;
    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }
    swiper.emit("enable");
  }
  disable() {
    const swiper = this;
    if (!swiper.enabled) return;
    swiper.enabled = false;
    if (swiper.params.grabCursor) {
      swiper.unsetGrabCursor();
    }
    swiper.emit("disable");
  }
  setProgress(progress, speed) {
    const swiper = this;
    progress = Math.min(Math.max(progress, 0), 1);
    const min = swiper.minTranslate();
    const max = swiper.maxTranslate();
    const current = (max - min) * progress + min;
    swiper.translateTo(current, typeof speed === "undefined" ? 0 : speed);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  emitContainerClasses() {
    const swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    const cls = swiper.el.className.split(" ").filter((className) => {
      return className.indexOf("swiper") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
    });
    swiper.emit("_containerClasses", cls.join(" "));
  }
  getSlideClasses(slideEl) {
    const swiper = this;
    if (swiper.destroyed) return "";
    return slideEl.className.split(" ").filter((className) => {
      return className.indexOf("swiper-slide") === 0 || className.indexOf(swiper.params.slideClass) === 0;
    }).join(" ");
  }
  emitSlidesClasses() {
    const swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    const updates = [];
    swiper.slides.forEach((slideEl) => {
      const classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl,
        classNames
      });
      swiper.emit("_slideClass", slideEl, classNames);
    });
    swiper.emit("_slideClasses", updates);
  }
  slidesPerViewDynamic(view, exact) {
    if (view === void 0) {
      view = "current";
    }
    if (exact === void 0) {
      exact = false;
    }
    const swiper = this;
    const {
      params,
      slides,
      slidesGrid,
      slidesSizesGrid,
      size: swiperSize,
      activeIndex
    } = swiper;
    let spv = 1;
    if (typeof params.slidesPerView === "number") return params.slidesPerView;
    if (params.centeredSlides) {
      let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;
      let breakLoop;
      for (let i2 = activeIndex + 1; i2 < slides.length; i2 += 1) {
        if (slides[i2] && !breakLoop) {
          slideSize += Math.ceil(slides[i2].swiperSlideSize);
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
      for (let i2 = activeIndex - 1; i2 >= 0; i2 -= 1) {
        if (slides[i2] && !breakLoop) {
          slideSize += slides[i2].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      if (view === "current") {
        for (let i2 = activeIndex + 1; i2 < slides.length; i2 += 1) {
          const slideInView = exact ? slidesGrid[i2] + slidesSizesGrid[i2] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i2] - slidesGrid[activeIndex] < swiperSize;
          if (slideInView) {
            spv += 1;
          }
        }
      } else {
        for (let i2 = activeIndex - 1; i2 >= 0; i2 -= 1) {
          const slideInView = slidesGrid[activeIndex] - slidesGrid[i2] < swiperSize;
          if (slideInView) {
            spv += 1;
          }
        }
      }
    }
    return spv;
  }
  update() {
    const swiper = this;
    if (!swiper || swiper.destroyed) return;
    const {
      snapGrid,
      params
    } = swiper;
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }
    [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      if (imageEl.complete) {
        processLazyPreloader(swiper, imageEl);
      }
    });
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();
    function setTranslate2() {
      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    let translated;
    if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
      setTranslate2();
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((params.slidesPerView === "auto" || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {
        const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;
        translated = swiper.slideTo(slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
      if (!translated) {
        setTranslate2();
      }
    }
    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
    swiper.emit("update");
  }
  changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }
    const swiper = this;
    const currentDirection = swiper.params.direction;
    if (!newDirection) {
      newDirection = currentDirection === "horizontal" ? "vertical" : "horizontal";
    }
    if (newDirection === currentDirection || newDirection !== "horizontal" && newDirection !== "vertical") {
      return swiper;
    }
    swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);
    swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.forEach((slideEl) => {
      if (newDirection === "vertical") {
        slideEl.style.width = "";
      } else {
        slideEl.style.height = "";
      }
    });
    swiper.emit("changeDirection");
    if (needUpdate) swiper.update();
    return swiper;
  }
  changeLanguageDirection(direction) {
    const swiper = this;
    if (swiper.rtl && direction === "rtl" || !swiper.rtl && direction === "ltr") return;
    swiper.rtl = direction === "rtl";
    swiper.rtlTranslate = swiper.params.direction === "horizontal" && swiper.rtl;
    if (swiper.rtl) {
      swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);
      swiper.el.dir = "rtl";
    } else {
      swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);
      swiper.el.dir = "ltr";
    }
    swiper.update();
  }
  mount(element) {
    const swiper = this;
    if (swiper.mounted) return true;
    let el = element || swiper.params.el;
    if (typeof el === "string") {
      el = document.querySelector(el);
    }
    if (!el) {
      return false;
    }
    el.swiper = swiper;
    if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {
      swiper.isElement = true;
    }
    const getWrapperSelector = () => {
      return `.${(swiper.params.wrapperClass || "").trim().split(" ").join(".")}`;
    };
    const getWrapper = () => {
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        const res = el.shadowRoot.querySelector(getWrapperSelector());
        return res;
      }
      return elementChildren(el, getWrapperSelector())[0];
    };
    let wrapperEl = getWrapper();
    if (!wrapperEl && swiper.params.createElements) {
      wrapperEl = createElement("div", swiper.params.wrapperClass);
      el.append(wrapperEl);
      elementChildren(el, `.${swiper.params.slideClass}`).forEach((slideEl) => {
        wrapperEl.append(slideEl);
      });
    }
    Object.assign(swiper, {
      el,
      wrapperEl,
      slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,
      hostEl: swiper.isElement ? el.parentNode.host : el,
      mounted: true,
      // RTL
      rtl: el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl",
      rtlTranslate: swiper.params.direction === "horizontal" && (el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl"),
      wrongRTL: elementStyle(wrapperEl, "display") === "-webkit-box"
    });
    return true;
  }
  init(el) {
    const swiper = this;
    if (swiper.initialized) return swiper;
    const mounted = swiper.mount(el);
    if (mounted === false) return swiper;
    swiper.emit("beforeInit");
    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    }
    swiper.addClasses();
    swiper.updateSize();
    swiper.updateSlides();
    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    }
    if (swiper.params.grabCursor && swiper.enabled) {
      swiper.setGrabCursor();
    }
    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
      swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
    }
    if (swiper.params.loop) {
      swiper.loopCreate(void 0, true);
    }
    swiper.attachEvents();
    const lazyElements = [...swiper.el.querySelectorAll('[loading="lazy"]')];
    if (swiper.isElement) {
      lazyElements.push(...swiper.hostEl.querySelectorAll('[loading="lazy"]'));
    }
    lazyElements.forEach((imageEl) => {
      if (imageEl.complete) {
        processLazyPreloader(swiper, imageEl);
      } else {
        imageEl.addEventListener("load", (e) => {
          processLazyPreloader(swiper, e.target);
        });
      }
    });
    preload(swiper);
    swiper.initialized = true;
    preload(swiper);
    swiper.emit("init");
    swiper.emit("afterInit");
    return swiper;
  }
  destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }
    if (cleanStyles === void 0) {
      cleanStyles = true;
    }
    const swiper = this;
    const {
      params,
      el,
      wrapperEl,
      slides
    } = swiper;
    if (typeof swiper.params === "undefined" || swiper.destroyed) {
      return null;
    }
    swiper.emit("beforeDestroy");
    swiper.initialized = false;
    swiper.detachEvents();
    if (params.loop) {
      swiper.loopDestroy();
    }
    if (cleanStyles) {
      swiper.removeClasses();
      if (el && typeof el !== "string") {
        el.removeAttribute("style");
      }
      if (wrapperEl) {
        wrapperEl.removeAttribute("style");
      }
      if (slides && slides.length) {
        slides.forEach((slideEl) => {
          slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
          slideEl.removeAttribute("style");
          slideEl.removeAttribute("data-swiper-slide-index");
        });
      }
    }
    swiper.emit("destroy");
    Object.keys(swiper.eventsListeners).forEach((eventName) => {
      swiper.off(eventName);
    });
    if (deleteInstance !== false) {
      if (swiper.el && typeof swiper.el !== "string") {
        swiper.el.swiper = null;
      }
      deleteProps(swiper);
    }
    swiper.destroyed = true;
    return null;
  }
  static extendDefaults(newDefaults) {
    extend(extendedDefaults, newDefaults);
  }
  static get extendedDefaults() {
    return extendedDefaults;
  }
  static get defaults() {
    return defaults;
  }
  static installModule(mod) {
    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];
    const modules = Swiper.prototype.__modules__;
    if (typeof mod === "function" && modules.indexOf(mod) < 0) {
      modules.push(mod);
    }
  }
  static use(module) {
    if (Array.isArray(module)) {
      module.forEach((m) => Swiper.installModule(m));
      return Swiper;
    }
    Swiper.installModule(module);
    return Swiper;
  }
}
Object.keys(prototypes).forEach((prototypeGroup) => {
  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([Resize, Observer]);
function Autoplay(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit,
    params
  } = _ref;
  swiper.autoplay = {
    running: false,
    paused: false,
    timeLeft: 0
  };
  extendParams({
    autoplay: {
      enabled: false,
      delay: 3e3,
      waitForTransition: true,
      disableOnInteraction: false,
      stopOnLastSlide: false,
      reverseDirection: false,
      pauseOnMouseEnter: false
    }
  });
  let timeout;
  let raf;
  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3e3;
  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3e3;
  let autoplayTimeLeft;
  let autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
  let wasPaused;
  let isTouched;
  let pausedByTouch;
  let touchStartTimeout;
  let slideChanged;
  let pausedByInteraction;
  let pausedByPointerEnter;
  function onTransitionEnd(e) {
    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;
    if (e.target !== swiper.wrapperEl) return;
    swiper.wrapperEl.removeEventListener("transitionend", onTransitionEnd);
    if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {
      return;
    }
    resume();
  }
  const calcTimeLeft = () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (swiper.autoplay.paused) {
      wasPaused = true;
    } else if (wasPaused) {
      autoplayDelayCurrent = autoplayTimeLeft;
      wasPaused = false;
    }
    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - (/* @__PURE__ */ new Date()).getTime();
    swiper.autoplay.timeLeft = timeLeft;
    emit("autoplayTimeLeft", timeLeft, timeLeft / autoplayDelayTotal);
    raf = requestAnimationFrame(() => {
      calcTimeLeft();
    });
  };
  const getSlideDelay = () => {
    let activeSlideEl;
    if (swiper.virtual && swiper.params.virtual.enabled) {
      activeSlideEl = swiper.slides.find((slideEl) => slideEl.classList.contains("swiper-slide-active"));
    } else {
      activeSlideEl = swiper.slides[swiper.activeIndex];
    }
    if (!activeSlideEl) return void 0;
    const currentSlideDelay = parseInt(activeSlideEl.getAttribute("data-swiper-autoplay"), 10);
    return currentSlideDelay;
  };
  const run = (delayForce) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    cancelAnimationFrame(raf);
    calcTimeLeft();
    let delay = typeof delayForce === "undefined" ? swiper.params.autoplay.delay : delayForce;
    autoplayDelayTotal = swiper.params.autoplay.delay;
    autoplayDelayCurrent = swiper.params.autoplay.delay;
    const currentSlideDelay = getSlideDelay();
    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === "undefined") {
      delay = currentSlideDelay;
      autoplayDelayTotal = currentSlideDelay;
      autoplayDelayCurrent = currentSlideDelay;
    }
    autoplayTimeLeft = delay;
    const speed = swiper.params.speed;
    const proceed = () => {
      if (!swiper || swiper.destroyed) return;
      if (swiper.params.autoplay.reverseDirection) {
        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {
          swiper.slidePrev(speed, true, true);
          emit("autoplay");
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(swiper.slides.length - 1, speed, true, true);
          emit("autoplay");
        }
      } else {
        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {
          swiper.slideNext(speed, true, true);
          emit("autoplay");
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(0, speed, true, true);
          emit("autoplay");
        }
      }
      if (swiper.params.cssMode) {
        autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
        requestAnimationFrame(() => {
          run();
        });
      }
    };
    if (delay > 0) {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        proceed();
      }, delay);
    } else {
      requestAnimationFrame(() => {
        proceed();
      });
    }
    return delay;
  };
  const start = () => {
    autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
    swiper.autoplay.running = true;
    run();
    emit("autoplayStart");
  };
  const stop = () => {
    swiper.autoplay.running = false;
    clearTimeout(timeout);
    cancelAnimationFrame(raf);
    emit("autoplayStop");
  };
  const pause = (internal, reset) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    clearTimeout(timeout);
    if (!internal) {
      pausedByInteraction = true;
    }
    const proceed = () => {
      emit("autoplayPause");
      if (swiper.params.autoplay.waitForTransition) {
        swiper.wrapperEl.addEventListener("transitionend", onTransitionEnd);
      } else {
        resume();
      }
    };
    swiper.autoplay.paused = true;
    if (reset) {
      if (slideChanged) {
        autoplayTimeLeft = swiper.params.autoplay.delay;
      }
      slideChanged = false;
      proceed();
      return;
    }
    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;
    autoplayTimeLeft = delay - ((/* @__PURE__ */ new Date()).getTime() - autoplayStartTime);
    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;
    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;
    proceed();
  };
  const resume = () => {
    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;
    autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
    if (pausedByInteraction) {
      pausedByInteraction = false;
      run(autoplayTimeLeft);
    } else {
      run();
    }
    swiper.autoplay.paused = false;
    emit("autoplayResume");
  };
  const onVisibilityChange = () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    const document2 = getDocument();
    if (document2.visibilityState === "hidden") {
      pausedByInteraction = true;
      pause(true);
    }
    if (document2.visibilityState === "visible") {
      resume();
    }
  };
  const onPointerEnter = (e) => {
    if (e.pointerType !== "mouse") return;
    pausedByInteraction = true;
    pausedByPointerEnter = true;
    if (swiper.animating || swiper.autoplay.paused) return;
    pause(true);
  };
  const onPointerLeave = (e) => {
    if (e.pointerType !== "mouse") return;
    pausedByPointerEnter = false;
    if (swiper.autoplay.paused) {
      resume();
    }
  };
  const attachMouseEvents = () => {
    if (swiper.params.autoplay.pauseOnMouseEnter) {
      swiper.el.addEventListener("pointerenter", onPointerEnter);
      swiper.el.addEventListener("pointerleave", onPointerLeave);
    }
  };
  const detachMouseEvents = () => {
    if (swiper.el && typeof swiper.el !== "string") {
      swiper.el.removeEventListener("pointerenter", onPointerEnter);
      swiper.el.removeEventListener("pointerleave", onPointerLeave);
    }
  };
  const attachDocumentEvents = () => {
    const document2 = getDocument();
    document2.addEventListener("visibilitychange", onVisibilityChange);
  };
  const detachDocumentEvents = () => {
    const document2 = getDocument();
    document2.removeEventListener("visibilitychange", onVisibilityChange);
  };
  on("init", () => {
    if (swiper.params.autoplay.enabled) {
      attachMouseEvents();
      attachDocumentEvents();
      start();
    }
  });
  on("destroy", () => {
    detachMouseEvents();
    detachDocumentEvents();
    if (swiper.autoplay.running) {
      stop();
    }
  });
  on("_freeModeStaticRelease", () => {
    if (pausedByTouch || pausedByInteraction) {
      resume();
    }
  });
  on("_freeModeNoMomentumRelease", () => {
    if (!swiper.params.autoplay.disableOnInteraction) {
      pause(true, true);
    } else {
      stop();
    }
  });
  on("beforeTransitionStart", (_s, speed, internal) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (internal || !swiper.params.autoplay.disableOnInteraction) {
      pause(true, true);
    } else {
      stop();
    }
  });
  on("sliderFirstMove", () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (swiper.params.autoplay.disableOnInteraction) {
      stop();
      return;
    }
    isTouched = true;
    pausedByTouch = false;
    pausedByInteraction = false;
    touchStartTimeout = setTimeout(() => {
      pausedByInteraction = true;
      pausedByTouch = true;
      pause(true);
    }, 200);
  });
  on("touchEnd", () => {
    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;
    clearTimeout(touchStartTimeout);
    clearTimeout(timeout);
    if (swiper.params.autoplay.disableOnInteraction) {
      pausedByTouch = false;
      isTouched = false;
      return;
    }
    if (pausedByTouch && swiper.params.cssMode) resume();
    pausedByTouch = false;
    isTouched = false;
  });
  on("slideChange", () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    slideChanged = true;
  });
  Object.assign(swiper.autoplay, {
    start,
    stop,
    pause,
    resume
  });
}
document.addEventListener("DOMContentLoaded", () => {
  console.log("initSwipers");
  const swiper = new Swiper("#swiper_tech_stack", {
    direction: "vertical",
    slidesPerView: 5,
    loop: true,
    // spaceBetween: 30,
    modules: [Autoplay],
    autoplay: {
      delay: 1200,
      disableOnInteraction: false
    },
    centeredSlides: true,
    centerInsufficientSlides: true
    // allowTouchMove: false,
  });
  console.log("swiper", swiper);
  new Swiper("#swiper_sources", {
    direction: "horizontal",
    // slidesPerView: 3,
    slidesPerView: "auto",
    loop: true,
    // spaceBetween: 30,
    modules: [Autoplay],
    autoplay: {
      delay: 1200,
      disableOnInteraction: false,
      pauseOnMouseEnter: true
    },
    // virtual: {
    // 	enabled: true,
    // 	addSlidesAfter: 5
    // },
    // centeredSlides: true,
    // centerInsufficientSlides: true,
    // shim to fix last slide not aligning to left of container with slideperview auto 
    // solution from: https://github.com/nolimits4web/swiper/issues/3108#issuecomment-882444481
    on: {
      snapGridLengthChange: function(swiper2) {
        if (swiper2.snapGrid.length != swiper2.slidesGrid.length) {
          swiper2.snapGrid = swiper2.slidesGrid.slice(0);
        }
      }
    }
  });
  new Swiper("#swiper_clients-logos", {
    direction: "horizontal",
    // slidesPerView: 5,
    slidesPerView: 3,
    // min
    // spaceBetween: 20,
    spaceBetween: 10,
    loop: true,
    modules: [Autoplay],
    autoplay: {
      delay: 1200,
      disableOnInteraction: false,
      pauseOnMouseEnter: true
    },
    breakpoints: {
      // when window width is >= 480px
      480: {
        slidesPerView: 3,
        spaceBetween: 10
      },
      // when window width is >= 640px
      640: {
        slidesPerView: 4,
        spaceBetween: 20
      },
      768: {
        slidesPerView: 5,
        spaceBetween: 20
      }
    }
    // virtual: {
    // 	enabled: true,
    // 	addSlidesAfter: 5
    // },
    // centeredSlides: true,
    // centerInsufficientSlides: true,
    // shim to fix last slide not aligning to left of container with slideperview auto 
    // solution from: https://github.com/nolimits4web/swiper/issues/3108#issuecomment-882444481
    // on: {
    // 	snapGridLengthChange: function(swiper) {
    // 		if( swiper.snapGrid.length != swiper.slidesGrid.length ){
    // 			swiper.snapGrid = swiper.slidesGrid.slice(0);
    // 		}
    // 	}
    // }
  });
});
